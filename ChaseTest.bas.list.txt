------- FILE ChaseTest.bas.asm LEVEL 1 PASS 3
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE ChaseTest.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE ChaseTest.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 08	    _Data_xinc_length =	.skipL0171-_Data_xinc
      4  10000 ????
      5  10000 ????		00 08	    _Data_yinc_length =	.skipL0170-_Data_yinc
      6  10000 ????
      7  10000 ????		00 01	    noscore    =	1
      8  10000 ????
      9  10000 ????		00 99	    _P_Edge_Right =	153
     10  10000 ????
     11  10000 ????		00 01	    _P_Edge_Left =	1
     12  10000 ????
     13  10000 ????		00 58	    _P_Edge_Bottom =	88
     14  10000 ????
     15  10000 ????		00 09	    _P_Edge_Top =	9
     16  10000 ????
     17  10000 ????		00 dc	    _P0_TEMPY  =	i
     18  10000 ????
     19  10000 ????		00 db	    _P0_TEMPX  =	h
     20  10000 ????
     21  10000 ????		00 ed	    rand16     =	z
     22  10000 ????
     23  10000 ????		00 ec	    _Bit7_M0_Moving =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit4_Toggle_Screen =	y
     26  10000 ????
     27  10000 ????		00 ec	    _BitOp_01  =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit5_EA   =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     32  10000 ????
     33  10000 ????		00 da	    _Bit7_P0_Dir_Right =	g
     34  10000 ????
     35  10000 ????		00 da	    _Bit6_P0_Dir_Left =	g
     36  10000 ????
     37  10000 ????		00 da	    _Bit5_P0_Dir_Down =	g
     38  10000 ????
     39  10000 ????		00 da	    _Bit4_P0_Dir_Up =	g
     40  10000 ????
     41  10000 ????		00 da	    _Bit3_P0_Col_Right =	g
     42  10000 ????
     43  10000 ????		00 da	    _Bit2_P0_Col_Left =	g
     44  10000 ????
     45  10000 ????		00 da	    _Bit1_P0_Col_Down =	g
     46  10000 ????
     47  10000 ????		00 da	    _Bit0_P0_Col_Up =	g
     48  10000 ????
     49  10000 ????		00 d9	    _Bit3_P1_Dir_Right =	f
     50  10000 ????
     51  10000 ????		00 d9	    _Bit2_P1_Dir_Left =	f
     52  10000 ????
     53  10000 ????		00 d9	    _Bit1_P1_Dir_Down =	f
     54  10000 ????
     55  10000 ????		00 d9	    _Bit0_P1_Dir_Up =	f
     56  10000 ????
     57  10000 ????		00 d9	    _BitOp_P1_P0_Dir =	f
     58  10000 ????
     59  10000 ????		00 d8	    _Chase_Delay =	e
     60  10000 ????
     61  10000 ????		00 d7	    _octant    =	d
     62  10000 ????
     63  10000 ????		00 d6	    _delta_x   =	c
     64  10000 ????
     65  10000 ????		00 d5	    _delta_y   =	b
     66  10000 ????
     67  10000 ????		00 d4	    _error_accumulator =	a
     68  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE ChaseTest.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 08	    _Data_xinc_length =	.skipL0171-_Data_xinc
      4  10000 ????
      5  10000 ????		00 08	    _Data_yinc_length =	.skipL0170-_Data_yinc
      6  10000 ????
      7  10000 ????		00 01	    noscore    =	1
      8  10000 ????
      9  10000 ????		00 99	    _P_Edge_Right =	153
     10  10000 ????
     11  10000 ????		00 01	    _P_Edge_Left =	1
     12  10000 ????
     13  10000 ????		00 58	    _P_Edge_Bottom =	88
     14  10000 ????
     15  10000 ????		00 09	    _P_Edge_Top =	9
     16  10000 ????
     17  10000 ????		00 dc	    _P0_TEMPY  =	i
     18  10000 ????
     19  10000 ????		00 db	    _P0_TEMPX  =	h
     20  10000 ????
     21  10000 ????		00 ed	    rand16     =	z
     22  10000 ????
     23  10000 ????		00 ec	    _Bit7_M0_Moving =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit4_Toggle_Screen =	y
     26  10000 ????
     27  10000 ????		00 ec	    _BitOp_01  =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit5_EA   =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     32  10000 ????
     33  10000 ????		00 da	    _Bit7_P0_Dir_Right =	g
     34  10000 ????
     35  10000 ????		00 da	    _Bit6_P0_Dir_Left =	g
     36  10000 ????
     37  10000 ????		00 da	    _Bit5_P0_Dir_Down =	g
     38  10000 ????
     39  10000 ????		00 da	    _Bit4_P0_Dir_Up =	g
     40  10000 ????
     41  10000 ????		00 da	    _Bit3_P0_Col_Right =	g
     42  10000 ????
     43  10000 ????		00 da	    _Bit2_P0_Col_Left =	g
     44  10000 ????
     45  10000 ????		00 da	    _Bit1_P0_Col_Down =	g
     46  10000 ????
     47  10000 ????		00 da	    _Bit0_P0_Col_Up =	g
     48  10000 ????
     49  10000 ????		00 d9	    _Bit3_P1_Dir_Right =	f
     50  10000 ????
     51  10000 ????		00 d9	    _Bit2_P1_Dir_Left =	f
     52  10000 ????
     53  10000 ????		00 d9	    _Bit1_P1_Dir_Down =	f
     54  10000 ????
     55  10000 ????		00 d9	    _Bit0_P1_Dir_Up =	f
     56  10000 ????
     57  10000 ????		00 d9	    _BitOp_P1_P0_Dir =	f
     58  10000 ????
     59  10000 ????		00 d8	    _Chase_Delay =	e
     60  10000 ????
     61  10000 ????		00 d7	    _octant    =	d
     62  10000 ????
     63  10000 ????		00 d6	    _delta_x   =	c
     64  10000 ????
     65  10000 ????		00 d5	    _delta_y   =	b
     66  10000 ????
     67  10000 ????		00 d4	    _error_accumulator =	a
     68  10000 ????
------- FILE ChaseTest.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c cc f3 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5				  -	      ifnconst	noscore
    735  f1b5				  -	      lda	scorepointers+1
    736  f1b5				  -			; ldy temp1
    737  f1b5				  -	      sta	temp1
    738  f1b5				  -			; sty scorepointers+1
    739  f1b5				  -
    740  f1b5				  -	      lda	scorepointers+3
    741  f1b5				  -			; ldy temp3
    742  f1b5				  -	      sta	temp3
    743  f1b5				  -			; sty scorepointers+3
    744  f1b5				  -
    745  f1b5				  -
    746  f1b5				  -	      sta	HMCLR
    747  f1b5				  -	      tsx
    748  f1b5				  -	      stx	stack1
    749  f1b5				  -	      ldx	#$E0
    750  f1b5				  -	      stx	HMP0
    751  f1b5				  -
    752  f1b5				  -	      LDA	scorecolor
    753  f1b5				  -	      STA	COLUP0
    754  f1b5				  -	      STA	COLUP1
    755  f1b5				  -	      ifconst	scorefade
    756  f1b5				  -	      STA	stack2
    757  f1b5				  -	      endif
    758  f1b5				  -	      ifconst	pfscore
    759  f1b5				  -	      lda	pfscorecolor
    760  f1b5				  -	      sta	COLUPF
    761  f1b5				  -	      endif
    762  f1b5				  -	      sta	WSYNC
    763  f1b5				  -	      ldx	#0
    764  f1b5				  -	      STx	GRP0
    765  f1b5				  -	      STx	GRP1	; seems to be needed because of vdel
    766  f1b5				  -
    767  f1b5				  -	      lda	scorepointers+5
    768  f1b5				  -			; ldy temp5
    769  f1b5				  -	      sta	temp5,x
    770  f1b5				  -			; sty scorepointers+5
    771  f1b5				  -	      lda	#>scoretable
    772  f1b5				  -	      sta	scorepointers+1
    773  f1b5				  -	      sta	scorepointers+3
    774  f1b5				  -	      sta	scorepointers+5
    775  f1b5				  -	      sta	temp2
    776  f1b5				  -	      sta	temp4
    777  f1b5				  -	      sta	temp6
    778  f1b5				  -	      LDY	#7
    779  f1b5				  -	      STY	VDELP0
    780  f1b5				  -	      STA	RESP0
    781  f1b5				  -	      STA	RESP1
    782  f1b5				  -
    783  f1b5				  -
    784  f1b5				  -	      LDA	#$03
    785  f1b5				  -	      STA	NUSIZ0
    786  f1b5				  -	      STA	NUSIZ1
    787  f1b5				  -	      STA	VDELP1
    788  f1b5				  -	      LDA	#$F0
    789  f1b5				  -	      STA	HMP1
    790  f1b5				  -	      lda	(scorepointers),y
    791  f1b5				  -	      sta	GRP0
    792  f1b5				  -	      STA	HMOVE	; cycle 73 ?
    793  f1b5				  -	      jmp	beginscore
    794  f1b5				  -
    795  f1b5				  -
    796  f1b5				  -	      if	((<*)>$d4)
    797  f1b5				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f1b5				  -	      endif
    799  f1b5				  -
    800  f1b5				  -loop2
    801  f1b5				  -	      lda	(scorepointers),y	;+5 68 204
    802  f1b5				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f1b5				  -	      ifconst	pfscore
    804  f1b5				  -	      lda.w	pfscore1
    805  f1b5				  -	      sta	PF1
    806  f1b5				  -	      else
    807  f1b5				  -	      ifconst	scorefade
    808  f1b5				  -	      sleep	2
    809  f1b5				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f1b5				  -	      else
    811  f1b5				  -	      sleep	7
    812  f1b5				  -	      endif
    813  f1b5				  -	      endif
    814  f1b5				  -			; cycle 0
    815  f1b5				  -beginscore
    816  f1b5				  -	      lda	(scorepointers+$8),y	;+5 5 15
    817  f1b5				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f1b5				  -	      lda	(scorepointers+$6),y	;+5 13 39
    819  f1b5				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f1b5				  -	      lax	(scorepointers+$2),y	;+5 29 87
    821  f1b5				  -	      txs
    822  f1b5				  -	      lax	(scorepointers+$4),y	;+5 36 108
    823  f1b5				  -	      ifconst	scorefade
    824  f1b5				  -	      lda	stack2
    825  f1b5				  -	      else
    826  f1b5				  -	      sleep	3
    827  f1b5				  -	      endif
    828  f1b5				  -
    829  f1b5				  -	      ifconst	pfscore
    830  f1b5				  -	      lda	pfscore2
    831  f1b5				  -	      sta	PF1
    832  f1b5				  -	      else
    833  f1b5				  -	      ifconst	scorefade
    834  f1b5				  -	      sta	COLUP0
    835  f1b5				  -	      sta	COLUP1
    836  f1b5				  -	      else
    837  f1b5				  -	      sleep	6
    838  f1b5				  -	      endif
    839  f1b5				  -	      endif
    840  f1b5				  -
    841  f1b5				  -	      lda	(scorepointers+$A),y	;+5 21 63
    842  f1b5				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f1b5				  -	      tsx
    844  f1b5				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f1b5				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f1b5				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f1b5				  -	      dey
    848  f1b5				  -	      bpl	loop2	;+2 60 180
    849  f1b5				  -
    850  f1b5				  -	      ldx	stack1
    851  f1b5				  -	      txs
    852  f1b5				  -			; lda scorepointers+1
    853  f1b5				  -	      ldy	temp1
    854  f1b5				  -			; sta temp1
    855  f1b5				  -	      sty	scorepointers+1
    856  f1b5				  -
    857  f1b5				  -	      LDA	#0
    858  f1b5				  -	      sta	PF1
    859  f1b5				  -	      STA	GRP0
    860  f1b5				  -	      STA	GRP1
    861  f1b5				  -	      STA	VDELP0
    862  f1b5				  -	      STA	VDELP1	;do we need these
    863  f1b5				  -	      STA	NUSIZ0
    864  f1b5				  -	      STA	NUSIZ1
    865  f1b5				  -
    866  f1b5				  -			; lda scorepointers+3
    867  f1b5				  -	      ldy	temp3
    868  f1b5				  -			; sta temp3
    869  f1b5				  -	      sty	scorepointers+3
    870  f1b5				  -
    871  f1b5				  -			; lda scorepointers+5
    872  f1b5				  -	      ldy	temp5
    873  f1b5				  -			; sta temp5
    874  f1b5				  -	      sty	scorepointers+5
    875  f1b5					      endif		;noscore
    876  f1b5		       a9 c2		      LDA	#%11000010
    877  f1b7		       85 02		      sta	WSYNC
    878  f1b9		       85 01		      STA	VBLANK
      0  f1bb					      RETURN
      1  f1bb					      ifnconst	bankswitch
      2  f1bb		       60		      rts
      3  f1bc				  -	      else
      4  f1bc				  -	      jmp	BS_return
      5  f1bc					      endif
    880  f1bc
    881  f1bc				  -	      ifconst	shakescreen
    882  f1bc				  -doshakescreen
    883  f1bc				  -	      bit	shakescreen
    884  f1bc				  -	      bmi	noshakescreen
    885  f1bc				  -	      sta	WSYNC
    886  f1bc				  -noshakescreen
    887  f1bc				  -	      ldx	missile0height
    888  f1bc				  -	      inx
    889  f1bc				  -	      rts
    890  f1bc					      endif
    891  f1bc
    892  f1bc							; playfield drawing routines
    893  f1bc							; you get a 32x12 bitmapped display in a single color :)
    894  f1bc							; 0-31 and 0-11
    895  f1bc
    896  f1bc				   pfclear		; clears playfield - or fill with pattern
    897  f1bc				  -	      ifconst	pfres
    898  f1bc				  -	      ldx	#pfres*pfwidth-1
    899  f1bc					      else
    900  f1bc		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f1be					      endif
    902  f1be				   pfclear_loop
    903  f1be					      ifnconst	superchip
    904  f1be		       95 a4		      sta	playfield,x
    905  f1c0				  -	      else
    906  f1c0				  -	      sta	playfield-128,x
    907  f1c0					      endif
    908  f1c0		       ca		      dex
    909  f1c1		       10 fb		      bpl	pfclear_loop
      0  f1c3					      RETURN
      1  f1c3					      ifnconst	bankswitch
      2  f1c3		       60		      rts
      3  f1c4				  -	      else
      4  f1c4				  -	      jmp	BS_return
      5  f1c4					      endif
    911  f1c4
    912  f1c4				   setuppointers
    913  f1c4		       86 9d		      stx	temp2	; store on.off.flip value
    914  f1c6		       aa		      tax		; put x-value in x 
    915  f1c7		       4a		      lsr
    916  f1c8		       4a		      lsr
    917  f1c9		       4a		      lsr		; divide x pos by 8 
    918  f1ca		       85 9c		      sta	temp1
    919  f1cc		       98		      tya
    920  f1cd		       0a		      asl
    921  f1ce					      if	pfwidth=4
    922  f1ce		       0a		      asl		; multiply y pos by 4
    923  f1cf					      endif		; else multiply by 2
    924  f1cf		       18		      clc
    925  f1d0		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f1d2		       a8		      tay		; put the value in y
    927  f1d3		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f1d5		       60		      rts
    929  f1d6
    930  f1d6				   pfread
    931  f1d6							;x=xvalue, y=yvalue
    932  f1d6		       20 c4 f1 	      jsr	setuppointers
    933  f1d9		       bd 3e f2 	      lda	setbyte,x
    934  f1dc		       39 a4 00 	      and	playfield,y
    935  f1df		       5d 3e f2 	      eor	setbyte,x
    936  f1e2							; beq readzero
    937  f1e2							; lda #1
    938  f1e2							; readzero
      0  f1e2					      RETURN
      1  f1e2					      ifnconst	bankswitch
      2  f1e2		       60		      rts
      3  f1e3				  -	      else
      4  f1e3				  -	      jmp	BS_return
      5  f1e3					      endif
    940  f1e3
    941  f1e3				   pfpixel
    942  f1e3							;x=xvalue, y=yvalue, a=0,1,2
    943  f1e3		       20 c4 f1 	      jsr	setuppointers
    944  f1e6
    945  f1e6				  -	      ifconst	bankswitch
    946  f1e6				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f1e6				  -	      beq	pixelon_r	; if "on" go to on
    948  f1e6				  -	      lsr
    949  f1e6				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f1e6				  -	      lda	playfield,y	; if here, it's "flip"
    951  f1e6				  -	      eor	setbyte,x
    952  f1e6				  -	      ifconst	superchip
    953  f1e6				  -	      sta	playfield-128,y
    954  f1e6				  -	      else
    955  f1e6				  -	      sta	playfield,y
    956  f1e6				  -	      endif
    957  f1e6				  -	      RETURN
    958  f1e6				  -pixelon_r
    959  f1e6				  -	      lda	playfield,y
    960  f1e6				  -	      ora	setbyte,x
    961  f1e6				  -	      ifconst	superchip
    962  f1e6				  -	      sta	playfield-128,y
    963  f1e6				  -	      else
    964  f1e6				  -	      sta	playfield,y
    965  f1e6				  -	      endif
    966  f1e6				  -	      RETURN
    967  f1e6				  -pixeloff_r
    968  f1e6				  -	      lda	setbyte,x
    969  f1e6				  -	      eor	#$ff
    970  f1e6				  -	      and	playfield,y
    971  f1e6				  -	      ifconst	superchip
    972  f1e6				  -	      sta	playfield-128,y
    973  f1e6				  -	      else
    974  f1e6				  -	      sta	playfield,y
    975  f1e6				  -	      endif
    976  f1e6				  -	      RETURN
    977  f1e6				  -
    978  f1e6					      else
    979  f1e6		       4c 17 f2 	      jmp	plotpoint
    980  f1e9					      endif
    981  f1e9
    982  f1e9				   pfhline
    983  f1e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f1e9		       20 c4 f1 	      jsr	setuppointers
    985  f1ec		       4c f6 f1 	      jmp	noinc
    986  f1ef				   keepgoing
    987  f1ef		       e8		      inx
    988  f1f0		       8a		      txa
    989  f1f1		       29 07		      and	#7
    990  f1f3		       d0 01		      bne	noinc
    991  f1f5		       c8		      iny
    992  f1f6				   noinc
    993  f1f6		       20 17 f2 	      jsr	plotpoint
    994  f1f9		       e4 9e		      cpx	temp3
    995  f1fb		       30 f2		      bmi	keepgoing
      0  f1fd					      RETURN
      1  f1fd					      ifnconst	bankswitch
      2  f1fd		       60		      rts
      3  f1fe				  -	      else
      4  f1fe				  -	      jmp	BS_return
      5  f1fe					      endif
    997  f1fe
    998  f1fe				   pfvline
    999  f1fe							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f1fe		       20 c4 f1 	      jsr	setuppointers
   1001  f201		       84 9c		      sty	temp1	; store memory location offset
   1002  f203		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f205		       a5 9e		      lda	temp3
   1004  f207		       0a		      asl
   1005  f208					      if	pfwidth=4
   1006  f208		       0a		      asl		; multiply by 4
   1007  f209					      endif		; else multiply by 2
   1008  f209		       85 9e		      sta	temp3	; store it
   1009  f20b							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f20b							; right now, temp1=y=starting memory location, temp3=final
   1011  f20b							; x should equal original x value
   1012  f20b				   keepgoingy
   1013  f20b		       20 17 f2 	      jsr	plotpoint
   1014  f20e		       c8		      iny
   1015  f20f		       c8		      iny
   1016  f210					      if	pfwidth=4
   1017  f210		       c8		      iny
   1018  f211		       c8		      iny
   1019  f212					      endif
   1020  f212		       c4 9e		      cpy	temp3
   1021  f214		       30 f5		      bmi	keepgoingy
      0  f216					      RETURN
      1  f216					      ifnconst	bankswitch
      2  f216		       60		      rts
      3  f217				  -	      else
      4  f217				  -	      jmp	BS_return
      5  f217					      endif
   1023  f217
   1024  f217				   plotpoint
   1025  f217		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f219		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f21b		       4a		      lsr
   1028  f21c		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f21e		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f221		       5d 3e f2 	      eor	setbyte,x
   1031  f224				  -	      ifconst	superchip
   1032  f224				  -	      sta	playfield-128,y
   1033  f224					      else
   1034  f224		       99 a4 00 	      sta	playfield,y
   1035  f227					      endif
   1036  f227		       60		      rts
   1037  f228				   pixelon
   1038  f228		       b9 a4 00 	      lda	playfield,y
   1039  f22b		       1d 3e f2 	      ora	setbyte,x
   1040  f22e				  -	      ifconst	superchip
   1041  f22e				  -	      sta	playfield-128,y
   1042  f22e					      else
   1043  f22e		       99 a4 00 	      sta	playfield,y
   1044  f231					      endif
   1045  f231		       60		      rts
   1046  f232				   pixeloff
   1047  f232		       bd 3e f2 	      lda	setbyte,x
   1048  f235		       49 ff		      eor	#$ff
   1049  f237		       39 a4 00 	      and	playfield,y
   1050  f23a				  -	      ifconst	superchip
   1051  f23a				  -	      sta	playfield-128,y
   1052  f23a					      else
   1053  f23a		       99 a4 00 	      sta	playfield,y
   1054  f23d					      endif
   1055  f23d		       60		      rts
   1056  f23e
   1057  f23e				   setbyte
   1058  f23e					      ifnconst	pfcenter
   1059  f23e		       80		      .byte.b	$80
   1060  f23f		       40		      .byte.b	$40
   1061  f240		       20		      .byte.b	$20
   1062  f241		       10		      .byte.b	$10
   1063  f242		       08		      .byte.b	$08
   1064  f243		       04		      .byte.b	$04
   1065  f244		       02		      .byte.b	$02
   1066  f245		       01		      .byte.b	$01
   1067  f246					      endif
   1068  f246		       01		      .byte.b	$01
   1069  f247		       02		      .byte.b	$02
   1070  f248		       04		      .byte.b	$04
   1071  f249		       08		      .byte.b	$08
   1072  f24a		       10		      .byte.b	$10
   1073  f24b		       20		      .byte.b	$20
   1074  f24c		       40		      .byte.b	$40
   1075  f24d		       80		      .byte.b	$80
   1076  f24e		       80		      .byte.b	$80
   1077  f24f		       40		      .byte.b	$40
   1078  f250		       20		      .byte.b	$20
   1079  f251		       10		      .byte.b	$10
   1080  f252		       08		      .byte.b	$08
   1081  f253		       04		      .byte.b	$04
   1082  f254		       02		      .byte.b	$02
   1083  f255		       01		      .byte.b	$01
   1084  f256		       01		      .byte.b	$01
   1085  f257		       02		      .byte.b	$02
   1086  f258		       04		      .byte.b	$04
   1087  f259		       08		      .byte.b	$08
   1088  f25a		       10		      .byte.b	$10
   1089  f25b		       20		      .byte.b	$20
   1090  f25c		       40		      .byte.b	$40
   1091  f25d		       80		      .byte.b	$80
   1092  f25e				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f25e		       d0 13		      bne	notleft
   1094  f260							;left
   1095  f260				  -	      ifconst	pfres
   1096  f260				  -	      ldx	#pfres*4
   1097  f260					      else
   1098  f260		       a2 30		      ldx	#48
   1099  f262					      endif
   1100  f262				   leftloop
   1101  f262		       b5 a3		      lda	playfield-1,x
   1102  f264		       4a		      lsr
   1103  f265
   1104  f265				  -	      ifconst	superchip
   1105  f265				  -	      lda	playfield-2,x
   1106  f265				  -	      rol
   1107  f265				  -	      sta	playfield-130,x
   1108  f265				  -	      lda	playfield-3,x
   1109  f265				  -	      ror
   1110  f265				  -	      sta	playfield-131,x
   1111  f265				  -	      lda	playfield-4,x
   1112  f265				  -	      rol
   1113  f265				  -	      sta	playfield-132,x
   1114  f265				  -	      lda	playfield-1,x
   1115  f265				  -	      ror
   1116  f265				  -	      sta	playfield-129,x
   1117  f265					      else
   1118  f265		       36 a2		      rol	playfield-2,x
   1119  f267		       76 a1		      ror	playfield-3,x
   1120  f269		       36 a0		      rol	playfield-4,x
   1121  f26b		       76 a3		      ror	playfield-1,x
   1122  f26d					      endif
   1123  f26d
   1124  f26d		       8a		      txa
   1125  f26e		       cb 04		      sbx	#4
   1126  f270		       d0 f0		      bne	leftloop
      0  f272					      RETURN
      1  f272					      ifnconst	bankswitch
      2  f272		       60		      rts
      3  f273				  -	      else
      4  f273				  -	      jmp	BS_return
      5  f273					      endif
   1128  f273
   1129  f273				   notleft
   1130  f273		       4a		      lsr
   1131  f274		       90 13		      bcc	notright
   1132  f276							;right
   1133  f276
   1134  f276				  -	      ifconst	pfres
   1135  f276				  -	      ldx	#pfres*4
   1136  f276					      else
   1137  f276		       a2 30		      ldx	#48
   1138  f278					      endif
   1139  f278				   rightloop
   1140  f278		       b5 a0		      lda	playfield-4,x
   1141  f27a		       4a		      lsr
   1142  f27b				  -	      ifconst	superchip
   1143  f27b				  -	      lda	playfield-3,x
   1144  f27b				  -	      rol
   1145  f27b				  -	      sta	playfield-131,x
   1146  f27b				  -	      lda	playfield-2,x
   1147  f27b				  -	      ror
   1148  f27b				  -	      sta	playfield-130,x
   1149  f27b				  -	      lda	playfield-1,x
   1150  f27b				  -	      rol
   1151  f27b				  -	      sta	playfield-129,x
   1152  f27b				  -	      lda	playfield-4,x
   1153  f27b				  -	      ror
   1154  f27b				  -	      sta	playfield-132,x
   1155  f27b					      else
   1156  f27b		       36 a1		      rol	playfield-3,x
   1157  f27d		       76 a2		      ror	playfield-2,x
   1158  f27f		       36 a3		      rol	playfield-1,x
   1159  f281		       76 a0		      ror	playfield-4,x
   1160  f283					      endif
   1161  f283		       8a		      txa
   1162  f284		       cb 04		      sbx	#4
   1163  f286		       d0 f0		      bne	rightloop
      0  f288					      RETURN
      1  f288					      ifnconst	bankswitch
      2  f288		       60		      rts
      3  f289				  -	      else
      4  f289				  -	      jmp	BS_return
      5  f289					      endif
   1165  f289
   1166  f289				   notright
   1167  f289		       4a		      lsr
   1168  f28a		       90 49		      bcc	notup
   1169  f28c							;up
   1170  f28c		       4a		      lsr
   1171  f28d		       90 02		      bcc	onedecup
   1172  f28f		       c6 ef		      dec	playfieldpos
   1173  f291				   onedecup
   1174  f291		       c6 ef		      dec	playfieldpos
   1175  f293		       f0 02		      beq	shiftdown
   1176  f295		       10 3d		      bpl	noshiftdown2
   1177  f297				   shiftdown
   1178  f297				  -	      ifconst	pfrowheight
   1179  f297				  -	      lda	#pfrowheight
   1180  f297					      else
   1181  f297					      ifnconst	pfres
   1182  f297		       a9 08		      lda	#8
   1183  f299				  -	      else
   1184  f299				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f299					      endif
   1186  f299					      endif
   1187  f299
   1188  f299		       85 ef		      sta	playfieldpos
   1189  f29b		       a5 a7		      lda	playfield+3
   1190  f29d		       85 9f		      sta	temp4
   1191  f29f		       a5 a6		      lda	playfield+2
   1192  f2a1		       85 9e		      sta	temp3
   1193  f2a3		       a5 a5		      lda	playfield+1
   1194  f2a5		       85 9d		      sta	temp2
   1195  f2a7		       a5 a4		      lda	playfield
   1196  f2a9		       85 9c		      sta	temp1
   1197  f2ab		       a2 00		      ldx	#0
   1198  f2ad				   up2
   1199  f2ad		       b5 a8		      lda	playfield+4,x
   1200  f2af				  -	      ifconst	superchip
   1201  f2af				  -	      sta	playfield-128,x
   1202  f2af				  -	      lda	playfield+5,x
   1203  f2af				  -	      sta	playfield-127,x
   1204  f2af				  -	      lda	playfield+6,x
   1205  f2af				  -	      sta	playfield-126,x
   1206  f2af				  -	      lda	playfield+7,x
   1207  f2af				  -	      sta	playfield-125,x
   1208  f2af					      else
   1209  f2af		       95 a4		      sta	playfield,x
   1210  f2b1		       b5 a9		      lda	playfield+5,x
   1211  f2b3		       95 a5		      sta	playfield+1,x
   1212  f2b5		       b5 aa		      lda	playfield+6,x
   1213  f2b7		       95 a6		      sta	playfield+2,x
   1214  f2b9		       b5 ab		      lda	playfield+7,x
   1215  f2bb		       95 a7		      sta	playfield+3,x
   1216  f2bd					      endif
   1217  f2bd		       8a		      txa
   1218  f2be		       cb fc		      sbx	#252
   1219  f2c0				  -	      ifconst	pfres
   1220  f2c0				  -	      cpx	#(pfres-1)*4
   1221  f2c0					      else
   1222  f2c0		       e0 2c		      cpx	#44
   1223  f2c2					      endif
   1224  f2c2		       d0 e9		      bne	up2
   1225  f2c4
   1226  f2c4		       a5 9f		      lda	temp4
   1227  f2c6
   1228  f2c6				  -	      ifconst	superchip
   1229  f2c6				  -	      ifconst	pfres
   1230  f2c6				  -	      sta	playfield+pfres*4-129
   1231  f2c6				  -	      lda	temp3
   1232  f2c6				  -	      sta	playfield+pfres*4-130
   1233  f2c6				  -	      lda	temp2
   1234  f2c6				  -	      sta	playfield+pfres*4-131
   1235  f2c6				  -	      lda	temp1
   1236  f2c6				  -	      sta	playfield+pfres*4-132
   1237  f2c6				  -	      else
   1238  f2c6				  -	      sta	playfield+47-128
   1239  f2c6				  -	      lda	temp3
   1240  f2c6				  -	      sta	playfield+46-128
   1241  f2c6				  -	      lda	temp2
   1242  f2c6				  -	      sta	playfield+45-128
   1243  f2c6				  -	      lda	temp1
   1244  f2c6				  -	      sta	playfield+44-128
   1245  f2c6				  -	      endif
   1246  f2c6					      else
   1247  f2c6				  -	      ifconst	pfres
   1248  f2c6				  -	      sta	playfield+pfres*4-1
   1249  f2c6				  -	      lda	temp3
   1250  f2c6				  -	      sta	playfield+pfres*4-2
   1251  f2c6				  -	      lda	temp2
   1252  f2c6				  -	      sta	playfield+pfres*4-3
   1253  f2c6				  -	      lda	temp1
   1254  f2c6				  -	      sta	playfield+pfres*4-4
   1255  f2c6					      else
   1256  f2c6		       85 d3		      sta	playfield+47
   1257  f2c8		       a5 9e		      lda	temp3
   1258  f2ca		       85 d2		      sta	playfield+46
   1259  f2cc		       a5 9d		      lda	temp2
   1260  f2ce		       85 d1		      sta	playfield+45
   1261  f2d0		       a5 9c		      lda	temp1
   1262  f2d2		       85 d0		      sta	playfield+44
   1263  f2d4					      endif
   1264  f2d4					      endif
   1265  f2d4				   noshiftdown2
      0  f2d4					      RETURN
      1  f2d4					      ifnconst	bankswitch
      2  f2d4		       60		      rts
      3  f2d5				  -	      else
      4  f2d5				  -	      jmp	BS_return
      5  f2d5					      endif
   1267  f2d5
   1268  f2d5
   1269  f2d5				   notup
   1270  f2d5							;down
   1271  f2d5		       4a		      lsr
   1272  f2d6		       b0 02		      bcs	oneincup
   1273  f2d8		       e6 ef		      inc	playfieldpos
   1274  f2da				   oneincup
   1275  f2da		       e6 ef		      inc	playfieldpos
   1276  f2dc		       a5 ef		      lda	playfieldpos
   1277  f2de
   1278  f2de				  -	      ifconst	pfrowheight
   1279  f2de				  -	      cmp	#pfrowheight+1
   1280  f2de					      else
   1281  f2de					      ifnconst	pfres
   1282  f2de		       c9 09		      cmp	#9
   1283  f2e0				  -	      else
   1284  f2e0				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f2e0					      endif
   1286  f2e0					      endif
   1287  f2e0
   1288  f2e0		       90 3b		      bcc	noshiftdown
   1289  f2e2		       a9 01		      lda	#1
   1290  f2e4		       85 ef		      sta	playfieldpos
   1291  f2e6
   1292  f2e6				  -	      ifconst	pfres
   1293  f2e6				  -	      lda	playfield+pfres*4-1
   1294  f2e6				  -	      sta	temp4
   1295  f2e6				  -	      lda	playfield+pfres*4-2
   1296  f2e6				  -	      sta	temp3
   1297  f2e6				  -	      lda	playfield+pfres*4-3
   1298  f2e6				  -	      sta	temp2
   1299  f2e6				  -	      lda	playfield+pfres*4-4
   1300  f2e6					      else
   1301  f2e6		       a5 d3		      lda	playfield+47
   1302  f2e8		       85 9f		      sta	temp4
   1303  f2ea		       a5 d2		      lda	playfield+46
   1304  f2ec		       85 9e		      sta	temp3
   1305  f2ee		       a5 d1		      lda	playfield+45
   1306  f2f0		       85 9d		      sta	temp2
   1307  f2f2		       a5 d0		      lda	playfield+44
   1308  f2f4					      endif
   1309  f2f4
   1310  f2f4		       85 9c		      sta	temp1
   1311  f2f6
   1312  f2f6				  -	      ifconst	pfres
   1313  f2f6				  -	      ldx	#(pfres-1)*4
   1314  f2f6					      else
   1315  f2f6		       a2 2c		      ldx	#44
   1316  f2f8					      endif
   1317  f2f8				   down2
   1318  f2f8		       b5 a3		      lda	playfield-1,x
   1319  f2fa				  -	      ifconst	superchip
   1320  f2fa				  -	      sta	playfield-125,x
   1321  f2fa				  -	      lda	playfield-2,x
   1322  f2fa				  -	      sta	playfield-126,x
   1323  f2fa				  -	      lda	playfield-3,x
   1324  f2fa				  -	      sta	playfield-127,x
   1325  f2fa				  -	      lda	playfield-4,x
   1326  f2fa				  -	      sta	playfield-128,x
   1327  f2fa					      else
   1328  f2fa		       95 a7		      sta	playfield+3,x
   1329  f2fc		       b5 a2		      lda	playfield-2,x
   1330  f2fe		       95 a6		      sta	playfield+2,x
   1331  f300		       b5 a1		      lda	playfield-3,x
   1332  f302		       95 a5		      sta	playfield+1,x
   1333  f304		       b5 a0		      lda	playfield-4,x
   1334  f306		       95 a4		      sta	playfield,x
   1335  f308					      endif
   1336  f308		       8a		      txa
   1337  f309		       cb 04		      sbx	#4
   1338  f30b		       d0 eb		      bne	down2
   1339  f30d
   1340  f30d		       a5 9f		      lda	temp4
   1341  f30f				  -	      ifconst	superchip
   1342  f30f				  -	      sta	playfield-125
   1343  f30f				  -	      lda	temp3
   1344  f30f				  -	      sta	playfield-126
   1345  f30f				  -	      lda	temp2
   1346  f30f				  -	      sta	playfield-127
   1347  f30f				  -	      lda	temp1
   1348  f30f				  -	      sta	playfield-128
   1349  f30f					      else
   1350  f30f		       85 a7		      sta	playfield+3
   1351  f311		       a5 9e		      lda	temp3
   1352  f313		       85 a6		      sta	playfield+2
   1353  f315		       a5 9d		      lda	temp2
   1354  f317		       85 a5		      sta	playfield+1
   1355  f319		       a5 9c		      lda	temp1
   1356  f31b		       85 a4		      sta	playfield
   1357  f31d					      endif
   1358  f31d				   noshiftdown
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1360  f31e							;standard routines needed for pretty much all games
   1361  f31e							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f31e							; repositioning code and score pointer setup moved to overscan
   1363  f31e							; read switches, joysticks now compiler generated (more efficient)
   1364  f31e
   1365  f31e				   randomize
   1366  f31e		       a5 a2		      lda	rand
   1367  f320		       4a		      lsr
   1368  f321					      ifconst	rand16
   1369  f321		       26 ed		      rol	rand16
   1370  f323					      endif
   1371  f323		       90 02		      bcc	noeor
   1372  f325		       49 b4		      eor	#$B4
   1373  f327				   noeor
   1374  f327		       85 a2		      sta	rand
   1375  f329					      ifconst	rand16
   1376  f329		       45 ed		      eor	rand16
   1377  f32b					      endif
      0  f32b					      RETURN
      1  f32b					      ifnconst	bankswitch
      2  f32b		       60		      rts
      3  f32c				  -	      else
      4  f32c				  -	      jmp	BS_return
      5  f32c					      endif
   1379  f32c				   drawscreen
   1380  f32c				  -	      ifconst	debugscore
   1381  f32c				  -	      ldx	#14
   1382  f32c				  -	      lda	INTIM	; display # cycles left in the score
   1383  f32c				  -
   1384  f32c				  -	      ifconst	mincycles
   1385  f32c				  -	      lda	mincycles
   1386  f32c				  -	      cmp	INTIM
   1387  f32c				  -	      lda	mincycles
   1388  f32c				  -	      bcc	nochange
   1389  f32c				  -	      lda	INTIM
   1390  f32c				  -	      sta	mincycles
   1391  f32c				  -nochange
   1392  f32c				  -	      endif
   1393  f32c				  -
   1394  f32c				  -			; cmp #$2B
   1395  f32c				  -			; bcs no_cycles_left
   1396  f32c				  -	      bmi	cycles_left
   1397  f32c				  -	      ldx	#64
   1398  f32c				  -	      eor	#$ff	;make negative
   1399  f32c				  -cycles_left
   1400  f32c				  -	      stx	scorecolor
   1401  f32c				  -	      and	#$7f	; clear sign bit
   1402  f32c				  -	      tax
   1403  f32c				  -	      lda	scorebcd,x
   1404  f32c				  -	      sta	score+2
   1405  f32c				  -	      lda	scorebcd1,x
   1406  f32c				  -	      sta	score+1
   1407  f32c				  -	      jmp	done_debugscore
   1408  f32c				  -scorebcd
   1409  f32c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f32c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f32c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f32c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f32c				  -scorebcd1
   1414  f32c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f32c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f32c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f32c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f32c				  -done_debugscore
   1419  f32c					      endif
   1420  f32c
   1421  f32c				  -	      ifconst	debugcycles
   1422  f32c				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f32c				  -			; cmp #$2B
   1424  f32c				  -			; BCC overscan
   1425  f32c				  -	      bmi	overscan
   1426  f32c				  -	      sta	COLUBK
   1427  f32c				  -	      bcs	doneoverscan
   1428  f32c					      endif
   1429  f32c
   1430  f32c				   overscan
   1431  f32c				  -	      ifconst	interlaced
   1432  f32c				  -	      PHP
   1433  f32c				  -	      PLA
   1434  f32c				  -	      EOR	#4	; flip interrupt bit
   1435  f32c				  -	      PHA
   1436  f32c				  -	      PLP
   1437  f32c				  -	      AND	#4	; isolate the interrupt bit
   1438  f32c				  -	      TAX		; save it for later
   1439  f32c					      endif
   1440  f32c
   1441  f32c				   overscanloop
   1442  f32c		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f32f		       30 fb		      bmi	overscanloop
   1444  f331				   doneoverscan
   1445  f331
   1446  f331							;do VSYNC
   1447  f331
   1448  f331				  -	      ifconst	interlaced
   1449  f331				  -	      CPX	#4
   1450  f331				  -	      BNE	oddframevsync
   1451  f331					      endif
   1452  f331
   1453  f331		       a9 02		      lda	#2
   1454  f333		       85 02		      sta	WSYNC
   1455  f335		       85 00		      sta	VSYNC
   1456  f337		       85 02		      STA	WSYNC
   1457  f339		       85 02		      STA	WSYNC
   1458  f33b		       4a		      lsr
   1459  f33c		       85 02		      STA	WSYNC
   1460  f33e		       85 00		      STA	VSYNC
   1461  f340		       85 01		      sta	VBLANK
   1462  f342					      ifnconst	overscan_time
   1463  f342		       a9 a5		      lda	#37+128
   1464  f344				  -	      else
   1465  f344				  -	      lda	#overscan_time+128
   1466  f344					      endif
   1467  f344		       8d 96 02 	      sta	TIM64T
   1468  f347
   1469  f347				  -	      ifconst	interlaced
   1470  f347				  -	      jmp	postsync
   1471  f347				  -
   1472  f347				  -oddframevsync
   1473  f347				  -	      sta	WSYNC
   1474  f347				  -
   1475  f347				  -	      LDA	($80,X)	; 11 waste
   1476  f347				  -	      LDA	($80,X)	; 11 waste
   1477  f347				  -	      LDA	($80,X)	; 11 waste
   1478  f347				  -
   1479  f347				  -	      lda	#2
   1480  f347				  -	      sta	VSYNC
   1481  f347				  -	      sta	WSYNC
   1482  f347				  -	      sta	WSYNC
   1483  f347				  -	      sta	WSYNC
   1484  f347				  -
   1485  f347				  -	      LDA	($80,X)	; 11 waste
   1486  f347				  -	      LDA	($80,X)	; 11 waste
   1487  f347				  -	      LDA	($80,X)	; 11 waste
   1488  f347				  -
   1489  f347				  -	      lda	#0
   1490  f347				  -	      sta	VSYNC
   1491  f347				  -	      sta	VBLANK
   1492  f347				  -	      ifnconst	overscan_time
   1493  f347				  -	      lda	#37+128
   1494  f347				  -	      else
   1495  f347				  -	      lda	#overscan_time+128
   1496  f347				  -	      endif
   1497  f347				  -	      sta	TIM64T
   1498  f347				  -
   1499  f347				  -postsync
   1500  f347					      endif
   1501  f347
   1502  f347				  -	      ifconst	legacy
   1503  f347				  -	      if	legacy < 100
   1504  f347				  -	      ldx	#4
   1505  f347				  -adjustloop
   1506  f347				  -	      lda	player0x,x
   1507  f347				  -	      sec
   1508  f347				  -	      sbc	#14	;?
   1509  f347				  -	      sta	player0x,x
   1510  f347				  -	      dex
   1511  f347				  -	      bpl	adjustloop
   1512  f347				  -	      endif
   1513  f347					      endif
   1514  f347				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f347				  -	      repeat	($fa-(<*))
   1516  f347				  -	      nop
   1517  f347				  -	      repend
   1518  f347					      endif
   1519  f347		       85 02		      sta	WSYNC
   1520  f349		       a2 04		      ldx	#4
      0  f34b					      SLEEP	3
      1  f34b				   .CYCLES    SET	3
      2  f34b
      3  f34b				  -	      IF	.CYCLES < 2
      4  f34b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f34b				  -	      ERR
      6  f34b					      ENDIF
      7  f34b
      8  f34b					      IF	.CYCLES & 1
      9  f34b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f34b		       04 00		      nop	0
     11  f34d				  -	      ELSE
     12  f34d				  -	      bit	VSYNC
     13  f34d					      ENDIF
     14  f34d				   .CYCLES    SET	.CYCLES - 3
     15  f34d					      ENDIF
     16  f34d
     17  f34d				  -	      REPEAT	.CYCLES / 2
     18  f34d				  -	      nop
     19  f34d					      REPEND
   1522  f34d				   HorPosLoop		; 5
   1523  f34d		       b5 80		      lda	player0x,X	;+4 9
   1524  f34f		       38		      sec		;+2 11
   1525  f350				   DivideLoop
   1526  f350		       e9 0f		      sbc	#15
   1527  f352		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f354		       95 9c		      sta	temp1,X	;+4 19
   1529  f356		       95 10		      sta	RESP0,X	;+4 23
   1530  f358		       85 02		      sta	WSYNC
   1531  f35a		       ca		      dex
   1532  f35b		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f35d							; 4
   1534  f35d
   1535  f35d		       a2 04		      ldx	#4
   1536  f35f		       b4 9c		      ldy	temp1,X
   1537  f361		       b9 bd f2 	      lda	repostable-256,Y
   1538  f364		       95 20		      sta	HMP0,X	;+14 18
   1539  f366
   1540  f366		       ca		      dex
   1541  f367		       b4 9c		      ldy	temp1,X
   1542  f369		       b9 bd f2 	      lda	repostable-256,Y
   1543  f36c		       95 20		      sta	HMP0,X	;+14 32
   1544  f36e
   1545  f36e		       ca		      dex
   1546  f36f		       b4 9c		      ldy	temp1,X
   1547  f371		       b9 bd f2 	      lda	repostable-256,Y
   1548  f374		       95 20		      sta	HMP0,X	;+14 46
   1549  f376
   1550  f376		       ca		      dex
   1551  f377		       b4 9c		      ldy	temp1,X
   1552  f379		       b9 bd f2 	      lda	repostable-256,Y
   1553  f37c		       95 20		      sta	HMP0,X	;+14 60
   1554  f37e
   1555  f37e		       ca		      dex
   1556  f37f		       b4 9c		      ldy	temp1,X
   1557  f381		       b9 bd f2 	      lda	repostable-256,Y
   1558  f384		       95 20		      sta	HMP0,X	;+14 74
   1559  f386
   1560  f386		       85 02		      sta	WSYNC
   1561  f388
   1562  f388		       85 2a		      sta	HMOVE	;+3 3
   1563  f38a
   1564  f38a
   1565  f38a				  -	      ifconst	legacy
   1566  f38a				  -	      if	legacy < 100
   1567  f38a				  -	      ldx	#4
   1568  f38a				  -adjustloop2
   1569  f38a				  -	      lda	player0x,x
   1570  f38a				  -	      clc
   1571  f38a				  -	      adc	#14	;?
   1572  f38a				  -	      sta	player0x,x
   1573  f38a				  -	      dex
   1574  f38a				  -	      bpl	adjustloop2
   1575  f38a				  -	      endif
   1576  f38a					      endif
   1577  f38a
   1578  f38a
   1579  f38a
   1580  f38a
   1581  f38a							;set score pointers
   1582  f38a		       a7 95		      lax	score+2
   1583  f38c		       20 bd f3 	      jsr	scorepointerset
   1584  f38f		       84 9b		      sty	scorepointers+5
   1585  f391		       86 98		      stx	scorepointers+2
   1586  f393		       a7 94		      lax	score+1
   1587  f395		       20 bd f3 	      jsr	scorepointerset
   1588  f398		       84 9a		      sty	scorepointers+4
   1589  f39a		       86 97		      stx	scorepointers+1
   1590  f39c		       a7 93		      lax	score
   1591  f39e		       20 bd f3 	      jsr	scorepointerset
   1592  f3a1		       84 99		      sty	scorepointers+3
   1593  f3a3		       86 96		      stx	scorepointers
   1594  f3a5
   1595  f3a5				   vblk
   1596  f3a5							; run possible vblank bB code
   1597  f3a5				  -	      ifconst	vblank_bB_code
   1598  f3a5				  -	      jsr	vblank_bB_code
   1599  f3a5					      endif
   1600  f3a5				   vblk2
   1601  f3a5		       ad 84 02 	      LDA	INTIM
   1602  f3a8		       30 fb		      bmi	vblk2
   1603  f3aa		       4c 34 f0 	      jmp	kernel
   1604  f3ad
   1605  f3ad
   1606  f3ad		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f3b6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f3bd				   repostable
   1609  f3bd
   1610  f3bd				   scorepointerset
   1611  f3bd		       29 0f		      and	#$0F
   1612  f3bf		       0a		      asl
   1613  f3c0		       0a		      asl
   1614  f3c1		       0a		      asl
   1615  f3c2		       69 9c		      adc	#<scoretable
   1616  f3c4		       a8		      tay
   1617  f3c5		       8a		      txa
   1618  f3c6							; and #$F0
   1619  f3c6							; lsr
   1620  f3c6		       4b f0		      asr	#$F0
   1621  f3c8		       69 9c		      adc	#<scoretable
   1622  f3ca		       aa		      tax
   1623  f3cb		       60		      rts
   1624  f3cc				   game
   1625  f3cc				   .
   1626  f3cc							;
   1627  f3cc
   1628  f3cc				   .
   1629  f3cc							;
   1630  f3cc
   1631  f3cc				   .
   1632  f3cc							;
   1633  f3cc
   1634  f3cc				   .
   1635  f3cc							;
   1636  f3cc
   1637  f3cc				   .
   1638  f3cc							;
   1639  f3cc
   1640  f3cc				   .
   1641  f3cc							;
   1642  f3cc
   1643  f3cc				   .
   1644  f3cc							;
   1645  f3cc
   1646  f3cc				   .
   1647  f3cc							;
   1648  f3cc
   1649  f3cc				   .
   1650  f3cc							;
   1651  f3cc
   1652  f3cc				   .
   1653  f3cc							;
   1654  f3cc
   1655  f3cc				   .
   1656  f3cc							;
   1657  f3cc
   1658  f3cc				   .
   1659  f3cc							;
   1660  f3cc
   1661  f3cc				   .
   1662  f3cc							;
   1663  f3cc
   1664  f3cc				   .
   1665  f3cc							;
   1666  f3cc
   1667  f3cc				   .
   1668  f3cc							;
   1669  f3cc
   1670  f3cc				   .
   1671  f3cc							;
   1672  f3cc
   1673  f3cc				   .
   1674  f3cc							;
   1675  f3cc
   1676  f3cc				   .
   1677  f3cc							;
   1678  f3cc
   1679  f3cc				   .
   1680  f3cc							;
   1681  f3cc
   1682  f3cc				   .
   1683  f3cc							;
   1684  f3cc
   1685  f3cc				   .
   1686  f3cc							;
   1687  f3cc
   1688  f3cc				   .
   1689  f3cc							;
   1690  f3cc
   1691  f3cc				   .
   1692  f3cc							;
   1693  f3cc
   1694  f3cc				   .
   1695  f3cc							;
   1696  f3cc
   1697  f3cc				   .
   1698  f3cc							;
   1699  f3cc
   1700  f3cc				   .
   1701  f3cc							;
   1702  f3cc
   1703  f3cc				   .
   1704  f3cc							;
   1705  f3cc
   1706  f3cc				   .
   1707  f3cc							;
   1708  f3cc
   1709  f3cc				   .
   1710  f3cc							;
   1711  f3cc
   1712  f3cc				   .
   1713  f3cc							;
   1714  f3cc
   1715  f3cc				   .L00 		;  set smartbranching on
   1716  f3cc
   1717  f3cc				   .
   1718  f3cc							;
   1719  f3cc
   1720  f3cc				   .
   1721  f3cc							;
   1722  f3cc
   1723  f3cc				   .
   1724  f3cc							;
   1725  f3cc
   1726  f3cc				   .
   1727  f3cc							;
   1728  f3cc
   1729  f3cc				   .
   1730  f3cc							;
   1731  f3cc
   1732  f3cc				   .
   1733  f3cc							;
   1734  f3cc
   1735  f3cc				   .
   1736  f3cc							;
   1737  f3cc
   1738  f3cc				   .
   1739  f3cc							;
   1740  f3cc
   1741  f3cc				   .L01 		;  set optimization noinlinedata
   1742  f3cc
   1743  f3cc				   .
   1744  f3cc							;
   1745  f3cc
   1746  f3cc				   .
   1747  f3cc							;
   1748  f3cc
   1749  f3cc				   .
   1750  f3cc							;
   1751  f3cc
   1752  f3cc				   .
   1753  f3cc							;
   1754  f3cc
   1755  f3cc				   .
   1756  f3cc							;
   1757  f3cc
   1758  f3cc				   .
   1759  f3cc							;
   1760  f3cc
   1761  f3cc				   .
   1762  f3cc							;
   1763  f3cc
   1764  f3cc				   .
   1765  f3cc							;
   1766  f3cc
   1767  f3cc				   .
   1768  f3cc							;
   1769  f3cc
   1770  f3cc				   .
   1771  f3cc							;
   1772  f3cc
   1773  f3cc				   .
   1774  f3cc							;
   1775  f3cc
   1776  f3cc				   .
   1777  f3cc							;
   1778  f3cc
   1779  f3cc				   .
   1780  f3cc							;
   1781  f3cc
   1782  f3cc				   .
   1783  f3cc							;
   1784  f3cc
   1785  f3cc				   .
   1786  f3cc							;
   1787  f3cc
   1788  f3cc				   .
   1789  f3cc							;
   1790  f3cc
   1791  f3cc				   .
   1792  f3cc							;
   1793  f3cc
   1794  f3cc				   .
   1795  f3cc							;
   1796  f3cc
   1797  f3cc				   .
   1798  f3cc							;
   1799  f3cc
   1800  f3cc				   .
   1801  f3cc							;
   1802  f3cc
   1803  f3cc				   .
   1804  f3cc							;
   1805  f3cc
   1806  f3cc				   .
   1807  f3cc							;
   1808  f3cc
   1809  f3cc				   .
   1810  f3cc							;
   1811  f3cc
   1812  f3cc				   .
   1813  f3cc							;
   1814  f3cc
   1815  f3cc				   .
   1816  f3cc							;
   1817  f3cc
   1818  f3cc				   .
   1819  f3cc							;
   1820  f3cc
   1821  f3cc				   .
   1822  f3cc							;
   1823  f3cc
   1824  f3cc				   .L02 		;  dim _error_accumulator  =  a
   1825  f3cc
   1826  f3cc				   .L03 		;  dim _delta_y  =  b
   1827  f3cc
   1828  f3cc				   .L04 		;  dim _delta_x  =  c
   1829  f3cc
   1830  f3cc				   .L05 		;  dim _octant  =  d
   1831  f3cc
   1832  f3cc				   .L06 		;  dim _Chase_Delay  =  e
   1833  f3cc
   1834  f3cc				   .
   1835  f3cc							;
   1836  f3cc
   1837  f3cc				   .
   1838  f3cc							;
   1839  f3cc
   1840  f3cc				   .
   1841  f3cc							;
   1842  f3cc
   1843  f3cc				   .L07 		;  dim _BitOp_P1_P0_Dir  =  f
   1844  f3cc
   1845  f3cc				   .L08 		;  dim _Bit0_P1_Dir_Up  =  f
   1846  f3cc
   1847  f3cc				   .L09 		;  dim _Bit1_P1_Dir_Down  =  f
   1848  f3cc
   1849  f3cc				   .L010		;  dim _Bit2_P1_Dir_Left  =  f
   1850  f3cc
   1851  f3cc				   .L011		;  dim _Bit3_P1_Dir_Right  =  f
   1852  f3cc
   1853  f3cc				   .
   1854  f3cc							;
   1855  f3cc
   1856  f3cc				   .
   1857  f3cc							;
   1858  f3cc
   1859  f3cc				   .
   1860  f3cc							;
   1861  f3cc
   1862  f3cc				   .
   1863  f3cc							;
   1864  f3cc
   1865  f3cc				   .
   1866  f3cc							;
   1867  f3cc
   1868  f3cc				   .L012		;  dim _Bit0_P0_Col_Up  =  g
   1869  f3cc
   1870  f3cc				   .L013		;  dim _Bit1_P0_Col_Down  =  g
   1871  f3cc
   1872  f3cc				   .L014		;  dim _Bit2_P0_Col_Left  =  g
   1873  f3cc
   1874  f3cc				   .L015		;  dim _Bit3_P0_Col_Right  =  g
   1875  f3cc
   1876  f3cc				   .L016		;  dim _Bit4_P0_Dir_Up  =  g
   1877  f3cc
   1878  f3cc				   .L017		;  dim _Bit5_P0_Dir_Down  =  g
   1879  f3cc
   1880  f3cc				   .L018		;  dim _Bit6_P0_Dir_Left  =  g
   1881  f3cc
   1882  f3cc				   .L019		;  dim _Bit7_P0_Dir_Right  =  g
   1883  f3cc
   1884  f3cc				   .
   1885  f3cc							;
   1886  f3cc
   1887  f3cc				   .
   1888  f3cc							;
   1889  f3cc
   1890  f3cc				   .
   1891  f3cc							;
   1892  f3cc
   1893  f3cc				   .L020		;  dim _Bit0_Reset_Restrainer	=  y
   1894  f3cc
   1895  f3cc				   .L021		;  dim _Bit5_EA  =  y
   1896  f3cc
   1897  f3cc				   .L022		;  dim _BitOp_01  =  y
   1898  f3cc
   1899  f3cc				   .L023		;  dim _Bit4_Toggle_Screen  =	y
   1900  f3cc
   1901  f3cc				   .L024		;  dim _Bit7_M0_Moving  =  y
   1902  f3cc
   1903  f3cc				   .
   1904  f3cc							;
   1905  f3cc
   1906  f3cc				   .
   1907  f3cc							;
   1908  f3cc
   1909  f3cc				   .
   1910  f3cc							;
   1911  f3cc
   1912  f3cc				   .L025		;  dim rand16	=  z
   1913  f3cc
   1914  f3cc				   .
   1915  f3cc							;
   1916  f3cc
   1917  f3cc				   .L026		;  dim _P0_TEMPX  =  h
   1918  f3cc
   1919  f3cc				   .L027		;  dim _P0_TEMPY  =  i
   1920  f3cc
   1921  f3cc				   .
   1922  f3cc							;
   1923  f3cc
   1924  f3cc				   .
   1925  f3cc							;
   1926  f3cc
   1927  f3cc				   .
   1928  f3cc							;
   1929  f3cc
   1930  f3cc				   .
   1931  f3cc							;
   1932  f3cc
   1933  f3cc				   .
   1934  f3cc							;
   1935  f3cc
   1936  f3cc				   .
   1937  f3cc							;
   1938  f3cc
   1939  f3cc				   .
   1940  f3cc							;
   1941  f3cc
   1942  f3cc				   .L028		;  const _P_Edge_Top  =  9
   1943  f3cc
   1944  f3cc				   .L029		;  const _P_Edge_Bottom  =  88
   1945  f3cc
   1946  f3cc				   .L030		;  const _P_Edge_Left	=  1
   1947  f3cc
   1948  f3cc				   .L031		;  const _P_Edge_Right  =  153
   1949  f3cc
   1950  f3cc				   .
   1951  f3cc							;
   1952  f3cc
   1953  f3cc				   .
   1954  f3cc							;
   1955  f3cc
   1956  f3cc				   .
   1957  f3cc							;
   1958  f3cc
   1959  f3cc				   .
   1960  f3cc							;
   1961  f3cc
   1962  f3cc				   .
   1963  f3cc							;
   1964  f3cc
   1965  f3cc				   .
   1966  f3cc							;
   1967  f3cc
   1968  f3cc				   .
   1969  f3cc							;
   1970  f3cc
   1971  f3cc				   .L032		;  const noscore  =  1
   1972  f3cc
   1973  f3cc				   .
   1974  f3cc							;
   1975  f3cc
   1976  f3cc				   .
   1977  f3cc							;
   1978  f3cc
   1979  f3cc				   .
   1980  f3cc							;
   1981  f3cc
   1982  f3cc				   .
   1983  f3cc							;
   1984  f3cc
   1985  f3cc				   .
   1986  f3cc							;
   1987  f3cc
   1988  f3cc				   .
   1989  f3cc							;
   1990  f3cc
   1991  f3cc				   .
   1992  f3cc							;
   1993  f3cc
   1994  f3cc				   .
   1995  f3cc							;
   1996  f3cc
   1997  f3cc				   .__Start_Restart
   1998  f3cc							; __Start_Restart
   1999  f3cc
   2000  f3cc				   .
   2001  f3cc							;
   2002  f3cc
   2003  f3cc				   .
   2004  f3cc							;
   2005  f3cc
   2006  f3cc				   .
   2007  f3cc							;
   2008  f3cc
   2009  f3cc				   .
   2010  f3cc							;
   2011  f3cc
   2012  f3cc				   .
   2013  f3cc							;
   2014  f3cc
   2015  f3cc				   .
   2016  f3cc							;
   2017  f3cc
   2018  f3cc				   .L033		;  AUDV0  =  0  :  AUDV1  =  0
   2019  f3cc
   2020  f3cc		       a9 00		      LDA	#0
   2021  f3ce		       85 19		      STA	AUDV0
   2022  f3d0		       85 1a		      STA	AUDV1
   2023  f3d2				   .
   2024  f3d2							;
   2025  f3d2
   2026  f3d2				   .
   2027  f3d2							;
   2028  f3d2
   2029  f3d2				   .
   2030  f3d2							;
   2031  f3d2
   2032  f3d2				   .
   2033  f3d2							;
   2034  f3d2
   2035  f3d2				   .
   2036  f3d2							;
   2037  f3d2
   2038  f3d2				   .
   2039  f3d2							;
   2040  f3d2
   2041  f3d2				   .
   2042  f3d2							;
   2043  f3d2
   2044  f3d2				   .
   2045  f3d2							;
   2046  f3d2
   2047  f3d2				   .L034		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2048  f3d2
   2049  f3d2		       a9 00		      LDA	#0
   2050  f3d4		       85 d4		      STA	a
   2051  f3d6		       85 d5		      STA	b
   2052  f3d8		       85 d6		      STA	c
   2053  f3da		       85 d7		      STA	d
   2054  f3dc		       85 d8		      STA	e
   2055  f3de		       85 d9		      STA	f
   2056  f3e0		       85 da		      STA	g
   2057  f3e2		       85 db		      STA	h
   2058  f3e4		       85 dc		      STA	i
   2059  f3e6				   .L035		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2060  f3e6
   2061  f3e6		       a9 00		      LDA	#0
   2062  f3e8		       85 dd		      STA	j
   2063  f3ea		       85 de		      STA	k
   2064  f3ec		       85 df		      STA	l
   2065  f3ee		       85 e0		      STA	m
   2066  f3f0		       85 e1		      STA	n
   2067  f3f2		       85 e2		      STA	o
   2068  f3f4		       85 e3		      STA	p
   2069  f3f6		       85 e4		      STA	q
   2070  f3f8		       85 e5		      STA	r
   2071  f3fa				   .L036		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   2072  f3fa
   2073  f3fa		       a9 00		      LDA	#0
   2074  f3fc		       85 e6		      STA	s
   2075  f3fe		       85 e7		      STA	t
   2076  f400		       85 e8		      STA	u
   2077  f402		       85 e9		      STA	v
   2078  f404		       85 ea		      STA	w
   2079  f406		       85 eb		      STA	x
   2080  f408		       85 ec		      STA	y
   2081  f40a				   .
   2082  f40a							;
   2083  f40a
   2084  f40a				   .
   2085  f40a							;
   2086  f40a
   2087  f40a				   .
   2088  f40a							;
   2089  f40a
   2090  f40a				   .
   2091  f40a							;
   2092  f40a
   2093  f40a				   .
   2094  f40a							;
   2095  f40a
   2096  f40a				   .
   2097  f40a							;
   2098  f40a
   2099  f40a				   .
   2100  f40a							;
   2101  f40a
   2102  f40a				   .L037		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2103  f40a
   2104  f40a		       a5 ec		      LDA	_BitOp_01
   2105  f40c		       29 10		      AND	#%00010000
   2106  f40e		       85 ec		      STA	_BitOp_01
   2107  f410				   .
   2108  f410							;
   2109  f410
   2110  f410				   .
   2111  f410							;
   2112  f410
   2113  f410				   .
   2114  f410							;
   2115  f410
   2116  f410				   .
   2117  f410							;
   2118  f410
   2119  f410				   .
   2120  f410							;
   2121  f410
   2122  f410				   .L038		;  player1x  =  80  :	player1y  =  53
   2123  f410
   2124  f410		       a9 50		      LDA	#80
   2125  f412		       85 81		      STA	player1x
   2126  f414		       a9 35		      LDA	#53
   2127  f416		       85 86		      STA	player1y
   2128  f418				   .
   2129  f418							;
   2130  f418
   2131  f418				   .
   2132  f418							;
   2133  f418
   2134  f418				   .
   2135  f418							;
   2136  f418
   2137  f418				   .
   2138  f418							;
   2139  f418
   2140  f418				   .
   2141  f418							;
   2142  f418
   2143  f418				   .L039		;  player0x  =   ( rand / 2 )	 +   ( rand & 15 )   +	5  :  player0y	=  9
   2144  f418
   2145  f418							; complex statement detected
   2146  f418		       20 1e f3 	      jsr	randomize
   2147  f41b		       4a		      lsr
   2148  f41c		       48		      PHA
   2149  f41d		       20 1e f3 	      jsr	randomize
   2150  f420		       29 0f		      AND	#15
   2151  f422		       ba		      TSX
   2152  f423		       e8		      INX
   2153  f424		       9a		      TXS
   2154  f425		       18		      CLC
   2155  f426		       75 00		      ADC	$00,x
   2156  f428		       18		      CLC
   2157  f429		       69 05		      ADC	#5
   2158  f42b		       85 80		      STA	player0x
   2159  f42d		       a9 09		      LDA	#9
   2160  f42f		       85 85		      STA	player0y
   2161  f431				   .
   2162  f431							;
   2163  f431
   2164  f431				   .
   2165  f431							;
   2166  f431
   2167  f431				   .
   2168  f431							;
   2169  f431
   2170  f431				   .
   2171  f431							;
   2172  f431
   2173  f431				   .
   2174  f431							;
   2175  f431
   2176  f431				   .
   2177  f431							;
   2178  f431
   2179  f431				   .L040		;  COLUPF  =  $FC
   2180  f431
   2181  f431		       a9 fc		      LDA	#$FC
   2182  f433		       85 08		      STA	COLUPF
   2183  f435				   .
   2184  f435							;
   2185  f435
   2186  f435				   .
   2187  f435							;
   2188  f435
   2189  f435				   .
   2190  f435							;
   2191  f435
   2192  f435				   .
   2193  f435							;
   2194  f435
   2195  f435				   .
   2196  f435							;
   2197  f435
   2198  f435				   .
   2199  f435							;
   2200  f435
   2201  f435				   .L041		;  COLUBK  =  0
   2202  f435
   2203  f435		       a9 00		      LDA	#0
   2204  f437		       85 09		      STA	COLUBK
   2205  f439				   .
   2206  f439							;
   2207  f439
   2208  f439				   .
   2209  f439							;
   2210  f439
   2211  f439				   .
   2212  f439							;
   2213  f439
   2214  f439				   .
   2215  f439							;
   2216  f439
   2217  f439				   .
   2218  f439							;
   2219  f439
   2220  f439				   .
   2221  f439							;
   2222  f439
   2223  f439				   .L042		;  _Bit3_P1_Dir_Right{3}  =  1
   2224  f439
   2225  f439		       a5 d9		      LDA	_Bit3_P1_Dir_Right
   2226  f43b		       09 08		      ORA	#8
   2227  f43d		       85 d9		      STA	_Bit3_P1_Dir_Right
   2228  f43f				   .
   2229  f43f							;
   2230  f43f
   2231  f43f				   .
   2232  f43f							;
   2233  f43f
   2234  f43f				   .
   2235  f43f							;
   2236  f43f
   2237  f43f				   .
   2238  f43f							;
   2239  f43f
   2240  f43f				   .
   2241  f43f							;
   2242  f43f
   2243  f43f				   .
   2244  f43f							;
   2245  f43f
   2246  f43f				   .
   2247  f43f							;
   2248  f43f
   2249  f43f				   .
   2250  f43f							;
   2251  f43f
   2252  f43f				   .L043		;  _Bit0_Reset_Restrainer{0}  =  1
   2253  f43f
   2254  f43f		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2255  f441		       09 01		      ORA	#1
   2256  f443		       85 ec		      STA	_Bit0_Reset_Restrainer
   2257  f445				   .
   2258  f445							;
   2259  f445
   2260  f445				   .
   2261  f445							;
   2262  f445
   2263  f445				   .
   2264  f445							;
   2265  f445
   2266  f445				   .
   2267  f445							;
   2268  f445
   2269  f445				   .
   2270  f445							;
   2271  f445
   2272  f445				   .
   2273  f445							;
   2274  f445
   2275  f445				   .L044		;  playfield:
   2276  f445
   2277  f445				  -	      ifconst	pfres
   2278  f445				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2279  f445					      else
   2280  f445		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2281  f447					      endif
   2282  f447		       4c 76 f4 	      jmp	pflabel0
   2283  f44a				   PF_data0
   2284  f44a		       ff ff		      .byte.b	%11111111, %11111111
   2285  f44c					      if	(pfwidth>2)
   2286  f44c		       ff ff		      .byte.b	%11111111, %11111111
   2287  f44e					      endif
   2288  f44e		       80 00		      .byte.b	%10000000, %00000000
   2289  f450					      if	(pfwidth>2)
   2290  f450		       00 80		      .byte.b	%00000000, %10000000
   2291  f452					      endif
   2292  f452		       9f 61		      .byte.b	%10011111, %01100001
   2293  f454					      if	(pfwidth>2)
   2294  f454		       61 9f		      .byte.b	%01100001, %10011111
   2295  f456					      endif
   2296  f456		       90 70		      .byte.b	%10010000, %01110000
   2297  f458					      if	(pfwidth>2)
   2298  f458		       70 90		      .byte.b	%01110000, %10010000
   2299  f45a					      endif
   2300  f45a		       80 00		      .byte.b	%10000000, %00000000
   2301  f45c					      if	(pfwidth>2)
   2302  f45c		       00 80		      .byte.b	%00000000, %10000000
   2303  f45e					      endif
   2304  f45e		       99 99		      .byte.b	%10011001, %10011001
   2305  f460					      if	(pfwidth>2)
   2306  f460		       99 99		      .byte.b	%10011001, %10011001
   2307  f462					      endif
   2308  f462		       80 00		      .byte.b	%10000000, %00000000
   2309  f464					      if	(pfwidth>2)
   2310  f464		       00 80		      .byte.b	%00000000, %10000000
   2311  f466					      endif
   2312  f466		       90 70		      .byte.b	%10010000, %01110000
   2313  f468					      if	(pfwidth>2)
   2314  f468		       70 90		      .byte.b	%01110000, %10010000
   2315  f46a					      endif
   2316  f46a		       9f 61		      .byte.b	%10011111, %01100001
   2317  f46c					      if	(pfwidth>2)
   2318  f46c		       61 9f		      .byte.b	%01100001, %10011111
   2319  f46e					      endif
   2320  f46e		       80 00		      .byte.b	%10000000, %00000000
   2321  f470					      if	(pfwidth>2)
   2322  f470		       00 80		      .byte.b	%00000000, %10000000
   2323  f472					      endif
   2324  f472		       ff ff		      .byte.b	%11111111, %11111111
   2325  f474					      if	(pfwidth>2)
   2326  f474		       ff ff		      .byte.b	%11111111, %11111111
   2327  f476					      endif
   2328  f476				   pflabel0
   2329  f476		       bd 4a f4 	      lda	PF_data0,x
   2330  f479		       95 a4		      sta	playfield,x
   2331  f47b		       ca		      dex
   2332  f47c		       10 f8		      bpl	pflabel0
   2333  f47e				   .
   2334  f47e							;
   2335  f47e
   2336  f47e				   .
   2337  f47e							;
   2338  f47e
   2339  f47e				   .
   2340  f47e							;
   2341  f47e
   2342  f47e				   .
   2343  f47e							;
   2344  f47e
   2345  f47e				   .
   2346  f47e							;
   2347  f47e
   2348  f47e				   .
   2349  f47e							;
   2350  f47e
   2351  f47e				   .
   2352  f47e							;
   2353  f47e
   2354  f47e				   .
   2355  f47e							;
   2356  f47e
   2357  f47e				   .
   2358  f47e							;
   2359  f47e
   2360  f47e				   .
   2361  f47e							;
   2362  f47e
   2363  f47e				   .
   2364  f47e							;
   2365  f47e
   2366  f47e				   .
   2367  f47e							;
   2368  f47e
   2369  f47e				   .
   2370  f47e							;
   2371  f47e
   2372  f47e				   .
   2373  f47e							;
   2374  f47e
   2375  f47e				   .
   2376  f47e							;
   2377  f47e
   2378  f47e				   .
   2379  f47e							;
   2380  f47e
   2381  f47e				   .
   2382  f47e							;
   2383  f47e
   2384  f47e				   .L045		;  player1:
   2385  f47e
   2386  f47e		       a2 20		      LDX	#<playerL045_1
   2387  f480		       86 8c		      STX	player1pointerlo
   2388  f482		       a9 fa		      LDA	#>playerL045_1
   2389  f484		       85 8d		      STA	player1pointerhi
   2390  f486		       a9 07		      LDA	#7
   2391  f488		       85 8f		      STA	player1height
   2392  f48a				   .
   2393  f48a							;
   2394  f48a
   2395  f48a				   .
   2396  f48a							;
   2397  f48a
   2398  f48a				   .
   2399  f48a							;
   2400  f48a
   2401  f48a				   .
   2402  f48a							;
   2403  f48a
   2404  f48a				   .
   2405  f48a							;
   2406  f48a
   2407  f48a				   .L046		;  player0:
   2408  f48a
   2409  f48a		       a2 28		      LDX	#<playerL046_0
   2410  f48c		       86 8a		      STX	player0pointerlo
   2411  f48e		       a9 fa		      LDA	#>playerL046_0
   2412  f490		       85 8b		      STA	player0pointerhi
   2413  f492		       a9 07		      LDA	#7
   2414  f494		       85 8e		      STA	player0height
   2415  f496				   .
   2416  f496							;
   2417  f496
   2418  f496				   .
   2419  f496							;
   2420  f496
   2421  f496				   .
   2422  f496							;
   2423  f496
   2424  f496				   .
   2425  f496							;
   2426  f496
   2427  f496				   .
   2428  f496							;
   2429  f496
   2430  f496				   .L047		;  goto __Chase_Setup
   2431  f496
   2432  f496		       4c 45 f9 	      jmp	.__Chase_Setup
   2433  f499
   2434  f499				   .
   2435  f499							;
   2436  f499
   2437  f499				   .
   2438  f499							;
   2439  f499
   2440  f499				   .
   2441  f499							;
   2442  f499
   2443  f499				   .
   2444  f499							;
   2445  f499
   2446  f499				   .
   2447  f499							;
   2448  f499
   2449  f499				   .
   2450  f499							;
   2451  f499
   2452  f499				   .
   2453  f499							;
   2454  f499
   2455  f499				   .__Main_Loop
   2456  f499							; __Main_Loop
   2457  f499
   2458  f499				   .
   2459  f499							;
   2460  f499
   2461  f499				   .
   2462  f499							;
   2463  f499
   2464  f499				   .
   2465  f499							;
   2466  f499
   2467  f499				   .
   2468  f499							;
   2469  f499
   2470  f499				   .L048		;  _Chase_Delay  =  _Chase_Delay  -  1
   2471  f499
   2472  f499		       c6 d8		      DEC	_Chase_Delay
   2473  f49b				   .
   2474  f49b							;
   2475  f49b
   2476  f49b				   .
   2477  f49b							;
   2478  f49b
   2479  f49b				   .
   2480  f49b							;
   2481  f49b
   2482  f49b				   .
   2483  f49b							;
   2484  f49b
   2485  f49b				   .L049		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2486  f49b
   2487  f49b		       a9 10		      lda	#$10
   2488  f49d		       2c 80 02 	      bit	SWCHA
   2489  f4a0		       f0 14		      BEQ	.skipL049
   2490  f4a2				   .condpart0
   2491  f4a2		       a9 20		      lda	#$20
   2492  f4a4		       2c 80 02 	      bit	SWCHA
   2493  f4a7		       f0 0d		      BEQ	.skip0then
   2494  f4a9				   .condpart1
   2495  f4a9		       2c 80 02 	      bit	SWCHA
   2496  f4ac		       50 08		      BVC	.skip1then
   2497  f4ae				   .condpart2
   2498  f4ae		       2c 80 02 	      bit	SWCHA
   2499  f4b1		       10 03		      BPL	.skip2then
   2500  f4b3				   .condpart3
   2501  f4b3		       4c bc f4 	      jmp	.__Skip_Joystick_Precheck
   2502  f4b6
   2503  f4b6				   .skip2then
   2504  f4b6				   .skip1then
   2505  f4b6				   .skip0then
   2506  f4b6				   .skipL049
   2507  f4b6				   .
   2508  f4b6							;
   2509  f4b6
   2510  f4b6				   .
   2511  f4b6							;
   2512  f4b6
   2513  f4b6				   .
   2514  f4b6							;
   2515  f4b6
   2516  f4b6				   .
   2517  f4b6							;
   2518  f4b6
   2519  f4b6				   .L050		;  _BitOp_P1_P0_Dir  =  _BitOp_P1_P0_Dir  &  %11110000
   2520  f4b6
   2521  f4b6		       a5 d9		      LDA	_BitOp_P1_P0_Dir
   2522  f4b8		       29 f0		      AND	#%11110000
   2523  f4ba		       85 d9		      STA	_BitOp_P1_P0_Dir
   2524  f4bc				   .
   2525  f4bc							;
   2526  f4bc
   2527  f4bc				   .__Skip_Joystick_Precheck
   2528  f4bc							; __Skip_Joystick_Precheck
   2529  f4bc
   2530  f4bc				   .
   2531  f4bc							;
   2532  f4bc
   2533  f4bc				   .
   2534  f4bc							;
   2535  f4bc
   2536  f4bc				   .
   2537  f4bc							;
   2538  f4bc
   2539  f4bc				   .
   2540  f4bc							;
   2541  f4bc
   2542  f4bc				   .
   2543  f4bc							;
   2544  f4bc
   2545  f4bc				   .
   2546  f4bc							;
   2547  f4bc
   2548  f4bc				   .
   2549  f4bc							;
   2550  f4bc
   2551  f4bc				   .L051		;  if !joy0up then goto __Skip_Joy0_Up
   2552  f4bc
   2553  f4bc		       a9 10		      lda	#$10
   2554  f4be		       2c 80 02 	      bit	SWCHA
   2555  f4c1		       f0 03		      BEQ	.skipL051
   2556  f4c3				   .condpart4
   2557  f4c3		       4c 30 f5 	      jmp	.__Skip_Joy0_Up
   2558  f4c6
   2559  f4c6				   .skipL051
   2560  f4c6				   .
   2561  f4c6							;
   2562  f4c6
   2563  f4c6				   .
   2564  f4c6							;
   2565  f4c6
   2566  f4c6				   .
   2567  f4c6							;
   2568  f4c6
   2569  f4c6				   .
   2570  f4c6							;
   2571  f4c6
   2572  f4c6				   .L052		;  _Bit0_P1_Dir_Up{0}	=  1
   2573  f4c6
   2574  f4c6		       a5 d9		      LDA	_Bit0_P1_Dir_Up
   2575  f4c8		       09 01		      ORA	#1
   2576  f4ca		       85 d9		      STA	_Bit0_P1_Dir_Up
   2577  f4cc				   .
   2578  f4cc							;
   2579  f4cc
   2580  f4cc				   .
   2581  f4cc							;
   2582  f4cc
   2583  f4cc				   .
   2584  f4cc							;
   2585  f4cc
   2586  f4cc				   .
   2587  f4cc							;
   2588  f4cc
   2589  f4cc				   .L053		;  if player1y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   2590  f4cc
   2591  f4cc		       a9 09		      LDA	#_P_Edge_Top
   2592  f4ce		       c5 86		      CMP	player1y
   2593  f4d0		       90 03		      BCC	.skipL053
   2594  f4d2				   .condpart5
   2595  f4d2		       4c 30 f5 	      jmp	.__Skip_Joy0_Up
   2596  f4d5
   2597  f4d5				   .skipL053
   2598  f4d5				   .
   2599  f4d5							;
   2600  f4d5
   2601  f4d5				   .
   2602  f4d5							;
   2603  f4d5
   2604  f4d5				   .
   2605  f4d5							;
   2606  f4d5
   2607  f4d5				   .
   2608  f4d5							;
   2609  f4d5
   2610  f4d5				   .L054		;  temp5  =   ( player1x - 10 )  / 4
   2611  f4d5
   2612  f4d5							; complex statement detected
   2613  f4d5		       a5 81		      LDA	player1x
   2614  f4d7		       38		      SEC
   2615  f4d8		       e9 0a		      SBC	#10
   2616  f4da		       4a		      lsr
   2617  f4db		       4a		      lsr
   2618  f4dc		       85 a0		      STA	temp5
   2619  f4de				   .
   2620  f4de							;
   2621  f4de
   2622  f4de				   .L055		;  temp6  =   ( player1y - 9 )  / 8
   2623  f4de
   2624  f4de							; complex statement detected
   2625  f4de		       a5 86		      LDA	player1y
   2626  f4e0		       38		      SEC
   2627  f4e1		       e9 09		      SBC	#9
   2628  f4e3		       4a		      lsr
   2629  f4e4		       4a		      lsr
   2630  f4e5		       4a		      lsr
   2631  f4e6		       85 a1		      STA	temp6
   2632  f4e8				   .
   2633  f4e8							;
   2634  f4e8
   2635  f4e8				   .L056		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2636  f4e8
   2637  f4e8		       a5 a0		      LDA	temp5
   2638  f4ea		       c9 22		      CMP	#34
   2639  f4ec		       b0 0c		      BCS	.skipL056
   2640  f4ee				   .condpart6
   2641  f4ee		       a5 a0		      LDA	temp5
   2642  f4f0		       a4 a1		      LDY	temp6
   2643  f4f2		       20 d6 f1 	      jsr	pfread
   2644  f4f5		       d0 03		      BNE	.skip6then
   2645  f4f7				   .condpart7
   2646  f4f7		       4c 30 f5 	      jmp	.__Skip_Joy0_Up
   2647  f4fa
   2648  f4fa				   .skip6then
   2649  f4fa				   .skipL056
   2650  f4fa				   .
   2651  f4fa							;
   2652  f4fa
   2653  f4fa				   .L057		;  temp4  =   ( player1x - 17 )  / 4
   2654  f4fa
   2655  f4fa							; complex statement detected
   2656  f4fa		       a5 81		      LDA	player1x
   2657  f4fc		       38		      SEC
   2658  f4fd		       e9 11		      SBC	#17
   2659  f4ff		       4a		      lsr
   2660  f500		       4a		      lsr
   2661  f501		       85 9f		      STA	temp4
   2662  f503				   .
   2663  f503							;
   2664  f503
   2665  f503				   .L058		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2666  f503
   2667  f503		       a5 9f		      LDA	temp4
   2668  f505		       c9 22		      CMP	#34
   2669  f507		       b0 0c		      BCS	.skipL058
   2670  f509				   .condpart8
   2671  f509		       a5 9f		      LDA	temp4
   2672  f50b		       a4 a1		      LDY	temp6
   2673  f50d		       20 d6 f1 	      jsr	pfread
   2674  f510		       d0 03		      BNE	.skip8then
   2675  f512				   .condpart9
   2676  f512		       4c 30 f5 	      jmp	.__Skip_Joy0_Up
   2677  f515
   2678  f515				   .skip8then
   2679  f515				   .skipL058
   2680  f515				   .
   2681  f515							;
   2682  f515
   2683  f515				   .L059		;  temp3  =  temp5  -	1
   2684  f515
   2685  f515		       a5 a0		      LDA	temp5
   2686  f517		       38		      SEC
   2687  f518		       e9 01		      SBC	#1
   2688  f51a		       85 9e		      STA	temp3
   2689  f51c				   .
   2690  f51c							;
   2691  f51c
   2692  f51c				   .L060		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2693  f51c
   2694  f51c		       a5 9e		      LDA	temp3
   2695  f51e		       c9 22		      CMP	#34
   2696  f520		       b0 0c		      BCS	.skipL060
   2697  f522				   .condpart10
   2698  f522		       a5 9e		      LDA	temp3
   2699  f524		       a4 a1		      LDY	temp6
   2700  f526		       20 d6 f1 	      jsr	pfread
   2701  f529		       d0 03		      BNE	.skip10then
   2702  f52b				   .condpart11
   2703  f52b		       4c 30 f5 	      jmp	.__Skip_Joy0_Up
   2704  f52e
   2705  f52e				   .skip10then
   2706  f52e				   .skipL060
   2707  f52e				   .
   2708  f52e							;
   2709  f52e
   2710  f52e				   .
   2711  f52e							;
   2712  f52e
   2713  f52e				   .
   2714  f52e							;
   2715  f52e
   2716  f52e				   .
   2717  f52e							;
   2718  f52e
   2719  f52e				   .L061		;  player1y  =  player1y  -  1
   2720  f52e
   2721  f52e		       c6 86		      DEC	player1y
   2722  f530				   .
   2723  f530							;
   2724  f530
   2725  f530				   .__Skip_Joy0_Up
   2726  f530							; __Skip_Joy0_Up
   2727  f530
   2728  f530				   .
   2729  f530							;
   2730  f530
   2731  f530				   .
   2732  f530							;
   2733  f530
   2734  f530				   .
   2735  f530							;
   2736  f530
   2737  f530				   .
   2738  f530							;
   2739  f530
   2740  f530				   .
   2741  f530							;
   2742  f530
   2743  f530				   .
   2744  f530							;
   2745  f530
   2746  f530				   .
   2747  f530							;
   2748  f530
   2749  f530				   .
   2750  f530							;
   2751  f530
   2752  f530				   .L062		;  if !joy0down then goto __Skip_Joy0_Down
   2753  f530
   2754  f530		       a9 20		      lda	#$20
   2755  f532		       2c 80 02 	      bit	SWCHA
   2756  f535		       f0 03		      BEQ	.skipL062
   2757  f537				   .condpart12
   2758  f537		       4c a1 f5 	      jmp	.__Skip_Joy0_Down
   2759  f53a
   2760  f53a				   .skipL062
   2761  f53a				   .
   2762  f53a							;
   2763  f53a
   2764  f53a				   .
   2765  f53a							;
   2766  f53a
   2767  f53a				   .
   2768  f53a							;
   2769  f53a
   2770  f53a				   .
   2771  f53a							;
   2772  f53a
   2773  f53a				   .L063		;  _Bit1_P1_Dir_Down{1}  =  1
   2774  f53a
   2775  f53a		       a5 d9		      LDA	_Bit1_P1_Dir_Down
   2776  f53c		       09 02		      ORA	#2
   2777  f53e		       85 d9		      STA	_Bit1_P1_Dir_Down
   2778  f540				   .
   2779  f540							;
   2780  f540
   2781  f540				   .
   2782  f540							;
   2783  f540
   2784  f540				   .
   2785  f540							;
   2786  f540
   2787  f540				   .
   2788  f540							;
   2789  f540
   2790  f540				   .L064		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   2791  f540
   2792  f540		       a5 86		      LDA	player1y
   2793  f542		       c9 58		      CMP	#_P_Edge_Bottom
   2794  f544		       90 03		      BCC	.skipL064
   2795  f546				   .condpart13
   2796  f546		       4c a1 f5 	      jmp	.__Skip_Joy0_Down
   2797  f549
   2798  f549				   .skipL064
   2799  f549				   .
   2800  f549							;
   2801  f549
   2802  f549				   .
   2803  f549							;
   2804  f549
   2805  f549				   .
   2806  f549							;
   2807  f549
   2808  f549				   .
   2809  f549							;
   2810  f549
   2811  f549				   .L065		;  temp5  =   ( player1x - 10 )  / 4
   2812  f549
   2813  f549							; complex statement detected
   2814  f549		       a5 81		      LDA	player1x
   2815  f54b		       38		      SEC
   2816  f54c		       e9 0a		      SBC	#10
   2817  f54e		       4a		      lsr
   2818  f54f		       4a		      lsr
   2819  f550		       85 a0		      STA	temp5
   2820  f552				   .
   2821  f552							;
   2822  f552
   2823  f552				   .L066		;  temp6  =   ( player1y )  / 8
   2824  f552
   2825  f552							; complex statement detected
   2826  f552		       a5 86		      LDA	player1y
   2827  f554		       4a		      lsr
   2828  f555		       4a		      lsr
   2829  f556		       4a		      lsr
   2830  f557		       85 a1		      STA	temp6
   2831  f559				   .
   2832  f559							;
   2833  f559
   2834  f559				   .L067		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   2835  f559
   2836  f559		       a5 a0		      LDA	temp5
   2837  f55b		       c9 22		      CMP	#34
   2838  f55d		       b0 0c		      BCS	.skipL067
   2839  f55f				   .condpart14
   2840  f55f		       a5 a0		      LDA	temp5
   2841  f561		       a4 a1		      LDY	temp6
   2842  f563		       20 d6 f1 	      jsr	pfread
   2843  f566		       d0 03		      BNE	.skip14then
   2844  f568				   .condpart15
   2845  f568		       4c a1 f5 	      jmp	.__Skip_Joy0_Down
   2846  f56b
   2847  f56b				   .skip14then
   2848  f56b				   .skipL067
   2849  f56b				   .
   2850  f56b							;
   2851  f56b
   2852  f56b				   .L068		;  temp4  =   ( player1x - 17 )  / 4
   2853  f56b
   2854  f56b							; complex statement detected
   2855  f56b		       a5 81		      LDA	player1x
   2856  f56d		       38		      SEC
   2857  f56e		       e9 11		      SBC	#17
   2858  f570		       4a		      lsr
   2859  f571		       4a		      lsr
   2860  f572		       85 9f		      STA	temp4
   2861  f574				   .
   2862  f574							;
   2863  f574
   2864  f574				   .L069		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   2865  f574
   2866  f574		       a5 9f		      LDA	temp4
   2867  f576		       c9 22		      CMP	#34
   2868  f578		       b0 0c		      BCS	.skipL069
   2869  f57a				   .condpart16
   2870  f57a		       a5 9f		      LDA	temp4
   2871  f57c		       a4 a1		      LDY	temp6
   2872  f57e		       20 d6 f1 	      jsr	pfread
   2873  f581		       d0 03		      BNE	.skip16then
   2874  f583				   .condpart17
   2875  f583		       4c a1 f5 	      jmp	.__Skip_Joy0_Down
   2876  f586
   2877  f586				   .skip16then
   2878  f586				   .skipL069
   2879  f586				   .
   2880  f586							;
   2881  f586
   2882  f586				   .L070		;  temp3  =  temp5  -	1
   2883  f586
   2884  f586		       a5 a0		      LDA	temp5
   2885  f588		       38		      SEC
   2886  f589		       e9 01		      SBC	#1
   2887  f58b		       85 9e		      STA	temp3
   2888  f58d				   .
   2889  f58d							;
   2890  f58d
   2891  f58d				   .L071		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   2892  f58d
   2893  f58d		       a5 9e		      LDA	temp3
   2894  f58f		       c9 22		      CMP	#34
   2895  f591		       b0 0c		      BCS	.skipL071
   2896  f593				   .condpart18
   2897  f593		       a5 9e		      LDA	temp3
   2898  f595		       a4 a1		      LDY	temp6
   2899  f597		       20 d6 f1 	      jsr	pfread
   2900  f59a		       d0 03		      BNE	.skip18then
   2901  f59c				   .condpart19
   2902  f59c		       4c a1 f5 	      jmp	.__Skip_Joy0_Down
   2903  f59f
   2904  f59f				   .skip18then
   2905  f59f				   .skipL071
   2906  f59f				   .
   2907  f59f							;
   2908  f59f
   2909  f59f				   .
   2910  f59f							;
   2911  f59f
   2912  f59f				   .
   2913  f59f							;
   2914  f59f
   2915  f59f				   .
   2916  f59f							;
   2917  f59f
   2918  f59f				   .L072		;  player1y  =  player1y  +  1
   2919  f59f
   2920  f59f		       e6 86		      INC	player1y
   2921  f5a1				   .
   2922  f5a1							;
   2923  f5a1
   2924  f5a1				   .__Skip_Joy0_Down
   2925  f5a1							; __Skip_Joy0_Down
   2926  f5a1
   2927  f5a1				   .
   2928  f5a1							;
   2929  f5a1
   2930  f5a1				   .
   2931  f5a1							;
   2932  f5a1
   2933  f5a1				   .
   2934  f5a1							;
   2935  f5a1
   2936  f5a1				   .
   2937  f5a1							;
   2938  f5a1
   2939  f5a1				   .
   2940  f5a1							;
   2941  f5a1
   2942  f5a1				   .
   2943  f5a1							;
   2944  f5a1
   2945  f5a1				   .
   2946  f5a1							;
   2947  f5a1
   2948  f5a1				   .
   2949  f5a1							;
   2950  f5a1
   2951  f5a1				   .L073		;  if !joy0left then goto __Skip_Joy0_Left
   2952  f5a1
   2953  f5a1		       2c 80 02 	      bit	SWCHA
   2954  f5a4		       50 03		      BVC	.skipL073
   2955  f5a6				   .condpart20
   2956  f5a6		       4c fb f5 	      jmp	.__Skip_Joy0_Left
   2957  f5a9
   2958  f5a9				   .skipL073
   2959  f5a9				   .
   2960  f5a9							;
   2961  f5a9
   2962  f5a9				   .
   2963  f5a9							;
   2964  f5a9
   2965  f5a9				   .
   2966  f5a9							;
   2967  f5a9
   2968  f5a9				   .
   2969  f5a9							;
   2970  f5a9
   2971  f5a9				   .L074		;  _Bit2_P1_Dir_Left{2}  =  1
   2972  f5a9
   2973  f5a9		       a5 d9		      LDA	_Bit2_P1_Dir_Left
   2974  f5ab		       09 04		      ORA	#4
   2975  f5ad		       85 d9		      STA	_Bit2_P1_Dir_Left
   2976  f5af				   .
   2977  f5af							;
   2978  f5af
   2979  f5af				   .
   2980  f5af							;
   2981  f5af
   2982  f5af				   .
   2983  f5af							;
   2984  f5af
   2985  f5af				   .
   2986  f5af							;
   2987  f5af
   2988  f5af				   .L075		;  if player1x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   2989  f5af
   2990  f5af		       a9 01		      LDA	#_P_Edge_Left
   2991  f5b1		       c5 81		      CMP	player1x
   2992  f5b3		       90 03		      BCC	.skipL075
   2993  f5b5				   .condpart21
   2994  f5b5		       4c fb f5 	      jmp	.__Skip_Joy0_Left
   2995  f5b8
   2996  f5b8				   .skipL075
   2997  f5b8				   .
   2998  f5b8							;
   2999  f5b8
   3000  f5b8				   .
   3001  f5b8							;
   3002  f5b8
   3003  f5b8				   .
   3004  f5b8							;
   3005  f5b8
   3006  f5b8				   .
   3007  f5b8							;
   3008  f5b8
   3009  f5b8				   .L076		;  temp5  =   ( player1y - 1 )  / 8
   3010  f5b8
   3011  f5b8							; complex statement detected
   3012  f5b8		       a5 86		      LDA	player1y
   3013  f5ba		       38		      SEC
   3014  f5bb		       e9 01		      SBC	#1
   3015  f5bd		       4a		      lsr
   3016  f5be		       4a		      lsr
   3017  f5bf		       4a		      lsr
   3018  f5c0		       85 a0		      STA	temp5
   3019  f5c2				   .
   3020  f5c2							;
   3021  f5c2
   3022  f5c2				   .L077		;  temp6  =   ( player1x - 18 )  / 4
   3023  f5c2
   3024  f5c2							; complex statement detected
   3025  f5c2		       a5 81		      LDA	player1x
   3026  f5c4		       38		      SEC
   3027  f5c5		       e9 12		      SBC	#18
   3028  f5c7		       4a		      lsr
   3029  f5c8		       4a		      lsr
   3030  f5c9		       85 a1		      STA	temp6
   3031  f5cb				   .
   3032  f5cb							;
   3033  f5cb
   3034  f5cb				   .L078		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3035  f5cb
   3036  f5cb		       a5 a1		      LDA	temp6
   3037  f5cd		       c9 22		      CMP	#34
   3038  f5cf		       b0 0c		      BCS	.skipL078
   3039  f5d1				   .condpart22
   3040  f5d1		       a5 a1		      LDA	temp6
   3041  f5d3		       a4 a0		      LDY	temp5
   3042  f5d5		       20 d6 f1 	      jsr	pfread
   3043  f5d8		       d0 03		      BNE	.skip22then
   3044  f5da				   .condpart23
   3045  f5da		       4c fb f5 	      jmp	.__Skip_Joy0_Left
   3046  f5dd
   3047  f5dd				   .skip22then
   3048  f5dd				   .skipL078
   3049  f5dd				   .
   3050  f5dd							;
   3051  f5dd
   3052  f5dd				   .L079		;  temp3  =   ( player1y - 8 )  / 8
   3053  f5dd
   3054  f5dd							; complex statement detected
   3055  f5dd		       a5 86		      LDA	player1y
   3056  f5df		       38		      SEC
   3057  f5e0		       e9 08		      SBC	#8
   3058  f5e2		       4a		      lsr
   3059  f5e3		       4a		      lsr
   3060  f5e4		       4a		      lsr
   3061  f5e5		       85 9e		      STA	temp3
   3062  f5e7				   .
   3063  f5e7							;
   3064  f5e7
   3065  f5e7				   .L080		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3066  f5e7
   3067  f5e7		       a5 a1		      LDA	temp6
   3068  f5e9		       c9 22		      CMP	#34
   3069  f5eb		       b0 0c		      BCS	.skipL080
   3070  f5ed				   .condpart24
   3071  f5ed		       a5 a1		      LDA	temp6
   3072  f5ef		       a4 9e		      LDY	temp3
   3073  f5f1		       20 d6 f1 	      jsr	pfread
   3074  f5f4		       d0 03		      BNE	.skip24then
   3075  f5f6				   .condpart25
   3076  f5f6		       4c fb f5 	      jmp	.__Skip_Joy0_Left
   3077  f5f9
   3078  f5f9				   .skip24then
   3079  f5f9				   .skipL080
   3080  f5f9				   .
   3081  f5f9							;
   3082  f5f9
   3083  f5f9				   .
   3084  f5f9							;
   3085  f5f9
   3086  f5f9				   .
   3087  f5f9							;
   3088  f5f9
   3089  f5f9				   .
   3090  f5f9							;
   3091  f5f9
   3092  f5f9				   .L081		;  player1x  =  player1x  -  1
   3093  f5f9
   3094  f5f9		       c6 81		      DEC	player1x
   3095  f5fb				   .
   3096  f5fb							;
   3097  f5fb
   3098  f5fb				   .__Skip_Joy0_Left
   3099  f5fb							; __Skip_Joy0_Left
   3100  f5fb
   3101  f5fb				   .
   3102  f5fb							;
   3103  f5fb
   3104  f5fb				   .
   3105  f5fb							;
   3106  f5fb
   3107  f5fb				   .
   3108  f5fb							;
   3109  f5fb
   3110  f5fb				   .
   3111  f5fb							;
   3112  f5fb
   3113  f5fb				   .
   3114  f5fb							;
   3115  f5fb
   3116  f5fb				   .
   3117  f5fb							;
   3118  f5fb
   3119  f5fb				   .
   3120  f5fb							;
   3121  f5fb
   3122  f5fb				   .
   3123  f5fb							;
   3124  f5fb
   3125  f5fb				   .
   3126  f5fb							;
   3127  f5fb
   3128  f5fb				   .
   3129  f5fb							;
   3130  f5fb
   3131  f5fb				   .L082		;  if !joy0right then goto __Skip_Joy0_Right
   3132  f5fb
   3133  f5fb		       2c 80 02 	      bit	SWCHA
   3134  f5fe		       10 03		      BPL	.skipL082
   3135  f600				   .condpart26
   3136  f600		       4c 55 f6 	      jmp	.__Skip_Joy0_Right
   3137  f603
   3138  f603				   .skipL082
   3139  f603				   .
   3140  f603							;
   3141  f603
   3142  f603				   .
   3143  f603							;
   3144  f603
   3145  f603				   .
   3146  f603							;
   3147  f603
   3148  f603				   .
   3149  f603							;
   3150  f603
   3151  f603				   .L083		;  _Bit3_P1_Dir_Right{3}  =  1
   3152  f603
   3153  f603		       a5 d9		      LDA	_Bit3_P1_Dir_Right
   3154  f605		       09 08		      ORA	#8
   3155  f607		       85 d9		      STA	_Bit3_P1_Dir_Right
   3156  f609				   .
   3157  f609							;
   3158  f609
   3159  f609				   .
   3160  f609							;
   3161  f609
   3162  f609				   .
   3163  f609							;
   3164  f609
   3165  f609				   .
   3166  f609							;
   3167  f609
   3168  f609				   .L084		;  if player1x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3169  f609
   3170  f609		       a5 81		      LDA	player1x
   3171  f60b		       c9 99		      CMP	#_P_Edge_Right
   3172  f60d		       90 03		      BCC	.skipL084
   3173  f60f				   .condpart27
   3174  f60f		       4c 55 f6 	      jmp	.__Skip_Joy0_Right
   3175  f612
   3176  f612				   .skipL084
   3177  f612				   .
   3178  f612							;
   3179  f612
   3180  f612				   .
   3181  f612							;
   3182  f612
   3183  f612				   .
   3184  f612							;
   3185  f612
   3186  f612				   .
   3187  f612							;
   3188  f612
   3189  f612				   .L085		;  temp5  =   ( player1y - 1 )  / 8
   3190  f612
   3191  f612							; complex statement detected
   3192  f612		       a5 86		      LDA	player1y
   3193  f614		       38		      SEC
   3194  f615		       e9 01		      SBC	#1
   3195  f617		       4a		      lsr
   3196  f618		       4a		      lsr
   3197  f619		       4a		      lsr
   3198  f61a		       85 a0		      STA	temp5
   3199  f61c				   .
   3200  f61c							;
   3201  f61c
   3202  f61c				   .L086		;  temp6  =   ( player1x - 9 )  / 4
   3203  f61c
   3204  f61c							; complex statement detected
   3205  f61c		       a5 81		      LDA	player1x
   3206  f61e		       38		      SEC
   3207  f61f		       e9 09		      SBC	#9
   3208  f621		       4a		      lsr
   3209  f622		       4a		      lsr
   3210  f623		       85 a1		      STA	temp6
   3211  f625				   .
   3212  f625							;
   3213  f625
   3214  f625				   .L087		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3215  f625
   3216  f625		       a5 a1		      LDA	temp6
   3217  f627		       c9 22		      CMP	#34
   3218  f629		       b0 0c		      BCS	.skipL087
   3219  f62b				   .condpart28
   3220  f62b		       a5 a1		      LDA	temp6
   3221  f62d		       a4 a0		      LDY	temp5
   3222  f62f		       20 d6 f1 	      jsr	pfread
   3223  f632		       d0 03		      BNE	.skip28then
   3224  f634				   .condpart29
   3225  f634		       4c 55 f6 	      jmp	.__Skip_Joy0_Right
   3226  f637
   3227  f637				   .skip28then
   3228  f637				   .skipL087
   3229  f637				   .
   3230  f637							;
   3231  f637
   3232  f637				   .L088		;  temp3  =   ( player1y - 8 )  / 8
   3233  f637
   3234  f637							; complex statement detected
   3235  f637		       a5 86		      LDA	player1y
   3236  f639		       38		      SEC
   3237  f63a		       e9 08		      SBC	#8
   3238  f63c		       4a		      lsr
   3239  f63d		       4a		      lsr
   3240  f63e		       4a		      lsr
   3241  f63f		       85 9e		      STA	temp3
   3242  f641				   .
   3243  f641							;
   3244  f641
   3245  f641				   .L089		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3246  f641
   3247  f641		       a5 a1		      LDA	temp6
   3248  f643		       c9 22		      CMP	#34
   3249  f645		       b0 0c		      BCS	.skipL089
   3250  f647				   .condpart30
   3251  f647		       a5 a1		      LDA	temp6
   3252  f649		       a4 9e		      LDY	temp3
   3253  f64b		       20 d6 f1 	      jsr	pfread
   3254  f64e		       d0 03		      BNE	.skip30then
   3255  f650				   .condpart31
   3256  f650		       4c 55 f6 	      jmp	.__Skip_Joy0_Right
   3257  f653
   3258  f653				   .skip30then
   3259  f653				   .skipL089
   3260  f653				   .
   3261  f653							;
   3262  f653
   3263  f653				   .
   3264  f653							;
   3265  f653
   3266  f653				   .
   3267  f653							;
   3268  f653
   3269  f653				   .
   3270  f653							;
   3271  f653
   3272  f653				   .L090		;  player1x  =  player1x  +  1
   3273  f653
   3274  f653		       e6 81		      INC	player1x
   3275  f655				   .
   3276  f655							;
   3277  f655
   3278  f655				   .__Skip_Joy0_Right
   3279  f655							; __Skip_Joy0_Right
   3280  f655
   3281  f655				   .
   3282  f655							;
   3283  f655
   3284  f655				   .
   3285  f655							;
   3286  f655
   3287  f655				   .
   3288  f655							;
   3289  f655
   3290  f655				   .
   3291  f655							;
   3292  f655
   3293  f655				   .
   3294  f655							;
   3295  f655
   3296  f655				   .
   3297  f655							;
   3298  f655
   3299  f655				   .
   3300  f655							;
   3301  f655
   3302  f655				   .
   3303  f655							;
   3304  f655
   3305  f655				   .
   3306  f655							;
   3307  f655
   3308  f655				   .L091		;  if !collision(player0,player1) then goto __Skip_p0_p1_Collision
   3309  f655
   3310  f655		       24 07		      bit	CXPPMM
   3311  f657		       30 03		      BMI	.skipL091
   3312  f659				   .condpart32
   3313  f659		       4c 77 f6 	      jmp	.__Skip_p0_p1_Collision
   3314  f65c
   3315  f65c				   .skipL091
   3316  f65c				   .
   3317  f65c							;
   3318  f65c
   3319  f65c				   .
   3320  f65c							;
   3321  f65c
   3322  f65c				   .
   3323  f65c							;
   3324  f65c
   3325  f65c				   .
   3326  f65c							;
   3327  f65c
   3328  f65c				   .L092		;  player0x  =  100
   3329  f65c
   3330  f65c		       a9 64		      LDA	#100
   3331  f65e		       85 80		      STA	player0x
   3332  f660				   .L093		;  player0y  =  50
   3333  f660
   3334  f660		       a9 32		      LDA	#50
   3335  f662		       85 85		      STA	player0y
   3336  f664				   .
   3337  f664							;
   3338  f664
   3339  f664				   .
   3340  f664							;
   3341  f664
   3342  f664				   .
   3343  f664							;
   3344  f664
   3345  f664				   .
   3346  f664							;
   3347  f664
   3348  f664				   .L094		;  if player1y  <=  48 then player0y  =  88
   3349  f664
   3350  f664		       a9 30		      LDA	#48
   3351  f666		       c5 86		      CMP	player1y
   3352  f668		       90 04		      BCC	.skipL094
   3353  f66a				   .condpart33
   3354  f66a		       a9 58		      LDA	#88
   3355  f66c		       85 85		      STA	player0y
   3356  f66e				   .skipL094
   3357  f66e				   .
   3358  f66e							;
   3359  f66e
   3360  f66e				   .
   3361  f66e							;
   3362  f66e
   3363  f66e				   .
   3364  f66e							;
   3365  f66e
   3366  f66e				   .
   3367  f66e							;
   3368  f66e
   3369  f66e				   .L095		;  _Bit5_EA{5}  =  1
   3370  f66e
   3371  f66e		       a5 ec		      LDA	_Bit5_EA
   3372  f670		       09 20		      ORA	#32
   3373  f672		       85 ec		      STA	_Bit5_EA
   3374  f674				   .
   3375  f674							;
   3376  f674
   3377  f674				   .
   3378  f674							;
   3379  f674
   3380  f674				   .
   3381  f674							;
   3382  f674
   3383  f674				   .
   3384  f674							;
   3385  f674
   3386  f674				   .L096		;  goto __Chase_Setup
   3387  f674
   3388  f674		       4c 45 f9 	      jmp	.__Chase_Setup
   3389  f677
   3390  f677				   .
   3391  f677							;
   3392  f677
   3393  f677				   .__Skip_p0_p1_Collision
   3394  f677							; __Skip_p0_p1_Collision
   3395  f677
   3396  f677				   .
   3397  f677							;
   3398  f677
   3399  f677				   .
   3400  f677							;
   3401  f677
   3402  f677				   .
   3403  f677							;
   3404  f677
   3405  f677				   .
   3406  f677							;
   3407  f677
   3408  f677				   .
   3409  f677							;
   3410  f677
   3411  f677				   .
   3412  f677							;
   3413  f677
   3414  f677				   .
   3415  f677							;
   3416  f677
   3417  f677				   .
   3418  f677							;
   3419  f677
   3420  f677				   .L097		;  if !joy0fire  &&  ! ( _Chase_Delay	&  %00000001 )	then goto __Skip_Chase2
   3421  f677
   3422  f677		       24 0c		      bit	INPT4
   3423  f679		       10 09		      BPL	.skipL097
   3424  f67b				   .condpart34
   3425  f67b							; complex statement detected
   3426  f67b		       a5 d8		      LDA	_Chase_Delay
   3427  f67d		       29 01		      AND	#%00000001
   3428  f67f		       d0 03		      BNE	.skip34then
   3429  f681				   .condpart35
   3430  f681		       4c 35 f7 	      jmp	.__Skip_Chase2
   3431  f684
   3432  f684				   .skip34then
   3433  f684				   .skipL097
   3434  f684				   .
   3435  f684							;
   3436  f684
   3437  f684				   .
   3438  f684							;
   3439  f684
   3440  f684				   .
   3441  f684							;
   3442  f684
   3443  f684				   .
   3444  f684							;
   3445  f684
   3446  f684				   .L098		;  temp1  =  _error_accumulator
   3447  f684
   3448  f684		       a5 d4		      LDA	_error_accumulator
   3449  f686		       85 9c		      STA	temp1
   3450  f688				   .
   3451  f688							;
   3452  f688
   3453  f688				   .
   3454  f688							;
   3455  f688
   3456  f688				   .
   3457  f688							;
   3458  f688
   3459  f688				   .
   3460  f688							;
   3461  f688
   3462  f688				   .
   3463  f688							;
   3464  f688
   3465  f688				   .L099		;  if _octant{0} then goto __Skip_Chase1
   3466  f688
   3467  f688		       a5 d7		      LDA	_octant
   3468  f68a		       4a		      LSR
   3469  f68b		       90 03		      BCC	.skipL099
   3470  f68d				   .condpart36
   3471  f68d		       4c e4 f6 	      jmp	.__Skip_Chase1
   3472  f690
   3473  f690				   .skipL099
   3474  f690				   .
   3475  f690							;
   3476  f690
   3477  f690				   .__Reenter_Chase1
   3478  f690							; __Reenter_Chase1
   3479  f690
   3480  f690				   .L0100		;  _P0_TEMPY  =  player0y  +  _Data_yinc[_octant]
   3481  f690
   3482  f690		       a5 85		      LDA	player0y
   3483  f692		       a6 d7		      LDX	_octant
   3484  f694		       18		      CLC
   3485  f695		       7d 10 fa 	      ADC	_Data_yinc,x
   3486  f698		       85 dc		      STA	_P0_TEMPY
   3487  f69a				   .L0101		;  if _P0_TEMPY  <  0	&&  _Bit0_P0_Col_Up{0} then _Bit0_P0_Col_Up{0} = 0  :  goto __Skip_Chase1
   3488  f69a
   3489  f69a		       a5 dc		      LDA	_P0_TEMPY
   3490  f69c		       c9 00		      CMP	#0
   3491  f69e		       b0 0e		      BCS	.skipL0101
   3492  f6a0				   .condpart37
   3493  f6a0		       a5 da		      LDA	_Bit0_P0_Col_Up
   3494  f6a2		       4a		      LSR
   3495  f6a3		       90 09		      BCC	.skip37then
   3496  f6a5				   .condpart38
   3497  f6a5		       a5 da		      LDA	_Bit0_P0_Col_Up
   3498  f6a7		       29 fe		      AND	#254
   3499  f6a9		       85 da		      STA	_Bit0_P0_Col_Up
   3500  f6ab		       4c e4 f6 	      jmp	.__Skip_Chase1
   3501  f6ae
   3502  f6ae				   .skip37then
   3503  f6ae				   .skipL0101
   3504  f6ae				   .L0102		;  if _P0_TEMPY  >  0	&&  _Bit1_P0_Col_Down{1} then _Bit1_P0_Col_Down{1} = 0	:  goto __Skip_Chase1
   3505  f6ae
   3506  f6ae		       a9 00		      LDA	#0
   3507  f6b0		       c5 dc		      CMP	_P0_TEMPY
   3508  f6b2		       b0 0f		      BCS	.skipL0102
   3509  f6b4				   .condpart39
   3510  f6b4		       a5 da		      LDA	_Bit1_P0_Col_Down
   3511  f6b6		       29 02		      AND	#2
   3512  f6b8		       f0 09		      BEQ	.skip39then
   3513  f6ba				   .condpart40
   3514  f6ba		       a5 da		      LDA	_Bit1_P0_Col_Down
   3515  f6bc		       29 fd		      AND	#253
   3516  f6be		       85 da		      STA	_Bit1_P0_Col_Down
   3517  f6c0		       4c e4 f6 	      jmp	.__Skip_Chase1
   3518  f6c3
   3519  f6c3				   .skip39then
   3520  f6c3				   .skipL0102
   3521  f6c3				   .L0103		;  _error_accumulator	=  _error_accumulator  -  _delta_x
   3522  f6c3
   3523  f6c3		       a5 d4		      LDA	_error_accumulator
   3524  f6c5		       38		      SEC
   3525  f6c6		       e5 d6		      SBC	_delta_x
   3526  f6c8		       85 d4		      STA	_error_accumulator
   3527  f6ca				   .
   3528  f6ca							;
   3529  f6ca
   3530  f6ca				   .L0104		;  if temp1  <  _error_accumulator then _error_accumulator  =	_error_accumulator  +  _delta_y  :  player0x  =  player0x  +  _Data_xinc[_octant]
   3531  f6ca
   3532  f6ca		       a5 9c		      LDA	temp1
   3533  f6cc		       c5 d4		      CMP	_error_accumulator
   3534  f6ce		       b0 11		      BCS	.skipL0104
   3535  f6d0				   .condpart41
   3536  f6d0		       a5 d4		      LDA	_error_accumulator
   3537  f6d2		       18		      CLC
   3538  f6d3		       65 d5		      ADC	_delta_y
   3539  f6d5		       85 d4		      STA	_error_accumulator
   3540  f6d7		       a5 80		      LDA	player0x
   3541  f6d9		       a6 d7		      LDX	_octant
   3542  f6db		       18		      CLC
   3543  f6dc		       7d 18 fa 	      ADC	_Data_xinc,x
   3544  f6df		       85 80		      STA	player0x
   3545  f6e1				   .skipL0104
   3546  f6e1				   .L0105		;  goto __Skip_Chase2
   3547  f6e1
   3548  f6e1		       4c 35 f7 	      jmp	.__Skip_Chase2
   3549  f6e4
   3550  f6e4				   .
   3551  f6e4							;
   3552  f6e4
   3553  f6e4				   .__Skip_Chase1
   3554  f6e4							; __Skip_Chase1
   3555  f6e4
   3556  f6e4				   .
   3557  f6e4							;
   3558  f6e4
   3559  f6e4				   .
   3560  f6e4							;
   3561  f6e4
   3562  f6e4				   .
   3563  f6e4							;
   3564  f6e4
   3565  f6e4				   .
   3566  f6e4							;
   3567  f6e4
   3568  f6e4				   .
   3569  f6e4							;
   3570  f6e4
   3571  f6e4				   .L0106		;  _P0_TEMPX  =  player0x  +  _Data_xinc[_octant]
   3572  f6e4
   3573  f6e4		       a5 80		      LDA	player0x
   3574  f6e6		       a6 d7		      LDX	_octant
   3575  f6e8		       18		      CLC
   3576  f6e9		       7d 18 fa 	      ADC	_Data_xinc,x
   3577  f6ec		       85 db		      STA	_P0_TEMPX
   3578  f6ee				   .L0107		;  if _P0_TEMPX  <  0	&&  _Bit2_P0_Col_Left{0} then _Bit2_P0_Col_Left{0} = 0	:  goto __Reenter_Chase1
   3579  f6ee
   3580  f6ee		       a5 db		      LDA	_P0_TEMPX
   3581  f6f0		       c9 00		      CMP	#0
   3582  f6f2		       b0 0e		      BCS	.skipL0107
   3583  f6f4				   .condpart42
   3584  f6f4		       a5 da		      LDA	_Bit2_P0_Col_Left
   3585  f6f6		       4a		      LSR
   3586  f6f7		       90 09		      BCC	.skip42then
   3587  f6f9				   .condpart43
   3588  f6f9		       a5 da		      LDA	_Bit2_P0_Col_Left
   3589  f6fb		       29 fe		      AND	#254
   3590  f6fd		       85 da		      STA	_Bit2_P0_Col_Left
   3591  f6ff		       4c 90 f6 	      jmp	.__Reenter_Chase1
   3592  f702
   3593  f702				   .skip42then
   3594  f702				   .skipL0107
   3595  f702				   .L0108		;  if _P0_TEMPX  >  0	&&  _Bit3_P0_Col_Right{1} then _Bit3_P0_Col_Right{1} = 0  :  goto __Reenter_Chase1
   3596  f702
   3597  f702		       a9 00		      LDA	#0
   3598  f704		       c5 db		      CMP	_P0_TEMPX
   3599  f706		       b0 0f		      BCS	.skipL0108
   3600  f708				   .condpart44
   3601  f708		       a5 da		      LDA	_Bit3_P0_Col_Right
   3602  f70a		       29 02		      AND	#2
   3603  f70c		       f0 09		      BEQ	.skip44then
   3604  f70e				   .condpart45
   3605  f70e		       a5 da		      LDA	_Bit3_P0_Col_Right
   3606  f710		       29 fd		      AND	#253
   3607  f712		       85 da		      STA	_Bit3_P0_Col_Right
   3608  f714		       4c 90 f6 	      jmp	.__Reenter_Chase1
   3609  f717
   3610  f717				   .skip44then
   3611  f717				   .skipL0108
   3612  f717				   .L0109		;  _error_accumulator	=  _error_accumulator  -  _delta_y
   3613  f717
   3614  f717		       a5 d4		      LDA	_error_accumulator
   3615  f719		       38		      SEC
   3616  f71a		       e5 d5		      SBC	_delta_y
   3617  f71c		       85 d4		      STA	_error_accumulator
   3618  f71e				   .
   3619  f71e							;
   3620  f71e
   3621  f71e				   .L0110		;  if temp1  <  _error_accumulator then _error_accumulator  =	_error_accumulator  +  _delta_x  :  _P0_TEMPY  =  player0y  +  _Data_yinc[_octant]
   3622  f71e
   3623  f71e		       a5 9c		      LDA	temp1
   3624  f720		       c5 d4		      CMP	_error_accumulator
   3625  f722		       b0 11		      BCS	.skipL0110
   3626  f724				   .condpart46
   3627  f724		       a5 d4		      LDA	_error_accumulator
   3628  f726		       18		      CLC
   3629  f727		       65 d6		      ADC	_delta_x
   3630  f729		       85 d4		      STA	_error_accumulator
   3631  f72b		       a5 85		      LDA	player0y
   3632  f72d		       a6 d7		      LDX	_octant
   3633  f72f		       18		      CLC
   3634  f730		       7d 10 fa 	      ADC	_Data_yinc,x
   3635  f733		       85 dc		      STA	_P0_TEMPY
   3636  f735				   .skipL0110
   3637  f735				   .
   3638  f735							;
   3639  f735
   3640  f735				   .__Skip_Chase2
   3641  f735							; __Skip_Chase2
   3642  f735
   3643  f735				   .
   3644  f735							;
   3645  f735
   3646  f735				   .
   3647  f735							;
   3648  f735
   3649  f735				   .
   3650  f735							;
   3651  f735
   3652  f735				   .
   3653  f735							;
   3654  f735
   3655  f735				   .L0111		;  if _P0_TEMPY  >=  player0y then __Skip_P0_Up
   3656  f735
   3657  f735		       a5 dc		      LDA	_P0_TEMPY
   3658  f737		       c5 85		      CMP	player0y
   3659  f739				  -	      if	((* - .__Skip_P0_Up) < 127) && ((* - .__Skip_P0_Up) > -128)
   3660  f739				  -	      bcs	.__Skip_P0_Up
   3661  f739					      else
   3662  f739		       90 03		      bcc	.0skip__Skip_P0_Up
   3663  f73b		       4c c2 f7 	      jmp	.__Skip_P0_Up
   3664  f73e				   .0skip__Skip_P0_Up
   3665  f73e					      endif
   3666  f73e				   .
   3667  f73e							;
   3668  f73e
   3669  f73e				   .
   3670  f73e							;
   3671  f73e
   3672  f73e				   .
   3673  f73e							;
   3674  f73e
   3675  f73e				   .L0112		;  _Bit4_P0_Dir_Up{0}	=  1
   3676  f73e
   3677  f73e		       a5 da		      LDA	_Bit4_P0_Dir_Up
   3678  f740		       09 01		      ORA	#1
   3679  f742		       85 da		      STA	_Bit4_P0_Dir_Up
   3680  f744				   .
   3681  f744							;
   3682  f744
   3683  f744				   .
   3684  f744							;
   3685  f744
   3686  f744				   .
   3687  f744							;
   3688  f744
   3689  f744				   .
   3690  f744							;
   3691  f744
   3692  f744				   .L0113		;  if player0y  <=  _P_Edge_Top then _Bit0_P0_Col_Up{0} = 1  :  goto __Skip_P0_Up
   3693  f744
   3694  f744		       a9 09		      LDA	#_P_Edge_Top
   3695  f746		       c5 85		      CMP	player0y
   3696  f748		       90 09		      BCC	.skipL0113
   3697  f74a				   .condpart47
   3698  f74a		       a5 da		      LDA	_Bit0_P0_Col_Up
   3699  f74c		       09 01		      ORA	#1
   3700  f74e		       85 da		      STA	_Bit0_P0_Col_Up
   3701  f750		       4c c2 f7 	      jmp	.__Skip_P0_Up
   3702  f753
   3703  f753				   .skipL0113
   3704  f753				   .
   3705  f753							;
   3706  f753
   3707  f753				   .
   3708  f753							;
   3709  f753
   3710  f753				   .
   3711  f753							;
   3712  f753
   3713  f753				   .
   3714  f753							;
   3715  f753
   3716  f753				   .L0114		;  temp5  =   ( player0x - 10 )  / 4
   3717  f753
   3718  f753							; complex statement detected
   3719  f753		       a5 80		      LDA	player0x
   3720  f755		       38		      SEC
   3721  f756		       e9 0a		      SBC	#10
   3722  f758		       4a		      lsr
   3723  f759		       4a		      lsr
   3724  f75a		       85 a0		      STA	temp5
   3725  f75c				   .
   3726  f75c							;
   3727  f75c
   3728  f75c				   .L0115		;  temp6  =   ( player0y - 9 )  / 8
   3729  f75c
   3730  f75c							; complex statement detected
   3731  f75c		       a5 85		      LDA	player0y
   3732  f75e		       38		      SEC
   3733  f75f		       e9 09		      SBC	#9
   3734  f761		       4a		      lsr
   3735  f762		       4a		      lsr
   3736  f763		       4a		      lsr
   3737  f764		       85 a1		      STA	temp6
   3738  f766				   .
   3739  f766							;
   3740  f766
   3741  f766				   .L0116		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then _Bit0_P0_Col_Up{0} = 1  :  goto __Skip_P0_Up
   3742  f766
   3743  f766		       a5 a0		      LDA	temp5
   3744  f768		       c9 22		      CMP	#34
   3745  f76a		       b0 12		      BCS	.skipL0116
   3746  f76c				   .condpart48
   3747  f76c		       a5 a0		      LDA	temp5
   3748  f76e		       a4 a1		      LDY	temp6
   3749  f770		       20 d6 f1 	      jsr	pfread
   3750  f773		       d0 09		      BNE	.skip48then
   3751  f775				   .condpart49
   3752  f775		       a5 da		      LDA	_Bit0_P0_Col_Up
   3753  f777		       09 01		      ORA	#1
   3754  f779		       85 da		      STA	_Bit0_P0_Col_Up
   3755  f77b		       4c c2 f7 	      jmp	.__Skip_P0_Up
   3756  f77e
   3757  f77e				   .skip48then
   3758  f77e				   .skipL0116
   3759  f77e				   .
   3760  f77e							;
   3761  f77e
   3762  f77e				   .L0117		;  temp4  =   ( player0x - 17 )  / 4
   3763  f77e
   3764  f77e							; complex statement detected
   3765  f77e		       a5 80		      LDA	player0x
   3766  f780		       38		      SEC
   3767  f781		       e9 11		      SBC	#17
   3768  f783		       4a		      lsr
   3769  f784		       4a		      lsr
   3770  f785		       85 9f		      STA	temp4
   3771  f787				   .
   3772  f787							;
   3773  f787
   3774  f787				   .L0118		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then _Bit0_P0_Col_Up{0} = 1  :  goto __Skip_P0_Up
   3775  f787
   3776  f787		       a5 9f		      LDA	temp4
   3777  f789		       c9 22		      CMP	#34
   3778  f78b		       b0 12		      BCS	.skipL0118
   3779  f78d				   .condpart50
   3780  f78d		       a5 9f		      LDA	temp4
   3781  f78f		       a4 a1		      LDY	temp6
   3782  f791		       20 d6 f1 	      jsr	pfread
   3783  f794		       d0 09		      BNE	.skip50then
   3784  f796				   .condpart51
   3785  f796		       a5 da		      LDA	_Bit0_P0_Col_Up
   3786  f798		       09 01		      ORA	#1
   3787  f79a		       85 da		      STA	_Bit0_P0_Col_Up
   3788  f79c		       4c c2 f7 	      jmp	.__Skip_P0_Up
   3789  f79f
   3790  f79f				   .skip50then
   3791  f79f				   .skipL0118
   3792  f79f				   .
   3793  f79f							;
   3794  f79f
   3795  f79f				   .L0119		;  temp3  =  temp5  -	1
   3796  f79f
   3797  f79f		       a5 a0		      LDA	temp5
   3798  f7a1		       38		      SEC
   3799  f7a2		       e9 01		      SBC	#1
   3800  f7a4		       85 9e		      STA	temp3
   3801  f7a6				   .
   3802  f7a6							;
   3803  f7a6
   3804  f7a6				   .L0120		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then _Bit0_P0_Col_Up{0} = 1  :  goto __Skip_P0_Up
   3805  f7a6
   3806  f7a6		       a5 9e		      LDA	temp3
   3807  f7a8		       c9 22		      CMP	#34
   3808  f7aa		       b0 12		      BCS	.skipL0120
   3809  f7ac				   .condpart52
   3810  f7ac		       a5 9e		      LDA	temp3
   3811  f7ae		       a4 a1		      LDY	temp6
   3812  f7b0		       20 d6 f1 	      jsr	pfread
   3813  f7b3		       d0 09		      BNE	.skip52then
   3814  f7b5				   .condpart53
   3815  f7b5		       a5 da		      LDA	_Bit0_P0_Col_Up
   3816  f7b7		       09 01		      ORA	#1
   3817  f7b9		       85 da		      STA	_Bit0_P0_Col_Up
   3818  f7bb		       4c c2 f7 	      jmp	.__Skip_P0_Up
   3819  f7be
   3820  f7be				   .skip52then
   3821  f7be				   .skipL0120
   3822  f7be				   .
   3823  f7be							;
   3824  f7be
   3825  f7be				   .
   3826  f7be							;
   3827  f7be
   3828  f7be				   .
   3829  f7be							;
   3830  f7be
   3831  f7be				   .
   3832  f7be							;
   3833  f7be
   3834  f7be				   .L0121		;  player0y  =  _P0_TEMPY
   3835  f7be
   3836  f7be		       a5 dc		      LDA	_P0_TEMPY
   3837  f7c0		       85 85		      STA	player0y
   3838  f7c2				   .
   3839  f7c2							;
   3840  f7c2
   3841  f7c2				   .__Skip_P0_Up
   3842  f7c2							; __Skip_P0_Up
   3843  f7c2
   3844  f7c2				   .
   3845  f7c2							;
   3846  f7c2
   3847  f7c2				   .
   3848  f7c2							;
   3849  f7c2
   3850  f7c2				   .
   3851  f7c2							;
   3852  f7c2
   3853  f7c2				   .
   3854  f7c2							;
   3855  f7c2
   3856  f7c2				   .
   3857  f7c2							;
   3858  f7c2
   3859  f7c2				   .
   3860  f7c2							;
   3861  f7c2
   3862  f7c2				   .
   3863  f7c2							;
   3864  f7c2
   3865  f7c2				   .
   3866  f7c2							;
   3867  f7c2
   3868  f7c2				   .L0122		;  if _P0_TEMPY  <=  player0y then goto __Skip_P0_Down
   3869  f7c2
   3870  f7c2		       a5 85		      LDA	player0y
   3871  f7c4		       c5 dc		      CMP	_P0_TEMPY
   3872  f7c6		       90 03		      BCC	.skipL0122
   3873  f7c8				   .condpart54
   3874  f7c8		       4c 4c f8 	      jmp	.__Skip_P0_Down
   3875  f7cb
   3876  f7cb				   .skipL0122
   3877  f7cb				   .
   3878  f7cb							;
   3879  f7cb
   3880  f7cb				   .
   3881  f7cb							;
   3882  f7cb
   3883  f7cb				   .
   3884  f7cb							;
   3885  f7cb
   3886  f7cb				   .
   3887  f7cb							;
   3888  f7cb
   3889  f7cb				   .L0123		;  _Bit5_P0_Dir_Down{1}  =  1
   3890  f7cb
   3891  f7cb		       a5 da		      LDA	_Bit5_P0_Dir_Down
   3892  f7cd		       09 02		      ORA	#2
   3893  f7cf		       85 da		      STA	_Bit5_P0_Dir_Down
   3894  f7d1				   .
   3895  f7d1							;
   3896  f7d1
   3897  f7d1				   .
   3898  f7d1							;
   3899  f7d1
   3900  f7d1				   .
   3901  f7d1							;
   3902  f7d1
   3903  f7d1				   .
   3904  f7d1							;
   3905  f7d1
   3906  f7d1				   .L0124		;  if player0y  >=  _P_Edge_Bottom then _Bit1_P0_Col_Down{1} = 1  :  goto __Skip_P0_Down
   3907  f7d1
   3908  f7d1		       a5 85		      LDA	player0y
   3909  f7d3		       c9 58		      CMP	#_P_Edge_Bottom
   3910  f7d5		       90 09		      BCC	.skipL0124
   3911  f7d7				   .condpart55
   3912  f7d7		       a5 da		      LDA	_Bit1_P0_Col_Down
   3913  f7d9		       09 02		      ORA	#2
   3914  f7db		       85 da		      STA	_Bit1_P0_Col_Down
   3915  f7dd		       4c 4c f8 	      jmp	.__Skip_P0_Down
   3916  f7e0
   3917  f7e0				   .skipL0124
   3918  f7e0				   .
   3919  f7e0							;
   3920  f7e0
   3921  f7e0				   .
   3922  f7e0							;
   3923  f7e0
   3924  f7e0				   .
   3925  f7e0							;
   3926  f7e0
   3927  f7e0				   .
   3928  f7e0							;
   3929  f7e0
   3930  f7e0				   .L0125		;  temp5  =   ( player0x - 10 )  / 4
   3931  f7e0
   3932  f7e0							; complex statement detected
   3933  f7e0		       a5 80		      LDA	player0x
   3934  f7e2		       38		      SEC
   3935  f7e3		       e9 0a		      SBC	#10
   3936  f7e5		       4a		      lsr
   3937  f7e6		       4a		      lsr
   3938  f7e7		       85 a0		      STA	temp5
   3939  f7e9				   .
   3940  f7e9							;
   3941  f7e9
   3942  f7e9				   .L0126		;  temp6  =   ( player0y )  / 8
   3943  f7e9
   3944  f7e9							; complex statement detected
   3945  f7e9		       a5 85		      LDA	player0y
   3946  f7eb		       4a		      lsr
   3947  f7ec		       4a		      lsr
   3948  f7ed		       4a		      lsr
   3949  f7ee		       85 a1		      STA	temp6
   3950  f7f0				   .
   3951  f7f0							;
   3952  f7f0
   3953  f7f0				   .L0127		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then _Bit1_P0_Col_Down{1} = 1  :	goto __Skip_P0_Down
   3954  f7f0
   3955  f7f0		       a5 a0		      LDA	temp5
   3956  f7f2		       c9 22		      CMP	#34
   3957  f7f4		       b0 12		      BCS	.skipL0127
   3958  f7f6				   .condpart56
   3959  f7f6		       a5 a0		      LDA	temp5
   3960  f7f8		       a4 a1		      LDY	temp6
   3961  f7fa		       20 d6 f1 	      jsr	pfread
   3962  f7fd		       d0 09		      BNE	.skip56then
   3963  f7ff				   .condpart57
   3964  f7ff		       a5 da		      LDA	_Bit1_P0_Col_Down
   3965  f801		       09 02		      ORA	#2
   3966  f803		       85 da		      STA	_Bit1_P0_Col_Down
   3967  f805		       4c 4c f8 	      jmp	.__Skip_P0_Down
   3968  f808
   3969  f808				   .skip56then
   3970  f808				   .skipL0127
   3971  f808				   .
   3972  f808							;
   3973  f808
   3974  f808				   .L0128		;  temp4  =   ( player0x - 17 )  / 4
   3975  f808
   3976  f808							; complex statement detected
   3977  f808		       a5 80		      LDA	player0x
   3978  f80a		       38		      SEC
   3979  f80b		       e9 11		      SBC	#17
   3980  f80d		       4a		      lsr
   3981  f80e		       4a		      lsr
   3982  f80f		       85 9f		      STA	temp4
   3983  f811				   .
   3984  f811							;
   3985  f811
   3986  f811				   .L0129		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then _Bit1_P0_Col_Down{1} = 1  :	goto __Skip_P0_Down
   3987  f811
   3988  f811		       a5 9f		      LDA	temp4
   3989  f813		       c9 22		      CMP	#34
   3990  f815		       b0 12		      BCS	.skipL0129
   3991  f817				   .condpart58
   3992  f817		       a5 9f		      LDA	temp4
   3993  f819		       a4 a1		      LDY	temp6
   3994  f81b		       20 d6 f1 	      jsr	pfread
   3995  f81e		       d0 09		      BNE	.skip58then
   3996  f820				   .condpart59
   3997  f820		       a5 da		      LDA	_Bit1_P0_Col_Down
   3998  f822		       09 02		      ORA	#2
   3999  f824		       85 da		      STA	_Bit1_P0_Col_Down
   4000  f826		       4c 4c f8 	      jmp	.__Skip_P0_Down
   4001  f829
   4002  f829				   .skip58then
   4003  f829				   .skipL0129
   4004  f829				   .
   4005  f829							;
   4006  f829
   4007  f829				   .L0130		;  temp3  =  temp5  -	1
   4008  f829
   4009  f829		       a5 a0		      LDA	temp5
   4010  f82b		       38		      SEC
   4011  f82c		       e9 01		      SBC	#1
   4012  f82e		       85 9e		      STA	temp3
   4013  f830				   .
   4014  f830							;
   4015  f830
   4016  f830				   .L0131		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then _Bit1_P0_Col_Down{1} = 1  :	goto __Skip_P0_Down
   4017  f830
   4018  f830		       a5 9e		      LDA	temp3
   4019  f832		       c9 22		      CMP	#34
   4020  f834		       b0 12		      BCS	.skipL0131
   4021  f836				   .condpart60
   4022  f836		       a5 9e		      LDA	temp3
   4023  f838		       a4 a1		      LDY	temp6
   4024  f83a		       20 d6 f1 	      jsr	pfread
   4025  f83d		       d0 09		      BNE	.skip60then
   4026  f83f				   .condpart61
   4027  f83f		       a5 da		      LDA	_Bit1_P0_Col_Down
   4028  f841		       09 02		      ORA	#2
   4029  f843		       85 da		      STA	_Bit1_P0_Col_Down
   4030  f845		       4c 4c f8 	      jmp	.__Skip_P0_Down
   4031  f848
   4032  f848				   .skip60then
   4033  f848				   .skipL0131
   4034  f848				   .
   4035  f848							;
   4036  f848
   4037  f848				   .
   4038  f848							;
   4039  f848
   4040  f848				   .
   4041  f848							;
   4042  f848
   4043  f848				   .
   4044  f848							;
   4045  f848
   4046  f848				   .L0132		;  player0y  =  _P0_TEMPY
   4047  f848
   4048  f848		       a5 dc		      LDA	_P0_TEMPY
   4049  f84a		       85 85		      STA	player0y
   4050  f84c				   .
   4051  f84c							;
   4052  f84c
   4053  f84c				   .__Skip_P0_Down
   4054  f84c							; __Skip_P0_Down
   4055  f84c
   4056  f84c				   .
   4057  f84c							;
   4058  f84c
   4059  f84c				   .
   4060  f84c							;
   4061  f84c
   4062  f84c				   .
   4063  f84c							;
   4064  f84c
   4065  f84c				   .
   4066  f84c							;
   4067  f84c
   4068  f84c				   .
   4069  f84c							;
   4070  f84c
   4071  f84c				   .
   4072  f84c							;
   4073  f84c
   4074  f84c				   .
   4075  f84c							;
   4076  f84c
   4077  f84c				   .
   4078  f84c							;
   4079  f84c
   4080  f84c				   .L0133		;  if _P0_TEMPX  >=  player0x then goto __Skip_P0_Left
   4081  f84c
   4082  f84c		       a5 db		      LDA	_P0_TEMPX
   4083  f84e		       c5 80		      CMP	player0x
   4084  f850		       90 03		      BCC	.skipL0133
   4085  f852				   .condpart62
   4086  f852		       4c bb f8 	      jmp	.__Skip_P0_Left
   4087  f855
   4088  f855				   .skipL0133
   4089  f855				   .
   4090  f855							;
   4091  f855
   4092  f855				   .
   4093  f855							;
   4094  f855
   4095  f855				   .
   4096  f855							;
   4097  f855
   4098  f855				   .
   4099  f855							;
   4100  f855
   4101  f855				   .L0134		;  _Bit6_P0_Dir_Left{2}  =  1
   4102  f855
   4103  f855		       a5 da		      LDA	_Bit6_P0_Dir_Left
   4104  f857		       09 04		      ORA	#4
   4105  f859		       85 da		      STA	_Bit6_P0_Dir_Left
   4106  f85b				   .
   4107  f85b							;
   4108  f85b
   4109  f85b				   .
   4110  f85b							;
   4111  f85b
   4112  f85b				   .
   4113  f85b							;
   4114  f85b
   4115  f85b				   .
   4116  f85b							;
   4117  f85b
   4118  f85b				   .L0135		;  if player0x  <=  _P_Edge_Left then _Bit2_P0_Col_Left{2} = 1  :  goto __Skip_P0_Left
   4119  f85b
   4120  f85b		       a9 01		      LDA	#_P_Edge_Left
   4121  f85d		       c5 80		      CMP	player0x
   4122  f85f		       90 09		      BCC	.skipL0135
   4123  f861				   .condpart63
   4124  f861		       a5 da		      LDA	_Bit2_P0_Col_Left
   4125  f863		       09 04		      ORA	#4
   4126  f865		       85 da		      STA	_Bit2_P0_Col_Left
   4127  f867		       4c bb f8 	      jmp	.__Skip_P0_Left
   4128  f86a
   4129  f86a				   .skipL0135
   4130  f86a				   .
   4131  f86a							;
   4132  f86a
   4133  f86a				   .
   4134  f86a							;
   4135  f86a
   4136  f86a				   .
   4137  f86a							;
   4138  f86a
   4139  f86a				   .
   4140  f86a							;
   4141  f86a
   4142  f86a				   .L0136		;  temp5  =   ( player0y - 1 )  / 8
   4143  f86a
   4144  f86a							; complex statement detected
   4145  f86a		       a5 85		      LDA	player0y
   4146  f86c		       38		      SEC
   4147  f86d		       e9 01		      SBC	#1
   4148  f86f		       4a		      lsr
   4149  f870		       4a		      lsr
   4150  f871		       4a		      lsr
   4151  f872		       85 a0		      STA	temp5
   4152  f874				   .
   4153  f874							;
   4154  f874
   4155  f874				   .L0137		;  temp6  =   ( player0x - 18 )  / 4
   4156  f874
   4157  f874							; complex statement detected
   4158  f874		       a5 80		      LDA	player0x
   4159  f876		       38		      SEC
   4160  f877		       e9 12		      SBC	#18
   4161  f879		       4a		      lsr
   4162  f87a		       4a		      lsr
   4163  f87b		       85 a1		      STA	temp6
   4164  f87d				   .
   4165  f87d							;
   4166  f87d
   4167  f87d				   .L0138		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then _Bit2_P0_Col_Left{2} = 1  :	goto __Skip_P0_Left
   4168  f87d
   4169  f87d		       a5 a1		      LDA	temp6
   4170  f87f		       c9 22		      CMP	#34
   4171  f881		       b0 12		      BCS	.skipL0138
   4172  f883				   .condpart64
   4173  f883		       a5 a1		      LDA	temp6
   4174  f885		       a4 a0		      LDY	temp5
   4175  f887		       20 d6 f1 	      jsr	pfread
   4176  f88a		       d0 09		      BNE	.skip64then
   4177  f88c				   .condpart65
   4178  f88c		       a5 da		      LDA	_Bit2_P0_Col_Left
   4179  f88e		       09 04		      ORA	#4
   4180  f890		       85 da		      STA	_Bit2_P0_Col_Left
   4181  f892		       4c bb f8 	      jmp	.__Skip_P0_Left
   4182  f895
   4183  f895				   .skip64then
   4184  f895				   .skipL0138
   4185  f895				   .
   4186  f895							;
   4187  f895
   4188  f895				   .L0139		;  temp3  =   ( player0y - 8 )  / 8
   4189  f895
   4190  f895							; complex statement detected
   4191  f895		       a5 85		      LDA	player0y
   4192  f897		       38		      SEC
   4193  f898		       e9 08		      SBC	#8
   4194  f89a		       4a		      lsr
   4195  f89b		       4a		      lsr
   4196  f89c		       4a		      lsr
   4197  f89d		       85 9e		      STA	temp3
   4198  f89f				   .
   4199  f89f							;
   4200  f89f
   4201  f89f				   .L0140		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then _Bit2_P0_Col_Left{2} = 1  :	goto __Skip_P0_Left
   4202  f89f
   4203  f89f		       a5 a1		      LDA	temp6
   4204  f8a1		       c9 22		      CMP	#34
   4205  f8a3		       b0 12		      BCS	.skipL0140
   4206  f8a5				   .condpart66
   4207  f8a5		       a5 a1		      LDA	temp6
   4208  f8a7		       a4 9e		      LDY	temp3
   4209  f8a9		       20 d6 f1 	      jsr	pfread
   4210  f8ac		       d0 09		      BNE	.skip66then
   4211  f8ae				   .condpart67
   4212  f8ae		       a5 da		      LDA	_Bit2_P0_Col_Left
   4213  f8b0		       09 04		      ORA	#4
   4214  f8b2		       85 da		      STA	_Bit2_P0_Col_Left
   4215  f8b4		       4c bb f8 	      jmp	.__Skip_P0_Left
   4216  f8b7
   4217  f8b7				   .skip66then
   4218  f8b7				   .skipL0140
   4219  f8b7				   .
   4220  f8b7							;
   4221  f8b7
   4222  f8b7				   .
   4223  f8b7							;
   4224  f8b7
   4225  f8b7				   .
   4226  f8b7							;
   4227  f8b7
   4228  f8b7				   .
   4229  f8b7							;
   4230  f8b7
   4231  f8b7				   .L0141		;  player0x  =  _P0_TEMPX
   4232  f8b7
   4233  f8b7		       a5 db		      LDA	_P0_TEMPX
   4234  f8b9		       85 80		      STA	player0x
   4235  f8bb				   .
   4236  f8bb							;
   4237  f8bb
   4238  f8bb				   .__Skip_P0_Left
   4239  f8bb							; __Skip_P0_Left
   4240  f8bb
   4241  f8bb				   .
   4242  f8bb							;
   4243  f8bb
   4244  f8bb				   .
   4245  f8bb							;
   4246  f8bb
   4247  f8bb				   .
   4248  f8bb							;
   4249  f8bb
   4250  f8bb				   .
   4251  f8bb							;
   4252  f8bb
   4253  f8bb				   .
   4254  f8bb							;
   4255  f8bb
   4256  f8bb				   .
   4257  f8bb							;
   4258  f8bb
   4259  f8bb				   .
   4260  f8bb							;
   4261  f8bb
   4262  f8bb				   .
   4263  f8bb							;
   4264  f8bb
   4265  f8bb				   .L0142		;  if _P0_TEMPX  <=  player0x then goto __Skip_P0_Right
   4266  f8bb
   4267  f8bb		       a5 80		      LDA	player0x
   4268  f8bd		       c5 db		      CMP	_P0_TEMPX
   4269  f8bf		       90 03		      BCC	.skipL0142
   4270  f8c1				   .condpart68
   4271  f8c1		       4c 2a f9 	      jmp	.__Skip_P0_Right
   4272  f8c4
   4273  f8c4				   .skipL0142
   4274  f8c4				   .
   4275  f8c4							;
   4276  f8c4
   4277  f8c4				   .
   4278  f8c4							;
   4279  f8c4
   4280  f8c4				   .
   4281  f8c4							;
   4282  f8c4
   4283  f8c4				   .
   4284  f8c4							;
   4285  f8c4
   4286  f8c4				   .L0143		;  _Bit7_P0_Dir_Right{3}  =  1
   4287  f8c4
   4288  f8c4		       a5 da		      LDA	_Bit7_P0_Dir_Right
   4289  f8c6		       09 08		      ORA	#8
   4290  f8c8		       85 da		      STA	_Bit7_P0_Dir_Right
   4291  f8ca				   .
   4292  f8ca							;
   4293  f8ca
   4294  f8ca				   .
   4295  f8ca							;
   4296  f8ca
   4297  f8ca				   .
   4298  f8ca							;
   4299  f8ca
   4300  f8ca				   .
   4301  f8ca							;
   4302  f8ca
   4303  f8ca				   .L0144		;  if player0x  >=  _P_Edge_Right then _Bit3_P0_Col_Right{3} = 1  :  goto __Skip_P0_Right
   4304  f8ca
   4305  f8ca		       a5 80		      LDA	player0x
   4306  f8cc		       c9 99		      CMP	#_P_Edge_Right
   4307  f8ce		       90 09		      BCC	.skipL0144
   4308  f8d0				   .condpart69
   4309  f8d0		       a5 da		      LDA	_Bit3_P0_Col_Right
   4310  f8d2		       09 08		      ORA	#8
   4311  f8d4		       85 da		      STA	_Bit3_P0_Col_Right
   4312  f8d6		       4c 2a f9 	      jmp	.__Skip_P0_Right
   4313  f8d9
   4314  f8d9				   .skipL0144
   4315  f8d9				   .
   4316  f8d9							;
   4317  f8d9
   4318  f8d9				   .
   4319  f8d9							;
   4320  f8d9
   4321  f8d9				   .
   4322  f8d9							;
   4323  f8d9
   4324  f8d9				   .
   4325  f8d9							;
   4326  f8d9
   4327  f8d9				   .L0145		;  temp5  =   ( player0y - 1 )  / 8
   4328  f8d9
   4329  f8d9							; complex statement detected
   4330  f8d9		       a5 85		      LDA	player0y
   4331  f8db		       38		      SEC
   4332  f8dc		       e9 01		      SBC	#1
   4333  f8de		       4a		      lsr
   4334  f8df		       4a		      lsr
   4335  f8e0		       4a		      lsr
   4336  f8e1		       85 a0		      STA	temp5
   4337  f8e3				   .
   4338  f8e3							;
   4339  f8e3
   4340  f8e3				   .L0146		;  temp6  =   ( player0x - 9 )  / 4
   4341  f8e3
   4342  f8e3							; complex statement detected
   4343  f8e3		       a5 80		      LDA	player0x
   4344  f8e5		       38		      SEC
   4345  f8e6		       e9 09		      SBC	#9
   4346  f8e8		       4a		      lsr
   4347  f8e9		       4a		      lsr
   4348  f8ea		       85 a1		      STA	temp6
   4349  f8ec				   .
   4350  f8ec							;
   4351  f8ec
   4352  f8ec				   .L0147		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then _Bit3_P0_Col_Right{3} = 1  :  goto __Skip_P0_Right
   4353  f8ec
   4354  f8ec		       a5 a1		      LDA	temp6
   4355  f8ee		       c9 22		      CMP	#34
   4356  f8f0		       b0 12		      BCS	.skipL0147
   4357  f8f2				   .condpart70
   4358  f8f2		       a5 a1		      LDA	temp6
   4359  f8f4		       a4 a0		      LDY	temp5
   4360  f8f6		       20 d6 f1 	      jsr	pfread
   4361  f8f9		       d0 09		      BNE	.skip70then
   4362  f8fb				   .condpart71
   4363  f8fb		       a5 da		      LDA	_Bit3_P0_Col_Right
   4364  f8fd		       09 08		      ORA	#8
   4365  f8ff		       85 da		      STA	_Bit3_P0_Col_Right
   4366  f901		       4c 2a f9 	      jmp	.__Skip_P0_Right
   4367  f904
   4368  f904				   .skip70then
   4369  f904				   .skipL0147
   4370  f904				   .
   4371  f904							;
   4372  f904
   4373  f904				   .L0148		;  temp3  =   ( player0y - 8 )  / 8
   4374  f904
   4375  f904							; complex statement detected
   4376  f904		       a5 85		      LDA	player0y
   4377  f906		       38		      SEC
   4378  f907		       e9 08		      SBC	#8
   4379  f909		       4a		      lsr
   4380  f90a		       4a		      lsr
   4381  f90b		       4a		      lsr
   4382  f90c		       85 9e		      STA	temp3
   4383  f90e				   .
   4384  f90e							;
   4385  f90e
   4386  f90e				   .L0149		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then _Bit3_P0_Col_Right{3} = 1  :  goto __Skip_P0_Right
   4387  f90e
   4388  f90e		       a5 a1		      LDA	temp6
   4389  f910		       c9 22		      CMP	#34
   4390  f912		       b0 12		      BCS	.skipL0149
   4391  f914				   .condpart72
   4392  f914		       a5 a1		      LDA	temp6
   4393  f916		       a4 9e		      LDY	temp3
   4394  f918		       20 d6 f1 	      jsr	pfread
   4395  f91b		       d0 09		      BNE	.skip72then
   4396  f91d				   .condpart73
   4397  f91d		       a5 da		      LDA	_Bit3_P0_Col_Right
   4398  f91f		       09 08		      ORA	#8
   4399  f921		       85 da		      STA	_Bit3_P0_Col_Right
   4400  f923		       4c 2a f9 	      jmp	.__Skip_P0_Right
   4401  f926
   4402  f926				   .skip72then
   4403  f926				   .skipL0149
   4404  f926				   .
   4405  f926							;
   4406  f926
   4407  f926				   .
   4408  f926							;
   4409  f926
   4410  f926				   .
   4411  f926							;
   4412  f926
   4413  f926				   .
   4414  f926							;
   4415  f926
   4416  f926				   .L0150		;  player0x  =  _P0_TEMPX
   4417  f926
   4418  f926		       a5 db		      LDA	_P0_TEMPX
   4419  f928		       85 80		      STA	player0x
   4420  f92a				   .
   4421  f92a							;
   4422  f92a
   4423  f92a				   .__Skip_P0_Right
   4424  f92a							; __Skip_P0_Right
   4425  f92a
   4426  f92a				   .
   4427  f92a							;
   4428  f92a
   4429  f92a				   .
   4430  f92a							;
   4431  f92a
   4432  f92a				   .
   4433  f92a							;
   4434  f92a
   4435  f92a				   .
   4436  f92a							;
   4437  f92a
   4438  f92a				   .
   4439  f92a							;
   4440  f92a
   4441  f92a				   .
   4442  f92a							;
   4443  f92a
   4444  f92a				   .
   4445  f92a							;
   4446  f92a
   4447  f92a				   .
   4448  f92a							;
   4449  f92a
   4450  f92a				   .L0151		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Bresenham_Setup
   4451  f92a
   4452  f92a		       a9 10		      lda	#$10
   4453  f92c		       2c 80 02 	      bit	SWCHA
   4454  f92f		       f0 14		      BEQ	.skipL0151
   4455  f931				   .condpart74
   4456  f931		       a9 20		      lda	#$20
   4457  f933		       2c 80 02 	      bit	SWCHA
   4458  f936		       f0 0d		      BEQ	.skip74then
   4459  f938				   .condpart75
   4460  f938		       2c 80 02 	      bit	SWCHA
   4461  f93b		       50 08		      BVC	.skip75then
   4462  f93d				   .condpart76
   4463  f93d		       2c 80 02 	      bit	SWCHA
   4464  f940		       10 03		      BPL	.skip76then
   4465  f942				   .condpart77
   4466  f942		       4c ea f9 	      jmp	.__Skip_Bresenham_Setup
   4467  f945
   4468  f945				   .skip76then
   4469  f945				   .skip75then
   4470  f945				   .skip74then
   4471  f945				   .skipL0151
   4472  f945				   .
   4473  f945							;
   4474  f945
   4475  f945				   .__Chase_Setup
   4476  f945							; __Chase_Setup
   4477  f945
   4478  f945				   .
   4479  f945							;
   4480  f945
   4481  f945				   .
   4482  f945							;
   4483  f945
   4484  f945				   .
   4485  f945							;
   4486  f945
   4487  f945				   .
   4488  f945							;
   4489  f945
   4490  f945				   .L0152		;  if player0x  <  player1x then _octant{2}  =  1  :  _delta_x  =  player1x  -  player0x else _octant{2}  =  0  :  _delta_x  =  player0x  -  player1x
   4491  f945
   4492  f945		       a5 80		      LDA	player0x
   4493  f947		       c5 81		      CMP	player1x
   4494  f949		       b0 10		      BCS	.skipL0152
   4495  f94b				   .condpart78
   4496  f94b		       a5 d7		      LDA	_octant
   4497  f94d		       09 04		      ORA	#4
   4498  f94f		       85 d7		      STA	_octant
   4499  f951		       a5 81		      LDA	player1x
   4500  f953		       38		      SEC
   4501  f954		       e5 80		      SBC	player0x
   4502  f956		       85 d6		      STA	_delta_x
   4503  f958		       4c 68 f9 	      jmp	.skipelse0
   4504  f95b				   .skipL0152
   4505  f95b		       a5 d7		      LDA	_octant
   4506  f95d		       29 fb		      AND	#251
   4507  f95f		       85 d7		      STA	_octant
   4508  f961		       a5 80		      LDA	player0x
   4509  f963		       38		      SEC
   4510  f964		       e5 81		      SBC	player1x
   4511  f966		       85 d6		      STA	_delta_x
   4512  f968				   .skipelse0
   4513  f968				   .L0153		;  if player0y  <  player1y then _octant{1}  =  1  :  _delta_y  =  player1y  -  player0y else _octant{1}  =  0  :  _delta_y  =  player0y  -  player1y
   4514  f968
   4515  f968		       a5 85		      LDA	player0y
   4516  f96a		       c5 86		      CMP	player1y
   4517  f96c		       b0 10		      BCS	.skipL0153
   4518  f96e				   .condpart79
   4519  f96e		       a5 d7		      LDA	_octant
   4520  f970		       09 02		      ORA	#2
   4521  f972		       85 d7		      STA	_octant
   4522  f974		       a5 86		      LDA	player1y
   4523  f976		       38		      SEC
   4524  f977		       e5 85		      SBC	player0y
   4525  f979		       85 d5		      STA	_delta_y
   4526  f97b		       4c 8b f9 	      jmp	.skipelse1
   4527  f97e				   .skipL0153
   4528  f97e		       a5 d7		      LDA	_octant
   4529  f980		       29 fd		      AND	#253
   4530  f982		       85 d7		      STA	_octant
   4531  f984		       a5 85		      LDA	player0y
   4532  f986		       38		      SEC
   4533  f987		       e5 86		      SBC	player1y
   4534  f989		       85 d5		      STA	_delta_y
   4535  f98b				   .skipelse1
   4536  f98b				   .
   4537  f98b							;
   4538  f98b
   4539  f98b				   .L0154		;  if _delta_x  <  $80 then _delta_y  =  _delta_y  *  2  :  _delta_x  =  _delta_x  *  2
   4540  f98b
   4541  f98b		       a5 d6		      LDA	_delta_x
   4542  f98d		       c9 80		      CMP	#$80
   4543  f98f		       b0 0a		      BCS	.skipL0154
   4544  f991				   .condpart80
   4545  f991		       a5 d5		      LDA	_delta_y
   4546  f993		       0a		      asl
   4547  f994		       85 d5		      STA	_delta_y
   4548  f996		       a5 d6		      LDA	_delta_x
   4549  f998		       0a		      asl
   4550  f999		       85 d6		      STA	_delta_x
   4551  f99b				   .skipL0154
   4552  f99b				   .
   4553  f99b							;
   4554  f99b
   4555  f99b				   .L0155		;  if _delta_x  >  _delta_y then goto __dx_gt
   4556  f99b
   4557  f99b		       a5 d5		      LDA	_delta_y
   4558  f99d		       c5 d6		      CMP	_delta_x
   4559  f99f		       b0 03		      BCS	.skipL0155
   4560  f9a1				   .condpart81
   4561  f9a1		       4c b8 f9 	      jmp	.__dx_gt
   4562  f9a4
   4563  f9a4				   .skipL0155
   4564  f9a4				   .L0156		;  _octant{0}	=  0
   4565  f9a4
   4566  f9a4		       a5 d7		      LDA	_octant
   4567  f9a6		       29 fe		      AND	#254
   4568  f9a8		       85 d7		      STA	_octant
   4569  f9aa				   .L0157		;  if _error_accumulator  >  _delta_y then _error_accumulator	=  _delta_y  /	2
   4570  f9aa
   4571  f9aa		       a5 d5		      LDA	_delta_y
   4572  f9ac		       c5 d4		      CMP	_error_accumulator
   4573  f9ae		       b0 05		      BCS	.skipL0157
   4574  f9b0				   .condpart82
   4575  f9b0		       a5 d5		      LDA	_delta_y
   4576  f9b2		       4a		      lsr
   4577  f9b3		       85 d4		      STA	_error_accumulator
   4578  f9b5				   .skipL0157
   4579  f9b5				   .L0158		;  goto __set_ea
   4580  f9b5
   4581  f9b5		       4c c9 f9 	      jmp	.__set_ea
   4582  f9b8
   4583  f9b8				   .
   4584  f9b8							;
   4585  f9b8
   4586  f9b8				   .__dx_gt
   4587  f9b8							; __dx_gt
   4588  f9b8
   4589  f9b8				   .L0159		;  _octant{0}	=  1
   4590  f9b8
   4591  f9b8		       a5 d7		      LDA	_octant
   4592  f9ba		       09 01		      ORA	#1
   4593  f9bc		       85 d7		      STA	_octant
   4594  f9be				   .L0160		;  if _error_accumulator  >  _delta_x then _error_accumulator	=  _delta_x  /	2
   4595  f9be
   4596  f9be		       a5 d6		      LDA	_delta_x
   4597  f9c0		       c5 d4		      CMP	_error_accumulator
   4598  f9c2		       b0 05		      BCS	.skipL0160
   4599  f9c4				   .condpart83
   4600  f9c4		       a5 d6		      LDA	_delta_x
   4601  f9c6		       4a		      lsr
   4602  f9c7		       85 d4		      STA	_error_accumulator
   4603  f9c9				   .skipL0160
   4604  f9c9				   .
   4605  f9c9							;
   4606  f9c9
   4607  f9c9				   .__set_ea
   4608  f9c9							; __set_ea
   4609  f9c9
   4610  f9c9				   .
   4611  f9c9							;
   4612  f9c9
   4613  f9c9				   .
   4614  f9c9							;
   4615  f9c9
   4616  f9c9				   .
   4617  f9c9							;
   4618  f9c9
   4619  f9c9				   .
   4620  f9c9							;
   4621  f9c9
   4622  f9c9				   .L0161		;  if !_Bit5_EA{5} then goto __Skip_Bresenham_Setup
   4623  f9c9
   4624  f9c9		       a5 ec		      LDA	_Bit5_EA
   4625  f9cb		       29 20		      AND	#32
   4626  f9cd		       d0 03		      BNE	.skipL0161
   4627  f9cf				   .condpart84
   4628  f9cf		       4c ea f9 	      jmp	.__Skip_Bresenham_Setup
   4629  f9d2
   4630  f9d2				   .skipL0161
   4631  f9d2				   .
   4632  f9d2							;
   4633  f9d2
   4634  f9d2				   .L0162		;  _Bit5_EA{5}  =  0
   4635  f9d2
   4636  f9d2		       a5 ec		      LDA	_Bit5_EA
   4637  f9d4		       29 df		      AND	#223
   4638  f9d6		       85 ec		      STA	_Bit5_EA
   4639  f9d8				   .L0163		;  if _octant{0} then _error_accumulator  =  _delta_x	/  2 else _error_accumulator  =  _delta_y  /  2
   4640  f9d8
   4641  f9d8		       a5 d7		      LDA	_octant
   4642  f9da		       4a		      LSR
   4643  f9db		       90 08		      BCC	.skipL0163
   4644  f9dd				   .condpart85
   4645  f9dd		       a5 d6		      LDA	_delta_x
   4646  f9df		       4a		      lsr
   4647  f9e0		       85 d4		      STA	_error_accumulator
   4648  f9e2		       4c ea f9 	      jmp	.skipelse2
   4649  f9e5				   .skipL0163
   4650  f9e5		       a5 d5		      LDA	_delta_y
   4651  f9e7		       4a		      lsr
   4652  f9e8		       85 d4		      STA	_error_accumulator
   4653  f9ea				   .skipelse2
   4654  f9ea				   .
   4655  f9ea							;
   4656  f9ea
   4657  f9ea				   .__Skip_Bresenham_Setup
   4658  f9ea							; __Skip_Bresenham_Setup
   4659  f9ea
   4660  f9ea				   .
   4661  f9ea							;
   4662  f9ea
   4663  f9ea				   .
   4664  f9ea							;
   4665  f9ea
   4666  f9ea				   .
   4667  f9ea							;
   4668  f9ea
   4669  f9ea				   .
   4670  f9ea							;
   4671  f9ea
   4672  f9ea				   .
   4673  f9ea							;
   4674  f9ea
   4675  f9ea				   .L0164		;  COLUP1  =  $9C
   4676  f9ea
   4677  f9ea		       a9 9c		      LDA	#$9C
   4678  f9ec		       85 07		      STA	COLUP1
   4679  f9ee				   .
   4680  f9ee							;
   4681  f9ee
   4682  f9ee				   .
   4683  f9ee							;
   4684  f9ee
   4685  f9ee				   .
   4686  f9ee							;
   4687  f9ee
   4688  f9ee				   .
   4689  f9ee							;
   4690  f9ee
   4691  f9ee				   .
   4692  f9ee							;
   4693  f9ee
   4694  f9ee				   .
   4695  f9ee							;
   4696  f9ee
   4697  f9ee				   .
   4698  f9ee							;
   4699  f9ee
   4700  f9ee				   .L0165		;  COLUP0  =  $46
   4701  f9ee
   4702  f9ee		       a9 46		      LDA	#$46
   4703  f9f0		       85 06		      STA	COLUP0
   4704  f9f2				   .
   4705  f9f2							;
   4706  f9f2
   4707  f9f2				   .
   4708  f9f2							;
   4709  f9f2
   4710  f9f2				   .
   4711  f9f2							;
   4712  f9f2
   4713  f9f2				   .
   4714  f9f2							;
   4715  f9f2
   4716  f9f2				   .
   4717  f9f2							;
   4718  f9f2
   4719  f9f2				   .
   4720  f9f2							;
   4721  f9f2
   4722  f9f2				   .
   4723  f9f2							;
   4724  f9f2
   4725  f9f2				   .L0166		;  drawscreen
   4726  f9f2
   4727  f9f2		       20 2c f3 	      jsr	drawscreen
   4728  f9f5				   .
   4729  f9f5							;
   4730  f9f5
   4731  f9f5				   .
   4732  f9f5							;
   4733  f9f5
   4734  f9f5				   .
   4735  f9f5							;
   4736  f9f5
   4737  f9f5				   .
   4738  f9f5							;
   4739  f9f5
   4740  f9f5				   .
   4741  f9f5							;
   4742  f9f5
   4743  f9f5				   .
   4744  f9f5							;
   4745  f9f5
   4746  f9f5				   .
   4747  f9f5							;
   4748  f9f5
   4749  f9f5				   .
   4750  f9f5							;
   4751  f9f5
   4752  f9f5				   .
   4753  f9f5							;
   4754  f9f5
   4755  f9f5				   .
   4756  f9f5							;
   4757  f9f5
   4758  f9f5				   .
   4759  f9f5							;
   4760  f9f5
   4761  f9f5				   .
   4762  f9f5							;
   4763  f9f5
   4764  f9f5				   .
   4765  f9f5							;
   4766  f9f5
   4767  f9f5				   .
   4768  f9f5							;
   4769  f9f5
   4770  f9f5				   .
   4771  f9f5							;
   4772  f9f5
   4773  f9f5				   .L0167		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   4774  f9f5
   4775  f9f5		       a9 01		      lda	#1
   4776  f9f7		       2c 82 02 	      bit	SWCHB
   4777  f9fa		       f0 09		      BEQ	.skipL0167
   4778  f9fc				   .condpart86
   4779  f9fc		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4780  f9fe		       29 fe		      AND	#254
   4781  fa00		       85 ec		      STA	_Bit0_Reset_Restrainer
   4782  fa02		       4c 99 f4 	      jmp	.__Main_Loop
   4783  fa05
   4784  fa05				   .skipL0167
   4785  fa05				   .
   4786  fa05							;
   4787  fa05
   4788  fa05				   .
   4789  fa05							;
   4790  fa05
   4791  fa05				   .
   4792  fa05							;
   4793  fa05
   4794  fa05				   .
   4795  fa05							;
   4796  fa05
   4797  fa05				   .
   4798  fa05							;
   4799  fa05
   4800  fa05				   .L0168		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   4801  fa05
   4802  fa05		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4803  fa07		       4a		      LSR
   4804  fa08		       90 03		      BCC	.skipL0168
   4805  fa0a				   .condpart87
   4806  fa0a		       4c 99 f4 	      jmp	.__Main_Loop
   4807  fa0d
   4808  fa0d				   .skipL0168
   4809  fa0d				   .
   4810  fa0d							;
   4811  fa0d
   4812  fa0d				   .
   4813  fa0d							;
   4814  fa0d
   4815  fa0d				   .
   4816  fa0d							;
   4817  fa0d
   4818  fa0d				   .
   4819  fa0d							;
   4820  fa0d
   4821  fa0d				   .L0169		;  goto __Start_Restart
   4822  fa0d
   4823  fa0d		       4c cc f3 	      jmp	.__Start_Restart
   4824  fa10
   4825  fa10				   .
   4826  fa10							;
   4827  fa10
   4828  fa10				   .
   4829  fa10							;
   4830  fa10
   4831  fa10				   .
   4832  fa10							;
   4833  fa10
   4834  fa10				   .
   4835  fa10							;
   4836  fa10
   4837  fa10				   .
   4838  fa10							;
   4839  fa10
   4840  fa10				   .
   4841  fa10							;
   4842  fa10
   4843  fa10				   .
   4844  fa10							;
   4845  fa10
   4846  fa10				   .
   4847  fa10							;
   4848  fa10
   4849  fa10				   .
   4850  fa10							;
   4851  fa10
   4852  fa10				   .
   4853  fa10							;
   4854  fa10
   4855  fa10				   .
   4856  fa10							;
   4857  fa10
   4858  fa10				   .
   4859  fa10							;
   4860  fa10
   4861  fa10				   .
   4862  fa10							;
   4863  fa10
   4864  fa10				   .
   4865  fa10							;
   4866  fa10
   4867  fa10				   .
   4868  fa10							;
   4869  fa10
   4870  fa10				   .
   4871  fa10							;
   4872  fa10
   4873  fa10				   .
   4874  fa10							;
   4875  fa10
   4876  fa10				   .
   4877  fa10							;
   4878  fa10
   4879  fa10				   .
   4880  fa10							;
   4881  fa10
   4882  fa10				   .
   4883  fa10							;
   4884  fa10
   4885  fa10				   .
   4886  fa10							;
   4887  fa10
   4888  fa10				   .L0170		;  data _Data_yinc
   4889  fa10
   4890  fa10				   _Data_yinc
   4891  fa10		       ff ff 01 01*	      .byte.b	$FF, $FF, $01, $01, $FF, $FF,$01, $01
   4892  fa18
   4893  fa18				   .skipL0170
   4894  fa18				   .
   4895  fa18							;
   4896  fa18
   4897  fa18				   .L0171		;  data _Data_xinc
   4898  fa18
   4899  fa18				   _Data_xinc
   4900  fa18		       ff ff ff ff*	      .byte.b	$FF, $FF, $FF, $FF, $01, $01, $01, $01
   4901  fa20
   4902  fa20				   .skipL0171
   4903  fa20				  -	      if	(<*) > (<(*+7))
   4904  fa20				  -	      repeat	($100-<*)
   4905  fa20				  -	      .byte	0
   4906  fa20				  -	      repend
   4907  fa20					      endif
   4908  fa20				   playerL045_1
   4909  fa20		       24		      .byte.b	%00100100
   4910  fa21		       24		      .byte.b	%00100100
   4911  fa22		       24		      .byte.b	%00100100
   4912  fa23		       99		      .byte.b	%10011001
   4913  fa24		       5a		      .byte.b	%01011010
   4914  fa25		       3c		      .byte.b	%00111100
   4915  fa26		       18		      .byte.b	%00011000
   4916  fa27		       18		      .byte.b	%00011000
   4917  fa28				  -	      if	(<*) > (<(*+7))
   4918  fa28				  -	      repeat	($100-<*)
   4919  fa28				  -	      .byte	0
   4920  fa28				  -	      repend
   4921  fa28					      endif
   4922  fa28				   playerL046_0
   4923  fa28		       66		      .byte.b	%01100110
   4924  fa29		       24		      .byte.b	%00100100
   4925  fa2a		       99		      .byte.b	%10011001
   4926  fa2b		       bd		      .byte.b	%10111101
   4927  fa2c		       7e		      .byte.b	%01111110
   4928  fa2d		       18		      .byte.b	%00011000
   4929  fa2e		       3c		      .byte.b	%00111100
   4930  fa2f		       24		      .byte.b	%00100100
   4931  fa30					      if	ECHOFIRST
      1388 bytes of ROM space left
   4932  fa30					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4933  fa30					      endif
   4934  fa30		       00 01	   ECHOFIRST  =	1
   4935  fa30
   4936  fa30
   4937  fa30
   4938  fa30							; feel free to modify the score graphics - just keep each digit 8 high
   4939  fa30							; and keep the conditional compilation stuff intact
   4940  fa30				  -	      ifconst	ROM2k
   4941  fa30				  -	      ORG	$F7AC-8
   4942  fa30					      else
   4943  fa30				  -	      ifconst	bankswitch
   4944  fa30				  -	      if	bankswitch == 8
   4945  fa30				  -	      ORG	$2F94-bscode_length
   4946  fa30				  -	      RORG	$FF94-bscode_length
   4947  fa30				  -	      endif
   4948  fa30				  -	      if	bankswitch == 16
   4949  fa30				  -	      ORG	$4F94-bscode_length
   4950  fa30				  -	      RORG	$FF94-bscode_length
   4951  fa30				  -	      endif
   4952  fa30				  -	      if	bankswitch == 32
   4953  fa30				  -	      ORG	$8F94-bscode_length
   4954  fa30				  -	      RORG	$FF94-bscode_length
   4955  fa30				  -	      endif
   4956  fa30				  -	      if	bankswitch == 64
   4957  fa30				  -	      ORG	$10F80-bscode_length
   4958  fa30				  -	      RORG	$1FF80-bscode_length
   4959  fa30				  -	      endif
   4960  fa30					      else
   4961  ff9c					      ORG	$FF9C
   4962  ff9c					      endif
   4963  ff9c					      endif
   4964  ff9c
   4965  ff9c							; font equates
   4966  ff9c		       00 01	   .21stcentury =	1
   4967  ff9c		       00 02	   alarmclock =	2
   4968  ff9c		       00 03	   handwritten =	3
   4969  ff9c		       00 04	   interrupted =	4
   4970  ff9c		       00 05	   retroputer =	5
   4971  ff9c		       00 06	   whimsey    =	6
   4972  ff9c		       00 07	   tiny       =	7
   4973  ff9c
   4974  ff9c				   scoretable
   4975  ff9c
   4976  ff9c				  -	      ifconst	font
   4977  ff9c				  -	      if	font == .21stcentury
   4978  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4979  ff9c				  -	      endif
   4980  ff9c				  -	      if	font == alarmclock
   4981  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4982  ff9c				  -	      endif
   4983  ff9c				  -	      if	font == handwritten
   4984  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4985  ff9c				  -	      endif
   4986  ff9c				  -	      if	font == interrupted
   4987  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4988  ff9c				  -	      endif
   4989  ff9c				  -	      if	font == retroputer
   4990  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4991  ff9c				  -	      endif
   4992  ff9c				  -	      if	font == whimsey
   4993  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4994  ff9c				  -	      endif
   4995  ff9c				  -	      if	font == tiny
   4996  ff9c				  -	      include	"score_graphics.asm.tiny"
   4997  ff9c				  -	      endif
   4998  ff9c					      else		; default font
   4999  ff9c
   5000  ff9c		       3c		      .byte.b	%00111100
   5001  ff9d		       66		      .byte.b	%01100110
   5002  ff9e		       66		      .byte.b	%01100110
   5003  ff9f		       66		      .byte.b	%01100110
   5004  ffa0		       66		      .byte.b	%01100110
   5005  ffa1		       66		      .byte.b	%01100110
   5006  ffa2		       66		      .byte.b	%01100110
   5007  ffa3		       3c		      .byte.b	%00111100
   5008  ffa4
   5009  ffa4		       7e		      .byte.b	%01111110
   5010  ffa5		       18		      .byte.b	%00011000
   5011  ffa6		       18		      .byte.b	%00011000
   5012  ffa7		       18		      .byte.b	%00011000
   5013  ffa8		       18		      .byte.b	%00011000
   5014  ffa9		       38		      .byte.b	%00111000
   5015  ffaa		       18		      .byte.b	%00011000
   5016  ffab		       08		      .byte.b	%00001000
   5017  ffac
   5018  ffac		       7e		      .byte.b	%01111110
   5019  ffad		       60		      .byte.b	%01100000
   5020  ffae		       60		      .byte.b	%01100000
   5021  ffaf		       3c		      .byte.b	%00111100
   5022  ffb0		       06		      .byte.b	%00000110
   5023  ffb1		       06		      .byte.b	%00000110
   5024  ffb2		       46		      .byte.b	%01000110
   5025  ffb3		       3c		      .byte.b	%00111100
   5026  ffb4
   5027  ffb4		       3c		      .byte.b	%00111100
   5028  ffb5		       46		      .byte.b	%01000110
   5029  ffb6		       06		      .byte.b	%00000110
   5030  ffb7		       06		      .byte.b	%00000110
   5031  ffb8		       1c		      .byte.b	%00011100
   5032  ffb9		       06		      .byte.b	%00000110
   5033  ffba		       46		      .byte.b	%01000110
   5034  ffbb		       3c		      .byte.b	%00111100
   5035  ffbc
   5036  ffbc		       0c		      .byte.b	%00001100
   5037  ffbd		       0c		      .byte.b	%00001100
   5038  ffbe		       7e		      .byte.b	%01111110
   5039  ffbf		       4c		      .byte.b	%01001100
   5040  ffc0		       4c		      .byte.b	%01001100
   5041  ffc1		       2c		      .byte.b	%00101100
   5042  ffc2		       1c		      .byte.b	%00011100
   5043  ffc3		       0c		      .byte.b	%00001100
   5044  ffc4
   5045  ffc4		       3c		      .byte.b	%00111100
   5046  ffc5		       46		      .byte.b	%01000110
   5047  ffc6		       06		      .byte.b	%00000110
   5048  ffc7		       06		      .byte.b	%00000110
   5049  ffc8		       3c		      .byte.b	%00111100
   5050  ffc9		       60		      .byte.b	%01100000
   5051  ffca		       60		      .byte.b	%01100000
   5052  ffcb		       7e		      .byte.b	%01111110
   5053  ffcc
   5054  ffcc		       3c		      .byte.b	%00111100
   5055  ffcd		       66		      .byte.b	%01100110
   5056  ffce		       66		      .byte.b	%01100110
   5057  ffcf		       66		      .byte.b	%01100110
   5058  ffd0		       7c		      .byte.b	%01111100
   5059  ffd1		       60		      .byte.b	%01100000
   5060  ffd2		       62		      .byte.b	%01100010
   5061  ffd3		       3c		      .byte.b	%00111100
   5062  ffd4
   5063  ffd4		       30		      .byte.b	%00110000
   5064  ffd5		       30		      .byte.b	%00110000
   5065  ffd6		       30		      .byte.b	%00110000
   5066  ffd7		       18		      .byte.b	%00011000
   5067  ffd8		       0c		      .byte.b	%00001100
   5068  ffd9		       06		      .byte.b	%00000110
   5069  ffda		       42		      .byte.b	%01000010
   5070  ffdb		       3e		      .byte.b	%00111110
   5071  ffdc
   5072  ffdc		       3c		      .byte.b	%00111100
   5073  ffdd		       66		      .byte.b	%01100110
   5074  ffde		       66		      .byte.b	%01100110
   5075  ffdf		       66		      .byte.b	%01100110
   5076  ffe0		       3c		      .byte.b	%00111100
   5077  ffe1		       66		      .byte.b	%01100110
   5078  ffe2		       66		      .byte.b	%01100110
   5079  ffe3		       3c		      .byte.b	%00111100
   5080  ffe4
   5081  ffe4		       3c		      .byte.b	%00111100
   5082  ffe5		       46		      .byte.b	%01000110
   5083  ffe6		       06		      .byte.b	%00000110
   5084  ffe7		       3e		      .byte.b	%00111110
   5085  ffe8		       66		      .byte.b	%01100110
   5086  ffe9		       66		      .byte.b	%01100110
   5087  ffea		       66		      .byte.b	%01100110
   5088  ffeb		       3c		      .byte.b	%00111100
   5089  ffec
   5090  ffec					      ifnconst	DPC_kernel_options
   5091  ffec
   5092  ffec		       00		      .byte.b	%00000000
   5093  ffed		       00		      .byte.b	%00000000
   5094  ffee		       00		      .byte.b	%00000000
   5095  ffef		       00		      .byte.b	%00000000
   5096  fff0		       00		      .byte.b	%00000000
   5097  fff1		       00		      .byte.b	%00000000
   5098  fff2		       00		      .byte.b	%00000000
   5099  fff3		       00		      .byte.b	%00000000
   5100  fff4
   5101  fff4					      endif
   5102  fff4
   5103  fff4					      endif
   5104  fff4
   5105  fff4				  -	      ifconst	ROM2k
   5106  fff4				  -	      ORG	$F7FC
   5107  fff4					      else
   5108  fff4				  -	      ifconst	bankswitch
   5109  fff4				  -	      if	bankswitch == 8
   5110  fff4				  -	      ORG	$2FF4-bscode_length
   5111  fff4				  -	      RORG	$FFF4-bscode_length
   5112  fff4				  -	      endif
   5113  fff4				  -	      if	bankswitch == 16
   5114  fff4				  -	      ORG	$4FF4-bscode_length
   5115  fff4				  -	      RORG	$FFF4-bscode_length
   5116  fff4				  -	      endif
   5117  fff4				  -	      if	bankswitch == 32
   5118  fff4				  -	      ORG	$8FF4-bscode_length
   5119  fff4				  -	      RORG	$FFF4-bscode_length
   5120  fff4				  -	      endif
   5121  fff4				  -	      if	bankswitch == 64
   5122  fff4				  -	      ORG	$10FE0-bscode_length
   5123  fff4				  -	      RORG	$1FFE0-bscode_length
   5124  fff4				  -	      endif
   5125  fff4					      else
   5126  fffc					      ORG	$FFFC
   5127  fffc					      endif
   5128  fffc					      endif
   5129  fffc				  -	      ifconst	bankswitch
   5130  fffc				  -	      if	bankswitch == 8
   5131  fffc				  -	      ORG	$2FFC
   5132  fffc				  -	      RORG	$FFFC
   5133  fffc				  -	      endif
   5134  fffc				  -	      if	bankswitch == 16
   5135  fffc				  -	      ORG	$4FFC
   5136  fffc				  -	      RORG	$FFFC
   5137  fffc				  -	      endif
   5138  fffc				  -	      if	bankswitch == 32
   5139  fffc				  -	      ORG	$8FFC
   5140  fffc				  -	      RORG	$FFFC
   5141  fffc				  -	      endif
   5142  fffc				  -	      if	bankswitch == 64
   5143  fffc				  -	      ORG	$10FF0
   5144  fffc				  -	      RORG	$1FFF0
   5145  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5146  fffc				  -	      ORG	$10FF8
   5147  fffc				  -	      RORG	$1FFF8
   5148  fffc				  -	      ifconst	superchip
   5149  fffc				  -	      .byte	"E","F","S","C"
   5150  fffc				  -	      else
   5151  fffc				  -	      .byte	"E","F","E","F"
   5152  fffc				  -	      endif
   5153  fffc				  -	      ORG	$10FFC
   5154  fffc				  -	      RORG	$1FFFC
   5155  fffc				  -	      endif
   5156  fffc					      else
   5157  fffc				  -	      ifconst	ROM2k
   5158  fffc				  -	      ORG	$F7FC
   5159  fffc					      else
   5160  fffc					      ORG	$FFFC
   5161  fffc					      endif
   5162  fffc					      endif
   5163  fffc		       00 f0		      .word.w	start
   5164  fffe		       00 f0		      .word.w	start
