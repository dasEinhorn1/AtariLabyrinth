------- FILE LabLevel1.bas.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 9f	    _M_Edge_Right =	159
      4  10000 ????
      5  10000 ????		00 02	    _M_Edge_Left =	2
      6  10000 ????
      7  10000 ????		00 58	    _M_Edge_Bottom =	88
      8  10000 ????
      9  10000 ????		00 02	    _M_Edge_Top =	2
     10  10000 ????
     11  10000 ????		00 a0	    _B_Edge_Right =	160
     12  10000 ????
     13  10000 ????		00 02	    _B_Edge_Left =	2
     14  10000 ????
     15  10000 ????		00 58	    _B_Edge_Bottom =	88
     16  10000 ????
     17  10000 ????		00 02	    _B_Edge_Top =	2
     18  10000 ????
     19  10000 ????		00 99	    _P_Edge_Right =	153
     20  10000 ????
     21  10000 ????		00 01	    _P_Edge_Left =	1
     22  10000 ????
     23  10000 ????		00 58	    _P_Edge_Bottom =	88
     24  10000 ????
     25  10000 ????		00 09	    _P_Edge_Top =	9
     26  10000 ????
     27  10000 ????		00 ed	    rand16     =	z
     28  10000 ????
     29  10000 ????		00 ec	    _Bit7_M0_Moving =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit4_Toggle_Screen =	y
     32  10000 ????
     33  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     34  10000 ????
     35  10000 ????		00 ec	    _BitOp_01  =	y
     36  10000 ????
     37  10000 ????		00 db	    _Bit4_Ball_Hit_UD =	h
     38  10000 ????
     39  10000 ????		00 db	    _Bit3_Ball_Dir_Right =	h
     40  10000 ????
     41  10000 ????		00 db	    _Bit2_Ball_Dir_Left =	h
     42  10000 ????
     43  10000 ????		00 db	    _Bit1_Ball_Dir_Down =	h
     44  10000 ????
     45  10000 ????		00 db	    _Bit0_Ball_Dir_Up =	h
     46  10000 ????
     47  10000 ????		00 db	    _BitOp_Ball_Dir =	h
     48  10000 ????
     49  10000 ????		00 30	    _Minotaur_Awareness_Size =	48
     50  10000 ????
     51  10000 ????		00 de	    _Bit7_M1_Dir_Right =	k
     52  10000 ????
     53  10000 ????		00 de	    _Bit6_M1_Dir_Left =	k
     54  10000 ????
     55  10000 ????		00 de	    _Bit5_M1_Dir_Down =	k
     56  10000 ????
     57  10000 ????		00 de	    _Bit4_M1_Dir_Up =	k
     58  10000 ????
     59  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     60  10000 ????
     61  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     64  10000 ????
     65  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     66  10000 ????
     67  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     68  10000 ????
     69  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     74  10000 ????
     75  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     76  10000 ????
     77  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     78  10000 ????
     79  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     82  10000 ????
     83  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     84  10000 ????
     85  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     86  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE LabLevel1.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 9f	    _M_Edge_Right =	159
      4  10000 ????
      5  10000 ????		00 02	    _M_Edge_Left =	2
      6  10000 ????
      7  10000 ????		00 58	    _M_Edge_Bottom =	88
      8  10000 ????
      9  10000 ????		00 02	    _M_Edge_Top =	2
     10  10000 ????
     11  10000 ????		00 a0	    _B_Edge_Right =	160
     12  10000 ????
     13  10000 ????		00 02	    _B_Edge_Left =	2
     14  10000 ????
     15  10000 ????		00 58	    _B_Edge_Bottom =	88
     16  10000 ????
     17  10000 ????		00 02	    _B_Edge_Top =	2
     18  10000 ????
     19  10000 ????		00 99	    _P_Edge_Right =	153
     20  10000 ????
     21  10000 ????		00 01	    _P_Edge_Left =	1
     22  10000 ????
     23  10000 ????		00 58	    _P_Edge_Bottom =	88
     24  10000 ????
     25  10000 ????		00 09	    _P_Edge_Top =	9
     26  10000 ????
     27  10000 ????		00 ed	    rand16     =	z
     28  10000 ????
     29  10000 ????		00 ec	    _Bit7_M0_Moving =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit4_Toggle_Screen =	y
     32  10000 ????
     33  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     34  10000 ????
     35  10000 ????		00 ec	    _BitOp_01  =	y
     36  10000 ????
     37  10000 ????		00 db	    _Bit4_Ball_Hit_UD =	h
     38  10000 ????
     39  10000 ????		00 db	    _Bit3_Ball_Dir_Right =	h
     40  10000 ????
     41  10000 ????		00 db	    _Bit2_Ball_Dir_Left =	h
     42  10000 ????
     43  10000 ????		00 db	    _Bit1_Ball_Dir_Down =	h
     44  10000 ????
     45  10000 ????		00 db	    _Bit0_Ball_Dir_Up =	h
     46  10000 ????
     47  10000 ????		00 db	    _BitOp_Ball_Dir =	h
     48  10000 ????
     49  10000 ????		00 30	    _Minotaur_Awareness_Size =	48
     50  10000 ????
     51  10000 ????		00 de	    _Bit7_M1_Dir_Right =	k
     52  10000 ????
     53  10000 ????		00 de	    _Bit6_M1_Dir_Left =	k
     54  10000 ????
     55  10000 ????		00 de	    _Bit5_M1_Dir_Down =	k
     56  10000 ????
     57  10000 ????		00 de	    _Bit4_M1_Dir_Up =	k
     58  10000 ????
     59  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     60  10000 ????
     61  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     64  10000 ????
     65  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     66  10000 ????
     67  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     68  10000 ????
     69  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     74  10000 ????
     75  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     76  10000 ????
     77  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     78  10000 ????
     79  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     82  10000 ????
     83  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     84  10000 ????
     85  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     86  10000 ????
------- FILE LabLevel1.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 61 f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x 
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8 
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6					      ifconst	rand16
   1369  f3b6		       26 ed		      rol	rand16
   1370  f3b8					      endif
   1371  f3b8		       90 02		      bcc	noeor
   1372  f3ba		       49 b4		      eor	#$B4
   1373  f3bc				   noeor
   1374  f3bc		       85 a2		      sta	rand
   1375  f3be					      ifconst	rand16
   1376  f3be		       45 ed		      eor	rand16
   1377  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1379  f3c1				   drawscreen
   1380  f3c1				  -	      ifconst	debugscore
   1381  f3c1				  -	      ldx	#14
   1382  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3c1				  -
   1384  f3c1				  -	      ifconst	mincycles
   1385  f3c1				  -	      lda	mincycles
   1386  f3c1				  -	      cmp	INTIM
   1387  f3c1				  -	      lda	mincycles
   1388  f3c1				  -	      bcc	nochange
   1389  f3c1				  -	      lda	INTIM
   1390  f3c1				  -	      sta	mincycles
   1391  f3c1				  -nochange
   1392  f3c1				  -	      endif
   1393  f3c1				  -
   1394  f3c1				  -			; cmp #$2B
   1395  f3c1				  -			; bcs no_cycles_left
   1396  f3c1				  -	      bmi	cycles_left
   1397  f3c1				  -	      ldx	#64
   1398  f3c1				  -	      eor	#$ff	;make negative
   1399  f3c1				  -cycles_left
   1400  f3c1				  -	      stx	scorecolor
   1401  f3c1				  -	      and	#$7f	; clear sign bit
   1402  f3c1				  -	      tax
   1403  f3c1				  -	      lda	scorebcd,x
   1404  f3c1				  -	      sta	score+2
   1405  f3c1				  -	      lda	scorebcd1,x
   1406  f3c1				  -	      sta	score+1
   1407  f3c1				  -	      jmp	done_debugscore
   1408  f3c1				  -scorebcd
   1409  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3c1				  -scorebcd1
   1414  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3c1				  -done_debugscore
   1419  f3c1					      endif
   1420  f3c1
   1421  f3c1				  -	      ifconst	debugcycles
   1422  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3c1				  -			; cmp #$2B
   1424  f3c1				  -			; BCC overscan
   1425  f3c1				  -	      bmi	overscan
   1426  f3c1				  -	      sta	COLUBK
   1427  f3c1				  -	      bcs	doneoverscan
   1428  f3c1					      endif
   1429  f3c1
   1430  f3c1				   overscan
   1431  f3c1				  -	      ifconst	interlaced
   1432  f3c1				  -	      PHP
   1433  f3c1				  -	      PLA
   1434  f3c1				  -	      EOR	#4	; flip interrupt bit
   1435  f3c1				  -	      PHA
   1436  f3c1				  -	      PLP
   1437  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1438  f3c1				  -	      TAX		; save it for later
   1439  f3c1					      endif
   1440  f3c1
   1441  f3c1				   overscanloop
   1442  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c4		       30 fb		      bmi	overscanloop
   1444  f3c6				   doneoverscan
   1445  f3c6
   1446  f3c6							;do VSYNC
   1447  f3c6
   1448  f3c6				  -	      ifconst	interlaced
   1449  f3c6				  -	      CPX	#4
   1450  f3c6				  -	      BNE	oddframevsync
   1451  f3c6					      endif
   1452  f3c6
   1453  f3c6		       a9 02		      lda	#2
   1454  f3c8		       85 02		      sta	WSYNC
   1455  f3ca		       85 00		      sta	VSYNC
   1456  f3cc		       85 02		      STA	WSYNC
   1457  f3ce		       85 02		      STA	WSYNC
   1458  f3d0		       4a		      lsr
   1459  f3d1		       85 02		      STA	WSYNC
   1460  f3d3		       85 00		      STA	VSYNC
   1461  f3d5		       85 01		      sta	VBLANK
   1462  f3d7					      ifnconst	overscan_time
   1463  f3d7		       a9 a5		      lda	#37+128
   1464  f3d9				  -	      else
   1465  f3d9				  -	      lda	#overscan_time+128
   1466  f3d9					      endif
   1467  f3d9		       8d 96 02 	      sta	TIM64T
   1468  f3dc
   1469  f3dc				  -	      ifconst	interlaced
   1470  f3dc				  -	      jmp	postsync
   1471  f3dc				  -
   1472  f3dc				  -oddframevsync
   1473  f3dc				  -	      sta	WSYNC
   1474  f3dc				  -
   1475  f3dc				  -	      LDA	($80,X)	; 11 waste
   1476  f3dc				  -	      LDA	($80,X)	; 11 waste
   1477  f3dc				  -	      LDA	($80,X)	; 11 waste
   1478  f3dc				  -
   1479  f3dc				  -	      lda	#2
   1480  f3dc				  -	      sta	VSYNC
   1481  f3dc				  -	      sta	WSYNC
   1482  f3dc				  -	      sta	WSYNC
   1483  f3dc				  -	      sta	WSYNC
   1484  f3dc				  -
   1485  f3dc				  -	      LDA	($80,X)	; 11 waste
   1486  f3dc				  -	      LDA	($80,X)	; 11 waste
   1487  f3dc				  -	      LDA	($80,X)	; 11 waste
   1488  f3dc				  -
   1489  f3dc				  -	      lda	#0
   1490  f3dc				  -	      sta	VSYNC
   1491  f3dc				  -	      sta	VBLANK
   1492  f3dc				  -	      ifnconst	overscan_time
   1493  f3dc				  -	      lda	#37+128
   1494  f3dc				  -	      else
   1495  f3dc				  -	      lda	#overscan_time+128
   1496  f3dc				  -	      endif
   1497  f3dc				  -	      sta	TIM64T
   1498  f3dc				  -
   1499  f3dc				  -postsync
   1500  f3dc					      endif
   1501  f3dc
   1502  f3dc				  -	      ifconst	legacy
   1503  f3dc				  -	      if	legacy < 100
   1504  f3dc				  -	      ldx	#4
   1505  f3dc				  -adjustloop
   1506  f3dc				  -	      lda	player0x,x
   1507  f3dc				  -	      sec
   1508  f3dc				  -	      sbc	#14	;?
   1509  f3dc				  -	      sta	player0x,x
   1510  f3dc				  -	      dex
   1511  f3dc				  -	      bpl	adjustloop
   1512  f3dc				  -	      endif
   1513  f3dc					      endif
   1514  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3dc				  -	      repeat	($fa-(<*))
   1516  f3dc				  -	      nop
   1517  f3dc				  -	      repend
   1518  f3dc					      endif
   1519  f3dc		       85 02		      sta	WSYNC
   1520  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1522  f3e2				   HorPosLoop		; 5
   1523  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e4		       38		      sec		;+2 11
   1525  f3e5				   DivideLoop
   1526  f3e5		       e9 0f		      sbc	#15
   1527  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1529  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1530  f3ed		       85 02		      sta	WSYNC
   1531  f3ef		       ca		      dex
   1532  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3f2							; 4
   1534  f3f2
   1535  f3f2		       a2 04		      ldx	#4
   1536  f3f4		       b4 9c		      ldy	temp1,X
   1537  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1538  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1539  f3fb
   1540  f3fb		       ca		      dex
   1541  f3fc		       b4 9c		      ldy	temp1,X
   1542  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1543  f401		       95 20		      sta	HMP0,X	;+14 32
   1544  f403
   1545  f403		       ca		      dex
   1546  f404		       b4 9c		      ldy	temp1,X
   1547  f406		       b9 52 f3 	      lda	repostable-256,Y
   1548  f409		       95 20		      sta	HMP0,X	;+14 46
   1549  f40b
   1550  f40b		       ca		      dex
   1551  f40c		       b4 9c		      ldy	temp1,X
   1552  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1553  f411		       95 20		      sta	HMP0,X	;+14 60
   1554  f413
   1555  f413		       ca		      dex
   1556  f414		       b4 9c		      ldy	temp1,X
   1557  f416		       b9 52 f3 	      lda	repostable-256,Y
   1558  f419		       95 20		      sta	HMP0,X	;+14 74
   1559  f41b
   1560  f41b		       85 02		      sta	WSYNC
   1561  f41d
   1562  f41d		       85 2a		      sta	HMOVE	;+3 3
   1563  f41f
   1564  f41f
   1565  f41f				  -	      ifconst	legacy
   1566  f41f				  -	      if	legacy < 100
   1567  f41f				  -	      ldx	#4
   1568  f41f				  -adjustloop2
   1569  f41f				  -	      lda	player0x,x
   1570  f41f				  -	      clc
   1571  f41f				  -	      adc	#14	;?
   1572  f41f				  -	      sta	player0x,x
   1573  f41f				  -	      dex
   1574  f41f				  -	      bpl	adjustloop2
   1575  f41f				  -	      endif
   1576  f41f					      endif
   1577  f41f
   1578  f41f
   1579  f41f
   1580  f41f
   1581  f41f							;set score pointers
   1582  f41f		       a7 95		      lax	score+2
   1583  f421		       20 52 f4 	      jsr	scorepointerset
   1584  f424		       84 9b		      sty	scorepointers+5
   1585  f426		       86 98		      stx	scorepointers+2
   1586  f428		       a7 94		      lax	score+1
   1587  f42a		       20 52 f4 	      jsr	scorepointerset
   1588  f42d		       84 9a		      sty	scorepointers+4
   1589  f42f		       86 97		      stx	scorepointers+1
   1590  f431		       a7 93		      lax	score
   1591  f433		       20 52 f4 	      jsr	scorepointerset
   1592  f436		       84 99		      sty	scorepointers+3
   1593  f438		       86 96		      stx	scorepointers
   1594  f43a
   1595  f43a				   vblk
   1596  f43a							; run possible vblank bB code
   1597  f43a				  -	      ifconst	vblank_bB_code
   1598  f43a				  -	      jsr	vblank_bB_code
   1599  f43a					      endif
   1600  f43a				   vblk2
   1601  f43a		       ad 84 02 	      LDA	INTIM
   1602  f43d		       30 fb		      bmi	vblk2
   1603  f43f		       4c 34 f0 	      jmp	kernel
   1604  f442
   1605  f442
   1606  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f452				   repostable
   1609  f452
   1610  f452				   scorepointerset
   1611  f452		       29 0f		      and	#$0F
   1612  f454		       0a		      asl
   1613  f455		       0a		      asl
   1614  f456		       0a		      asl
   1615  f457		       69 9c		      adc	#<scoretable
   1616  f459		       a8		      tay
   1617  f45a		       8a		      txa
   1618  f45b							; and #$F0
   1619  f45b							; lsr
   1620  f45b		       4b f0		      asr	#$F0
   1621  f45d		       69 9c		      adc	#<scoretable
   1622  f45f		       aa		      tax
   1623  f460		       60		      rts
   1624  f461				   game
   1625  f461				   .
   1626  f461							;
   1627  f461
   1628  f461				   .
   1629  f461							;
   1630  f461
   1631  f461				   .
   1632  f461							;
   1633  f461
   1634  f461				   .
   1635  f461							;
   1636  f461
   1637  f461				   .
   1638  f461							;
   1639  f461
   1640  f461				   .
   1641  f461							;
   1642  f461
   1643  f461				   .
   1644  f461							;
   1645  f461
   1646  f461				   .
   1647  f461							;
   1648  f461
   1649  f461				   .
   1650  f461							;
   1651  f461
   1652  f461				   .
   1653  f461							;
   1654  f461
   1655  f461				   .
   1656  f461							;
   1657  f461
   1658  f461				   .
   1659  f461							;
   1660  f461
   1661  f461				   .
   1662  f461							;
   1663  f461
   1664  f461				   .
   1665  f461							;
   1666  f461
   1667  f461				   .
   1668  f461							;
   1669  f461
   1670  f461				   .
   1671  f461							;
   1672  f461
   1673  f461				   .
   1674  f461							;
   1675  f461
   1676  f461				   .
   1677  f461							;
   1678  f461
   1679  f461				   .
   1680  f461							;
   1681  f461
   1682  f461				   .
   1683  f461							;
   1684  f461
   1685  f461				   .
   1686  f461							;
   1687  f461
   1688  f461				   .
   1689  f461							;
   1690  f461
   1691  f461				   .
   1692  f461							;
   1693  f461
   1694  f461				   .
   1695  f461							;
   1696  f461
   1697  f461				   .
   1698  f461							;
   1699  f461
   1700  f461				   .
   1701  f461							;
   1702  f461
   1703  f461				   .
   1704  f461							;
   1705  f461
   1706  f461				   .
   1707  f461							;
   1708  f461
   1709  f461				   .
   1710  f461							;
   1711  f461
   1712  f461				   .
   1713  f461							;
   1714  f461
   1715  f461				   .
   1716  f461							;
   1717  f461
   1718  f461				   .
   1719  f461							;
   1720  f461
   1721  f461				   .
   1722  f461							;
   1723  f461
   1724  f461				   .
   1725  f461							;
   1726  f461
   1727  f461				   .
   1728  f461							;
   1729  f461
   1730  f461				   .
   1731  f461							;
   1732  f461
   1733  f461				   .
   1734  f461							;
   1735  f461
   1736  f461				   .
   1737  f461							;
   1738  f461
   1739  f461				   .
   1740  f461							;
   1741  f461
   1742  f461				   .
   1743  f461							;
   1744  f461
   1745  f461				   .
   1746  f461							;
   1747  f461
   1748  f461				   .
   1749  f461							;
   1750  f461
   1751  f461				   .
   1752  f461							;
   1753  f461
   1754  f461				   .
   1755  f461							;
   1756  f461
   1757  f461				   .
   1758  f461							;
   1759  f461
   1760  f461				   .
   1761  f461							;
   1762  f461
   1763  f461				   .
   1764  f461							;
   1765  f461
   1766  f461				   .
   1767  f461							;
   1768  f461
   1769  f461				   .
   1770  f461							;
   1771  f461
   1772  f461				   .
   1773  f461							;
   1774  f461
   1775  f461				   .
   1776  f461							;
   1777  f461
   1778  f461				   .
   1779  f461							;
   1780  f461
   1781  f461				   .
   1782  f461							;
   1783  f461
   1784  f461				   .L00 		;  dim _BitOp_P0_M0_Dir  =  g
   1785  f461
   1786  f461				   .L01 		;  dim _Bit0_P0_Dir_Up  =  g
   1787  f461
   1788  f461				   .L02 		;  dim _Bit1_P0_Dir_Down  =  g
   1789  f461
   1790  f461				   .L03 		;  dim _Bit2_P0_Dir_Left  =  g
   1791  f461
   1792  f461				   .L04 		;  dim _Bit3_P0_Dir_Right  =  g
   1793  f461
   1794  f461				   .L05 		;  dim _Bit4_M0_Dir_Up  =  g
   1795  f461
   1796  f461				   .L06 		;  dim _Bit5_M0_Dir_Down  =  g
   1797  f461
   1798  f461				   .L07 		;  dim _Bit6_M0_Dir_Left  =  g
   1799  f461
   1800  f461				   .L08 		;  dim _Bit7_M0_Dir_Right  =  g
   1801  f461
   1802  f461				   .
   1803  f461							;
   1804  f461
   1805  f461				   .
   1806  f461							;
   1807  f461
   1808  f461				   .
   1809  f461							;
   1810  f461
   1811  f461				   .L09 		;  dim _BitOp_P1_M1_Dir  =  k
   1812  f461
   1813  f461				   .L010		;  dim _Bit0_P1_Dir_Up  =  k
   1814  f461
   1815  f461				   .L011		;  dim _Bit1_P1_Dir_Down  =  k
   1816  f461
   1817  f461				   .L012		;  dim _Bit2_P1_Dir_Left  =  k
   1818  f461
   1819  f461				   .L013		;  dim _Bit3_P1_Dir_Right  =  k
   1820  f461
   1821  f461				   .L014		;  dim _Bit4_M1_Dir_Up  =  k
   1822  f461
   1823  f461				   .L015		;  dim _Bit5_M1_Dir_Down  =  k
   1824  f461
   1825  f461				   .L016		;  dim _Bit6_M1_Dir_Left  =  k
   1826  f461
   1827  f461				   .L017		;  dim _Bit7_M1_Dir_Right  =  k
   1828  f461
   1829  f461				   .
   1830  f461							;
   1831  f461
   1832  f461				   .
   1833  f461							;
   1834  f461
   1835  f461				   .
   1836  f461							;
   1837  f461
   1838  f461				   .
   1839  f461							;
   1840  f461
   1841  f461				   .L018		;  const _Minotaur_Awareness_Size  =  48
   1842  f461
   1843  f461				   .
   1844  f461							;
   1845  f461
   1846  f461				   .
   1847  f461							;
   1848  f461
   1849  f461				   .
   1850  f461							;
   1851  f461
   1852  f461				   .
   1853  f461							;
   1854  f461
   1855  f461				   .L019		;  dim _BitOp_Ball_Dir  =  h
   1856  f461
   1857  f461				   .L020		;  dim _Bit0_Ball_Dir_Up  =  h
   1858  f461
   1859  f461				   .L021		;  dim _Bit1_Ball_Dir_Down  =	h
   1860  f461
   1861  f461				   .L022		;  dim _Bit2_Ball_Dir_Left  =	h
   1862  f461
   1863  f461				   .L023		;  dim _Bit3_Ball_Dir_Right  =  h
   1864  f461
   1865  f461				   .L024		;  dim _Bit4_Ball_Hit_UD  =  h
   1866  f461
   1867  f461				   .
   1868  f461							;
   1869  f461
   1870  f461				   .
   1871  f461							;
   1872  f461
   1873  f461				   .
   1874  f461							;
   1875  f461
   1876  f461				   .
   1877  f461							;
   1878  f461
   1879  f461				   .L025		;  dim _BitOp_01  =  y
   1880  f461
   1881  f461				   .L026		;  dim _Bit0_Reset_Restrainer	=  y
   1882  f461
   1883  f461				   .L027		;  dim _Bit4_Toggle_Screen  =	y
   1884  f461
   1885  f461				   .L028		;  dim _Bit7_M0_Moving  =  y
   1886  f461
   1887  f461				   .
   1888  f461							;
   1889  f461
   1890  f461				   .
   1891  f461							;
   1892  f461
   1893  f461				   .
   1894  f461							;
   1895  f461
   1896  f461				   .
   1897  f461							;
   1898  f461
   1899  f461				   .L029		;  dim rand16	=  z
   1900  f461
   1901  f461				   .
   1902  f461							;
   1903  f461
   1904  f461				   .
   1905  f461							;
   1906  f461
   1907  f461				   .
   1908  f461							;
   1909  f461
   1910  f461				   .
   1911  f461							;
   1912  f461
   1913  f461				   .
   1914  f461							;
   1915  f461
   1916  f461				   .
   1917  f461							;
   1918  f461
   1919  f461				   .
   1920  f461							;
   1921  f461
   1922  f461				   .
   1923  f461							;
   1924  f461
   1925  f461				   .
   1926  f461							;
   1927  f461
   1928  f461				   .L030		;  const _P_Edge_Top  =  9
   1929  f461
   1930  f461				   .L031		;  const _P_Edge_Bottom  =  88
   1931  f461
   1932  f461				   .L032		;  const _P_Edge_Left	=  1
   1933  f461
   1934  f461				   .L033		;  const _P_Edge_Right  =  153
   1935  f461
   1936  f461				   .
   1937  f461							;
   1938  f461
   1939  f461				   .
   1940  f461							;
   1941  f461
   1942  f461				   .
   1943  f461							;
   1944  f461
   1945  f461				   .
   1946  f461							;
   1947  f461
   1948  f461				   .
   1949  f461							;
   1950  f461
   1951  f461				   .
   1952  f461							;
   1953  f461
   1954  f461				   .
   1955  f461							;
   1956  f461
   1957  f461				   .
   1958  f461							;
   1959  f461
   1960  f461				   .L034		;  const _B_Edge_Top  =  2
   1961  f461
   1962  f461				   .L035		;  const _B_Edge_Bottom  =  88
   1963  f461
   1964  f461				   .L036		;  const _B_Edge_Left	=  2
   1965  f461
   1966  f461				   .L037		;  const _B_Edge_Right  =  160
   1967  f461
   1968  f461				   .
   1969  f461							;
   1970  f461
   1971  f461				   .
   1972  f461							;
   1973  f461
   1974  f461				   .
   1975  f461							;
   1976  f461
   1977  f461				   .
   1978  f461							;
   1979  f461
   1980  f461				   .
   1981  f461							;
   1982  f461
   1983  f461				   .
   1984  f461							;
   1985  f461
   1986  f461				   .
   1987  f461							;
   1988  f461
   1989  f461				   .
   1990  f461							;
   1991  f461
   1992  f461				   .
   1993  f461							;
   1994  f461
   1995  f461				   .L038		;  const _M_Edge_Top  =  2
   1996  f461
   1997  f461				   .L039		;  const _M_Edge_Bottom  =  88
   1998  f461
   1999  f461				   .L040		;  const _M_Edge_Left	=  2
   2000  f461
   2001  f461				   .L041		;  const _M_Edge_Right  =  159
   2002  f461
   2003  f461				   .
   2004  f461							;
   2005  f461
   2006  f461				   .
   2007  f461							;
   2008  f461
   2009  f461				   .
   2010  f461							;
   2011  f461
   2012  f461				   .
   2013  f461							;
   2014  f461
   2015  f461				   .
   2016  f461							;
   2017  f461
   2018  f461				   .
   2019  f461							;
   2020  f461
   2021  f461				   .
   2022  f461							;
   2023  f461
   2024  f461				   .__Start_Restart
   2025  f461							; __Start_Restart
   2026  f461
   2027  f461				   .
   2028  f461							;
   2029  f461
   2030  f461				   .
   2031  f461							;
   2032  f461
   2033  f461				   .
   2034  f461							;
   2035  f461
   2036  f461				   .
   2037  f461							;
   2038  f461
   2039  f461				   .
   2040  f461							;
   2041  f461
   2042  f461				   .
   2043  f461							;
   2044  f461
   2045  f461				   .L042		;  AUDV0  =  0  :  AUDV1  =  0
   2046  f461
   2047  f461		       a9 00		      LDA	#0
   2048  f463		       85 19		      STA	AUDV0
   2049  f465		       85 1a		      STA	AUDV1
   2050  f467				   .
   2051  f467							;
   2052  f467
   2053  f467				   .
   2054  f467							;
   2055  f467
   2056  f467				   .
   2057  f467							;
   2058  f467
   2059  f467				   .
   2060  f467							;
   2061  f467
   2062  f467				   .
   2063  f467							;
   2064  f467
   2065  f467				   .
   2066  f467							;
   2067  f467
   2068  f467				   .
   2069  f467							;
   2070  f467
   2071  f467				   .
   2072  f467							;
   2073  f467
   2074  f467				   .
   2075  f467							;
   2076  f467
   2077  f467				   .L043		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2078  f467
   2079  f467		       a9 00		      LDA	#0
   2080  f469		       85 d4		      STA	a
   2081  f46b		       85 d5		      STA	b
   2082  f46d		       85 d6		      STA	c
   2083  f46f		       85 d7		      STA	d
   2084  f471		       85 d8		      STA	e
   2085  f473		       85 d9		      STA	f
   2086  f475		       85 da		      STA	g
   2087  f477		       85 db		      STA	h
   2088  f479		       85 dc		      STA	i
   2089  f47b				   .L044		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2090  f47b
   2091  f47b		       a9 00		      LDA	#0
   2092  f47d		       85 dd		      STA	j
   2093  f47f		       85 de		      STA	k
   2094  f481		       85 df		      STA	l
   2095  f483		       85 e0		      STA	m
   2096  f485		       85 e1		      STA	n
   2097  f487		       85 e2		      STA	o
   2098  f489		       85 e3		      STA	p
   2099  f48b		       85 e4		      STA	q
   2100  f48d		       85 e5		      STA	r
   2101  f48f				   .L045		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2102  f48f
   2103  f48f		       a9 00		      LDA	#0
   2104  f491		       85 e6		      STA	s
   2105  f493		       85 e7		      STA	t
   2106  f495		       85 e8		      STA	u
   2107  f497		       85 e9		      STA	v
   2108  f499		       85 ea		      STA	w
   2109  f49b		       85 eb		      STA	x
   2110  f49d				   .
   2111  f49d							;
   2112  f49d
   2113  f49d				   .
   2114  f49d							;
   2115  f49d
   2116  f49d				   .
   2117  f49d							;
   2118  f49d
   2119  f49d				   .
   2120  f49d							;
   2121  f49d
   2122  f49d				   .
   2123  f49d							;
   2124  f49d
   2125  f49d				   .
   2126  f49d							;
   2127  f49d
   2128  f49d				   .
   2129  f49d							;
   2130  f49d
   2131  f49d				   .
   2132  f49d							;
   2133  f49d
   2134  f49d				   .L046		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2135  f49d
   2136  f49d		       a5 ec		      LDA	_BitOp_01
   2137  f49f		       29 10		      AND	#%00010000
   2138  f4a1		       85 ec		      STA	_BitOp_01
   2139  f4a3				   .
   2140  f4a3							;
   2141  f4a3
   2142  f4a3				   .
   2143  f4a3							;
   2144  f4a3
   2145  f4a3				   .
   2146  f4a3							;
   2147  f4a3
   2148  f4a3				   .
   2149  f4a3							;
   2150  f4a3
   2151  f4a3				   .
   2152  f4a3							;
   2153  f4a3
   2154  f4a3				   .
   2155  f4a3							;
   2156  f4a3
   2157  f4a3				   .L047		;  player0x  =  77  :	player0y  =  60
   2158  f4a3
   2159  f4a3		       a9 4d		      LDA	#77
   2160  f4a5		       85 80		      STA	player0x
   2161  f4a7		       a9 3c		      LDA	#60
   2162  f4a9		       85 85		      STA	player0y
   2163  f4ab				   .L048		;  player1x  =  21  :	player1y  =  16
   2164  f4ab
   2165  f4ab		       a9 15		      LDA	#21
   2166  f4ad		       85 81		      STA	player1x
   2167  f4af		       a9 10		      LDA	#16
   2168  f4b1		       85 86		      STA	player1y
   2169  f4b3				   .
   2170  f4b3							;
   2171  f4b3
   2172  f4b3				   .
   2173  f4b3							;
   2174  f4b3
   2175  f4b3				   .
   2176  f4b3							;
   2177  f4b3
   2178  f4b3				   .
   2179  f4b3							;
   2180  f4b3
   2181  f4b3				   .
   2182  f4b3							;
   2183  f4b3
   2184  f4b3				   .L049		;  missile0x  =  200  :  missile0y  =	200
   2185  f4b3
   2186  f4b3		       a9 c8		      LDA	#200
   2187  f4b5		       85 82		      STA	missile0x
   2188  f4b7		       85 91		      STA	missile0y
   2189  f4b9				   .
   2190  f4b9							;
   2191  f4b9
   2192  f4b9				   .
   2193  f4b9							;
   2194  f4b9
   2195  f4b9				   .
   2196  f4b9							;
   2197  f4b9
   2198  f4b9				   .
   2199  f4b9							;
   2200  f4b9
   2201  f4b9				   .
   2202  f4b9							;
   2203  f4b9
   2204  f4b9				   .
   2205  f4b9							;
   2206  f4b9
   2207  f4b9				   .L050		;  NUSIZ0  =  $10  :  missile0height  =  1
   2208  f4b9
   2209  f4b9		       a9 10		      LDA	#$10
   2210  f4bb		       85 04		      STA	NUSIZ0
   2211  f4bd		       a9 01		      LDA	#1
   2212  f4bf		       85 90		      STA	missile0height
   2213  f4c1				   .
   2214  f4c1							;
   2215  f4c1
   2216  f4c1				   .
   2217  f4c1							;
   2218  f4c1
   2219  f4c1				   .
   2220  f4c1							;
   2221  f4c1
   2222  f4c1				   .
   2223  f4c1							;
   2224  f4c1
   2225  f4c1				   .
   2226  f4c1							;
   2227  f4c1
   2228  f4c1				   .
   2229  f4c1							;
   2230  f4c1
   2231  f4c1				   .L051		;  COLUPF  =  $2C
   2232  f4c1
   2233  f4c1		       a9 2c		      LDA	#$2C
   2234  f4c3		       85 08		      STA	COLUPF
   2235  f4c5				   .
   2236  f4c5							;
   2237  f4c5
   2238  f4c5				   .
   2239  f4c5							;
   2240  f4c5
   2241  f4c5				   .
   2242  f4c5							;
   2243  f4c5
   2244  f4c5				   .
   2245  f4c5							;
   2246  f4c5
   2247  f4c5				   .
   2248  f4c5							;
   2249  f4c5
   2250  f4c5				   .
   2251  f4c5							;
   2252  f4c5
   2253  f4c5				   .L052		;  COLUBK  =  0
   2254  f4c5
   2255  f4c5		       a9 00		      LDA	#0
   2256  f4c7		       85 09		      STA	COLUBK
   2257  f4c9				   .
   2258  f4c9							;
   2259  f4c9
   2260  f4c9				   .
   2261  f4c9							;
   2262  f4c9
   2263  f4c9				   .
   2264  f4c9							;
   2265  f4c9
   2266  f4c9				   .
   2267  f4c9							;
   2268  f4c9
   2269  f4c9				   .
   2270  f4c9							;
   2271  f4c9
   2272  f4c9				   .
   2273  f4c9							;
   2274  f4c9
   2275  f4c9				   .L053		;  CTRLPF  =  $11  :  ballheight  =  2
   2276  f4c9
   2277  f4c9		       a9 11		      LDA	#$11
   2278  f4cb		       85 0a		      STA	CTRLPF
   2279  f4cd		       a9 02		      LDA	#2
   2280  f4cf		       85 92		      STA	ballheight
   2281  f4d1				   .
   2282  f4d1							;
   2283  f4d1
   2284  f4d1				   .
   2285  f4d1							;
   2286  f4d1
   2287  f4d1				   .
   2288  f4d1							;
   2289  f4d1
   2290  f4d1				   .
   2291  f4d1							;
   2292  f4d1
   2293  f4d1				   .
   2294  f4d1							;
   2295  f4d1
   2296  f4d1				   .
   2297  f4d1							;
   2298  f4d1
   2299  f4d1				   .L054		;  ballx  =   ( rand / 2 )   +   ( rand & 15 )   +   ( rand / 32 )   +  5  :  bally  =  9
   2300  f4d1
   2301  f4d1							; complex statement detected
   2302  f4d1		       20 b3 f3 	      jsr	randomize
   2303  f4d4		       4a		      lsr
   2304  f4d5		       48		      PHA
   2305  f4d6		       20 b3 f3 	      jsr	randomize
   2306  f4d9		       29 0f		      AND	#15
   2307  f4db		       ba		      TSX
   2308  f4dc		       e8		      INX
   2309  f4dd		       9a		      TXS
   2310  f4de		       18		      CLC
   2311  f4df		       75 00		      ADC	$00,x
   2312  f4e1		       48		      PHA
   2313  f4e2		       20 b3 f3 	      jsr	randomize
   2314  f4e5		       4a		      lsr
   2315  f4e6		       4a		      lsr
   2316  f4e7		       4a		      lsr
   2317  f4e8		       4a		      lsr
   2318  f4e9		       4a		      lsr
   2319  f4ea		       ba		      TSX
   2320  f4eb		       e8		      INX
   2321  f4ec		       9a		      TXS
   2322  f4ed		       18		      CLC
   2323  f4ee		       75 00		      ADC	$00,x
   2324  f4f0		       18		      CLC
   2325  f4f1		       69 05		      ADC	#5
   2326  f4f3		       85 84		      STA	ballx
   2327  f4f5		       a9 09		      LDA	#9
   2328  f4f7		       85 89		      STA	bally
   2329  f4f9				   .
   2330  f4f9							;
   2331  f4f9
   2332  f4f9				   .
   2333  f4f9							;
   2334  f4f9
   2335  f4f9				   .
   2336  f4f9							;
   2337  f4f9
   2338  f4f9				   .
   2339  f4f9							;
   2340  f4f9
   2341  f4f9				   .
   2342  f4f9							;
   2343  f4f9
   2344  f4f9				   .
   2345  f4f9							;
   2346  f4f9
   2347  f4f9				   .
   2348  f4f9							;
   2349  f4f9
   2350  f4f9				   .L055		;  _Bit2_Ball_Dir_Left{2}  =  1  :  _Bit3_Ball_Dir_Right{3}  =  0
   2351  f4f9
   2352  f4f9		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   2353  f4fb		       09 04		      ORA	#4
   2354  f4fd		       85 db		      STA	_Bit2_Ball_Dir_Left
   2355  f4ff		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   2356  f501		       29 f7		      AND	#247
   2357  f503		       85 db		      STA	_Bit3_Ball_Dir_Right
   2358  f505				   .
   2359  f505							;
   2360  f505
   2361  f505				   .L056		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Ball_Dir_Left{2}  =	0  :  _Bit3_Ball_Dir_Right{3}  =  1
   2362  f505
   2363  f505		       20 b3 f3 	      jsr	randomize
   2364  f508		       85 a0		      STA	temp5
   2365  f50a		       a5 a0		      LDA	temp5
   2366  f50c		       c9 80		      CMP	#128
   2367  f50e		       b0 0c		      BCS	.skipL056
   2368  f510				   .condpart0
   2369  f510		       a5 db		      LDA	_Bit2_Ball_Dir_Left
   2370  f512		       29 fb		      AND	#251
   2371  f514		       85 db		      STA	_Bit2_Ball_Dir_Left
   2372  f516		       a5 db		      LDA	_Bit3_Ball_Dir_Right
   2373  f518		       09 08		      ORA	#8
   2374  f51a		       85 db		      STA	_Bit3_Ball_Dir_Right
   2375  f51c				   .skipL056
   2376  f51c				   .
   2377  f51c							;
   2378  f51c
   2379  f51c				   .
   2380  f51c							;
   2381  f51c
   2382  f51c				   .
   2383  f51c							;
   2384  f51c
   2385  f51c				   .
   2386  f51c							;
   2387  f51c
   2388  f51c				   .
   2389  f51c							;
   2390  f51c
   2391  f51c				   .
   2392  f51c							;
   2393  f51c
   2394  f51c				   .L057		;  _Bit1_Ball_Dir_Down{1}  =  1
   2395  f51c
   2396  f51c		       a5 db		      LDA	_Bit1_Ball_Dir_Down
   2397  f51e		       09 02		      ORA	#2
   2398  f520		       85 db		      STA	_Bit1_Ball_Dir_Down
   2399  f522				   .
   2400  f522							;
   2401  f522
   2402  f522				   .
   2403  f522							;
   2404  f522
   2405  f522				   .
   2406  f522							;
   2407  f522
   2408  f522				   .
   2409  f522							;
   2410  f522
   2411  f522				   .
   2412  f522							;
   2413  f522
   2414  f522				   .
   2415  f522							;
   2416  f522
   2417  f522				   .
   2418  f522							;
   2419  f522
   2420  f522				   .L058		;  _Bit3_P0_Dir_Right{3}  =  1
   2421  f522
   2422  f522		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2423  f524		       09 08		      ORA	#8
   2424  f526		       85 da		      STA	_Bit3_P0_Dir_Right
   2425  f528				   .
   2426  f528							;
   2427  f528
   2428  f528				   .
   2429  f528							;
   2430  f528
   2431  f528				   .
   2432  f528							;
   2433  f528
   2434  f528				   .
   2435  f528							;
   2436  f528
   2437  f528				   .
   2438  f528							;
   2439  f528
   2440  f528				   .
   2441  f528							;
   2442  f528
   2443  f528				   .
   2444  f528							;
   2445  f528
   2446  f528				   .
   2447  f528							;
   2448  f528
   2449  f528				   .
   2450  f528							;
   2451  f528
   2452  f528				   .L059		;  _Bit0_Reset_Restrainer{0}  =  1
   2453  f528
   2454  f528		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2455  f52a		       09 01		      ORA	#1
   2456  f52c		       85 ec		      STA	_Bit0_Reset_Restrainer
   2457  f52e				   .
   2458  f52e							;
   2459  f52e
   2460  f52e				   .L060		;  playfield:
   2461  f52e
   2462  f52e				  -	      ifconst	pfres
   2463  f52e				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2464  f52e					      else
   2465  f52e		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2466  f530					      endif
   2467  f530		       4c 5f f5 	      jmp	pflabel0
   2468  f533				   PF_data0
   2469  f533		       ff ff		      .byte.b	%11111111, %11111111
   2470  f535					      if	(pfwidth>2)
   2471  f535		       ff ff		      .byte.b	%11111111, %11111111
   2472  f537					      endif
   2473  f537		       80 00		      .byte.b	%10000000, %00000000
   2474  f539					      if	(pfwidth>2)
   2475  f539		       00 80		      .byte.b	%00000000, %10000000
   2476  f53b					      endif
   2477  f53b		       80 00		      .byte.b	%10000000, %00000000
   2478  f53d					      if	(pfwidth>2)
   2479  f53d		       00 80		      .byte.b	%00000000, %10000000
   2480  f53f					      endif
   2481  f53f		       80 00		      .byte.b	%10000000, %00000000
   2482  f541					      if	(pfwidth>2)
   2483  f541		       00 80		      .byte.b	%00000000, %10000000
   2484  f543					      endif
   2485  f543		       80 00		      .byte.b	%10000000, %00000000
   2486  f545					      if	(pfwidth>2)
   2487  f545		       00 80		      .byte.b	%00000000, %10000000
   2488  f547					      endif
   2489  f547		       80 80		      .byte.b	%10000000, %10000000
   2490  f549					      if	(pfwidth>2)
   2491  f549		       80 80		      .byte.b	%10000000, %10000000
   2492  f54b					      endif
   2493  f54b		       80 00		      .byte.b	%10000000, %00000000
   2494  f54d					      if	(pfwidth>2)
   2495  f54d		       00 80		      .byte.b	%00000000, %10000000
   2496  f54f					      endif
   2497  f54f		       80 00		      .byte.b	%10000000, %00000000
   2498  f551					      if	(pfwidth>2)
   2499  f551		       00 80		      .byte.b	%00000000, %10000000
   2500  f553					      endif
   2501  f553		       80 00		      .byte.b	%10000000, %00000000
   2502  f555					      if	(pfwidth>2)
   2503  f555		       00 80		      .byte.b	%00000000, %10000000
   2504  f557					      endif
   2505  f557		       80 00		      .byte.b	%10000000, %00000000
   2506  f559					      if	(pfwidth>2)
   2507  f559		       00 80		      .byte.b	%00000000, %10000000
   2508  f55b					      endif
   2509  f55b		       ff ff		      .byte.b	%11111111, %11111111
   2510  f55d					      if	(pfwidth>2)
   2511  f55d		       ff ff		      .byte.b	%11111111, %11111111
   2512  f55f					      endif
   2513  f55f				   pflabel0
   2514  f55f		       bd 33 f5 	      lda	PF_data0,x
   2515  f562		       95 a4		      sta	playfield,x
   2516  f564		       ca		      dex
   2517  f565		       10 f8		      bpl	pflabel0
   2518  f567				   .
   2519  f567							;
   2520  f567
   2521  f567				   .L061		;  player0:
   2522  f567
   2523  f567		       a2 61		      LDX	#<playerL061_0
   2524  f569		       86 8a		      STX	player0pointerlo
   2525  f56b		       a9 fa		      LDA	#>playerL061_0
   2526  f56d		       85 8b		      STA	player0pointerhi
   2527  f56f		       a9 07		      LDA	#7
   2528  f571		       85 8e		      STA	player0height
   2529  f573				   .
   2530  f573							;
   2531  f573
   2532  f573				   .L062		;  player1:
   2533  f573
   2534  f573		       a2 69		      LDX	#<playerL062_1
   2535  f575		       86 8c		      STX	player1pointerlo
   2536  f577		       a9 fa		      LDA	#>playerL062_1
   2537  f579		       85 8d		      STA	player1pointerhi
   2538  f57b		       a9 07		      LDA	#7
   2539  f57d		       85 8f		      STA	player1height
   2540  f57f				   .
   2541  f57f							;
   2542  f57f
   2543  f57f				   .
   2544  f57f							;
   2545  f57f
   2546  f57f				   .
   2547  f57f							;
   2548  f57f
   2549  f57f				   .
   2550  f57f							;
   2551  f57f
   2552  f57f				   .
   2553  f57f							;
   2554  f57f
   2555  f57f				   .
   2556  f57f							;
   2557  f57f
   2558  f57f				   .
   2559  f57f							;
   2560  f57f
   2561  f57f				   .
   2562  f57f							;
   2563  f57f
   2564  f57f				   .
   2565  f57f							;
   2566  f57f
   2567  f57f				   .__Main_Loop
   2568  f57f							; __Main_Loop
   2569  f57f
   2570  f57f				   .
   2571  f57f							;
   2572  f57f
   2573  f57f				   .
   2574  f57f							;
   2575  f57f
   2576  f57f				   .
   2577  f57f							;
   2578  f57f
   2579  f57f				   .
   2580  f57f							;
   2581  f57f
   2582  f57f				   .
   2583  f57f							;
   2584  f57f
   2585  f57f				   .
   2586  f57f							;
   2587  f57f
   2588  f57f				   .
   2589  f57f							;
   2590  f57f
   2591  f57f				   .L063		;  COLUP0  =  $9C
   2592  f57f
   2593  f57f		       a9 9c		      LDA	#$9C
   2594  f581		       85 06		      STA	COLUP0
   2595  f583				   .L064		;  COLUP1  =  $C9
   2596  f583
   2597  f583		       a9 c9		      LDA	#$C9
   2598  f585		       85 07		      STA	COLUP1
   2599  f587				   .
   2600  f587							;
   2601  f587
   2602  f587				   .
   2603  f587							;
   2604  f587
   2605  f587				   .
   2606  f587							;
   2607  f587
   2608  f587				   .
   2609  f587							;
   2610  f587
   2611  f587				   .
   2612  f587							;
   2613  f587
   2614  f587				   .
   2615  f587							;
   2616  f587
   2617  f587				   .
   2618  f587							;
   2619  f587
   2620  f587				   .
   2621  f587							;
   2622  f587
   2623  f587				   .
   2624  f587							;
   2625  f587
   2626  f587				   .L065		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2627  f587
   2628  f587		       a9 10		      lda	#$10
   2629  f589		       2c 80 02 	      bit	SWCHA
   2630  f58c		       f0 14		      BEQ	.skipL065
   2631  f58e				   .condpart1
   2632  f58e		       a9 20		      lda	#$20
   2633  f590		       2c 80 02 	      bit	SWCHA
   2634  f593		       f0 0d		      BEQ	.skip1then
   2635  f595				   .condpart2
   2636  f595		       2c 80 02 	      bit	SWCHA
   2637  f598		       50 08		      BVC	.skip2then
   2638  f59a				   .condpart3
   2639  f59a		       2c 80 02 	      bit	SWCHA
   2640  f59d		       10 03		      BPL	.skip3then
   2641  f59f				   .condpart4
   2642  f59f		       4c a8 f5 	      jmp	.__Skip_Joystick_Precheck
   2643  f5a2
   2644  f5a2				   .skip3then
   2645  f5a2				   .skip2then
   2646  f5a2				   .skip1then
   2647  f5a2				   .skipL065
   2648  f5a2				   .
   2649  f5a2							;
   2650  f5a2
   2651  f5a2				   .
   2652  f5a2							;
   2653  f5a2
   2654  f5a2				   .
   2655  f5a2							;
   2656  f5a2
   2657  f5a2				   .
   2658  f5a2							;
   2659  f5a2
   2660  f5a2				   .L066		;  _BitOp_P0_M0_Dir  =  _BitOp_P0_M0_Dir  &  %11110000
   2661  f5a2
   2662  f5a2		       a5 da		      LDA	_BitOp_P0_M0_Dir
   2663  f5a4		       29 f0		      AND	#%11110000
   2664  f5a6		       85 da		      STA	_BitOp_P0_M0_Dir
   2665  f5a8				   .
   2666  f5a8							;
   2667  f5a8
   2668  f5a8				   .__Skip_Joystick_Precheck
   2669  f5a8							; __Skip_Joystick_Precheck
   2670  f5a8
   2671  f5a8				   .
   2672  f5a8							;
   2673  f5a8
   2674  f5a8				   .
   2675  f5a8							;
   2676  f5a8
   2677  f5a8				   .
   2678  f5a8							;
   2679  f5a8
   2680  f5a8				   .
   2681  f5a8							;
   2682  f5a8
   2683  f5a8				   .
   2684  f5a8							;
   2685  f5a8
   2686  f5a8				   .
   2687  f5a8							;
   2688  f5a8
   2689  f5a8				   .
   2690  f5a8							;
   2691  f5a8
   2692  f5a8				   .
   2693  f5a8							;
   2694  f5a8
   2695  f5a8				   .
   2696  f5a8							;
   2697  f5a8
   2698  f5a8				   .
   2699  f5a8							;
   2700  f5a8
   2701  f5a8				   .L067		;  if !joy0up then goto __Skip_Joy0_Up
   2702  f5a8
   2703  f5a8		       a9 10		      lda	#$10
   2704  f5aa		       2c 80 02 	      bit	SWCHA
   2705  f5ad		       f0 03		      BEQ	.skipL067
   2706  f5af				   .condpart5
   2707  f5af		       4c 1c f6 	      jmp	.__Skip_Joy0_Up
   2708  f5b2
   2709  f5b2				   .skipL067
   2710  f5b2				   .
   2711  f5b2							;
   2712  f5b2
   2713  f5b2				   .
   2714  f5b2							;
   2715  f5b2
   2716  f5b2				   .
   2717  f5b2							;
   2718  f5b2
   2719  f5b2				   .
   2720  f5b2							;
   2721  f5b2
   2722  f5b2				   .L068		;  _Bit0_P0_Dir_Up{0}	=  1
   2723  f5b2
   2724  f5b2		       a5 da		      LDA	_Bit0_P0_Dir_Up
   2725  f5b4		       09 01		      ORA	#1
   2726  f5b6		       85 da		      STA	_Bit0_P0_Dir_Up
   2727  f5b8				   .
   2728  f5b8							;
   2729  f5b8
   2730  f5b8				   .
   2731  f5b8							;
   2732  f5b8
   2733  f5b8				   .
   2734  f5b8							;
   2735  f5b8
   2736  f5b8				   .
   2737  f5b8							;
   2738  f5b8
   2739  f5b8				   .L069		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   2740  f5b8
   2741  f5b8		       a9 09		      LDA	#_P_Edge_Top
   2742  f5ba		       c5 85		      CMP	player0y
   2743  f5bc		       90 03		      BCC	.skipL069
   2744  f5be				   .condpart6
   2745  f5be		       4c 1c f6 	      jmp	.__Skip_Joy0_Up
   2746  f5c1
   2747  f5c1				   .skipL069
   2748  f5c1				   .
   2749  f5c1							;
   2750  f5c1
   2751  f5c1				   .
   2752  f5c1							;
   2753  f5c1
   2754  f5c1				   .
   2755  f5c1							;
   2756  f5c1
   2757  f5c1				   .
   2758  f5c1							;
   2759  f5c1
   2760  f5c1				   .L070		;  temp5  =   ( player0x - 10 )  / 4
   2761  f5c1
   2762  f5c1							; complex statement detected
   2763  f5c1		       a5 80		      LDA	player0x
   2764  f5c3		       38		      SEC
   2765  f5c4		       e9 0a		      SBC	#10
   2766  f5c6		       4a		      lsr
   2767  f5c7		       4a		      lsr
   2768  f5c8		       85 a0		      STA	temp5
   2769  f5ca				   .
   2770  f5ca							;
   2771  f5ca
   2772  f5ca				   .L071		;  temp6  =   ( player0y - 9 )  / 8
   2773  f5ca
   2774  f5ca							; complex statement detected
   2775  f5ca		       a5 85		      LDA	player0y
   2776  f5cc		       38		      SEC
   2777  f5cd		       e9 09		      SBC	#9
   2778  f5cf		       4a		      lsr
   2779  f5d0		       4a		      lsr
   2780  f5d1		       4a		      lsr
   2781  f5d2		       85 a1		      STA	temp6
   2782  f5d4				   .
   2783  f5d4							;
   2784  f5d4
   2785  f5d4				   .L072		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2786  f5d4
   2787  f5d4		       a5 a0		      LDA	temp5
   2788  f5d6		       c9 22		      CMP	#34
   2789  f5d8		       b0 0c		      BCS	.skipL072
   2790  f5da				   .condpart7
   2791  f5da		       a5 a0		      LDA	temp5
   2792  f5dc		       a4 a1		      LDY	temp6
   2793  f5de		       20 6b f2 	      jsr	pfread
   2794  f5e1		       d0 03		      BNE	.skip7then
   2795  f5e3				   .condpart8
   2796  f5e3		       4c 1c f6 	      jmp	.__Skip_Joy0_Up
   2797  f5e6
   2798  f5e6				   .skip7then
   2799  f5e6				   .skipL072
   2800  f5e6				   .
   2801  f5e6							;
   2802  f5e6
   2803  f5e6				   .L073		;  temp4  =   ( player0x - 17 )  / 4
   2804  f5e6
   2805  f5e6							; complex statement detected
   2806  f5e6		       a5 80		      LDA	player0x
   2807  f5e8		       38		      SEC
   2808  f5e9		       e9 11		      SBC	#17
   2809  f5eb		       4a		      lsr
   2810  f5ec		       4a		      lsr
   2811  f5ed		       85 9f		      STA	temp4
   2812  f5ef				   .
   2813  f5ef							;
   2814  f5ef
   2815  f5ef				   .L074		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2816  f5ef
   2817  f5ef		       a5 9f		      LDA	temp4
   2818  f5f1		       c9 22		      CMP	#34
   2819  f5f3		       b0 0c		      BCS	.skipL074
   2820  f5f5				   .condpart9
   2821  f5f5		       a5 9f		      LDA	temp4
   2822  f5f7		       a4 a1		      LDY	temp6
   2823  f5f9		       20 6b f2 	      jsr	pfread
   2824  f5fc		       d0 03		      BNE	.skip9then
   2825  f5fe				   .condpart10
   2826  f5fe		       4c 1c f6 	      jmp	.__Skip_Joy0_Up
   2827  f601
   2828  f601				   .skip9then
   2829  f601				   .skipL074
   2830  f601				   .
   2831  f601							;
   2832  f601
   2833  f601				   .L075		;  temp3  =  temp5  -	1
   2834  f601
   2835  f601		       a5 a0		      LDA	temp5
   2836  f603		       38		      SEC
   2837  f604		       e9 01		      SBC	#1
   2838  f606		       85 9e		      STA	temp3
   2839  f608				   .
   2840  f608							;
   2841  f608
   2842  f608				   .L076		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2843  f608
   2844  f608		       a5 9e		      LDA	temp3
   2845  f60a		       c9 22		      CMP	#34
   2846  f60c		       b0 0c		      BCS	.skipL076
   2847  f60e				   .condpart11
   2848  f60e		       a5 9e		      LDA	temp3
   2849  f610		       a4 a1		      LDY	temp6
   2850  f612		       20 6b f2 	      jsr	pfread
   2851  f615		       d0 03		      BNE	.skip11then
   2852  f617				   .condpart12
   2853  f617		       4c 1c f6 	      jmp	.__Skip_Joy0_Up
   2854  f61a
   2855  f61a				   .skip11then
   2856  f61a				   .skipL076
   2857  f61a				   .
   2858  f61a							;
   2859  f61a
   2860  f61a				   .
   2861  f61a							;
   2862  f61a
   2863  f61a				   .
   2864  f61a							;
   2865  f61a
   2866  f61a				   .
   2867  f61a							;
   2868  f61a
   2869  f61a				   .L077		;  player0y  =  player0y  -  1
   2870  f61a
   2871  f61a		       c6 85		      DEC	player0y
   2872  f61c				   .
   2873  f61c							;
   2874  f61c
   2875  f61c				   .__Skip_Joy0_Up
   2876  f61c							; __Skip_Joy0_Up
   2877  f61c
   2878  f61c				   .
   2879  f61c							;
   2880  f61c
   2881  f61c				   .
   2882  f61c							;
   2883  f61c
   2884  f61c				   .
   2885  f61c							;
   2886  f61c
   2887  f61c				   .
   2888  f61c							;
   2889  f61c
   2890  f61c				   .
   2891  f61c							;
   2892  f61c
   2893  f61c				   .
   2894  f61c							;
   2895  f61c
   2896  f61c				   .
   2897  f61c							;
   2898  f61c
   2899  f61c				   .
   2900  f61c							;
   2901  f61c
   2902  f61c				   .
   2903  f61c							;
   2904  f61c
   2905  f61c				   .
   2906  f61c							;
   2907  f61c
   2908  f61c				   .L078		;  if !joy0down then goto __Skip_Joy0_Down
   2909  f61c
   2910  f61c		       a9 20		      lda	#$20
   2911  f61e		       2c 80 02 	      bit	SWCHA
   2912  f621		       f0 03		      BEQ	.skipL078
   2913  f623				   .condpart13
   2914  f623		       4c 8d f6 	      jmp	.__Skip_Joy0_Down
   2915  f626
   2916  f626				   .skipL078
   2917  f626				   .
   2918  f626							;
   2919  f626
   2920  f626				   .
   2921  f626							;
   2922  f626
   2923  f626				   .
   2924  f626							;
   2925  f626
   2926  f626				   .
   2927  f626							;
   2928  f626
   2929  f626				   .L079		;  _Bit1_P0_Dir_Down{1}  =  1
   2930  f626
   2931  f626		       a5 da		      LDA	_Bit1_P0_Dir_Down
   2932  f628		       09 02		      ORA	#2
   2933  f62a		       85 da		      STA	_Bit1_P0_Dir_Down
   2934  f62c				   .
   2935  f62c							;
   2936  f62c
   2937  f62c				   .
   2938  f62c							;
   2939  f62c
   2940  f62c				   .
   2941  f62c							;
   2942  f62c
   2943  f62c				   .
   2944  f62c							;
   2945  f62c
   2946  f62c				   .L080		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   2947  f62c
   2948  f62c		       a5 85		      LDA	player0y
   2949  f62e		       c9 58		      CMP	#_P_Edge_Bottom
   2950  f630		       90 03		      BCC	.skipL080
   2951  f632				   .condpart14
   2952  f632		       4c 8d f6 	      jmp	.__Skip_Joy0_Down
   2953  f635
   2954  f635				   .skipL080
   2955  f635				   .
   2956  f635							;
   2957  f635
   2958  f635				   .
   2959  f635							;
   2960  f635
   2961  f635				   .
   2962  f635							;
   2963  f635
   2964  f635				   .
   2965  f635							;
   2966  f635
   2967  f635				   .L081		;  temp5  =   ( player0x - 10 )  / 4
   2968  f635
   2969  f635							; complex statement detected
   2970  f635		       a5 80		      LDA	player0x
   2971  f637		       38		      SEC
   2972  f638		       e9 0a		      SBC	#10
   2973  f63a		       4a		      lsr
   2974  f63b		       4a		      lsr
   2975  f63c		       85 a0		      STA	temp5
   2976  f63e				   .
   2977  f63e							;
   2978  f63e
   2979  f63e				   .L082		;  temp6  =   ( player0y )  / 8
   2980  f63e
   2981  f63e							; complex statement detected
   2982  f63e		       a5 85		      LDA	player0y
   2983  f640		       4a		      lsr
   2984  f641		       4a		      lsr
   2985  f642		       4a		      lsr
   2986  f643		       85 a1		      STA	temp6
   2987  f645				   .
   2988  f645							;
   2989  f645
   2990  f645				   .L083		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   2991  f645
   2992  f645		       a5 a0		      LDA	temp5
   2993  f647		       c9 22		      CMP	#34
   2994  f649		       b0 0c		      BCS	.skipL083
   2995  f64b				   .condpart15
   2996  f64b		       a5 a0		      LDA	temp5
   2997  f64d		       a4 a1		      LDY	temp6
   2998  f64f		       20 6b f2 	      jsr	pfread
   2999  f652		       d0 03		      BNE	.skip15then
   3000  f654				   .condpart16
   3001  f654		       4c 8d f6 	      jmp	.__Skip_Joy0_Down
   3002  f657
   3003  f657				   .skip15then
   3004  f657				   .skipL083
   3005  f657				   .
   3006  f657							;
   3007  f657
   3008  f657				   .L084		;  temp4  =   ( player0x - 17 )  / 4
   3009  f657
   3010  f657							; complex statement detected
   3011  f657		       a5 80		      LDA	player0x
   3012  f659		       38		      SEC
   3013  f65a		       e9 11		      SBC	#17
   3014  f65c		       4a		      lsr
   3015  f65d		       4a		      lsr
   3016  f65e		       85 9f		      STA	temp4
   3017  f660				   .
   3018  f660							;
   3019  f660
   3020  f660				   .L085		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3021  f660
   3022  f660		       a5 9f		      LDA	temp4
   3023  f662		       c9 22		      CMP	#34
   3024  f664		       b0 0c		      BCS	.skipL085
   3025  f666				   .condpart17
   3026  f666		       a5 9f		      LDA	temp4
   3027  f668		       a4 a1		      LDY	temp6
   3028  f66a		       20 6b f2 	      jsr	pfread
   3029  f66d		       d0 03		      BNE	.skip17then
   3030  f66f				   .condpart18
   3031  f66f		       4c 8d f6 	      jmp	.__Skip_Joy0_Down
   3032  f672
   3033  f672				   .skip17then
   3034  f672				   .skipL085
   3035  f672				   .
   3036  f672							;
   3037  f672
   3038  f672				   .L086		;  temp3  =  temp5  -	1
   3039  f672
   3040  f672		       a5 a0		      LDA	temp5
   3041  f674		       38		      SEC
   3042  f675		       e9 01		      SBC	#1
   3043  f677		       85 9e		      STA	temp3
   3044  f679				   .
   3045  f679							;
   3046  f679
   3047  f679				   .L087		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   3048  f679
   3049  f679		       a5 9e		      LDA	temp3
   3050  f67b		       c9 22		      CMP	#34
   3051  f67d		       b0 0c		      BCS	.skipL087
   3052  f67f				   .condpart19
   3053  f67f		       a5 9e		      LDA	temp3
   3054  f681		       a4 a1		      LDY	temp6
   3055  f683		       20 6b f2 	      jsr	pfread
   3056  f686		       d0 03		      BNE	.skip19then
   3057  f688				   .condpart20
   3058  f688		       4c 8d f6 	      jmp	.__Skip_Joy0_Down
   3059  f68b
   3060  f68b				   .skip19then
   3061  f68b				   .skipL087
   3062  f68b				   .
   3063  f68b							;
   3064  f68b
   3065  f68b				   .
   3066  f68b							;
   3067  f68b
   3068  f68b				   .
   3069  f68b							;
   3070  f68b
   3071  f68b				   .
   3072  f68b							;
   3073  f68b
   3074  f68b				   .L088		;  player0y  =  player0y  +  1
   3075  f68b
   3076  f68b		       e6 85		      INC	player0y
   3077  f68d				   .
   3078  f68d							;
   3079  f68d
   3080  f68d				   .__Skip_Joy0_Down
   3081  f68d							; __Skip_Joy0_Down
   3082  f68d
   3083  f68d				   .
   3084  f68d							;
   3085  f68d
   3086  f68d				   .
   3087  f68d							;
   3088  f68d
   3089  f68d				   .
   3090  f68d							;
   3091  f68d
   3092  f68d				   .
   3093  f68d							;
   3094  f68d
   3095  f68d				   .
   3096  f68d							;
   3097  f68d
   3098  f68d				   .
   3099  f68d							;
   3100  f68d
   3101  f68d				   .
   3102  f68d							;
   3103  f68d
   3104  f68d				   .
   3105  f68d							;
   3106  f68d
   3107  f68d				   .
   3108  f68d							;
   3109  f68d
   3110  f68d				   .
   3111  f68d							;
   3112  f68d
   3113  f68d				   .L089		;  if !joy0left then goto __Skip_Joy0_Left
   3114  f68d
   3115  f68d		       2c 80 02 	      bit	SWCHA
   3116  f690		       50 03		      BVC	.skipL089
   3117  f692				   .condpart21
   3118  f692		       4c e7 f6 	      jmp	.__Skip_Joy0_Left
   3119  f695
   3120  f695				   .skipL089
   3121  f695				   .
   3122  f695							;
   3123  f695
   3124  f695				   .
   3125  f695							;
   3126  f695
   3127  f695				   .
   3128  f695							;
   3129  f695
   3130  f695				   .
   3131  f695							;
   3132  f695
   3133  f695				   .L090		;  _Bit2_P0_Dir_Left{2}  =  1
   3134  f695
   3135  f695		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3136  f697		       09 04		      ORA	#4
   3137  f699		       85 da		      STA	_Bit2_P0_Dir_Left
   3138  f69b				   .
   3139  f69b							;
   3140  f69b
   3141  f69b				   .
   3142  f69b							;
   3143  f69b
   3144  f69b				   .
   3145  f69b							;
   3146  f69b
   3147  f69b				   .
   3148  f69b							;
   3149  f69b
   3150  f69b				   .L091		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   3151  f69b
   3152  f69b		       a9 01		      LDA	#_P_Edge_Left
   3153  f69d		       c5 80		      CMP	player0x
   3154  f69f		       90 03		      BCC	.skipL091
   3155  f6a1				   .condpart22
   3156  f6a1		       4c e7 f6 	      jmp	.__Skip_Joy0_Left
   3157  f6a4
   3158  f6a4				   .skipL091
   3159  f6a4				   .
   3160  f6a4							;
   3161  f6a4
   3162  f6a4				   .
   3163  f6a4							;
   3164  f6a4
   3165  f6a4				   .
   3166  f6a4							;
   3167  f6a4
   3168  f6a4				   .
   3169  f6a4							;
   3170  f6a4
   3171  f6a4				   .L092		;  temp5  =   ( player0y - 1 )  / 8
   3172  f6a4
   3173  f6a4							; complex statement detected
   3174  f6a4		       a5 85		      LDA	player0y
   3175  f6a6		       38		      SEC
   3176  f6a7		       e9 01		      SBC	#1
   3177  f6a9		       4a		      lsr
   3178  f6aa		       4a		      lsr
   3179  f6ab		       4a		      lsr
   3180  f6ac		       85 a0		      STA	temp5
   3181  f6ae				   .
   3182  f6ae							;
   3183  f6ae
   3184  f6ae				   .L093		;  temp6  =   ( player0x - 18 )  / 4
   3185  f6ae
   3186  f6ae							; complex statement detected
   3187  f6ae		       a5 80		      LDA	player0x
   3188  f6b0		       38		      SEC
   3189  f6b1		       e9 12		      SBC	#18
   3190  f6b3		       4a		      lsr
   3191  f6b4		       4a		      lsr
   3192  f6b5		       85 a1		      STA	temp6
   3193  f6b7				   .
   3194  f6b7							;
   3195  f6b7
   3196  f6b7				   .L094		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3197  f6b7
   3198  f6b7		       a5 a1		      LDA	temp6
   3199  f6b9		       c9 22		      CMP	#34
   3200  f6bb		       b0 0c		      BCS	.skipL094
   3201  f6bd				   .condpart23
   3202  f6bd		       a5 a1		      LDA	temp6
   3203  f6bf		       a4 a0		      LDY	temp5
   3204  f6c1		       20 6b f2 	      jsr	pfread
   3205  f6c4		       d0 03		      BNE	.skip23then
   3206  f6c6				   .condpart24
   3207  f6c6		       4c e7 f6 	      jmp	.__Skip_Joy0_Left
   3208  f6c9
   3209  f6c9				   .skip23then
   3210  f6c9				   .skipL094
   3211  f6c9				   .
   3212  f6c9							;
   3213  f6c9
   3214  f6c9				   .L095		;  temp3  =   ( player0y - 8 )  / 8
   3215  f6c9
   3216  f6c9							; complex statement detected
   3217  f6c9		       a5 85		      LDA	player0y
   3218  f6cb		       38		      SEC
   3219  f6cc		       e9 08		      SBC	#8
   3220  f6ce		       4a		      lsr
   3221  f6cf		       4a		      lsr
   3222  f6d0		       4a		      lsr
   3223  f6d1		       85 9e		      STA	temp3
   3224  f6d3				   .
   3225  f6d3							;
   3226  f6d3
   3227  f6d3				   .L096		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3228  f6d3
   3229  f6d3		       a5 a1		      LDA	temp6
   3230  f6d5		       c9 22		      CMP	#34
   3231  f6d7		       b0 0c		      BCS	.skipL096
   3232  f6d9				   .condpart25
   3233  f6d9		       a5 a1		      LDA	temp6
   3234  f6db		       a4 9e		      LDY	temp3
   3235  f6dd		       20 6b f2 	      jsr	pfread
   3236  f6e0		       d0 03		      BNE	.skip25then
   3237  f6e2				   .condpart26
   3238  f6e2		       4c e7 f6 	      jmp	.__Skip_Joy0_Left
   3239  f6e5
   3240  f6e5				   .skip25then
   3241  f6e5				   .skipL096
   3242  f6e5				   .
   3243  f6e5							;
   3244  f6e5
   3245  f6e5				   .
   3246  f6e5							;
   3247  f6e5
   3248  f6e5				   .
   3249  f6e5							;
   3250  f6e5
   3251  f6e5				   .
   3252  f6e5							;
   3253  f6e5
   3254  f6e5				   .L097		;  player0x  =  player0x  -  1
   3255  f6e5
   3256  f6e5		       c6 80		      DEC	player0x
   3257  f6e7				   .
   3258  f6e7							;
   3259  f6e7
   3260  f6e7				   .__Skip_Joy0_Left
   3261  f6e7							; __Skip_Joy0_Left
   3262  f6e7
   3263  f6e7				   .
   3264  f6e7							;
   3265  f6e7
   3266  f6e7				   .
   3267  f6e7							;
   3268  f6e7
   3269  f6e7				   .
   3270  f6e7							;
   3271  f6e7
   3272  f6e7				   .
   3273  f6e7							;
   3274  f6e7
   3275  f6e7				   .
   3276  f6e7							;
   3277  f6e7
   3278  f6e7				   .
   3279  f6e7							;
   3280  f6e7
   3281  f6e7				   .
   3282  f6e7							;
   3283  f6e7
   3284  f6e7				   .
   3285  f6e7							;
   3286  f6e7
   3287  f6e7				   .
   3288  f6e7							;
   3289  f6e7
   3290  f6e7				   .
   3291  f6e7							;
   3292  f6e7
   3293  f6e7				   .L098		;  if !joy0right then goto __Skip_Joy0_Right
   3294  f6e7
   3295  f6e7		       2c 80 02 	      bit	SWCHA
   3296  f6ea		       10 03		      BPL	.skipL098
   3297  f6ec				   .condpart27
   3298  f6ec		       4c 41 f7 	      jmp	.__Skip_Joy0_Right
   3299  f6ef
   3300  f6ef				   .skipL098
   3301  f6ef				   .
   3302  f6ef							;
   3303  f6ef
   3304  f6ef				   .
   3305  f6ef							;
   3306  f6ef
   3307  f6ef				   .
   3308  f6ef							;
   3309  f6ef
   3310  f6ef				   .
   3311  f6ef							;
   3312  f6ef
   3313  f6ef				   .L099		;  _Bit3_P0_Dir_Right{3}  =  1
   3314  f6ef
   3315  f6ef		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3316  f6f1		       09 08		      ORA	#8
   3317  f6f3		       85 da		      STA	_Bit3_P0_Dir_Right
   3318  f6f5				   .
   3319  f6f5							;
   3320  f6f5
   3321  f6f5				   .
   3322  f6f5							;
   3323  f6f5
   3324  f6f5				   .
   3325  f6f5							;
   3326  f6f5
   3327  f6f5				   .
   3328  f6f5							;
   3329  f6f5
   3330  f6f5				   .L0100		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3331  f6f5
   3332  f6f5		       a5 80		      LDA	player0x
   3333  f6f7		       c9 99		      CMP	#_P_Edge_Right
   3334  f6f9		       90 03		      BCC	.skipL0100
   3335  f6fb				   .condpart28
   3336  f6fb		       4c 41 f7 	      jmp	.__Skip_Joy0_Right
   3337  f6fe
   3338  f6fe				   .skipL0100
   3339  f6fe				   .
   3340  f6fe							;
   3341  f6fe
   3342  f6fe				   .
   3343  f6fe							;
   3344  f6fe
   3345  f6fe				   .
   3346  f6fe							;
   3347  f6fe
   3348  f6fe				   .
   3349  f6fe							;
   3350  f6fe
   3351  f6fe				   .L0101		;  temp5  =   ( player0y - 1 )  / 8
   3352  f6fe
   3353  f6fe							; complex statement detected
   3354  f6fe		       a5 85		      LDA	player0y
   3355  f700		       38		      SEC
   3356  f701		       e9 01		      SBC	#1
   3357  f703		       4a		      lsr
   3358  f704		       4a		      lsr
   3359  f705		       4a		      lsr
   3360  f706		       85 a0		      STA	temp5
   3361  f708				   .
   3362  f708							;
   3363  f708
   3364  f708				   .L0102		;  temp6  =   ( player0x - 9 )  / 4
   3365  f708
   3366  f708							; complex statement detected
   3367  f708		       a5 80		      LDA	player0x
   3368  f70a		       38		      SEC
   3369  f70b		       e9 09		      SBC	#9
   3370  f70d		       4a		      lsr
   3371  f70e		       4a		      lsr
   3372  f70f		       85 a1		      STA	temp6
   3373  f711				   .
   3374  f711							;
   3375  f711
   3376  f711				   .L0103		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3377  f711
   3378  f711		       a5 a1		      LDA	temp6
   3379  f713		       c9 22		      CMP	#34
   3380  f715		       b0 0c		      BCS	.skipL0103
   3381  f717				   .condpart29
   3382  f717		       a5 a1		      LDA	temp6
   3383  f719		       a4 a0		      LDY	temp5
   3384  f71b		       20 6b f2 	      jsr	pfread
   3385  f71e		       d0 03		      BNE	.skip29then
   3386  f720				   .condpart30
   3387  f720		       4c 41 f7 	      jmp	.__Skip_Joy0_Right
   3388  f723
   3389  f723				   .skip29then
   3390  f723				   .skipL0103
   3391  f723				   .
   3392  f723							;
   3393  f723
   3394  f723				   .L0104		;  temp3  =   ( player0y - 8 )  / 8
   3395  f723
   3396  f723							; complex statement detected
   3397  f723		       a5 85		      LDA	player0y
   3398  f725		       38		      SEC
   3399  f726		       e9 08		      SBC	#8
   3400  f728		       4a		      lsr
   3401  f729		       4a		      lsr
   3402  f72a		       4a		      lsr
   3403  f72b		       85 9e		      STA	temp3
   3404  f72d				   .
   3405  f72d							;
   3406  f72d
   3407  f72d				   .L0105		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3408  f72d
   3409  f72d		       a5 a1		      LDA	temp6
   3410  f72f		       c9 22		      CMP	#34
   3411  f731		       b0 0c		      BCS	.skipL0105
   3412  f733				   .condpart31
   3413  f733		       a5 a1		      LDA	temp6
   3414  f735		       a4 9e		      LDY	temp3
   3415  f737		       20 6b f2 	      jsr	pfread
   3416  f73a		       d0 03		      BNE	.skip31then
   3417  f73c				   .condpart32
   3418  f73c		       4c 41 f7 	      jmp	.__Skip_Joy0_Right
   3419  f73f
   3420  f73f				   .skip31then
   3421  f73f				   .skipL0105
   3422  f73f				   .
   3423  f73f							;
   3424  f73f
   3425  f73f				   .
   3426  f73f							;
   3427  f73f
   3428  f73f				   .
   3429  f73f							;
   3430  f73f
   3431  f73f				   .
   3432  f73f							;
   3433  f73f
   3434  f73f				   .L0106		;  player0x  =  player0x  +  1
   3435  f73f
   3436  f73f		       e6 80		      INC	player0x
   3437  f741				   .
   3438  f741							;
   3439  f741
   3440  f741				   .__Skip_Joy0_Right
   3441  f741							; __Skip_Joy0_Right
   3442  f741
   3443  f741				   .
   3444  f741							;
   3445  f741
   3446  f741				   .
   3447  f741							;
   3448  f741
   3449  f741				   .
   3450  f741							;
   3451  f741
   3452  f741				   .
   3453  f741							;
   3454  f741
   3455  f741				   .
   3456  f741							;
   3457  f741
   3458  f741				   .L0107		;  temp1  =  player0x	+  4
   3459  f741
   3460  f741		       a5 80		      LDA	player0x
   3461  f743		       18		      CLC
   3462  f744		       69 04		      ADC	#4
   3463  f746		       85 9c		      STA	temp1
   3464  f748				   .L0108		;  temp2  =  player0y	+  8
   3465  f748
   3466  f748		       a5 85		      LDA	player0y
   3467  f74a		       18		      CLC
   3468  f74b		       69 08		      ADC	#8
   3469  f74d		       85 9d		      STA	temp2
   3470  f74f				   .L0109		;  temp3  =  player1x	+  4
   3471  f74f
   3472  f74f		       a5 81		      LDA	player1x
   3473  f751		       18		      CLC
   3474  f752		       69 04		      ADC	#4
   3475  f754		       85 9e		      STA	temp3
   3476  f756				   .L0110		;  temp4  =  player1y	+  8
   3477  f756
   3478  f756		       a5 86		      LDA	player1y
   3479  f758		       18		      CLC
   3480  f759		       69 08		      ADC	#8
   3481  f75b		       85 9f		      STA	temp4
   3482  f75d				   .L0111		;  temp5  =  _Minotaur_Awareness_Size	/  2
   3483  f75d
   3484  f75d		       a9 30		      LDA	#_Minotaur_Awareness_Size
   3485  f75f		       4a		      lsr
   3486  f760		       85 a0		      STA	temp5
   3487  f762				   .
   3488  f762							;
   3489  f762
   3490  f762				   .L0112		;  if player0x  >=   ( temp3  +  temp5 )  then goto __Skip_AI_Right
   3491  f762
   3492  f762							; complex condition detected
   3493  f762							; complex statement detected
   3494  f762		       a5 9e		      LDA	temp3
   3495  f764		       18		      CLC
   3496  f765		       65 a0		      ADC	temp5
   3497  f767		       48		      PHA
   3498  f768		       ba		      TSX
   3499  f769		       68		      PLA
   3500  f76a		       a5 80		      LDA	player0x
   3501  f76c		       d5 01		      CMP	1,x
   3502  f76e		       90 03		      BCC	.skipL0112
   3503  f770				   .condpart33
   3504  f770		       4c 35 f9 	      jmp	.__Skip_AI_Right
   3505  f773
   3506  f773				   .skipL0112
   3507  f773				   .L0113		;  if temp1  <=   ( temp3  -  temp5 )	then goto __Skip_AI_Right
   3508  f773
   3509  f773							; complex condition detected
   3510  f773							; complex statement detected
   3511  f773		       a5 9e		      LDA	temp3
   3512  f775		       38		      SEC
   3513  f776		       e5 a0		      SBC	temp5
   3514  f778		       c5 9c		      CMP	temp1
   3515  f77a		       90 03		      BCC	.skipL0113
   3516  f77c				   .condpart34
   3517  f77c		       4c 35 f9 	      jmp	.__Skip_AI_Right
   3518  f77f
   3519  f77f				   .skipL0113
   3520  f77f				   .L0114		;  if player0y  >=   ( temp4  +  temp5 )  then goto __Skip_AI_Right
   3521  f77f
   3522  f77f							; complex condition detected
   3523  f77f							; complex statement detected
   3524  f77f		       a5 9f		      LDA	temp4
   3525  f781		       18		      CLC
   3526  f782		       65 a0		      ADC	temp5
   3527  f784		       48		      PHA
   3528  f785		       ba		      TSX
   3529  f786		       68		      PLA
   3530  f787		       a5 85		      LDA	player0y
   3531  f789		       d5 01		      CMP	1,x
   3532  f78b		       90 03		      BCC	.skipL0114
   3533  f78d				   .condpart35
   3534  f78d		       4c 35 f9 	      jmp	.__Skip_AI_Right
   3535  f790
   3536  f790				   .skipL0114
   3537  f790				   .L0115		;  if temp2  <=   ( temp4  -  temp5 )	then goto __Skip_AI_Right
   3538  f790
   3539  f790							; complex condition detected
   3540  f790							; complex statement detected
   3541  f790		       a5 9f		      LDA	temp4
   3542  f792		       38		      SEC
   3543  f793		       e5 a0		      SBC	temp5
   3544  f795		       c5 9d		      CMP	temp2
   3545  f797		       90 03		      BCC	.skipL0115
   3546  f799				   .condpart36
   3547  f799		       4c 35 f9 	      jmp	.__Skip_AI_Right
   3548  f79c
   3549  f79c				   .skipL0115
   3550  f79c				   .
   3551  f79c							;
   3552  f79c
   3553  f79c				   .
   3554  f79c							;
   3555  f79c
   3556  f79c				   .
   3557  f79c							;
   3558  f79c
   3559  f79c				   .
   3560  f79c							;
   3561  f79c
   3562  f79c				   .
   3563  f79c							;
   3564  f79c
   3565  f79c				   .
   3566  f79c							;
   3567  f79c
   3568  f79c				   .
   3569  f79c							;
   3570  f79c
   3571  f79c				   .
   3572  f79c							;
   3573  f79c
   3574  f79c				   .
   3575  f79c							;
   3576  f79c
   3577  f79c				   .
   3578  f79c							;
   3579  f79c
   3580  f79c				   .
   3581  f79c							;
   3582  f79c
   3583  f79c				   .L0116		;  if player1y  <=  player0y then goto __Skip_AI_Up
   3584  f79c
   3585  f79c		       a5 85		      LDA	player0y
   3586  f79e		       c5 86		      CMP	player1y
   3587  f7a0		       90 03		      BCC	.skipL0116
   3588  f7a2				   .condpart37
   3589  f7a2		       4c 0f f8 	      jmp	.__Skip_AI_Up
   3590  f7a5
   3591  f7a5				   .skipL0116
   3592  f7a5				   .
   3593  f7a5							;
   3594  f7a5
   3595  f7a5				   .
   3596  f7a5							;
   3597  f7a5
   3598  f7a5				   .
   3599  f7a5							;
   3600  f7a5
   3601  f7a5				   .
   3602  f7a5							;
   3603  f7a5
   3604  f7a5				   .L0117		;  _Bit0_P1_Dir_Up{0}	=  1
   3605  f7a5
   3606  f7a5		       a5 de		      LDA	_Bit0_P1_Dir_Up
   3607  f7a7		       09 01		      ORA	#1
   3608  f7a9		       85 de		      STA	_Bit0_P1_Dir_Up
   3609  f7ab				   .
   3610  f7ab							;
   3611  f7ab
   3612  f7ab				   .
   3613  f7ab							;
   3614  f7ab
   3615  f7ab				   .
   3616  f7ab							;
   3617  f7ab
   3618  f7ab				   .
   3619  f7ab							;
   3620  f7ab
   3621  f7ab				   .L0118		;  if player1y  <=  _P_Edge_Top then goto __Skip_AI_Up
   3622  f7ab
   3623  f7ab		       a9 09		      LDA	#_P_Edge_Top
   3624  f7ad		       c5 86		      CMP	player1y
   3625  f7af		       90 03		      BCC	.skipL0118
   3626  f7b1				   .condpart38
   3627  f7b1		       4c 0f f8 	      jmp	.__Skip_AI_Up
   3628  f7b4
   3629  f7b4				   .skipL0118
   3630  f7b4				   .
   3631  f7b4							;
   3632  f7b4
   3633  f7b4				   .
   3634  f7b4							;
   3635  f7b4
   3636  f7b4				   .
   3637  f7b4							;
   3638  f7b4
   3639  f7b4				   .
   3640  f7b4							;
   3641  f7b4
   3642  f7b4				   .L0119		;  temp5  =   ( player1x - 10 )  / 4
   3643  f7b4
   3644  f7b4							; complex statement detected
   3645  f7b4		       a5 81		      LDA	player1x
   3646  f7b6		       38		      SEC
   3647  f7b7		       e9 0a		      SBC	#10
   3648  f7b9		       4a		      lsr
   3649  f7ba		       4a		      lsr
   3650  f7bb		       85 a0		      STA	temp5
   3651  f7bd				   .
   3652  f7bd							;
   3653  f7bd
   3654  f7bd				   .L0120		;  temp6  =   ( player1y - 9 )  / 8
   3655  f7bd
   3656  f7bd							; complex statement detected
   3657  f7bd		       a5 86		      LDA	player1y
   3658  f7bf		       38		      SEC
   3659  f7c0		       e9 09		      SBC	#9
   3660  f7c2		       4a		      lsr
   3661  f7c3		       4a		      lsr
   3662  f7c4		       4a		      lsr
   3663  f7c5		       85 a1		      STA	temp6
   3664  f7c7				   .
   3665  f7c7							;
   3666  f7c7
   3667  f7c7				   .L0121		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Up
   3668  f7c7
   3669  f7c7		       a5 a0		      LDA	temp5
   3670  f7c9		       c9 22		      CMP	#34
   3671  f7cb		       b0 0c		      BCS	.skipL0121
   3672  f7cd				   .condpart39
   3673  f7cd		       a5 a0		      LDA	temp5
   3674  f7cf		       a4 a1		      LDY	temp6
   3675  f7d1		       20 6b f2 	      jsr	pfread
   3676  f7d4		       d0 03		      BNE	.skip39then
   3677  f7d6				   .condpart40
   3678  f7d6		       4c 0f f8 	      jmp	.__Skip_AI_Up
   3679  f7d9
   3680  f7d9				   .skip39then
   3681  f7d9				   .skipL0121
   3682  f7d9				   .
   3683  f7d9							;
   3684  f7d9
   3685  f7d9				   .L0122		;  temp4  =   ( player1x - 17 )  / 4
   3686  f7d9
   3687  f7d9							; complex statement detected
   3688  f7d9		       a5 81		      LDA	player1x
   3689  f7db		       38		      SEC
   3690  f7dc		       e9 11		      SBC	#17
   3691  f7de		       4a		      lsr
   3692  f7df		       4a		      lsr
   3693  f7e0		       85 9f		      STA	temp4
   3694  f7e2				   .
   3695  f7e2							;
   3696  f7e2
   3697  f7e2				   .L0123		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Up
   3698  f7e2
   3699  f7e2		       a5 9f		      LDA	temp4
   3700  f7e4		       c9 22		      CMP	#34
   3701  f7e6		       b0 0c		      BCS	.skipL0123
   3702  f7e8				   .condpart41
   3703  f7e8		       a5 9f		      LDA	temp4
   3704  f7ea		       a4 a1		      LDY	temp6
   3705  f7ec		       20 6b f2 	      jsr	pfread
   3706  f7ef		       d0 03		      BNE	.skip41then
   3707  f7f1				   .condpart42
   3708  f7f1		       4c 0f f8 	      jmp	.__Skip_AI_Up
   3709  f7f4
   3710  f7f4				   .skip41then
   3711  f7f4				   .skipL0123
   3712  f7f4				   .
   3713  f7f4							;
   3714  f7f4
   3715  f7f4				   .L0124		;  temp3  =  temp5  -	1
   3716  f7f4
   3717  f7f4		       a5 a0		      LDA	temp5
   3718  f7f6		       38		      SEC
   3719  f7f7		       e9 01		      SBC	#1
   3720  f7f9		       85 9e		      STA	temp3
   3721  f7fb				   .
   3722  f7fb							;
   3723  f7fb
   3724  f7fb				   .L0125		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Up
   3725  f7fb
   3726  f7fb		       a5 9e		      LDA	temp3
   3727  f7fd		       c9 22		      CMP	#34
   3728  f7ff		       b0 0c		      BCS	.skipL0125
   3729  f801				   .condpart43
   3730  f801		       a5 9e		      LDA	temp3
   3731  f803		       a4 a1		      LDY	temp6
   3732  f805		       20 6b f2 	      jsr	pfread
   3733  f808		       d0 03		      BNE	.skip43then
   3734  f80a				   .condpart44
   3735  f80a		       4c 0f f8 	      jmp	.__Skip_AI_Up
   3736  f80d
   3737  f80d				   .skip43then
   3738  f80d				   .skipL0125
   3739  f80d				   .
   3740  f80d							;
   3741  f80d
   3742  f80d				   .
   3743  f80d							;
   3744  f80d
   3745  f80d				   .
   3746  f80d							;
   3747  f80d
   3748  f80d				   .
   3749  f80d							;
   3750  f80d
   3751  f80d				   .L0126		;  player1y  =  player1y  -  1
   3752  f80d
   3753  f80d		       c6 86		      DEC	player1y
   3754  f80f				   .
   3755  f80f							;
   3756  f80f
   3757  f80f				   .__Skip_AI_Up
   3758  f80f							; __Skip_AI_Up
   3759  f80f
   3760  f80f				   .
   3761  f80f							;
   3762  f80f
   3763  f80f				   .
   3764  f80f							;
   3765  f80f
   3766  f80f				   .
   3767  f80f							;
   3768  f80f
   3769  f80f				   .
   3770  f80f							;
   3771  f80f
   3772  f80f				   .
   3773  f80f							;
   3774  f80f
   3775  f80f				   .
   3776  f80f							;
   3777  f80f
   3778  f80f				   .
   3779  f80f							;
   3780  f80f
   3781  f80f				   .
   3782  f80f							;
   3783  f80f
   3784  f80f				   .
   3785  f80f							;
   3786  f80f
   3787  f80f				   .
   3788  f80f							;
   3789  f80f
   3790  f80f				   .L0127		;  if player1y  >=  player0y then goto __Skip_AI_Down
   3791  f80f
   3792  f80f		       a5 86		      LDA	player1y
   3793  f811		       c5 85		      CMP	player0y
   3794  f813		       90 03		      BCC	.skipL0127
   3795  f815				   .condpart45
   3796  f815		       4c 7f f8 	      jmp	.__Skip_AI_Down
   3797  f818
   3798  f818				   .skipL0127
   3799  f818				   .
   3800  f818							;
   3801  f818
   3802  f818				   .
   3803  f818							;
   3804  f818
   3805  f818				   .
   3806  f818							;
   3807  f818
   3808  f818				   .
   3809  f818							;
   3810  f818
   3811  f818				   .L0128		;  _Bit1_P1_Dir_Down{1}  =  1
   3812  f818
   3813  f818		       a5 de		      LDA	_Bit1_P1_Dir_Down
   3814  f81a		       09 02		      ORA	#2
   3815  f81c		       85 de		      STA	_Bit1_P1_Dir_Down
   3816  f81e				   .
   3817  f81e							;
   3818  f81e
   3819  f81e				   .
   3820  f81e							;
   3821  f81e
   3822  f81e				   .
   3823  f81e							;
   3824  f81e
   3825  f81e				   .
   3826  f81e							;
   3827  f81e
   3828  f81e				   .L0129		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_AI_Down
   3829  f81e
   3830  f81e		       a5 86		      LDA	player1y
   3831  f820		       c9 58		      CMP	#_P_Edge_Bottom
   3832  f822		       90 03		      BCC	.skipL0129
   3833  f824				   .condpart46
   3834  f824		       4c 7f f8 	      jmp	.__Skip_AI_Down
   3835  f827
   3836  f827				   .skipL0129
   3837  f827				   .
   3838  f827							;
   3839  f827
   3840  f827				   .
   3841  f827							;
   3842  f827
   3843  f827				   .
   3844  f827							;
   3845  f827
   3846  f827				   .
   3847  f827							;
   3848  f827
   3849  f827				   .L0130		;  temp5  =   ( player1x - 10 )  / 4
   3850  f827
   3851  f827							; complex statement detected
   3852  f827		       a5 81		      LDA	player1x
   3853  f829		       38		      SEC
   3854  f82a		       e9 0a		      SBC	#10
   3855  f82c		       4a		      lsr
   3856  f82d		       4a		      lsr
   3857  f82e		       85 a0		      STA	temp5
   3858  f830				   .
   3859  f830							;
   3860  f830
   3861  f830				   .L0131		;  temp6  =   ( player1y )  / 8
   3862  f830
   3863  f830							; complex statement detected
   3864  f830		       a5 86		      LDA	player1y
   3865  f832		       4a		      lsr
   3866  f833		       4a		      lsr
   3867  f834		       4a		      lsr
   3868  f835		       85 a1		      STA	temp6
   3869  f837				   .
   3870  f837							;
   3871  f837
   3872  f837				   .L0132		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Down
   3873  f837
   3874  f837		       a5 a0		      LDA	temp5
   3875  f839		       c9 22		      CMP	#34
   3876  f83b		       b0 0c		      BCS	.skipL0132
   3877  f83d				   .condpart47
   3878  f83d		       a5 a0		      LDA	temp5
   3879  f83f		       a4 a1		      LDY	temp6
   3880  f841		       20 6b f2 	      jsr	pfread
   3881  f844		       d0 03		      BNE	.skip47then
   3882  f846				   .condpart48
   3883  f846		       4c 7f f8 	      jmp	.__Skip_AI_Down
   3884  f849
   3885  f849				   .skip47then
   3886  f849				   .skipL0132
   3887  f849				   .
   3888  f849							;
   3889  f849
   3890  f849				   .L0133		;  temp4  =   ( player1x - 17 )  / 4
   3891  f849
   3892  f849							; complex statement detected
   3893  f849		       a5 81		      LDA	player1x
   3894  f84b		       38		      SEC
   3895  f84c		       e9 11		      SBC	#17
   3896  f84e		       4a		      lsr
   3897  f84f		       4a		      lsr
   3898  f850		       85 9f		      STA	temp4
   3899  f852				   .
   3900  f852							;
   3901  f852
   3902  f852				   .L0134		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Down
   3903  f852
   3904  f852		       a5 9f		      LDA	temp4
   3905  f854		       c9 22		      CMP	#34
   3906  f856		       b0 0c		      BCS	.skipL0134
   3907  f858				   .condpart49
   3908  f858		       a5 9f		      LDA	temp4
   3909  f85a		       a4 a1		      LDY	temp6
   3910  f85c		       20 6b f2 	      jsr	pfread
   3911  f85f		       d0 03		      BNE	.skip49then
   3912  f861				   .condpart50
   3913  f861		       4c 7f f8 	      jmp	.__Skip_AI_Down
   3914  f864
   3915  f864				   .skip49then
   3916  f864				   .skipL0134
   3917  f864				   .
   3918  f864							;
   3919  f864
   3920  f864				   .L0135		;  temp3  =  temp5  -	1
   3921  f864
   3922  f864		       a5 a0		      LDA	temp5
   3923  f866		       38		      SEC
   3924  f867		       e9 01		      SBC	#1
   3925  f869		       85 9e		      STA	temp3
   3926  f86b				   .
   3927  f86b							;
   3928  f86b
   3929  f86b				   .L0136		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Down
   3930  f86b
   3931  f86b		       a5 9e		      LDA	temp3
   3932  f86d		       c9 22		      CMP	#34
   3933  f86f		       b0 0c		      BCS	.skipL0136
   3934  f871				   .condpart51
   3935  f871		       a5 9e		      LDA	temp3
   3936  f873		       a4 a1		      LDY	temp6
   3937  f875		       20 6b f2 	      jsr	pfread
   3938  f878		       d0 03		      BNE	.skip51then
   3939  f87a				   .condpart52
   3940  f87a		       4c 7f f8 	      jmp	.__Skip_AI_Down
   3941  f87d
   3942  f87d				   .skip51then
   3943  f87d				   .skipL0136
   3944  f87d				   .
   3945  f87d							;
   3946  f87d
   3947  f87d				   .
   3948  f87d							;
   3949  f87d
   3950  f87d				   .
   3951  f87d							;
   3952  f87d
   3953  f87d				   .
   3954  f87d							;
   3955  f87d
   3956  f87d				   .L0137		;  player1y  =  player1y  +  1
   3957  f87d
   3958  f87d		       e6 86		      INC	player1y
   3959  f87f				   .
   3960  f87f							;
   3961  f87f
   3962  f87f				   .__Skip_AI_Down
   3963  f87f							; __Skip_AI_Down
   3964  f87f
   3965  f87f				   .
   3966  f87f							;
   3967  f87f
   3968  f87f				   .
   3969  f87f							;
   3970  f87f
   3971  f87f				   .
   3972  f87f							;
   3973  f87f
   3974  f87f				   .
   3975  f87f							;
   3976  f87f
   3977  f87f				   .
   3978  f87f							;
   3979  f87f
   3980  f87f				   .
   3981  f87f							;
   3982  f87f
   3983  f87f				   .
   3984  f87f							;
   3985  f87f
   3986  f87f				   .
   3987  f87f							;
   3988  f87f
   3989  f87f				   .
   3990  f87f							;
   3991  f87f
   3992  f87f				   .L0138		;  if player1x  <=  player0x then goto __Skip_AI_Left
   3993  f87f
   3994  f87f		       a5 80		      LDA	player0x
   3995  f881		       c5 81		      CMP	player1x
   3996  f883		       90 03		      BCC	.skipL0138
   3997  f885				   .condpart53
   3998  f885		       4c da f8 	      jmp	.__Skip_AI_Left
   3999  f888
   4000  f888				   .skipL0138
   4001  f888				   .
   4002  f888							;
   4003  f888
   4004  f888				   .
   4005  f888							;
   4006  f888
   4007  f888				   .
   4008  f888							;
   4009  f888
   4010  f888				   .
   4011  f888							;
   4012  f888
   4013  f888				   .L0139		;  _Bit2_P1_Dir_Left{2}  =  1
   4014  f888
   4015  f888		       a5 de		      LDA	_Bit2_P1_Dir_Left
   4016  f88a		       09 04		      ORA	#4
   4017  f88c		       85 de		      STA	_Bit2_P1_Dir_Left
   4018  f88e				   .
   4019  f88e							;
   4020  f88e
   4021  f88e				   .
   4022  f88e							;
   4023  f88e
   4024  f88e				   .
   4025  f88e							;
   4026  f88e
   4027  f88e				   .
   4028  f88e							;
   4029  f88e
   4030  f88e				   .L0140		;  if player1x  <=  _P_Edge_Left then goto __Skip_AI_Left
   4031  f88e
   4032  f88e		       a9 01		      LDA	#_P_Edge_Left
   4033  f890		       c5 81		      CMP	player1x
   4034  f892		       90 03		      BCC	.skipL0140
   4035  f894				   .condpart54
   4036  f894		       4c da f8 	      jmp	.__Skip_AI_Left
   4037  f897
   4038  f897				   .skipL0140
   4039  f897				   .
   4040  f897							;
   4041  f897
   4042  f897				   .
   4043  f897							;
   4044  f897
   4045  f897				   .
   4046  f897							;
   4047  f897
   4048  f897				   .
   4049  f897							;
   4050  f897
   4051  f897				   .L0141		;  temp5  =   ( player1y - 1 )  / 8
   4052  f897
   4053  f897							; complex statement detected
   4054  f897		       a5 86		      LDA	player1y
   4055  f899		       38		      SEC
   4056  f89a		       e9 01		      SBC	#1
   4057  f89c		       4a		      lsr
   4058  f89d		       4a		      lsr
   4059  f89e		       4a		      lsr
   4060  f89f		       85 a0		      STA	temp5
   4061  f8a1				   .
   4062  f8a1							;
   4063  f8a1
   4064  f8a1				   .L0142		;  temp6  =   ( player1x - 18 )  / 4
   4065  f8a1
   4066  f8a1							; complex statement detected
   4067  f8a1		       a5 81		      LDA	player1x
   4068  f8a3		       38		      SEC
   4069  f8a4		       e9 12		      SBC	#18
   4070  f8a6		       4a		      lsr
   4071  f8a7		       4a		      lsr
   4072  f8a8		       85 a1		      STA	temp6
   4073  f8aa				   .
   4074  f8aa							;
   4075  f8aa
   4076  f8aa				   .L0143		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Left
   4077  f8aa
   4078  f8aa		       a5 a1		      LDA	temp6
   4079  f8ac		       c9 22		      CMP	#34
   4080  f8ae		       b0 0c		      BCS	.skipL0143
   4081  f8b0				   .condpart55
   4082  f8b0		       a5 a1		      LDA	temp6
   4083  f8b2		       a4 a0		      LDY	temp5
   4084  f8b4		       20 6b f2 	      jsr	pfread
   4085  f8b7		       d0 03		      BNE	.skip55then
   4086  f8b9				   .condpart56
   4087  f8b9		       4c da f8 	      jmp	.__Skip_AI_Left
   4088  f8bc
   4089  f8bc				   .skip55then
   4090  f8bc				   .skipL0143
   4091  f8bc				   .
   4092  f8bc							;
   4093  f8bc
   4094  f8bc				   .L0144		;  temp3  =   ( player1y - 8 )  / 8
   4095  f8bc
   4096  f8bc							; complex statement detected
   4097  f8bc		       a5 86		      LDA	player1y
   4098  f8be		       38		      SEC
   4099  f8bf		       e9 08		      SBC	#8
   4100  f8c1		       4a		      lsr
   4101  f8c2		       4a		      lsr
   4102  f8c3		       4a		      lsr
   4103  f8c4		       85 9e		      STA	temp3
   4104  f8c6				   .
   4105  f8c6							;
   4106  f8c6
   4107  f8c6				   .L0145		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Left
   4108  f8c6
   4109  f8c6		       a5 a1		      LDA	temp6
   4110  f8c8		       c9 22		      CMP	#34
   4111  f8ca		       b0 0c		      BCS	.skipL0145
   4112  f8cc				   .condpart57
   4113  f8cc		       a5 a1		      LDA	temp6
   4114  f8ce		       a4 9e		      LDY	temp3
   4115  f8d0		       20 6b f2 	      jsr	pfread
   4116  f8d3		       d0 03		      BNE	.skip57then
   4117  f8d5				   .condpart58
   4118  f8d5		       4c da f8 	      jmp	.__Skip_AI_Left
   4119  f8d8
   4120  f8d8				   .skip57then
   4121  f8d8				   .skipL0145
   4122  f8d8				   .
   4123  f8d8							;
   4124  f8d8
   4125  f8d8				   .
   4126  f8d8							;
   4127  f8d8
   4128  f8d8				   .
   4129  f8d8							;
   4130  f8d8
   4131  f8d8				   .
   4132  f8d8							;
   4133  f8d8
   4134  f8d8				   .L0146		;  player1x  =  player1x  -  1
   4135  f8d8
   4136  f8d8		       c6 81		      DEC	player1x
   4137  f8da				   .
   4138  f8da							;
   4139  f8da
   4140  f8da				   .__Skip_AI_Left
   4141  f8da							; __Skip_AI_Left
   4142  f8da
   4143  f8da				   .
   4144  f8da							;
   4145  f8da
   4146  f8da				   .
   4147  f8da							;
   4148  f8da
   4149  f8da				   .
   4150  f8da							;
   4151  f8da
   4152  f8da				   .
   4153  f8da							;
   4154  f8da
   4155  f8da				   .
   4156  f8da							;
   4157  f8da
   4158  f8da				   .
   4159  f8da							;
   4160  f8da
   4161  f8da				   .
   4162  f8da							;
   4163  f8da
   4164  f8da				   .
   4165  f8da							;
   4166  f8da
   4167  f8da				   .
   4168  f8da							;
   4169  f8da
   4170  f8da				   .L0147		;  if player1x  >=  player0x then goto __Skip_AI_Right
   4171  f8da
   4172  f8da		       a5 81		      LDA	player1x
   4173  f8dc		       c5 80		      CMP	player0x
   4174  f8de		       90 03		      BCC	.skipL0147
   4175  f8e0				   .condpart59
   4176  f8e0		       4c 35 f9 	      jmp	.__Skip_AI_Right
   4177  f8e3
   4178  f8e3				   .skipL0147
   4179  f8e3				   .
   4180  f8e3							;
   4181  f8e3
   4182  f8e3				   .
   4183  f8e3							;
   4184  f8e3
   4185  f8e3				   .
   4186  f8e3							;
   4187  f8e3
   4188  f8e3				   .
   4189  f8e3							;
   4190  f8e3
   4191  f8e3				   .L0148		;  _Bit3_P1_Dir_Right{3}  =  1
   4192  f8e3
   4193  f8e3		       a5 de		      LDA	_Bit3_P1_Dir_Right
   4194  f8e5		       09 08		      ORA	#8
   4195  f8e7		       85 de		      STA	_Bit3_P1_Dir_Right
   4196  f8e9				   .
   4197  f8e9							;
   4198  f8e9
   4199  f8e9				   .
   4200  f8e9							;
   4201  f8e9
   4202  f8e9				   .
   4203  f8e9							;
   4204  f8e9
   4205  f8e9				   .
   4206  f8e9							;
   4207  f8e9
   4208  f8e9				   .L0149		;  if player1x  >=  _P_Edge_Right then goto __Skip_AI_Right
   4209  f8e9
   4210  f8e9		       a5 81		      LDA	player1x
   4211  f8eb		       c9 99		      CMP	#_P_Edge_Right
   4212  f8ed		       90 03		      BCC	.skipL0149
   4213  f8ef				   .condpart60
   4214  f8ef		       4c 35 f9 	      jmp	.__Skip_AI_Right
   4215  f8f2
   4216  f8f2				   .skipL0149
   4217  f8f2				   .
   4218  f8f2							;
   4219  f8f2
   4220  f8f2				   .
   4221  f8f2							;
   4222  f8f2
   4223  f8f2				   .
   4224  f8f2							;
   4225  f8f2
   4226  f8f2				   .
   4227  f8f2							;
   4228  f8f2
   4229  f8f2				   .L0150		;  temp5  =   ( player1y - 1 )  / 8
   4230  f8f2
   4231  f8f2							; complex statement detected
   4232  f8f2		       a5 86		      LDA	player1y
   4233  f8f4		       38		      SEC
   4234  f8f5		       e9 01		      SBC	#1
   4235  f8f7		       4a		      lsr
   4236  f8f8		       4a		      lsr
   4237  f8f9		       4a		      lsr
   4238  f8fa		       85 a0		      STA	temp5
   4239  f8fc				   .
   4240  f8fc							;
   4241  f8fc
   4242  f8fc				   .L0151		;  temp6  =   ( player1x - 9 )  / 4
   4243  f8fc
   4244  f8fc							; complex statement detected
   4245  f8fc		       a5 81		      LDA	player1x
   4246  f8fe		       38		      SEC
   4247  f8ff		       e9 09		      SBC	#9
   4248  f901		       4a		      lsr
   4249  f902		       4a		      lsr
   4250  f903		       85 a1		      STA	temp6
   4251  f905				   .
   4252  f905							;
   4253  f905
   4254  f905				   .L0152		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Right
   4255  f905
   4256  f905		       a5 a1		      LDA	temp6
   4257  f907		       c9 22		      CMP	#34
   4258  f909		       b0 0c		      BCS	.skipL0152
   4259  f90b				   .condpart61
   4260  f90b		       a5 a1		      LDA	temp6
   4261  f90d		       a4 a0		      LDY	temp5
   4262  f90f		       20 6b f2 	      jsr	pfread
   4263  f912		       d0 03		      BNE	.skip61then
   4264  f914				   .condpart62
   4265  f914		       4c 35 f9 	      jmp	.__Skip_AI_Right
   4266  f917
   4267  f917				   .skip61then
   4268  f917				   .skipL0152
   4269  f917				   .
   4270  f917							;
   4271  f917
   4272  f917				   .L0153		;  temp3  =   ( player1y - 8 )  / 8
   4273  f917
   4274  f917							; complex statement detected
   4275  f917		       a5 86		      LDA	player1y
   4276  f919		       38		      SEC
   4277  f91a		       e9 08		      SBC	#8
   4278  f91c		       4a		      lsr
   4279  f91d		       4a		      lsr
   4280  f91e		       4a		      lsr
   4281  f91f		       85 9e		      STA	temp3
   4282  f921				   .
   4283  f921							;
   4284  f921
   4285  f921				   .L0154		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Right
   4286  f921
   4287  f921		       a5 a1		      LDA	temp6
   4288  f923		       c9 22		      CMP	#34
   4289  f925		       b0 0c		      BCS	.skipL0154
   4290  f927				   .condpart63
   4291  f927		       a5 a1		      LDA	temp6
   4292  f929		       a4 9e		      LDY	temp3
   4293  f92b		       20 6b f2 	      jsr	pfread
   4294  f92e		       d0 03		      BNE	.skip63then
   4295  f930				   .condpart64
   4296  f930		       4c 35 f9 	      jmp	.__Skip_AI_Right
   4297  f933
   4298  f933				   .skip63then
   4299  f933				   .skipL0154
   4300  f933				   .
   4301  f933							;
   4302  f933
   4303  f933				   .
   4304  f933							;
   4305  f933
   4306  f933				   .
   4307  f933							;
   4308  f933
   4309  f933				   .
   4310  f933							;
   4311  f933
   4312  f933				   .L0155		;  player1x  =  player1x  +  1
   4313  f933
   4314  f933		       e6 81		      INC	player1x
   4315  f935				   .
   4316  f935							;
   4317  f935
   4318  f935				   .__Skip_AI_Right
   4319  f935							; __Skip_AI_Right
   4320  f935
   4321  f935				   .
   4322  f935							;
   4323  f935
   4324  f935				   .
   4325  f935							;
   4326  f935
   4327  f935				   .
   4328  f935							;
   4329  f935
   4330  f935				   .
   4331  f935							;
   4332  f935
   4333  f935				   .
   4334  f935							;
   4335  f935
   4336  f935				   .
   4337  f935							;
   4338  f935
   4339  f935				   .
   4340  f935							;
   4341  f935
   4342  f935				   .
   4343  f935							;
   4344  f935
   4345  f935				   .
   4346  f935							;
   4347  f935
   4348  f935				   .
   4349  f935							;
   4350  f935
   4351  f935				   .
   4352  f935							;
   4353  f935
   4354  f935				   .
   4355  f935							;
   4356  f935
   4357  f935				   .L0156		;  if !joy0fire then goto __Skip_Fire
   4358  f935
   4359  f935		       24 0c		      bit	INPT4
   4360  f937		       10 03		      BPL	.skipL0156
   4361  f939				   .condpart65
   4362  f939		       4c d5 f9 	      jmp	.__Skip_Fire
   4363  f93c
   4364  f93c				   .skipL0156
   4365  f93c				   .
   4366  f93c							;
   4367  f93c
   4368  f93c				   .
   4369  f93c							;
   4370  f93c
   4371  f93c				   .
   4372  f93c							;
   4373  f93c
   4374  f93c				   .
   4375  f93c							;
   4376  f93c
   4377  f93c				   .L0157		;  if _Bit7_M0_Moving{7} then goto __Skip_Fire
   4378  f93c
   4379  f93c		       24 ec		      BIT	_Bit7_M0_Moving
   4380  f93e		       10 03		      BPL	.skipL0157
   4381  f940				   .condpart66
   4382  f940		       4c d5 f9 	      jmp	.__Skip_Fire
   4383  f943
   4384  f943				   .skipL0157
   4385  f943				   .
   4386  f943							;
   4387  f943
   4388  f943				   .
   4389  f943							;
   4390  f943
   4391  f943				   .
   4392  f943							;
   4393  f943
   4394  f943				   .
   4395  f943							;
   4396  f943
   4397  f943				   .L0158		;  _Bit7_M0_Moving{7}	=  1
   4398  f943
   4399  f943		       a5 ec		      LDA	_Bit7_M0_Moving
   4400  f945		       09 80		      ORA	#128
   4401  f947		       85 ec		      STA	_Bit7_M0_Moving
   4402  f949				   .
   4403  f949							;
   4404  f949
   4405  f949				   .
   4406  f949							;
   4407  f949
   4408  f949				   .
   4409  f949							;
   4410  f949
   4411  f949				   .
   4412  f949							;
   4413  f949
   4414  f949				   .
   4415  f949							;
   4416  f949
   4417  f949				   .L0159		;  _Bit4_M0_Dir_Up{4}	=  _Bit0_P0_Dir_Up{0}
   4418  f949
   4419  f949		       a5 da		      LDA	_Bit0_P0_Dir_Up
   4420  f94b		       29 01		      AND	#1
   4421  f94d		       08		      PHP
   4422  f94e		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4423  f950		       29 ef		      AND	#239
   4424  f952		       28		      PLP
   4425  f953		       f0 02		      .byte.b	$F0, $02
   4426  f955		       09 10		      ORA	#16
   4427  f957		       85 da		      STA	_Bit4_M0_Dir_Up
   4428  f959				   .L0160		;  _Bit5_M0_Dir_Down{5}  =  _Bit1_P0_Dir_Down{1}
   4429  f959
   4430  f959		       a5 da		      LDA	_Bit1_P0_Dir_Down
   4431  f95b		       29 02		      AND	#2
   4432  f95d		       08		      PHP
   4433  f95e		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4434  f960		       29 df		      AND	#223
   4435  f962		       28		      PLP
   4436  f963		       f0 02		      .byte.b	$F0, $02
   4437  f965		       09 20		      ORA	#32
   4438  f967		       85 da		      STA	_Bit5_M0_Dir_Down
   4439  f969				   .L0161		;  _Bit6_M0_Dir_Left{6}  =  _Bit2_P0_Dir_Left{2}
   4440  f969
   4441  f969		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4442  f96b		       29 04		      AND	#4
   4443  f96d		       08		      PHP
   4444  f96e		       a5 da		      LDA	_Bit6_M0_Dir_Left
   4445  f970		       29 bf		      AND	#191
   4446  f972		       28		      PLP
   4447  f973		       f0 02		      .byte.b	$F0, $02
   4448  f975		       09 40		      ORA	#64
   4449  f977		       85 da		      STA	_Bit6_M0_Dir_Left
   4450  f979				   .L0162		;  _Bit7_M0_Dir_Right{7}  =  _Bit3_P0_Dir_Right{3}
   4451  f979
   4452  f979		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4453  f97b		       29 08		      AND	#8
   4454  f97d		       08		      PHP
   4455  f97e		       a5 da		      LDA	_Bit7_M0_Dir_Right
   4456  f980		       29 7f		      AND	#127
   4457  f982		       28		      PLP
   4458  f983		       f0 02		      .byte.b	$F0, $02
   4459  f985		       09 80		      ORA	#128
   4460  f987		       85 da		      STA	_Bit7_M0_Dir_Right
   4461  f989				   .
   4462  f989							;
   4463  f989
   4464  f989				   .
   4465  f989							;
   4466  f989
   4467  f989				   .
   4468  f989							;
   4469  f989
   4470  f989				   .
   4471  f989							;
   4472  f989
   4473  f989				   .L0163		;  if _Bit4_M0_Dir_Up{4} then missile0x  =  player0x  +  4  :	missile0y  =  player0y	-  5
   4474  f989
   4475  f989		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4476  f98b		       29 10		      AND	#16
   4477  f98d		       f0 0e		      BEQ	.skipL0163
   4478  f98f				   .condpart67
   4479  f98f		       a5 80		      LDA	player0x
   4480  f991		       18		      CLC
   4481  f992		       69 04		      ADC	#4
   4482  f994		       85 82		      STA	missile0x
   4483  f996		       a5 85		      LDA	player0y
   4484  f998		       38		      SEC
   4485  f999		       e9 05		      SBC	#5
   4486  f99b		       85 91		      STA	missile0y
   4487  f99d				   .skipL0163
   4488  f99d				   .L0164		;  if _Bit5_M0_Dir_Down{5} then missile0x  =  player0x  +  4  :  missile0y  =	player0y  -  1
   4489  f99d
   4490  f99d		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4491  f99f		       29 20		      AND	#32
   4492  f9a1		       f0 0e		      BEQ	.skipL0164
   4493  f9a3				   .condpart68
   4494  f9a3		       a5 80		      LDA	player0x
   4495  f9a5		       18		      CLC
   4496  f9a6		       69 04		      ADC	#4
   4497  f9a8		       85 82		      STA	missile0x
   4498  f9aa		       a5 85		      LDA	player0y
   4499  f9ac		       38		      SEC
   4500  f9ad		       e9 01		      SBC	#1
   4501  f9af		       85 91		      STA	missile0y
   4502  f9b1				   .skipL0164
   4503  f9b1				   .L0165		;  if _Bit6_M0_Dir_Left{6} then missile0x  =  player0x  +  2  :  missile0y  =	player0y  -  3
   4504  f9b1
   4505  f9b1		       24 da		      BIT	_Bit6_M0_Dir_Left
   4506  f9b3		       50 0e		      BVC	.skipL0165
   4507  f9b5				   .condpart69
   4508  f9b5		       a5 80		      LDA	player0x
   4509  f9b7		       18		      CLC
   4510  f9b8		       69 02		      ADC	#2
   4511  f9ba		       85 82		      STA	missile0x
   4512  f9bc		       a5 85		      LDA	player0y
   4513  f9be		       38		      SEC
   4514  f9bf		       e9 03		      SBC	#3
   4515  f9c1		       85 91		      STA	missile0y
   4516  f9c3				   .skipL0165
   4517  f9c3				   .L0166		;  if _Bit7_M0_Dir_Right{7} then missile0x  =	player0x  +  6	:  missile0y  =  player0y  -  3
   4518  f9c3
   4519  f9c3		       24 da		      BIT	_Bit7_M0_Dir_Right
   4520  f9c5		       10 0e		      BPL	.skipL0166
   4521  f9c7				   .condpart70
   4522  f9c7		       a5 80		      LDA	player0x
   4523  f9c9		       18		      CLC
   4524  f9ca		       69 06		      ADC	#6
   4525  f9cc		       85 82		      STA	missile0x
   4526  f9ce		       a5 85		      LDA	player0y
   4527  f9d0		       38		      SEC
   4528  f9d1		       e9 03		      SBC	#3
   4529  f9d3		       85 91		      STA	missile0y
   4530  f9d5				   .skipL0166
   4531  f9d5				   .
   4532  f9d5							;
   4533  f9d5
   4534  f9d5				   .__Skip_Fire
   4535  f9d5							; __Skip_Fire
   4536  f9d5
   4537  f9d5				   .
   4538  f9d5							;
   4539  f9d5
   4540  f9d5				   .
   4541  f9d5							;
   4542  f9d5
   4543  f9d5				   .
   4544  f9d5							;
   4545  f9d5
   4546  f9d5				   .
   4547  f9d5							;
   4548  f9d5
   4549  f9d5				   .
   4550  f9d5							;
   4551  f9d5
   4552  f9d5				   .
   4553  f9d5							;
   4554  f9d5
   4555  f9d5				   .
   4556  f9d5							;
   4557  f9d5
   4558  f9d5				   .
   4559  f9d5							;
   4560  f9d5
   4561  f9d5				   .
   4562  f9d5							;
   4563  f9d5
   4564  f9d5				   .
   4565  f9d5							;
   4566  f9d5
   4567  f9d5				   .L0167		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   4568  f9d5
   4569  f9d5		       24 ec		      BIT	_Bit7_M0_Moving
   4570  f9d7		       30 03		      BMI	.skipL0167
   4571  f9d9				   .condpart71
   4572  f9d9		       4c 43 fa 	      jmp	.__Skip_Missile
   4573  f9dc
   4574  f9dc				   .skipL0167
   4575  f9dc				   .
   4576  f9dc							;
   4577  f9dc
   4578  f9dc				   .
   4579  f9dc							;
   4580  f9dc
   4581  f9dc				   .
   4582  f9dc							;
   4583  f9dc
   4584  f9dc				   .
   4585  f9dc							;
   4586  f9dc
   4587  f9dc				   .L0168		;  if _Bit4_M0_Dir_Up{4} then missile0y  =  missile0y	-  2
   4588  f9dc
   4589  f9dc		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4590  f9de		       29 10		      AND	#16
   4591  f9e0		       f0 07		      BEQ	.skipL0168
   4592  f9e2				   .condpart72
   4593  f9e2		       a5 91		      LDA	missile0y
   4594  f9e4		       38		      SEC
   4595  f9e5		       e9 02		      SBC	#2
   4596  f9e7		       85 91		      STA	missile0y
   4597  f9e9				   .skipL0168
   4598  f9e9				   .L0169		;  if _Bit5_M0_Dir_Down{5} then missile0y  =  missile0y  +  2
   4599  f9e9
   4600  f9e9		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4601  f9eb		       29 20		      AND	#32
   4602  f9ed		       f0 07		      BEQ	.skipL0169
   4603  f9ef				   .condpart73
   4604  f9ef		       a5 91		      LDA	missile0y
   4605  f9f1		       18		      CLC
   4606  f9f2		       69 02		      ADC	#2
   4607  f9f4		       85 91		      STA	missile0y
   4608  f9f6				   .skipL0169
   4609  f9f6				   .L0170		;  if _Bit6_M0_Dir_Left{6} then missile0x  =  missile0x  -  2
   4610  f9f6
   4611  f9f6		       24 da		      BIT	_Bit6_M0_Dir_Left
   4612  f9f8		       50 07		      BVC	.skipL0170
   4613  f9fa				   .condpart74
   4614  f9fa		       a5 82		      LDA	missile0x
   4615  f9fc		       38		      SEC
   4616  f9fd		       e9 02		      SBC	#2
   4617  f9ff		       85 82		      STA	missile0x
   4618  fa01				   .skipL0170
   4619  fa01				   .L0171		;  if _Bit7_M0_Dir_Right{7} then missile0x  =	missile0x  +  2
   4620  fa01
   4621  fa01		       24 da		      BIT	_Bit7_M0_Dir_Right
   4622  fa03		       10 07		      BPL	.skipL0171
   4623  fa05				   .condpart75
   4624  fa05		       a5 82		      LDA	missile0x
   4625  fa07		       18		      CLC
   4626  fa08		       69 02		      ADC	#2
   4627  fa0a		       85 82		      STA	missile0x
   4628  fa0c				   .skipL0171
   4629  fa0c				   .
   4630  fa0c							;
   4631  fa0c
   4632  fa0c				   .
   4633  fa0c							;
   4634  fa0c
   4635  fa0c				   .
   4636  fa0c							;
   4637  fa0c
   4638  fa0c				   .
   4639  fa0c							;
   4640  fa0c
   4641  fa0c				   .L0172		;  if missile0y  <  _M_Edge_Top then goto __Skip_to_Clear_Missile
   4642  fa0c
   4643  fa0c		       a5 91		      LDA	missile0y
   4644  fa0e		       c9 02		      CMP	#_M_Edge_Top
   4645  fa10		       b0 03		      BCS	.skipL0172
   4646  fa12				   .condpart76
   4647  fa12		       4c 37 fa 	      jmp	.__Skip_to_Clear_Missile
   4648  fa15
   4649  fa15				   .skipL0172
   4650  fa15				   .L0173		;  if missile0y  >  _M_Edge_Bottom then goto __Skip_to_Clear_Missile
   4651  fa15
   4652  fa15		       a9 58		      LDA	#_M_Edge_Bottom
   4653  fa17		       c5 91		      CMP	missile0y
   4654  fa19		       b0 03		      BCS	.skipL0173
   4655  fa1b				   .condpart77
   4656  fa1b		       4c 37 fa 	      jmp	.__Skip_to_Clear_Missile
   4657  fa1e
   4658  fa1e				   .skipL0173
   4659  fa1e				   .L0174		;  if missile0x  <  _M_Edge_Left then goto __Skip_to_Clear_Missile
   4660  fa1e
   4661  fa1e		       a5 82		      LDA	missile0x
   4662  fa20		       c9 02		      CMP	#_M_Edge_Left
   4663  fa22		       b0 03		      BCS	.skipL0174
   4664  fa24				   .condpart78
   4665  fa24		       4c 37 fa 	      jmp	.__Skip_to_Clear_Missile
   4666  fa27
   4667  fa27				   .skipL0174
   4668  fa27				   .L0175		;  if missile0x  >  _M_Edge_Right then goto __Skip_to_Clear_Missile
   4669  fa27
   4670  fa27		       a9 9f		      LDA	#_M_Edge_Right
   4671  fa29		       c5 82		      CMP	missile0x
   4672  fa2b		       b0 03		      BCS	.skipL0175
   4673  fa2d				   .condpart79
   4674  fa2d		       4c 37 fa 	      jmp	.__Skip_to_Clear_Missile
   4675  fa30
   4676  fa30				   .skipL0175
   4677  fa30				   .
   4678  fa30							;
   4679  fa30
   4680  fa30				   .
   4681  fa30							;
   4682  fa30
   4683  fa30				   .
   4684  fa30							;
   4685  fa30
   4686  fa30				   .
   4687  fa30							;
   4688  fa30
   4689  fa30				   .L0176		;  if !collision(playfield,missile0) then goto __Skip_Missile
   4690  fa30
   4691  fa30		       24 04		      bit	CXM0FB
   4692  fa32		       30 03		      BMI	.skipL0176
   4693  fa34				   .condpart80
   4694  fa34		       4c 43 fa 	      jmp	.__Skip_Missile
   4695  fa37
   4696  fa37				   .skipL0176
   4697  fa37				   .
   4698  fa37							;
   4699  fa37
   4700  fa37				   .__Skip_to_Clear_Missile
   4701  fa37							; __Skip_to_Clear_Missile
   4702  fa37
   4703  fa37				   .
   4704  fa37							;
   4705  fa37
   4706  fa37				   .
   4707  fa37							;
   4708  fa37
   4709  fa37				   .
   4710  fa37							;
   4711  fa37
   4712  fa37				   .
   4713  fa37							;
   4714  fa37
   4715  fa37				   .L0177		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   4716  fa37
   4717  fa37		       a5 ec		      LDA	_Bit7_M0_Moving
   4718  fa39		       29 7f		      AND	#127
   4719  fa3b		       85 ec		      STA	_Bit7_M0_Moving
   4720  fa3d		       a9 c8		      LDA	#200
   4721  fa3f		       85 82		      STA	missile0x
   4722  fa41		       85 91		      STA	missile0y
   4723  fa43				   .
   4724  fa43							;
   4725  fa43
   4726  fa43				   .__Skip_Missile
   4727  fa43							; __Skip_Missile
   4728  fa43
   4729  fa43				   .
   4730  fa43							;
   4731  fa43
   4732  fa43				   .
   4733  fa43							;
   4734  fa43
   4735  fa43				   .
   4736  fa43							;
   4737  fa43
   4738  fa43				   .
   4739  fa43							;
   4740  fa43
   4741  fa43				   .
   4742  fa43							;
   4743  fa43
   4744  fa43				   .L0178		;  drawscreen
   4745  fa43
   4746  fa43		       20 c1 f3 	      jsr	drawscreen
   4747  fa46				   .
   4748  fa46							;
   4749  fa46
   4750  fa46				   .
   4751  fa46							;
   4752  fa46
   4753  fa46				   .
   4754  fa46							;
   4755  fa46
   4756  fa46				   .
   4757  fa46							;
   4758  fa46
   4759  fa46				   .
   4760  fa46							;
   4761  fa46
   4762  fa46				   .
   4763  fa46							;
   4764  fa46
   4765  fa46				   .
   4766  fa46							;
   4767  fa46
   4768  fa46				   .
   4769  fa46							;
   4770  fa46
   4771  fa46				   .
   4772  fa46							;
   4773  fa46
   4774  fa46				   .
   4775  fa46							;
   4776  fa46
   4777  fa46				   .
   4778  fa46							;
   4779  fa46
   4780  fa46				   .
   4781  fa46							;
   4782  fa46
   4783  fa46				   .
   4784  fa46							;
   4785  fa46
   4786  fa46				   .
   4787  fa46							;
   4788  fa46
   4789  fa46				   .
   4790  fa46							;
   4791  fa46
   4792  fa46				   .L0179		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   4793  fa46
   4794  fa46		       a9 01		      lda	#1
   4795  fa48		       2c 82 02 	      bit	SWCHB
   4796  fa4b		       f0 09		      BEQ	.skipL0179
   4797  fa4d				   .condpart81
   4798  fa4d		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4799  fa4f		       29 fe		      AND	#254
   4800  fa51		       85 ec		      STA	_Bit0_Reset_Restrainer
   4801  fa53		       4c 7f f5 	      jmp	.__Main_Loop
   4802  fa56
   4803  fa56				   .skipL0179
   4804  fa56				   .
   4805  fa56							;
   4806  fa56
   4807  fa56				   .
   4808  fa56							;
   4809  fa56
   4810  fa56				   .
   4811  fa56							;
   4812  fa56
   4813  fa56				   .
   4814  fa56							;
   4815  fa56
   4816  fa56				   .
   4817  fa56							;
   4818  fa56
   4819  fa56				   .L0180		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   4820  fa56
   4821  fa56		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4822  fa58		       4a		      LSR
   4823  fa59		       90 03		      BCC	.skipL0180
   4824  fa5b				   .condpart82
   4825  fa5b		       4c 7f f5 	      jmp	.__Main_Loop
   4826  fa5e
   4827  fa5e				   .skipL0180
   4828  fa5e				   .
   4829  fa5e							;
   4830  fa5e
   4831  fa5e				   .
   4832  fa5e							;
   4833  fa5e
   4834  fa5e				   .
   4835  fa5e							;
   4836  fa5e
   4837  fa5e				   .
   4838  fa5e							;
   4839  fa5e
   4840  fa5e				   .L0181		;  goto __Start_Restart
   4841  fa5e
   4842  fa5e		       4c 61 f4 	      jmp	.__Start_Restart
   4843  fa61
   4844  fa61				  -	      if	(<*) > (<(*+7))
   4845  fa61				  -	      repeat	($100-<*)
   4846  fa61				  -	      .byte	0
   4847  fa61				  -	      repend
   4848  fa61					      endif
   4849  fa61				   playerL061_0
   4850  fa61		       24		      .byte.b	%00100100
   4851  fa62		       24		      .byte.b	%00100100
   4852  fa63		       24		      .byte.b	%00100100
   4853  fa64		       99		      .byte.b	%10011001
   4854  fa65		       5a		      .byte.b	%01011010
   4855  fa66		       3c		      .byte.b	%00111100
   4856  fa67		       18		      .byte.b	%00011000
   4857  fa68		       18		      .byte.b	%00011000
   4858  fa69				  -	      if	(<*) > (<(*+7))
   4859  fa69				  -	      repeat	($100-<*)
   4860  fa69				  -	      .byte	0
   4861  fa69				  -	      repend
   4862  fa69					      endif
   4863  fa69				   playerL062_1
   4864  fa69		       66		      .byte.b	%01100110
   4865  fa6a		       24		      .byte.b	%00100100
   4866  fa6b		       99		      .byte.b	%10011001
   4867  fa6c		       bd		      .byte.b	%10111101
   4868  fa6d		       7e		      .byte.b	%01111110
   4869  fa6e		       18		      .byte.b	%00011000
   4870  fa6f		       3c		      .byte.b	%00111100
   4871  fa70		       24		      .byte.b	%00100100
   4872  fa71					      if	ECHOFIRST
      1323 bytes of ROM space left
   4873  fa71					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4874  fa71					      endif
   4875  fa71		       00 01	   ECHOFIRST  =	1
   4876  fa71
   4877  fa71
   4878  fa71
   4879  fa71							; feel free to modify the score graphics - just keep each digit 8 high
   4880  fa71							; and keep the conditional compilation stuff intact
   4881  fa71				  -	      ifconst	ROM2k
   4882  fa71				  -	      ORG	$F7AC-8
   4883  fa71					      else
   4884  fa71				  -	      ifconst	bankswitch
   4885  fa71				  -	      if	bankswitch == 8
   4886  fa71				  -	      ORG	$2F94-bscode_length
   4887  fa71				  -	      RORG	$FF94-bscode_length
   4888  fa71				  -	      endif
   4889  fa71				  -	      if	bankswitch == 16
   4890  fa71				  -	      ORG	$4F94-bscode_length
   4891  fa71				  -	      RORG	$FF94-bscode_length
   4892  fa71				  -	      endif
   4893  fa71				  -	      if	bankswitch == 32
   4894  fa71				  -	      ORG	$8F94-bscode_length
   4895  fa71				  -	      RORG	$FF94-bscode_length
   4896  fa71				  -	      endif
   4897  fa71				  -	      if	bankswitch == 64
   4898  fa71				  -	      ORG	$10F80-bscode_length
   4899  fa71				  -	      RORG	$1FF80-bscode_length
   4900  fa71				  -	      endif
   4901  fa71					      else
   4902  ff9c					      ORG	$FF9C
   4903  ff9c					      endif
   4904  ff9c					      endif
   4905  ff9c
   4906  ff9c							; font equates
   4907  ff9c		       00 01	   .21stcentury =	1
   4908  ff9c		       00 02	   alarmclock =	2
   4909  ff9c		       00 03	   handwritten =	3
   4910  ff9c		       00 04	   interrupted =	4
   4911  ff9c		       00 05	   retroputer =	5
   4912  ff9c		       00 06	   whimsey    =	6
   4913  ff9c		       00 07	   tiny       =	7
   4914  ff9c
   4915  ff9c				   scoretable
   4916  ff9c
   4917  ff9c				  -	      ifconst	font
   4918  ff9c				  -	      if	font == .21stcentury
   4919  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4920  ff9c				  -	      endif
   4921  ff9c				  -	      if	font == alarmclock
   4922  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4923  ff9c				  -	      endif
   4924  ff9c				  -	      if	font == handwritten
   4925  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4926  ff9c				  -	      endif
   4927  ff9c				  -	      if	font == interrupted
   4928  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4929  ff9c				  -	      endif
   4930  ff9c				  -	      if	font == retroputer
   4931  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4932  ff9c				  -	      endif
   4933  ff9c				  -	      if	font == whimsey
   4934  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4935  ff9c				  -	      endif
   4936  ff9c				  -	      if	font == tiny
   4937  ff9c				  -	      include	"score_graphics.asm.tiny"
   4938  ff9c				  -	      endif
   4939  ff9c					      else		; default font
   4940  ff9c
   4941  ff9c		       3c		      .byte.b	%00111100
   4942  ff9d		       66		      .byte.b	%01100110
   4943  ff9e		       66		      .byte.b	%01100110
   4944  ff9f		       66		      .byte.b	%01100110
   4945  ffa0		       66		      .byte.b	%01100110
   4946  ffa1		       66		      .byte.b	%01100110
   4947  ffa2		       66		      .byte.b	%01100110
   4948  ffa3		       3c		      .byte.b	%00111100
   4949  ffa4
   4950  ffa4		       7e		      .byte.b	%01111110
   4951  ffa5		       18		      .byte.b	%00011000
   4952  ffa6		       18		      .byte.b	%00011000
   4953  ffa7		       18		      .byte.b	%00011000
   4954  ffa8		       18		      .byte.b	%00011000
   4955  ffa9		       38		      .byte.b	%00111000
   4956  ffaa		       18		      .byte.b	%00011000
   4957  ffab		       08		      .byte.b	%00001000
   4958  ffac
   4959  ffac		       7e		      .byte.b	%01111110
   4960  ffad		       60		      .byte.b	%01100000
   4961  ffae		       60		      .byte.b	%01100000
   4962  ffaf		       3c		      .byte.b	%00111100
   4963  ffb0		       06		      .byte.b	%00000110
   4964  ffb1		       06		      .byte.b	%00000110
   4965  ffb2		       46		      .byte.b	%01000110
   4966  ffb3		       3c		      .byte.b	%00111100
   4967  ffb4
   4968  ffb4		       3c		      .byte.b	%00111100
   4969  ffb5		       46		      .byte.b	%01000110
   4970  ffb6		       06		      .byte.b	%00000110
   4971  ffb7		       06		      .byte.b	%00000110
   4972  ffb8		       1c		      .byte.b	%00011100
   4973  ffb9		       06		      .byte.b	%00000110
   4974  ffba		       46		      .byte.b	%01000110
   4975  ffbb		       3c		      .byte.b	%00111100
   4976  ffbc
   4977  ffbc		       0c		      .byte.b	%00001100
   4978  ffbd		       0c		      .byte.b	%00001100
   4979  ffbe		       7e		      .byte.b	%01111110
   4980  ffbf		       4c		      .byte.b	%01001100
   4981  ffc0		       4c		      .byte.b	%01001100
   4982  ffc1		       2c		      .byte.b	%00101100
   4983  ffc2		       1c		      .byte.b	%00011100
   4984  ffc3		       0c		      .byte.b	%00001100
   4985  ffc4
   4986  ffc4		       3c		      .byte.b	%00111100
   4987  ffc5		       46		      .byte.b	%01000110
   4988  ffc6		       06		      .byte.b	%00000110
   4989  ffc7		       06		      .byte.b	%00000110
   4990  ffc8		       3c		      .byte.b	%00111100
   4991  ffc9		       60		      .byte.b	%01100000
   4992  ffca		       60		      .byte.b	%01100000
   4993  ffcb		       7e		      .byte.b	%01111110
   4994  ffcc
   4995  ffcc		       3c		      .byte.b	%00111100
   4996  ffcd		       66		      .byte.b	%01100110
   4997  ffce		       66		      .byte.b	%01100110
   4998  ffcf		       66		      .byte.b	%01100110
   4999  ffd0		       7c		      .byte.b	%01111100
   5000  ffd1		       60		      .byte.b	%01100000
   5001  ffd2		       62		      .byte.b	%01100010
   5002  ffd3		       3c		      .byte.b	%00111100
   5003  ffd4
   5004  ffd4		       30		      .byte.b	%00110000
   5005  ffd5		       30		      .byte.b	%00110000
   5006  ffd6		       30		      .byte.b	%00110000
   5007  ffd7		       18		      .byte.b	%00011000
   5008  ffd8		       0c		      .byte.b	%00001100
   5009  ffd9		       06		      .byte.b	%00000110
   5010  ffda		       42		      .byte.b	%01000010
   5011  ffdb		       3e		      .byte.b	%00111110
   5012  ffdc
   5013  ffdc		       3c		      .byte.b	%00111100
   5014  ffdd		       66		      .byte.b	%01100110
   5015  ffde		       66		      .byte.b	%01100110
   5016  ffdf		       66		      .byte.b	%01100110
   5017  ffe0		       3c		      .byte.b	%00111100
   5018  ffe1		       66		      .byte.b	%01100110
   5019  ffe2		       66		      .byte.b	%01100110
   5020  ffe3		       3c		      .byte.b	%00111100
   5021  ffe4
   5022  ffe4		       3c		      .byte.b	%00111100
   5023  ffe5		       46		      .byte.b	%01000110
   5024  ffe6		       06		      .byte.b	%00000110
   5025  ffe7		       3e		      .byte.b	%00111110
   5026  ffe8		       66		      .byte.b	%01100110
   5027  ffe9		       66		      .byte.b	%01100110
   5028  ffea		       66		      .byte.b	%01100110
   5029  ffeb		       3c		      .byte.b	%00111100
   5030  ffec
   5031  ffec					      ifnconst	DPC_kernel_options
   5032  ffec
   5033  ffec		       00		      .byte.b	%00000000
   5034  ffed		       00		      .byte.b	%00000000
   5035  ffee		       00		      .byte.b	%00000000
   5036  ffef		       00		      .byte.b	%00000000
   5037  fff0		       00		      .byte.b	%00000000
   5038  fff1		       00		      .byte.b	%00000000
   5039  fff2		       00		      .byte.b	%00000000
   5040  fff3		       00		      .byte.b	%00000000
   5041  fff4
   5042  fff4					      endif
   5043  fff4
   5044  fff4					      endif
   5045  fff4
   5046  fff4				  -	      ifconst	ROM2k
   5047  fff4				  -	      ORG	$F7FC
   5048  fff4					      else
   5049  fff4				  -	      ifconst	bankswitch
   5050  fff4				  -	      if	bankswitch == 8
   5051  fff4				  -	      ORG	$2FF4-bscode_length
   5052  fff4				  -	      RORG	$FFF4-bscode_length
   5053  fff4				  -	      endif
   5054  fff4				  -	      if	bankswitch == 16
   5055  fff4				  -	      ORG	$4FF4-bscode_length
   5056  fff4				  -	      RORG	$FFF4-bscode_length
   5057  fff4				  -	      endif
   5058  fff4				  -	      if	bankswitch == 32
   5059  fff4				  -	      ORG	$8FF4-bscode_length
   5060  fff4				  -	      RORG	$FFF4-bscode_length
   5061  fff4				  -	      endif
   5062  fff4				  -	      if	bankswitch == 64
   5063  fff4				  -	      ORG	$10FE0-bscode_length
   5064  fff4				  -	      RORG	$1FFE0-bscode_length
   5065  fff4				  -	      endif
   5066  fff4					      else
   5067  fffc					      ORG	$FFFC
   5068  fffc					      endif
   5069  fffc					      endif
   5070  fffc				  -	      ifconst	bankswitch
   5071  fffc				  -	      if	bankswitch == 8
   5072  fffc				  -	      ORG	$2FFC
   5073  fffc				  -	      RORG	$FFFC
   5074  fffc				  -	      endif
   5075  fffc				  -	      if	bankswitch == 16
   5076  fffc				  -	      ORG	$4FFC
   5077  fffc				  -	      RORG	$FFFC
   5078  fffc				  -	      endif
   5079  fffc				  -	      if	bankswitch == 32
   5080  fffc				  -	      ORG	$8FFC
   5081  fffc				  -	      RORG	$FFFC
   5082  fffc				  -	      endif
   5083  fffc				  -	      if	bankswitch == 64
   5084  fffc				  -	      ORG	$10FF0
   5085  fffc				  -	      RORG	$1FFF0
   5086  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5087  fffc				  -	      ORG	$10FF8
   5088  fffc				  -	      RORG	$1FFF8
   5089  fffc				  -	      ifconst	superchip
   5090  fffc				  -	      .byte	"E","F","S","C"
   5091  fffc				  -	      else
   5092  fffc				  -	      .byte	"E","F","E","F"
   5093  fffc				  -	      endif
   5094  fffc				  -	      ORG	$10FFC
   5095  fffc				  -	      RORG	$1FFFC
   5096  fffc				  -	      endif
   5097  fffc					      else
   5098  fffc				  -	      ifconst	ROM2k
   5099  fffc				  -	      ORG	$F7FC
   5100  fffc					      else
   5101  fffc					      ORG	$FFFC
   5102  fffc					      endif
   5103  fffc					      endif
   5104  fffc		       00 f0		      .word.w	start
   5105  fffe		       00 f0		      .word.w	start
