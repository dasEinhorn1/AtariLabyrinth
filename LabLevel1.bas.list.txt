------- FILE LabLevel1.bas.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 9f	    _M_Edge_Right =	159
     10  10000 ????
     11  10000 ????		00 02	    _M_Edge_Left =	2
     12  10000 ????
     13  10000 ????		00 58	    _M_Edge_Bottom =	88
     14  10000 ????
     15  10000 ????		00 02	    _M_Edge_Top =	2
     16  10000 ????
     17  10000 ????		00 a0	    _B_Edge_Right =	160
     18  10000 ????
     19  10000 ????		00 02	    _B_Edge_Left =	2
     20  10000 ????
     21  10000 ????		00 58	    _B_Edge_Bottom =	88
     22  10000 ????
     23  10000 ????		00 02	    _B_Edge_Top =	2
     24  10000 ????
     25  10000 ????		00 99	    _P_Edge_Right =	153
     26  10000 ????
     27  10000 ????		00 01	    _P_Edge_Left =	1
     28  10000 ????
     29  10000 ????		00 58	    _P_Edge_Bottom =	88
     30  10000 ????
     31  10000 ????		00 09	    _P_Edge_Top =	9
     32  10000 ????
     33  10000 ????		00 ed	    rand16     =	z
     34  10000 ????
     35  10000 ????		00 ec	    _Bit2_M0_Moving =	y
     36  10000 ????
     37  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     38  10000 ????
     39  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     40  10000 ????
     41  10000 ????		00 ec	    _BitOp_01  =	y
     42  10000 ????
     43  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     44  10000 ????
     45  10000 ????		00 32	    _Minotaur_Awareness_Size =	50
     46  10000 ????
     47  10000 ????		00 db	    _Frame_Count =	h
     48  10000 ????
     49  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     50  10000 ????
     51  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     52  10000 ????
     53  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     54  10000 ????
     55  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     56  10000 ????
     57  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     58  10000 ????
     59  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     60  10000 ????
     61  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     64  10000 ????
     65  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     66  10000 ????
     67  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     68  10000 ????
     69  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     74  10000 ????
     75  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     76  10000 ????
     77  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     78  10000 ????
     79  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     82  10000 ????
     83  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     84  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE LabLevel1.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 9f	    _M_Edge_Right =	159
     10  10000 ????
     11  10000 ????		00 02	    _M_Edge_Left =	2
     12  10000 ????
     13  10000 ????		00 58	    _M_Edge_Bottom =	88
     14  10000 ????
     15  10000 ????		00 02	    _M_Edge_Top =	2
     16  10000 ????
     17  10000 ????		00 a0	    _B_Edge_Right =	160
     18  10000 ????
     19  10000 ????		00 02	    _B_Edge_Left =	2
     20  10000 ????
     21  10000 ????		00 58	    _B_Edge_Bottom =	88
     22  10000 ????
     23  10000 ????		00 02	    _B_Edge_Top =	2
     24  10000 ????
     25  10000 ????		00 99	    _P_Edge_Right =	153
     26  10000 ????
     27  10000 ????		00 01	    _P_Edge_Left =	1
     28  10000 ????
     29  10000 ????		00 58	    _P_Edge_Bottom =	88
     30  10000 ????
     31  10000 ????		00 09	    _P_Edge_Top =	9
     32  10000 ????
     33  10000 ????		00 ed	    rand16     =	z
     34  10000 ????
     35  10000 ????		00 ec	    _Bit2_M0_Moving =	y
     36  10000 ????
     37  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     38  10000 ????
     39  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     40  10000 ????
     41  10000 ????		00 ec	    _BitOp_01  =	y
     42  10000 ????
     43  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     44  10000 ????
     45  10000 ????		00 32	    _Minotaur_Awareness_Size =	50
     46  10000 ????
     47  10000 ????		00 db	    _Frame_Count =	h
     48  10000 ????
     49  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     50  10000 ????
     51  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     52  10000 ????
     53  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     54  10000 ????
     55  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     56  10000 ????
     57  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     58  10000 ????
     59  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     60  10000 ????
     61  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     64  10000 ????
     65  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     66  10000 ????
     67  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     68  10000 ????
     69  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     74  10000 ????
     75  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     76  10000 ????
     77  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     78  10000 ????
     79  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     82  10000 ????
     83  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     84  10000 ????
------- FILE LabLevel1.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 61 f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x 
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8 
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6					      ifconst	rand16
   1369  f3b6		       26 ed		      rol	rand16
   1370  f3b8					      endif
   1371  f3b8		       90 02		      bcc	noeor
   1372  f3ba		       49 b4		      eor	#$B4
   1373  f3bc				   noeor
   1374  f3bc		       85 a2		      sta	rand
   1375  f3be					      ifconst	rand16
   1376  f3be		       45 ed		      eor	rand16
   1377  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1379  f3c1				   drawscreen
   1380  f3c1				  -	      ifconst	debugscore
   1381  f3c1				  -	      ldx	#14
   1382  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3c1				  -
   1384  f3c1				  -	      ifconst	mincycles
   1385  f3c1				  -	      lda	mincycles
   1386  f3c1				  -	      cmp	INTIM
   1387  f3c1				  -	      lda	mincycles
   1388  f3c1				  -	      bcc	nochange
   1389  f3c1				  -	      lda	INTIM
   1390  f3c1				  -	      sta	mincycles
   1391  f3c1				  -nochange
   1392  f3c1				  -	      endif
   1393  f3c1				  -
   1394  f3c1				  -			; cmp #$2B
   1395  f3c1				  -			; bcs no_cycles_left
   1396  f3c1				  -	      bmi	cycles_left
   1397  f3c1				  -	      ldx	#64
   1398  f3c1				  -	      eor	#$ff	;make negative
   1399  f3c1				  -cycles_left
   1400  f3c1				  -	      stx	scorecolor
   1401  f3c1				  -	      and	#$7f	; clear sign bit
   1402  f3c1				  -	      tax
   1403  f3c1				  -	      lda	scorebcd,x
   1404  f3c1				  -	      sta	score+2
   1405  f3c1				  -	      lda	scorebcd1,x
   1406  f3c1				  -	      sta	score+1
   1407  f3c1				  -	      jmp	done_debugscore
   1408  f3c1				  -scorebcd
   1409  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3c1				  -scorebcd1
   1414  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3c1				  -done_debugscore
   1419  f3c1					      endif
   1420  f3c1
   1421  f3c1				  -	      ifconst	debugcycles
   1422  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3c1				  -			; cmp #$2B
   1424  f3c1				  -			; BCC overscan
   1425  f3c1				  -	      bmi	overscan
   1426  f3c1				  -	      sta	COLUBK
   1427  f3c1				  -	      bcs	doneoverscan
   1428  f3c1					      endif
   1429  f3c1
   1430  f3c1				   overscan
   1431  f3c1				  -	      ifconst	interlaced
   1432  f3c1				  -	      PHP
   1433  f3c1				  -	      PLA
   1434  f3c1				  -	      EOR	#4	; flip interrupt bit
   1435  f3c1				  -	      PHA
   1436  f3c1				  -	      PLP
   1437  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1438  f3c1				  -	      TAX		; save it for later
   1439  f3c1					      endif
   1440  f3c1
   1441  f3c1				   overscanloop
   1442  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c4		       30 fb		      bmi	overscanloop
   1444  f3c6				   doneoverscan
   1445  f3c6
   1446  f3c6							;do VSYNC
   1447  f3c6
   1448  f3c6				  -	      ifconst	interlaced
   1449  f3c6				  -	      CPX	#4
   1450  f3c6				  -	      BNE	oddframevsync
   1451  f3c6					      endif
   1452  f3c6
   1453  f3c6		       a9 02		      lda	#2
   1454  f3c8		       85 02		      sta	WSYNC
   1455  f3ca		       85 00		      sta	VSYNC
   1456  f3cc		       85 02		      STA	WSYNC
   1457  f3ce		       85 02		      STA	WSYNC
   1458  f3d0		       4a		      lsr
   1459  f3d1		       85 02		      STA	WSYNC
   1460  f3d3		       85 00		      STA	VSYNC
   1461  f3d5		       85 01		      sta	VBLANK
   1462  f3d7					      ifnconst	overscan_time
   1463  f3d7		       a9 a5		      lda	#37+128
   1464  f3d9				  -	      else
   1465  f3d9				  -	      lda	#overscan_time+128
   1466  f3d9					      endif
   1467  f3d9		       8d 96 02 	      sta	TIM64T
   1468  f3dc
   1469  f3dc				  -	      ifconst	interlaced
   1470  f3dc				  -	      jmp	postsync
   1471  f3dc				  -
   1472  f3dc				  -oddframevsync
   1473  f3dc				  -	      sta	WSYNC
   1474  f3dc				  -
   1475  f3dc				  -	      LDA	($80,X)	; 11 waste
   1476  f3dc				  -	      LDA	($80,X)	; 11 waste
   1477  f3dc				  -	      LDA	($80,X)	; 11 waste
   1478  f3dc				  -
   1479  f3dc				  -	      lda	#2
   1480  f3dc				  -	      sta	VSYNC
   1481  f3dc				  -	      sta	WSYNC
   1482  f3dc				  -	      sta	WSYNC
   1483  f3dc				  -	      sta	WSYNC
   1484  f3dc				  -
   1485  f3dc				  -	      LDA	($80,X)	; 11 waste
   1486  f3dc				  -	      LDA	($80,X)	; 11 waste
   1487  f3dc				  -	      LDA	($80,X)	; 11 waste
   1488  f3dc				  -
   1489  f3dc				  -	      lda	#0
   1490  f3dc				  -	      sta	VSYNC
   1491  f3dc				  -	      sta	VBLANK
   1492  f3dc				  -	      ifnconst	overscan_time
   1493  f3dc				  -	      lda	#37+128
   1494  f3dc				  -	      else
   1495  f3dc				  -	      lda	#overscan_time+128
   1496  f3dc				  -	      endif
   1497  f3dc				  -	      sta	TIM64T
   1498  f3dc				  -
   1499  f3dc				  -postsync
   1500  f3dc					      endif
   1501  f3dc
   1502  f3dc				  -	      ifconst	legacy
   1503  f3dc				  -	      if	legacy < 100
   1504  f3dc				  -	      ldx	#4
   1505  f3dc				  -adjustloop
   1506  f3dc				  -	      lda	player0x,x
   1507  f3dc				  -	      sec
   1508  f3dc				  -	      sbc	#14	;?
   1509  f3dc				  -	      sta	player0x,x
   1510  f3dc				  -	      dex
   1511  f3dc				  -	      bpl	adjustloop
   1512  f3dc				  -	      endif
   1513  f3dc					      endif
   1514  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3dc				  -	      repeat	($fa-(<*))
   1516  f3dc				  -	      nop
   1517  f3dc				  -	      repend
   1518  f3dc					      endif
   1519  f3dc		       85 02		      sta	WSYNC
   1520  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1522  f3e2				   HorPosLoop		; 5
   1523  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e4		       38		      sec		;+2 11
   1525  f3e5				   DivideLoop
   1526  f3e5		       e9 0f		      sbc	#15
   1527  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1529  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1530  f3ed		       85 02		      sta	WSYNC
   1531  f3ef		       ca		      dex
   1532  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3f2							; 4
   1534  f3f2
   1535  f3f2		       a2 04		      ldx	#4
   1536  f3f4		       b4 9c		      ldy	temp1,X
   1537  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1538  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1539  f3fb
   1540  f3fb		       ca		      dex
   1541  f3fc		       b4 9c		      ldy	temp1,X
   1542  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1543  f401		       95 20		      sta	HMP0,X	;+14 32
   1544  f403
   1545  f403		       ca		      dex
   1546  f404		       b4 9c		      ldy	temp1,X
   1547  f406		       b9 52 f3 	      lda	repostable-256,Y
   1548  f409		       95 20		      sta	HMP0,X	;+14 46
   1549  f40b
   1550  f40b		       ca		      dex
   1551  f40c		       b4 9c		      ldy	temp1,X
   1552  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1553  f411		       95 20		      sta	HMP0,X	;+14 60
   1554  f413
   1555  f413		       ca		      dex
   1556  f414		       b4 9c		      ldy	temp1,X
   1557  f416		       b9 52 f3 	      lda	repostable-256,Y
   1558  f419		       95 20		      sta	HMP0,X	;+14 74
   1559  f41b
   1560  f41b		       85 02		      sta	WSYNC
   1561  f41d
   1562  f41d		       85 2a		      sta	HMOVE	;+3 3
   1563  f41f
   1564  f41f
   1565  f41f				  -	      ifconst	legacy
   1566  f41f				  -	      if	legacy < 100
   1567  f41f				  -	      ldx	#4
   1568  f41f				  -adjustloop2
   1569  f41f				  -	      lda	player0x,x
   1570  f41f				  -	      clc
   1571  f41f				  -	      adc	#14	;?
   1572  f41f				  -	      sta	player0x,x
   1573  f41f				  -	      dex
   1574  f41f				  -	      bpl	adjustloop2
   1575  f41f				  -	      endif
   1576  f41f					      endif
   1577  f41f
   1578  f41f
   1579  f41f
   1580  f41f
   1581  f41f							;set score pointers
   1582  f41f		       a7 95		      lax	score+2
   1583  f421		       20 52 f4 	      jsr	scorepointerset
   1584  f424		       84 9b		      sty	scorepointers+5
   1585  f426		       86 98		      stx	scorepointers+2
   1586  f428		       a7 94		      lax	score+1
   1587  f42a		       20 52 f4 	      jsr	scorepointerset
   1588  f42d		       84 9a		      sty	scorepointers+4
   1589  f42f		       86 97		      stx	scorepointers+1
   1590  f431		       a7 93		      lax	score
   1591  f433		       20 52 f4 	      jsr	scorepointerset
   1592  f436		       84 99		      sty	scorepointers+3
   1593  f438		       86 96		      stx	scorepointers
   1594  f43a
   1595  f43a				   vblk
   1596  f43a							; run possible vblank bB code
   1597  f43a				  -	      ifconst	vblank_bB_code
   1598  f43a				  -	      jsr	vblank_bB_code
   1599  f43a					      endif
   1600  f43a				   vblk2
   1601  f43a		       ad 84 02 	      LDA	INTIM
   1602  f43d		       30 fb		      bmi	vblk2
   1603  f43f		       4c 34 f0 	      jmp	kernel
   1604  f442
   1605  f442
   1606  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f452				   repostable
   1609  f452
   1610  f452				   scorepointerset
   1611  f452		       29 0f		      and	#$0F
   1612  f454		       0a		      asl
   1613  f455		       0a		      asl
   1614  f456		       0a		      asl
   1615  f457		       69 9c		      adc	#<scoretable
   1616  f459		       a8		      tay
   1617  f45a		       8a		      txa
   1618  f45b							; and #$F0
   1619  f45b							; lsr
   1620  f45b		       4b f0		      asr	#$F0
   1621  f45d		       69 9c		      adc	#<scoretable
   1622  f45f		       aa		      tax
   1623  f460		       60		      rts
   1624  f461				   game
   1625  f461				   .
   1626  f461							;
   1627  f461
   1628  f461				   .
   1629  f461							;
   1630  f461
   1631  f461				   .
   1632  f461							;
   1633  f461
   1634  f461				   .
   1635  f461							;
   1636  f461
   1637  f461				   .
   1638  f461							;
   1639  f461
   1640  f461				   .
   1641  f461							;
   1642  f461
   1643  f461				   .
   1644  f461							;
   1645  f461
   1646  f461				   .
   1647  f461							;
   1648  f461
   1649  f461				   .
   1650  f461							;
   1651  f461
   1652  f461				   .
   1653  f461							;
   1654  f461
   1655  f461				   .
   1656  f461							;
   1657  f461
   1658  f461				   .
   1659  f461							;
   1660  f461
   1661  f461				   .
   1662  f461							;
   1663  f461
   1664  f461				   .
   1665  f461							;
   1666  f461
   1667  f461				   .
   1668  f461							;
   1669  f461
   1670  f461				   .
   1671  f461							;
   1672  f461
   1673  f461				   .
   1674  f461							;
   1675  f461
   1676  f461				   .
   1677  f461							;
   1678  f461
   1679  f461				   .
   1680  f461							;
   1681  f461
   1682  f461				   .
   1683  f461							;
   1684  f461
   1685  f461				   .
   1686  f461							;
   1687  f461
   1688  f461				   .
   1689  f461							;
   1690  f461
   1691  f461				   .
   1692  f461							;
   1693  f461
   1694  f461				   .
   1695  f461							;
   1696  f461
   1697  f461				   .
   1698  f461							;
   1699  f461
   1700  f461				   .
   1701  f461							;
   1702  f461
   1703  f461				   .
   1704  f461							;
   1705  f461
   1706  f461				   .
   1707  f461							;
   1708  f461
   1709  f461				   .
   1710  f461							;
   1711  f461
   1712  f461				   .
   1713  f461							;
   1714  f461
   1715  f461				   .
   1716  f461							;
   1717  f461
   1718  f461				   .
   1719  f461							;
   1720  f461
   1721  f461				   .
   1722  f461							;
   1723  f461
   1724  f461				   .
   1725  f461							;
   1726  f461
   1727  f461				   .
   1728  f461							;
   1729  f461
   1730  f461				   .
   1731  f461							;
   1732  f461
   1733  f461				   .
   1734  f461							;
   1735  f461
   1736  f461				   .
   1737  f461							;
   1738  f461
   1739  f461				   .
   1740  f461							;
   1741  f461
   1742  f461				   .
   1743  f461							;
   1744  f461
   1745  f461				   .
   1746  f461							;
   1747  f461
   1748  f461				   .
   1749  f461							;
   1750  f461
   1751  f461				   .
   1752  f461							;
   1753  f461
   1754  f461				   .
   1755  f461							;
   1756  f461
   1757  f461				   .
   1758  f461							;
   1759  f461
   1760  f461				   .
   1761  f461							;
   1762  f461
   1763  f461				   .
   1764  f461							;
   1765  f461
   1766  f461				   .
   1767  f461							;
   1768  f461
   1769  f461				   .
   1770  f461							;
   1771  f461
   1772  f461				   .
   1773  f461							;
   1774  f461
   1775  f461				   .
   1776  f461							;
   1777  f461
   1778  f461				   .
   1779  f461							;
   1780  f461
   1781  f461				   .
   1782  f461							;
   1783  f461
   1784  f461				   .L00 		;  dim _BitOp_P0_M0_Dir  =  g
   1785  f461
   1786  f461				   .L01 		;  dim _Bit0_P0_Dir_Up  =  g
   1787  f461
   1788  f461				   .L02 		;  dim _Bit1_P0_Dir_Down  =  g
   1789  f461
   1790  f461				   .L03 		;  dim _Bit2_P0_Dir_Left  =  g
   1791  f461
   1792  f461				   .L04 		;  dim _Bit3_P0_Dir_Right  =  g
   1793  f461
   1794  f461				   .L05 		;  dim _Bit4_M0_Dir_Up  =  g
   1795  f461
   1796  f461				   .L06 		;  dim _Bit5_M0_Dir_Down  =  g
   1797  f461
   1798  f461				   .L07 		;  dim _Bit6_M0_Dir_Left  =  g
   1799  f461
   1800  f461				   .L08 		;  dim _Bit7_M0_Dir_Right  =  g
   1801  f461
   1802  f461				   .
   1803  f461							;
   1804  f461
   1805  f461				   .
   1806  f461							;
   1807  f461
   1808  f461				   .
   1809  f461							;
   1810  f461
   1811  f461				   .L09 		;  dim _BitOp_P1_M1_Dir  =  k
   1812  f461
   1813  f461				   .L010		;  dim _Bit0_P1_Dir_Up  =  k
   1814  f461
   1815  f461				   .L011		;  dim _Bit1_P1_Dir_Down  =  k
   1816  f461
   1817  f461				   .L012		;  dim _Bit2_P1_Dir_Left  =  k
   1818  f461
   1819  f461				   .L013		;  dim _Bit3_P1_Dir_Right  =  k
   1820  f461
   1821  f461				   .L014		;  dim _Bit4_P1_Col_Up  =  k
   1822  f461
   1823  f461				   .L015		;  dim _Bit5_P1_Col_Down  =  k
   1824  f461
   1825  f461				   .L016		;  dim _Bit6_P1_Col_Left  =  k
   1826  f461
   1827  f461				   .L017		;  dim _Bit7_P1_Col_Right  =  k
   1828  f461
   1829  f461				   .
   1830  f461							;
   1831  f461
   1832  f461				   .L018		;  dim _Frame_Count  =  h
   1833  f461
   1834  f461				   .
   1835  f461							;
   1836  f461
   1837  f461				   .
   1838  f461							;
   1839  f461
   1840  f461				   .
   1841  f461							;
   1842  f461
   1843  f461				   .
   1844  f461							;
   1845  f461
   1846  f461				   .L019		;  const _Minotaur_Awareness_Size  =  50
   1847  f461
   1848  f461				   .
   1849  f461							;
   1850  f461
   1851  f461				   .
   1852  f461							;
   1853  f461
   1854  f461				   .
   1855  f461							;
   1856  f461
   1857  f461				   .
   1858  f461							;
   1859  f461
   1860  f461				   .L020		;  dim _Bit0_Carrying_Gem  =  x
   1861  f461
   1862  f461				   .
   1863  f461							;
   1864  f461
   1865  f461				   .
   1866  f461							;
   1867  f461
   1868  f461				   .
   1869  f461							;
   1870  f461
   1871  f461				   .
   1872  f461							;
   1873  f461
   1874  f461				   .L021		;  dim _BitOp_01  =  y
   1875  f461
   1876  f461				   .L022		;  dim _Bit0_Reset_Restrainer	=  y
   1877  f461
   1878  f461				   .L023		;  dim _Bit1_Toggle_Screen  =	y
   1879  f461
   1880  f461				   .L024		;  dim _Bit2_M0_Moving  =  y
   1881  f461
   1882  f461				   .
   1883  f461							;
   1884  f461
   1885  f461				   .
   1886  f461							;
   1887  f461
   1888  f461				   .
   1889  f461							;
   1890  f461
   1891  f461				   .
   1892  f461							;
   1893  f461
   1894  f461				   .L025		;  dim rand16	=  z
   1895  f461
   1896  f461				   .
   1897  f461							;
   1898  f461
   1899  f461				   .
   1900  f461							;
   1901  f461
   1902  f461				   .
   1903  f461							;
   1904  f461
   1905  f461				   .
   1906  f461							;
   1907  f461
   1908  f461				   .
   1909  f461							;
   1910  f461
   1911  f461				   .
   1912  f461							;
   1913  f461
   1914  f461				   .
   1915  f461							;
   1916  f461
   1917  f461				   .
   1918  f461							;
   1919  f461
   1920  f461				   .
   1921  f461							;
   1922  f461
   1923  f461				   .L026		;  const _P_Edge_Top  =  9
   1924  f461
   1925  f461				   .L027		;  const _P_Edge_Bottom  =  88
   1926  f461
   1927  f461				   .L028		;  const _P_Edge_Left	=  1
   1928  f461
   1929  f461				   .L029		;  const _P_Edge_Right  =  153
   1930  f461
   1931  f461				   .
   1932  f461							;
   1933  f461
   1934  f461				   .
   1935  f461							;
   1936  f461
   1937  f461				   .
   1938  f461							;
   1939  f461
   1940  f461				   .
   1941  f461							;
   1942  f461
   1943  f461				   .
   1944  f461							;
   1945  f461
   1946  f461				   .
   1947  f461							;
   1948  f461
   1949  f461				   .
   1950  f461							;
   1951  f461
   1952  f461				   .
   1953  f461							;
   1954  f461
   1955  f461				   .L030		;  const _B_Edge_Top  =  2
   1956  f461
   1957  f461				   .L031		;  const _B_Edge_Bottom  =  88
   1958  f461
   1959  f461				   .L032		;  const _B_Edge_Left	=  2
   1960  f461
   1961  f461				   .L033		;  const _B_Edge_Right  =  160
   1962  f461
   1963  f461				   .
   1964  f461							;
   1965  f461
   1966  f461				   .
   1967  f461							;
   1968  f461
   1969  f461				   .
   1970  f461							;
   1971  f461
   1972  f461				   .
   1973  f461							;
   1974  f461
   1975  f461				   .
   1976  f461							;
   1977  f461
   1978  f461				   .
   1979  f461							;
   1980  f461
   1981  f461				   .
   1982  f461							;
   1983  f461
   1984  f461				   .
   1985  f461							;
   1986  f461
   1987  f461				   .
   1988  f461							;
   1989  f461
   1990  f461				   .L034		;  const _M_Edge_Top  =  2
   1991  f461
   1992  f461				   .L035		;  const _M_Edge_Bottom  =  88
   1993  f461
   1994  f461				   .L036		;  const _M_Edge_Left	=  2
   1995  f461
   1996  f461				   .L037		;  const _M_Edge_Right  =  159
   1997  f461
   1998  f461				   .
   1999  f461							;
   2000  f461
   2001  f461				   .
   2002  f461							;
   2003  f461
   2004  f461				   .
   2005  f461							;
   2006  f461
   2007  f461				   .
   2008  f461							;
   2009  f461
   2010  f461				   .
   2011  f461							;
   2012  f461
   2013  f461				   .
   2014  f461							;
   2015  f461
   2016  f461				   .
   2017  f461							;
   2018  f461
   2019  f461				   .__Start_Restart
   2020  f461							; __Start_Restart
   2021  f461
   2022  f461				   .
   2023  f461							;
   2024  f461
   2025  f461				   .
   2026  f461							;
   2027  f461
   2028  f461				   .
   2029  f461							;
   2030  f461
   2031  f461				   .
   2032  f461							;
   2033  f461
   2034  f461				   .
   2035  f461							;
   2036  f461
   2037  f461				   .
   2038  f461							;
   2039  f461
   2040  f461				   .L038		;  AUDV0  =  0  :  AUDV1  =  0
   2041  f461
   2042  f461		       a9 00		      LDA	#0
   2043  f463		       85 19		      STA	AUDV0
   2044  f465		       85 1a		      STA	AUDV1
   2045  f467				   .
   2046  f467							;
   2047  f467
   2048  f467				   .
   2049  f467							;
   2050  f467
   2051  f467				   .
   2052  f467							;
   2053  f467
   2054  f467				   .
   2055  f467							;
   2056  f467
   2057  f467				   .
   2058  f467							;
   2059  f467
   2060  f467				   .
   2061  f467							;
   2062  f467
   2063  f467				   .
   2064  f467							;
   2065  f467
   2066  f467				   .
   2067  f467							;
   2068  f467
   2069  f467				   .
   2070  f467							;
   2071  f467
   2072  f467				   .L039		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2073  f467
   2074  f467		       a9 00		      LDA	#0
   2075  f469		       85 d4		      STA	a
   2076  f46b		       85 d5		      STA	b
   2077  f46d		       85 d6		      STA	c
   2078  f46f		       85 d7		      STA	d
   2079  f471		       85 d8		      STA	e
   2080  f473		       85 d9		      STA	f
   2081  f475		       85 da		      STA	g
   2082  f477		       85 db		      STA	h
   2083  f479		       85 dc		      STA	i
   2084  f47b				   .L040		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2085  f47b
   2086  f47b		       a9 00		      LDA	#0
   2087  f47d		       85 dd		      STA	j
   2088  f47f		       85 de		      STA	k
   2089  f481		       85 df		      STA	l
   2090  f483		       85 e0		      STA	m
   2091  f485		       85 e1		      STA	n
   2092  f487		       85 e2		      STA	o
   2093  f489		       85 e3		      STA	p
   2094  f48b		       85 e4		      STA	q
   2095  f48d		       85 e5		      STA	r
   2096  f48f				   .L041		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2097  f48f
   2098  f48f		       a9 00		      LDA	#0
   2099  f491		       85 e6		      STA	s
   2100  f493		       85 e7		      STA	t
   2101  f495		       85 e8		      STA	u
   2102  f497		       85 e9		      STA	v
   2103  f499		       85 ea		      STA	w
   2104  f49b		       85 eb		      STA	x
   2105  f49d				   .
   2106  f49d							;
   2107  f49d
   2108  f49d				   .
   2109  f49d							;
   2110  f49d
   2111  f49d				   .
   2112  f49d							;
   2113  f49d
   2114  f49d				   .
   2115  f49d							;
   2116  f49d
   2117  f49d				   .
   2118  f49d							;
   2119  f49d
   2120  f49d				   .
   2121  f49d							;
   2122  f49d
   2123  f49d				   .
   2124  f49d							;
   2125  f49d
   2126  f49d				   .
   2127  f49d							;
   2128  f49d
   2129  f49d				   .L042		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2130  f49d
   2131  f49d		       a5 ec		      LDA	_BitOp_01
   2132  f49f		       29 10		      AND	#%00010000
   2133  f4a1		       85 ec		      STA	_BitOp_01
   2134  f4a3				   .
   2135  f4a3							;
   2136  f4a3
   2137  f4a3				   .
   2138  f4a3							;
   2139  f4a3
   2140  f4a3				   .
   2141  f4a3							;
   2142  f4a3
   2143  f4a3				   .
   2144  f4a3							;
   2145  f4a3
   2146  f4a3				   .
   2147  f4a3							;
   2148  f4a3
   2149  f4a3				   .
   2150  f4a3							;
   2151  f4a3
   2152  f4a3				   .L043		;  player0x  =  77  :	player0y  =  60
   2153  f4a3
   2154  f4a3		       a9 4d		      LDA	#77
   2155  f4a5		       85 80		      STA	player0x
   2156  f4a7		       a9 3c		      LDA	#60
   2157  f4a9		       85 85		      STA	player0y
   2158  f4ab				   .L044		;  player1x  =  21  :	player1y  =  16
   2159  f4ab
   2160  f4ab		       a9 15		      LDA	#21
   2161  f4ad		       85 81		      STA	player1x
   2162  f4af		       a9 10		      LDA	#16
   2163  f4b1		       85 86		      STA	player1y
   2164  f4b3				   .
   2165  f4b3							;
   2166  f4b3
   2167  f4b3				   .
   2168  f4b3							;
   2169  f4b3
   2170  f4b3				   .
   2171  f4b3							;
   2172  f4b3
   2173  f4b3				   .
   2174  f4b3							;
   2175  f4b3
   2176  f4b3				   .
   2177  f4b3							;
   2178  f4b3
   2179  f4b3				   .L045		;  missile0x  =  200  :  missile0y  =	200
   2180  f4b3
   2181  f4b3		       a9 c8		      LDA	#200
   2182  f4b5		       85 82		      STA	missile0x
   2183  f4b7		       85 91		      STA	missile0y
   2184  f4b9				   .
   2185  f4b9							;
   2186  f4b9
   2187  f4b9				   .
   2188  f4b9							;
   2189  f4b9
   2190  f4b9				   .
   2191  f4b9							;
   2192  f4b9
   2193  f4b9				   .
   2194  f4b9							;
   2195  f4b9
   2196  f4b9				   .L046		;  ballx  =  80  :  bally  =  79
   2197  f4b9
   2198  f4b9		       a9 50		      LDA	#80
   2199  f4bb		       85 84		      STA	ballx
   2200  f4bd		       a9 4f		      LDA	#79
   2201  f4bf		       85 89		      STA	bally
   2202  f4c1				   .
   2203  f4c1							;
   2204  f4c1
   2205  f4c1				   .
   2206  f4c1							;
   2207  f4c1
   2208  f4c1				   .
   2209  f4c1							;
   2210  f4c1
   2211  f4c1				   .
   2212  f4c1							;
   2213  f4c1
   2214  f4c1				   .
   2215  f4c1							;
   2216  f4c1
   2217  f4c1				   .L047		;  NUSIZ0  =  $10  :  missile0height  =  1
   2218  f4c1
   2219  f4c1		       a9 10		      LDA	#$10
   2220  f4c3		       85 04		      STA	NUSIZ0
   2221  f4c5		       a9 01		      LDA	#1
   2222  f4c7		       85 90		      STA	missile0height
   2223  f4c9				   .
   2224  f4c9							;
   2225  f4c9
   2226  f4c9				   .
   2227  f4c9							;
   2228  f4c9
   2229  f4c9				   .
   2230  f4c9							;
   2231  f4c9
   2232  f4c9				   .
   2233  f4c9							;
   2234  f4c9
   2235  f4c9				   .
   2236  f4c9							;
   2237  f4c9
   2238  f4c9				   .
   2239  f4c9							;
   2240  f4c9
   2241  f4c9				   .L048		;  COLUPF  =  $2C
   2242  f4c9
   2243  f4c9		       a9 2c		      LDA	#$2C
   2244  f4cb		       85 08		      STA	COLUPF
   2245  f4cd				   .
   2246  f4cd							;
   2247  f4cd
   2248  f4cd				   .
   2249  f4cd							;
   2250  f4cd
   2251  f4cd				   .
   2252  f4cd							;
   2253  f4cd
   2254  f4cd				   .
   2255  f4cd							;
   2256  f4cd
   2257  f4cd				   .
   2258  f4cd							;
   2259  f4cd
   2260  f4cd				   .
   2261  f4cd							;
   2262  f4cd
   2263  f4cd				   .L049		;  COLUBK  =  0
   2264  f4cd
   2265  f4cd		       a9 00		      LDA	#0
   2266  f4cf		       85 09		      STA	COLUBK
   2267  f4d1				   .
   2268  f4d1							;
   2269  f4d1
   2270  f4d1				   .
   2271  f4d1							;
   2272  f4d1
   2273  f4d1				   .
   2274  f4d1							;
   2275  f4d1
   2276  f4d1				   .
   2277  f4d1							;
   2278  f4d1
   2279  f4d1				   .
   2280  f4d1							;
   2281  f4d1
   2282  f4d1				   .
   2283  f4d1							;
   2284  f4d1
   2285  f4d1				   .L050		;  _Bit3_P0_Dir_Right{3}  =  1
   2286  f4d1
   2287  f4d1		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2288  f4d3		       09 08		      ORA	#8
   2289  f4d5		       85 da		      STA	_Bit3_P0_Dir_Right
   2290  f4d7				   .
   2291  f4d7							;
   2292  f4d7
   2293  f4d7				   .
   2294  f4d7							;
   2295  f4d7
   2296  f4d7				   .
   2297  f4d7							;
   2298  f4d7
   2299  f4d7				   .
   2300  f4d7							;
   2301  f4d7
   2302  f4d7				   .
   2303  f4d7							;
   2304  f4d7
   2305  f4d7				   .
   2306  f4d7							;
   2307  f4d7
   2308  f4d7				   .
   2309  f4d7							;
   2310  f4d7
   2311  f4d7				   .
   2312  f4d7							;
   2313  f4d7
   2314  f4d7				   .
   2315  f4d7							;
   2316  f4d7
   2317  f4d7				   .L051		;  _Bit0_Reset_Restrainer{0}  =  1
   2318  f4d7
   2319  f4d7		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2320  f4d9		       09 01		      ORA	#1
   2321  f4db		       85 ec		      STA	_Bit0_Reset_Restrainer
   2322  f4dd				   .
   2323  f4dd							;
   2324  f4dd
   2325  f4dd				   .L052		;  playfield:
   2326  f4dd
   2327  f4dd				  -	      ifconst	pfres
   2328  f4dd				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2329  f4dd					      else
   2330  f4dd		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2331  f4df					      endif
   2332  f4df		       4c 0e f5 	      jmp	pflabel0
   2333  f4e2				   PF_data0
   2334  f4e2		       ff ff		      .byte.b	%11111111, %11111111
   2335  f4e4					      if	(pfwidth>2)
   2336  f4e4		       ff ff		      .byte.b	%11111111, %11111111
   2337  f4e6					      endif
   2338  f4e6		       80 00		      .byte.b	%10000000, %00000000
   2339  f4e8					      if	(pfwidth>2)
   2340  f4e8		       00 80		      .byte.b	%00000000, %10000000
   2341  f4ea					      endif
   2342  f4ea		       80 00		      .byte.b	%10000000, %00000000
   2343  f4ec					      if	(pfwidth>2)
   2344  f4ec		       00 80		      .byte.b	%00000000, %10000000
   2345  f4ee					      endif
   2346  f4ee		       80 00		      .byte.b	%10000000, %00000000
   2347  f4f0					      if	(pfwidth>2)
   2348  f4f0		       00 80		      .byte.b	%00000000, %10000000
   2349  f4f2					      endif
   2350  f4f2		       80 00		      .byte.b	%10000000, %00000000
   2351  f4f4					      if	(pfwidth>2)
   2352  f4f4		       00 80		      .byte.b	%00000000, %10000000
   2353  f4f6					      endif
   2354  f4f6		       80 80		      .byte.b	%10000000, %10000000
   2355  f4f8					      if	(pfwidth>2)
   2356  f4f8		       80 80		      .byte.b	%10000000, %10000000
   2357  f4fa					      endif
   2358  f4fa		       80 00		      .byte.b	%10000000, %00000000
   2359  f4fc					      if	(pfwidth>2)
   2360  f4fc		       00 80		      .byte.b	%00000000, %10000000
   2361  f4fe					      endif
   2362  f4fe		       80 00		      .byte.b	%10000000, %00000000
   2363  f500					      if	(pfwidth>2)
   2364  f500		       00 80		      .byte.b	%00000000, %10000000
   2365  f502					      endif
   2366  f502		       80 00		      .byte.b	%10000000, %00000000
   2367  f504					      if	(pfwidth>2)
   2368  f504		       00 80		      .byte.b	%00000000, %10000000
   2369  f506					      endif
   2370  f506		       80 00		      .byte.b	%10000000, %00000000
   2371  f508					      if	(pfwidth>2)
   2372  f508		       00 80		      .byte.b	%00000000, %10000000
   2373  f50a					      endif
   2374  f50a		       ff ff		      .byte.b	%11111111, %11111111
   2375  f50c					      if	(pfwidth>2)
   2376  f50c		       ff ff		      .byte.b	%11111111, %11111111
   2377  f50e					      endif
   2378  f50e				   pflabel0
   2379  f50e		       bd e2 f4 	      lda	PF_data0,x
   2380  f511		       95 a4		      sta	playfield,x
   2381  f513		       ca		      dex
   2382  f514		       10 f8		      bpl	pflabel0
   2383  f516				   .
   2384  f516							;
   2385  f516
   2386  f516				   .L053		;  player0:
   2387  f516
   2388  f516		       a2 65		      LDX	#<playerL053_0
   2389  f518		       86 8a		      STX	player0pointerlo
   2390  f51a		       a9 fa		      LDA	#>playerL053_0
   2391  f51c		       85 8b		      STA	player0pointerhi
   2392  f51e		       a9 07		      LDA	#7
   2393  f520		       85 8e		      STA	player0height
   2394  f522				   .
   2395  f522							;
   2396  f522
   2397  f522				   .L054		;  player1:
   2398  f522
   2399  f522		       a2 6d		      LDX	#<playerL054_1
   2400  f524		       86 8c		      STX	player1pointerlo
   2401  f526		       a9 fa		      LDA	#>playerL054_1
   2402  f528		       85 8d		      STA	player1pointerhi
   2403  f52a		       a9 07		      LDA	#7
   2404  f52c		       85 8f		      STA	player1height
   2405  f52e				   .
   2406  f52e							;
   2407  f52e
   2408  f52e				   .L055		;  dim _sc1  =  score
   2409  f52e
   2410  f52e				   .L056		;  dim _sc2  =  score + 1
   2411  f52e
   2412  f52e				   .L057		;  dim _sc3  =  score + 2
   2413  f52e
   2414  f52e				   .
   2415  f52e							;
   2416  f52e
   2417  f52e				   .
   2418  f52e							;
   2419  f52e
   2420  f52e				   .
   2421  f52e							;
   2422  f52e
   2423  f52e				   .
   2424  f52e							;
   2425  f52e
   2426  f52e				   .
   2427  f52e							;
   2428  f52e
   2429  f52e				   .
   2430  f52e							;
   2431  f52e
   2432  f52e				   .
   2433  f52e							;
   2434  f52e
   2435  f52e				   .
   2436  f52e							;
   2437  f52e
   2438  f52e				   .__Main_Loop
   2439  f52e							; __Main_Loop
   2440  f52e
   2441  f52e				   .
   2442  f52e							;
   2443  f52e
   2444  f52e				   .L058		;  _Frame_Count  =  _Frame_Count  +  1
   2445  f52e
   2446  f52e		       e6 db		      INC	_Frame_Count
   2447  f530				   .
   2448  f530							;
   2449  f530
   2450  f530				   .
   2451  f530							;
   2452  f530
   2453  f530				   .
   2454  f530							;
   2455  f530
   2456  f530				   .
   2457  f530							;
   2458  f530
   2459  f530				   .
   2460  f530							;
   2461  f530
   2462  f530				   .L059		;  COLUP0  =  $9C
   2463  f530
   2464  f530		       a9 9c		      LDA	#$9C
   2465  f532		       85 06		      STA	COLUP0
   2466  f534				   .L060		;  COLUP1  =  $C9
   2467  f534
   2468  f534		       a9 c9		      LDA	#$C9
   2469  f536		       85 07		      STA	COLUP1
   2470  f538				   .L061		;  scorecolor	=  $9C
   2471  f538
   2472  f538		       a9 9c		      LDA	#$9C
   2473  f53a		       85 a3		      STA	scorecolor
   2474  f53c				   .
   2475  f53c							;
   2476  f53c
   2477  f53c				   .
   2478  f53c							;
   2479  f53c
   2480  f53c				   .
   2481  f53c							;
   2482  f53c
   2483  f53c				   .
   2484  f53c							;
   2485  f53c
   2486  f53c				   .
   2487  f53c							;
   2488  f53c
   2489  f53c				   .
   2490  f53c							;
   2491  f53c
   2492  f53c				   .
   2493  f53c							;
   2494  f53c
   2495  f53c				   .
   2496  f53c							;
   2497  f53c
   2498  f53c				   .L062		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2499  f53c
   2500  f53c		       a9 10		      lda	#$10
   2501  f53e		       2c 80 02 	      bit	SWCHA
   2502  f541		       f0 14		      BEQ	.skipL062
   2503  f543				   .condpart0
   2504  f543		       a9 20		      lda	#$20
   2505  f545		       2c 80 02 	      bit	SWCHA
   2506  f548		       f0 0d		      BEQ	.skip0then
   2507  f54a				   .condpart1
   2508  f54a		       2c 80 02 	      bit	SWCHA
   2509  f54d		       50 08		      BVC	.skip1then
   2510  f54f				   .condpart2
   2511  f54f		       2c 80 02 	      bit	SWCHA
   2512  f552		       10 03		      BPL	.skip2then
   2513  f554				   .condpart3
   2514  f554		       4c 5d f5 	      jmp	.__Skip_Joystick_Precheck
   2515  f557
   2516  f557				   .skip2then
   2517  f557				   .skip1then
   2518  f557				   .skip0then
   2519  f557				   .skipL062
   2520  f557				   .
   2521  f557							;
   2522  f557
   2523  f557				   .
   2524  f557							;
   2525  f557
   2526  f557				   .
   2527  f557							;
   2528  f557
   2529  f557				   .
   2530  f557							;
   2531  f557
   2532  f557				   .L063		;  _BitOp_P0_M0_Dir  =  _BitOp_P0_M0_Dir  &  %11110000
   2533  f557
   2534  f557		       a5 da		      LDA	_BitOp_P0_M0_Dir
   2535  f559		       29 f0		      AND	#%11110000
   2536  f55b		       85 da		      STA	_BitOp_P0_M0_Dir
   2537  f55d				   .
   2538  f55d							;
   2539  f55d
   2540  f55d				   .__Skip_Joystick_Precheck
   2541  f55d							; __Skip_Joystick_Precheck
   2542  f55d
   2543  f55d				   .
   2544  f55d							;
   2545  f55d
   2546  f55d				   .
   2547  f55d							;
   2548  f55d
   2549  f55d				   .
   2550  f55d							;
   2551  f55d
   2552  f55d				   .
   2553  f55d							;
   2554  f55d
   2555  f55d				   .
   2556  f55d							;
   2557  f55d
   2558  f55d				   .
   2559  f55d							;
   2560  f55d
   2561  f55d				   .
   2562  f55d							;
   2563  f55d
   2564  f55d				   .
   2565  f55d							;
   2566  f55d
   2567  f55d				   .L064		;  if !joy0up then goto __Skip_Joy0_Up
   2568  f55d
   2569  f55d		       a9 10		      lda	#$10
   2570  f55f		       2c 80 02 	      bit	SWCHA
   2571  f562		       f0 03		      BEQ	.skipL064
   2572  f564				   .condpart4
   2573  f564		       4c d1 f5 	      jmp	.__Skip_Joy0_Up
   2574  f567
   2575  f567				   .skipL064
   2576  f567				   .
   2577  f567							;
   2578  f567
   2579  f567				   .
   2580  f567							;
   2581  f567
   2582  f567				   .
   2583  f567							;
   2584  f567
   2585  f567				   .
   2586  f567							;
   2587  f567
   2588  f567				   .L065		;  _Bit0_P0_Dir_Up{0}	=  1
   2589  f567
   2590  f567		       a5 da		      LDA	_Bit0_P0_Dir_Up
   2591  f569		       09 01		      ORA	#1
   2592  f56b		       85 da		      STA	_Bit0_P0_Dir_Up
   2593  f56d				   .
   2594  f56d							;
   2595  f56d
   2596  f56d				   .
   2597  f56d							;
   2598  f56d
   2599  f56d				   .
   2600  f56d							;
   2601  f56d
   2602  f56d				   .
   2603  f56d							;
   2604  f56d
   2605  f56d				   .L066		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   2606  f56d
   2607  f56d		       a9 09		      LDA	#_P_Edge_Top
   2608  f56f		       c5 85		      CMP	player0y
   2609  f571		       90 03		      BCC	.skipL066
   2610  f573				   .condpart5
   2611  f573		       4c d1 f5 	      jmp	.__Skip_Joy0_Up
   2612  f576
   2613  f576				   .skipL066
   2614  f576				   .
   2615  f576							;
   2616  f576
   2617  f576				   .
   2618  f576							;
   2619  f576
   2620  f576				   .
   2621  f576							;
   2622  f576
   2623  f576				   .
   2624  f576							;
   2625  f576
   2626  f576				   .L067		;  temp5  =   ( player0x - 10 )  / 4
   2627  f576
   2628  f576							; complex statement detected
   2629  f576		       a5 80		      LDA	player0x
   2630  f578		       38		      SEC
   2631  f579		       e9 0a		      SBC	#10
   2632  f57b		       4a		      lsr
   2633  f57c		       4a		      lsr
   2634  f57d		       85 a0		      STA	temp5
   2635  f57f				   .
   2636  f57f							;
   2637  f57f
   2638  f57f				   .L068		;  temp6  =   ( player0y - 9 )  / 8
   2639  f57f
   2640  f57f							; complex statement detected
   2641  f57f		       a5 85		      LDA	player0y
   2642  f581		       38		      SEC
   2643  f582		       e9 09		      SBC	#9
   2644  f584		       4a		      lsr
   2645  f585		       4a		      lsr
   2646  f586		       4a		      lsr
   2647  f587		       85 a1		      STA	temp6
   2648  f589				   .
   2649  f589							;
   2650  f589
   2651  f589				   .L069		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2652  f589
   2653  f589		       a5 a0		      LDA	temp5
   2654  f58b		       c9 22		      CMP	#34
   2655  f58d		       b0 0c		      BCS	.skipL069
   2656  f58f				   .condpart6
   2657  f58f		       a5 a0		      LDA	temp5
   2658  f591		       a4 a1		      LDY	temp6
   2659  f593		       20 6b f2 	      jsr	pfread
   2660  f596		       d0 03		      BNE	.skip6then
   2661  f598				   .condpart7
   2662  f598		       4c d1 f5 	      jmp	.__Skip_Joy0_Up
   2663  f59b
   2664  f59b				   .skip6then
   2665  f59b				   .skipL069
   2666  f59b				   .
   2667  f59b							;
   2668  f59b
   2669  f59b				   .L070		;  temp4  =   ( player0x - 17 )  / 4
   2670  f59b
   2671  f59b							; complex statement detected
   2672  f59b		       a5 80		      LDA	player0x
   2673  f59d		       38		      SEC
   2674  f59e		       e9 11		      SBC	#17
   2675  f5a0		       4a		      lsr
   2676  f5a1		       4a		      lsr
   2677  f5a2		       85 9f		      STA	temp4
   2678  f5a4				   .
   2679  f5a4							;
   2680  f5a4
   2681  f5a4				   .L071		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2682  f5a4
   2683  f5a4		       a5 9f		      LDA	temp4
   2684  f5a6		       c9 22		      CMP	#34
   2685  f5a8		       b0 0c		      BCS	.skipL071
   2686  f5aa				   .condpart8
   2687  f5aa		       a5 9f		      LDA	temp4
   2688  f5ac		       a4 a1		      LDY	temp6
   2689  f5ae		       20 6b f2 	      jsr	pfread
   2690  f5b1		       d0 03		      BNE	.skip8then
   2691  f5b3				   .condpart9
   2692  f5b3		       4c d1 f5 	      jmp	.__Skip_Joy0_Up
   2693  f5b6
   2694  f5b6				   .skip8then
   2695  f5b6				   .skipL071
   2696  f5b6				   .
   2697  f5b6							;
   2698  f5b6
   2699  f5b6				   .L072		;  temp3  =  temp5  -	1
   2700  f5b6
   2701  f5b6		       a5 a0		      LDA	temp5
   2702  f5b8		       38		      SEC
   2703  f5b9		       e9 01		      SBC	#1
   2704  f5bb		       85 9e		      STA	temp3
   2705  f5bd				   .
   2706  f5bd							;
   2707  f5bd
   2708  f5bd				   .L073		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2709  f5bd
   2710  f5bd		       a5 9e		      LDA	temp3
   2711  f5bf		       c9 22		      CMP	#34
   2712  f5c1		       b0 0c		      BCS	.skipL073
   2713  f5c3				   .condpart10
   2714  f5c3		       a5 9e		      LDA	temp3
   2715  f5c5		       a4 a1		      LDY	temp6
   2716  f5c7		       20 6b f2 	      jsr	pfread
   2717  f5ca		       d0 03		      BNE	.skip10then
   2718  f5cc				   .condpart11
   2719  f5cc		       4c d1 f5 	      jmp	.__Skip_Joy0_Up
   2720  f5cf
   2721  f5cf				   .skip10then
   2722  f5cf				   .skipL073
   2723  f5cf				   .
   2724  f5cf							;
   2725  f5cf
   2726  f5cf				   .
   2727  f5cf							;
   2728  f5cf
   2729  f5cf				   .
   2730  f5cf							;
   2731  f5cf
   2732  f5cf				   .
   2733  f5cf							;
   2734  f5cf
   2735  f5cf				   .L074		;  player0y  =  player0y  -  1
   2736  f5cf
   2737  f5cf		       c6 85		      DEC	player0y
   2738  f5d1				   .
   2739  f5d1							;
   2740  f5d1
   2741  f5d1				   .__Skip_Joy0_Up
   2742  f5d1							; __Skip_Joy0_Up
   2743  f5d1
   2744  f5d1				   .
   2745  f5d1							;
   2746  f5d1
   2747  f5d1				   .
   2748  f5d1							;
   2749  f5d1
   2750  f5d1				   .
   2751  f5d1							;
   2752  f5d1
   2753  f5d1				   .
   2754  f5d1							;
   2755  f5d1
   2756  f5d1				   .
   2757  f5d1							;
   2758  f5d1
   2759  f5d1				   .
   2760  f5d1							;
   2761  f5d1
   2762  f5d1				   .
   2763  f5d1							;
   2764  f5d1
   2765  f5d1				   .
   2766  f5d1							;
   2767  f5d1
   2768  f5d1				   .
   2769  f5d1							;
   2770  f5d1
   2771  f5d1				   .
   2772  f5d1							;
   2773  f5d1
   2774  f5d1				   .L075		;  if !joy0down then goto __Skip_Joy0_Down
   2775  f5d1
   2776  f5d1		       a9 20		      lda	#$20
   2777  f5d3		       2c 80 02 	      bit	SWCHA
   2778  f5d6		       f0 03		      BEQ	.skipL075
   2779  f5d8				   .condpart12
   2780  f5d8		       4c 42 f6 	      jmp	.__Skip_Joy0_Down
   2781  f5db
   2782  f5db				   .skipL075
   2783  f5db				   .
   2784  f5db							;
   2785  f5db
   2786  f5db				   .
   2787  f5db							;
   2788  f5db
   2789  f5db				   .
   2790  f5db							;
   2791  f5db
   2792  f5db				   .
   2793  f5db							;
   2794  f5db
   2795  f5db				   .L076		;  _Bit1_P0_Dir_Down{1}  =  1
   2796  f5db
   2797  f5db		       a5 da		      LDA	_Bit1_P0_Dir_Down
   2798  f5dd		       09 02		      ORA	#2
   2799  f5df		       85 da		      STA	_Bit1_P0_Dir_Down
   2800  f5e1				   .
   2801  f5e1							;
   2802  f5e1
   2803  f5e1				   .
   2804  f5e1							;
   2805  f5e1
   2806  f5e1				   .
   2807  f5e1							;
   2808  f5e1
   2809  f5e1				   .
   2810  f5e1							;
   2811  f5e1
   2812  f5e1				   .L077		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   2813  f5e1
   2814  f5e1		       a5 85		      LDA	player0y
   2815  f5e3		       c9 58		      CMP	#_P_Edge_Bottom
   2816  f5e5		       90 03		      BCC	.skipL077
   2817  f5e7				   .condpart13
   2818  f5e7		       4c 42 f6 	      jmp	.__Skip_Joy0_Down
   2819  f5ea
   2820  f5ea				   .skipL077
   2821  f5ea				   .
   2822  f5ea							;
   2823  f5ea
   2824  f5ea				   .
   2825  f5ea							;
   2826  f5ea
   2827  f5ea				   .
   2828  f5ea							;
   2829  f5ea
   2830  f5ea				   .
   2831  f5ea							;
   2832  f5ea
   2833  f5ea				   .L078		;  temp5  =   ( player0x - 10 )  / 4
   2834  f5ea
   2835  f5ea							; complex statement detected
   2836  f5ea		       a5 80		      LDA	player0x
   2837  f5ec		       38		      SEC
   2838  f5ed		       e9 0a		      SBC	#10
   2839  f5ef		       4a		      lsr
   2840  f5f0		       4a		      lsr
   2841  f5f1		       85 a0		      STA	temp5
   2842  f5f3				   .
   2843  f5f3							;
   2844  f5f3
   2845  f5f3				   .L079		;  temp6  =   ( player0y )  / 8
   2846  f5f3
   2847  f5f3							; complex statement detected
   2848  f5f3		       a5 85		      LDA	player0y
   2849  f5f5		       4a		      lsr
   2850  f5f6		       4a		      lsr
   2851  f5f7		       4a		      lsr
   2852  f5f8		       85 a1		      STA	temp6
   2853  f5fa				   .
   2854  f5fa							;
   2855  f5fa
   2856  f5fa				   .L080		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   2857  f5fa
   2858  f5fa		       a5 a0		      LDA	temp5
   2859  f5fc		       c9 22		      CMP	#34
   2860  f5fe		       b0 0c		      BCS	.skipL080
   2861  f600				   .condpart14
   2862  f600		       a5 a0		      LDA	temp5
   2863  f602		       a4 a1		      LDY	temp6
   2864  f604		       20 6b f2 	      jsr	pfread
   2865  f607		       d0 03		      BNE	.skip14then
   2866  f609				   .condpart15
   2867  f609		       4c 42 f6 	      jmp	.__Skip_Joy0_Down
   2868  f60c
   2869  f60c				   .skip14then
   2870  f60c				   .skipL080
   2871  f60c				   .
   2872  f60c							;
   2873  f60c
   2874  f60c				   .L081		;  temp4  =   ( player0x - 17 )  / 4
   2875  f60c
   2876  f60c							; complex statement detected
   2877  f60c		       a5 80		      LDA	player0x
   2878  f60e		       38		      SEC
   2879  f60f		       e9 11		      SBC	#17
   2880  f611		       4a		      lsr
   2881  f612		       4a		      lsr
   2882  f613		       85 9f		      STA	temp4
   2883  f615				   .
   2884  f615							;
   2885  f615
   2886  f615				   .L082		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   2887  f615
   2888  f615		       a5 9f		      LDA	temp4
   2889  f617		       c9 22		      CMP	#34
   2890  f619		       b0 0c		      BCS	.skipL082
   2891  f61b				   .condpart16
   2892  f61b		       a5 9f		      LDA	temp4
   2893  f61d		       a4 a1		      LDY	temp6
   2894  f61f		       20 6b f2 	      jsr	pfread
   2895  f622		       d0 03		      BNE	.skip16then
   2896  f624				   .condpart17
   2897  f624		       4c 42 f6 	      jmp	.__Skip_Joy0_Down
   2898  f627
   2899  f627				   .skip16then
   2900  f627				   .skipL082
   2901  f627				   .
   2902  f627							;
   2903  f627
   2904  f627				   .L083		;  temp3  =  temp5  -	1
   2905  f627
   2906  f627		       a5 a0		      LDA	temp5
   2907  f629		       38		      SEC
   2908  f62a		       e9 01		      SBC	#1
   2909  f62c		       85 9e		      STA	temp3
   2910  f62e				   .
   2911  f62e							;
   2912  f62e
   2913  f62e				   .L084		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   2914  f62e
   2915  f62e		       a5 9e		      LDA	temp3
   2916  f630		       c9 22		      CMP	#34
   2917  f632		       b0 0c		      BCS	.skipL084
   2918  f634				   .condpart18
   2919  f634		       a5 9e		      LDA	temp3
   2920  f636		       a4 a1		      LDY	temp6
   2921  f638		       20 6b f2 	      jsr	pfread
   2922  f63b		       d0 03		      BNE	.skip18then
   2923  f63d				   .condpart19
   2924  f63d		       4c 42 f6 	      jmp	.__Skip_Joy0_Down
   2925  f640
   2926  f640				   .skip18then
   2927  f640				   .skipL084
   2928  f640				   .
   2929  f640							;
   2930  f640
   2931  f640				   .
   2932  f640							;
   2933  f640
   2934  f640				   .
   2935  f640							;
   2936  f640
   2937  f640				   .
   2938  f640							;
   2939  f640
   2940  f640				   .L085		;  player0y  =  player0y  +  1
   2941  f640
   2942  f640		       e6 85		      INC	player0y
   2943  f642				   .
   2944  f642							;
   2945  f642
   2946  f642				   .__Skip_Joy0_Down
   2947  f642							; __Skip_Joy0_Down
   2948  f642
   2949  f642				   .
   2950  f642							;
   2951  f642
   2952  f642				   .
   2953  f642							;
   2954  f642
   2955  f642				   .
   2956  f642							;
   2957  f642
   2958  f642				   .
   2959  f642							;
   2960  f642
   2961  f642				   .
   2962  f642							;
   2963  f642
   2964  f642				   .
   2965  f642							;
   2966  f642
   2967  f642				   .
   2968  f642							;
   2969  f642
   2970  f642				   .
   2971  f642							;
   2972  f642
   2973  f642				   .
   2974  f642							;
   2975  f642
   2976  f642				   .
   2977  f642							;
   2978  f642
   2979  f642				   .L086		;  if !joy0left then goto __Skip_Joy0_Left
   2980  f642
   2981  f642		       2c 80 02 	      bit	SWCHA
   2982  f645		       50 03		      BVC	.skipL086
   2983  f647				   .condpart20
   2984  f647		       4c 9c f6 	      jmp	.__Skip_Joy0_Left
   2985  f64a
   2986  f64a				   .skipL086
   2987  f64a				   .
   2988  f64a							;
   2989  f64a
   2990  f64a				   .
   2991  f64a							;
   2992  f64a
   2993  f64a				   .
   2994  f64a							;
   2995  f64a
   2996  f64a				   .
   2997  f64a							;
   2998  f64a
   2999  f64a				   .L087		;  _Bit2_P0_Dir_Left{2}  =  1
   3000  f64a
   3001  f64a		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3002  f64c		       09 04		      ORA	#4
   3003  f64e		       85 da		      STA	_Bit2_P0_Dir_Left
   3004  f650				   .
   3005  f650							;
   3006  f650
   3007  f650				   .
   3008  f650							;
   3009  f650
   3010  f650				   .
   3011  f650							;
   3012  f650
   3013  f650				   .
   3014  f650							;
   3015  f650
   3016  f650				   .L088		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   3017  f650
   3018  f650		       a9 01		      LDA	#_P_Edge_Left
   3019  f652		       c5 80		      CMP	player0x
   3020  f654		       90 03		      BCC	.skipL088
   3021  f656				   .condpart21
   3022  f656		       4c 9c f6 	      jmp	.__Skip_Joy0_Left
   3023  f659
   3024  f659				   .skipL088
   3025  f659				   .
   3026  f659							;
   3027  f659
   3028  f659				   .
   3029  f659							;
   3030  f659
   3031  f659				   .
   3032  f659							;
   3033  f659
   3034  f659				   .
   3035  f659							;
   3036  f659
   3037  f659				   .L089		;  temp5  =   ( player0y - 1 )  / 8
   3038  f659
   3039  f659							; complex statement detected
   3040  f659		       a5 85		      LDA	player0y
   3041  f65b		       38		      SEC
   3042  f65c		       e9 01		      SBC	#1
   3043  f65e		       4a		      lsr
   3044  f65f		       4a		      lsr
   3045  f660		       4a		      lsr
   3046  f661		       85 a0		      STA	temp5
   3047  f663				   .
   3048  f663							;
   3049  f663
   3050  f663				   .L090		;  temp6  =   ( player0x - 18 )  / 4
   3051  f663
   3052  f663							; complex statement detected
   3053  f663		       a5 80		      LDA	player0x
   3054  f665		       38		      SEC
   3055  f666		       e9 12		      SBC	#18
   3056  f668		       4a		      lsr
   3057  f669		       4a		      lsr
   3058  f66a		       85 a1		      STA	temp6
   3059  f66c				   .
   3060  f66c							;
   3061  f66c
   3062  f66c				   .L091		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3063  f66c
   3064  f66c		       a5 a1		      LDA	temp6
   3065  f66e		       c9 22		      CMP	#34
   3066  f670		       b0 0c		      BCS	.skipL091
   3067  f672				   .condpart22
   3068  f672		       a5 a1		      LDA	temp6
   3069  f674		       a4 a0		      LDY	temp5
   3070  f676		       20 6b f2 	      jsr	pfread
   3071  f679		       d0 03		      BNE	.skip22then
   3072  f67b				   .condpart23
   3073  f67b		       4c 9c f6 	      jmp	.__Skip_Joy0_Left
   3074  f67e
   3075  f67e				   .skip22then
   3076  f67e				   .skipL091
   3077  f67e				   .
   3078  f67e							;
   3079  f67e
   3080  f67e				   .L092		;  temp3  =   ( player0y - 8 )  / 8
   3081  f67e
   3082  f67e							; complex statement detected
   3083  f67e		       a5 85		      LDA	player0y
   3084  f680		       38		      SEC
   3085  f681		       e9 08		      SBC	#8
   3086  f683		       4a		      lsr
   3087  f684		       4a		      lsr
   3088  f685		       4a		      lsr
   3089  f686		       85 9e		      STA	temp3
   3090  f688				   .
   3091  f688							;
   3092  f688
   3093  f688				   .L093		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3094  f688
   3095  f688		       a5 a1		      LDA	temp6
   3096  f68a		       c9 22		      CMP	#34
   3097  f68c		       b0 0c		      BCS	.skipL093
   3098  f68e				   .condpart24
   3099  f68e		       a5 a1		      LDA	temp6
   3100  f690		       a4 9e		      LDY	temp3
   3101  f692		       20 6b f2 	      jsr	pfread
   3102  f695		       d0 03		      BNE	.skip24then
   3103  f697				   .condpart25
   3104  f697		       4c 9c f6 	      jmp	.__Skip_Joy0_Left
   3105  f69a
   3106  f69a				   .skip24then
   3107  f69a				   .skipL093
   3108  f69a				   .
   3109  f69a							;
   3110  f69a
   3111  f69a				   .
   3112  f69a							;
   3113  f69a
   3114  f69a				   .
   3115  f69a							;
   3116  f69a
   3117  f69a				   .
   3118  f69a							;
   3119  f69a
   3120  f69a				   .L094		;  player0x  =  player0x  -  1
   3121  f69a
   3122  f69a		       c6 80		      DEC	player0x
   3123  f69c				   .
   3124  f69c							;
   3125  f69c
   3126  f69c				   .__Skip_Joy0_Left
   3127  f69c							; __Skip_Joy0_Left
   3128  f69c
   3129  f69c				   .
   3130  f69c							;
   3131  f69c
   3132  f69c				   .
   3133  f69c							;
   3134  f69c
   3135  f69c				   .
   3136  f69c							;
   3137  f69c
   3138  f69c				   .
   3139  f69c							;
   3140  f69c
   3141  f69c				   .
   3142  f69c							;
   3143  f69c
   3144  f69c				   .
   3145  f69c							;
   3146  f69c
   3147  f69c				   .
   3148  f69c							;
   3149  f69c
   3150  f69c				   .
   3151  f69c							;
   3152  f69c
   3153  f69c				   .
   3154  f69c							;
   3155  f69c
   3156  f69c				   .
   3157  f69c							;
   3158  f69c
   3159  f69c				   .L095		;  if !joy0right then goto __Skip_Joy0_Right
   3160  f69c
   3161  f69c		       2c 80 02 	      bit	SWCHA
   3162  f69f		       10 03		      BPL	.skipL095
   3163  f6a1				   .condpart26
   3164  f6a1		       4c f6 f6 	      jmp	.__Skip_Joy0_Right
   3165  f6a4
   3166  f6a4				   .skipL095
   3167  f6a4				   .
   3168  f6a4							;
   3169  f6a4
   3170  f6a4				   .
   3171  f6a4							;
   3172  f6a4
   3173  f6a4				   .
   3174  f6a4							;
   3175  f6a4
   3176  f6a4				   .
   3177  f6a4							;
   3178  f6a4
   3179  f6a4				   .L096		;  _Bit3_P0_Dir_Right{3}  =  1
   3180  f6a4
   3181  f6a4		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3182  f6a6		       09 08		      ORA	#8
   3183  f6a8		       85 da		      STA	_Bit3_P0_Dir_Right
   3184  f6aa				   .
   3185  f6aa							;
   3186  f6aa
   3187  f6aa				   .
   3188  f6aa							;
   3189  f6aa
   3190  f6aa				   .
   3191  f6aa							;
   3192  f6aa
   3193  f6aa				   .
   3194  f6aa							;
   3195  f6aa
   3196  f6aa				   .L097		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3197  f6aa
   3198  f6aa		       a5 80		      LDA	player0x
   3199  f6ac		       c9 99		      CMP	#_P_Edge_Right
   3200  f6ae		       90 03		      BCC	.skipL097
   3201  f6b0				   .condpart27
   3202  f6b0		       4c f6 f6 	      jmp	.__Skip_Joy0_Right
   3203  f6b3
   3204  f6b3				   .skipL097
   3205  f6b3				   .
   3206  f6b3							;
   3207  f6b3
   3208  f6b3				   .
   3209  f6b3							;
   3210  f6b3
   3211  f6b3				   .
   3212  f6b3							;
   3213  f6b3
   3214  f6b3				   .
   3215  f6b3							;
   3216  f6b3
   3217  f6b3				   .L098		;  temp5  =   ( player0y - 1 )  / 8
   3218  f6b3
   3219  f6b3							; complex statement detected
   3220  f6b3		       a5 85		      LDA	player0y
   3221  f6b5		       38		      SEC
   3222  f6b6		       e9 01		      SBC	#1
   3223  f6b8		       4a		      lsr
   3224  f6b9		       4a		      lsr
   3225  f6ba		       4a		      lsr
   3226  f6bb		       85 a0		      STA	temp5
   3227  f6bd				   .
   3228  f6bd							;
   3229  f6bd
   3230  f6bd				   .L099		;  temp6  =   ( player0x - 9 )  / 4
   3231  f6bd
   3232  f6bd							; complex statement detected
   3233  f6bd		       a5 80		      LDA	player0x
   3234  f6bf		       38		      SEC
   3235  f6c0		       e9 09		      SBC	#9
   3236  f6c2		       4a		      lsr
   3237  f6c3		       4a		      lsr
   3238  f6c4		       85 a1		      STA	temp6
   3239  f6c6				   .
   3240  f6c6							;
   3241  f6c6
   3242  f6c6				   .L0100		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3243  f6c6
   3244  f6c6		       a5 a1		      LDA	temp6
   3245  f6c8		       c9 22		      CMP	#34
   3246  f6ca		       b0 0c		      BCS	.skipL0100
   3247  f6cc				   .condpart28
   3248  f6cc		       a5 a1		      LDA	temp6
   3249  f6ce		       a4 a0		      LDY	temp5
   3250  f6d0		       20 6b f2 	      jsr	pfread
   3251  f6d3		       d0 03		      BNE	.skip28then
   3252  f6d5				   .condpart29
   3253  f6d5		       4c f6 f6 	      jmp	.__Skip_Joy0_Right
   3254  f6d8
   3255  f6d8				   .skip28then
   3256  f6d8				   .skipL0100
   3257  f6d8				   .
   3258  f6d8							;
   3259  f6d8
   3260  f6d8				   .L0101		;  temp3  =   ( player0y - 8 )  / 8
   3261  f6d8
   3262  f6d8							; complex statement detected
   3263  f6d8		       a5 85		      LDA	player0y
   3264  f6da		       38		      SEC
   3265  f6db		       e9 08		      SBC	#8
   3266  f6dd		       4a		      lsr
   3267  f6de		       4a		      lsr
   3268  f6df		       4a		      lsr
   3269  f6e0		       85 9e		      STA	temp3
   3270  f6e2				   .
   3271  f6e2							;
   3272  f6e2
   3273  f6e2				   .L0102		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3274  f6e2
   3275  f6e2		       a5 a1		      LDA	temp6
   3276  f6e4		       c9 22		      CMP	#34
   3277  f6e6		       b0 0c		      BCS	.skipL0102
   3278  f6e8				   .condpart30
   3279  f6e8		       a5 a1		      LDA	temp6
   3280  f6ea		       a4 9e		      LDY	temp3
   3281  f6ec		       20 6b f2 	      jsr	pfread
   3282  f6ef		       d0 03		      BNE	.skip30then
   3283  f6f1				   .condpart31
   3284  f6f1		       4c f6 f6 	      jmp	.__Skip_Joy0_Right
   3285  f6f4
   3286  f6f4				   .skip30then
   3287  f6f4				   .skipL0102
   3288  f6f4				   .
   3289  f6f4							;
   3290  f6f4
   3291  f6f4				   .
   3292  f6f4							;
   3293  f6f4
   3294  f6f4				   .
   3295  f6f4							;
   3296  f6f4
   3297  f6f4				   .
   3298  f6f4							;
   3299  f6f4
   3300  f6f4				   .L0103		;  player0x  =  player0x  +  1
   3301  f6f4
   3302  f6f4		       e6 80		      INC	player0x
   3303  f6f6				   .
   3304  f6f6							;
   3305  f6f6
   3306  f6f6				   .__Skip_Joy0_Right
   3307  f6f6							; __Skip_Joy0_Right
   3308  f6f6
   3309  f6f6				   .
   3310  f6f6							;
   3311  f6f6
   3312  f6f6				   .
   3313  f6f6							;
   3314  f6f6
   3315  f6f6				   .
   3316  f6f6							;
   3317  f6f6
   3318  f6f6				   .
   3319  f6f6							;
   3320  f6f6
   3321  f6f6				   .
   3322  f6f6							;
   3323  f6f6
   3324  f6f6				   .L0104		;  temp1  =  player0x	+  8
   3325  f6f6
   3326  f6f6		       a5 80		      LDA	player0x
   3327  f6f8		       18		      CLC
   3328  f6f9		       69 08		      ADC	#8
   3329  f6fb		       85 9c		      STA	temp1
   3330  f6fd				   .L0105		;  temp2  =  player0y	+  8
   3331  f6fd
   3332  f6fd		       a5 85		      LDA	player0y
   3333  f6ff		       18		      CLC
   3334  f700		       69 08		      ADC	#8
   3335  f702		       85 9d		      STA	temp2
   3336  f704				   .
   3337  f704							;
   3338  f704
   3339  f704				   .L0106		;  temp3  =  player1x	+  4
   3340  f704
   3341  f704		       a5 81		      LDA	player1x
   3342  f706		       18		      CLC
   3343  f707		       69 04		      ADC	#4
   3344  f709		       85 9e		      STA	temp3
   3345  f70b				   .L0107		;  temp4  =  player1y	+  4
   3346  f70b
   3347  f70b		       a5 86		      LDA	player1y
   3348  f70d		       18		      CLC
   3349  f70e		       69 04		      ADC	#4
   3350  f710		       85 9f		      STA	temp4
   3351  f712				   .
   3352  f712							;
   3353  f712
   3354  f712				   .L0108		;  temp5  =  _Minotaur_Awareness_Size
   3355  f712
   3356  f712		       a9 32		      LDA	#_Minotaur_Awareness_Size
   3357  f714		       85 a0		      STA	temp5
   3358  f716				   .
   3359  f716							;
   3360  f716
   3361  f716				   .L0109		;  if _Frame_Count  &	1 then goto __Skip_AI_Right
   3362  f716
   3363  f716		       a5 db		      LDA	_Frame_Count
   3364  f718		       29 01		      AND	#1
   3365  f71a		       f0 03		      BEQ	.skipL0109
   3366  f71c				   .condpart32
   3367  f71c		       4c 06 f9 	      jmp	.__Skip_AI_Right
   3368  f71f
   3369  f71f				   .skipL0109
   3370  f71f				   .
   3371  f71f							;
   3372  f71f
   3373  f71f				   .
   3374  f71f							;
   3375  f71f
   3376  f71f				   .L0110		;  if player0y  >=  temp4  +  temp5 then goto __Skip_AI_Right
   3377  f71f
   3378  f71f							; complex condition detected
   3379  f71f		       a5 9f		      LDA	temp4
   3380  f721		       18		      CLC
   3381  f722		       65 a0		      ADC	temp5
   3382  f724		       48		      PHA
   3383  f725		       ba		      TSX
   3384  f726		       68		      PLA
   3385  f727		       a5 85		      LDA	player0y
   3386  f729		       d5 01		      CMP	1,x
   3387  f72b		       90 03		      BCC	.skipL0110
   3388  f72d				   .condpart33
   3389  f72d		       4c 06 f9 	      jmp	.__Skip_AI_Right
   3390  f730
   3391  f730				   .skipL0110
   3392  f730				   .
   3393  f730							;
   3394  f730
   3395  f730				   .
   3396  f730							;
   3397  f730
   3398  f730				   .L0111		;  if temp4  <  temp5 then temp4  =  temp5
   3399  f730
   3400  f730		       a5 9f		      LDA	temp4
   3401  f732		       c5 a0		      CMP	temp5
   3402  f734		       b0 04		      BCS	.skipL0111
   3403  f736				   .condpart34
   3404  f736		       a5 a0		      LDA	temp5
   3405  f738		       85 9f		      STA	temp4
   3406  f73a				   .skipL0111
   3407  f73a				   .L0112		;  if temp2  <=  temp4  -  temp5 then goto __Skip_AI_Right
   3408  f73a
   3409  f73a							; complex condition detected
   3410  f73a		       a5 9f		      LDA	temp4
   3411  f73c		       38		      SEC
   3412  f73d		       e5 a0		      SBC	temp5
   3413  f73f		       c5 9d		      CMP	temp2
   3414  f741		       90 03		      BCC	.skipL0112
   3415  f743				   .condpart35
   3416  f743		       4c 06 f9 	      jmp	.__Skip_AI_Right
   3417  f746
   3418  f746				   .skipL0112
   3419  f746				   .
   3420  f746							;
   3421  f746
   3422  f746				   .
   3423  f746							;
   3424  f746
   3425  f746				   .L0113		;  if temp3  <  temp5 then temp3  =  temp5
   3426  f746
   3427  f746		       a5 9e		      LDA	temp3
   3428  f748		       c5 a0		      CMP	temp5
   3429  f74a		       b0 04		      BCS	.skipL0113
   3430  f74c				   .condpart36
   3431  f74c		       a5 a0		      LDA	temp5
   3432  f74e		       85 9e		      STA	temp3
   3433  f750				   .skipL0113
   3434  f750				   .L0114		;  if temp1  <=  temp3  -  temp5 then goto __Skip_AI_Right
   3435  f750
   3436  f750							; complex condition detected
   3437  f750		       a5 9e		      LDA	temp3
   3438  f752		       38		      SEC
   3439  f753		       e5 a0		      SBC	temp5
   3440  f755		       c5 9c		      CMP	temp1
   3441  f757		       90 03		      BCC	.skipL0114
   3442  f759				   .condpart37
   3443  f759		       4c 06 f9 	      jmp	.__Skip_AI_Right
   3444  f75c
   3445  f75c				   .skipL0114
   3446  f75c				   .
   3447  f75c							;
   3448  f75c
   3449  f75c				   .
   3450  f75c							;
   3451  f75c
   3452  f75c				   .L0115		;  if player0x  >=  temp3  +  temp5 then goto __Skip_AI_Right
   3453  f75c
   3454  f75c							; complex condition detected
   3455  f75c		       a5 9e		      LDA	temp3
   3456  f75e		       18		      CLC
   3457  f75f		       65 a0		      ADC	temp5
   3458  f761		       48		      PHA
   3459  f762		       ba		      TSX
   3460  f763		       68		      PLA
   3461  f764		       a5 80		      LDA	player0x
   3462  f766		       d5 01		      CMP	1,x
   3463  f768		       90 03		      BCC	.skipL0115
   3464  f76a				   .condpart38
   3465  f76a		       4c 06 f9 	      jmp	.__Skip_AI_Right
   3466  f76d
   3467  f76d				   .skipL0115
   3468  f76d				   .
   3469  f76d							;
   3470  f76d
   3471  f76d				   .
   3472  f76d							;
   3473  f76d
   3474  f76d				   .
   3475  f76d							;
   3476  f76d
   3477  f76d				   .
   3478  f76d							;
   3479  f76d
   3480  f76d				   .
   3481  f76d							;
   3482  f76d
   3483  f76d				   .
   3484  f76d							;
   3485  f76d
   3486  f76d				   .
   3487  f76d							;
   3488  f76d
   3489  f76d				   .
   3490  f76d							;
   3491  f76d
   3492  f76d				   .
   3493  f76d							;
   3494  f76d
   3495  f76d				   .
   3496  f76d							;
   3497  f76d
   3498  f76d				   .
   3499  f76d							;
   3500  f76d
   3501  f76d				   .L0116		;  if player1y  <=  player0y then goto __Skip_AI_Up
   3502  f76d
   3503  f76d		       a5 85		      LDA	player0y
   3504  f76f		       c5 86		      CMP	player1y
   3505  f771		       90 03		      BCC	.skipL0116
   3506  f773				   .condpart39
   3507  f773		       4c e0 f7 	      jmp	.__Skip_AI_Up
   3508  f776
   3509  f776				   .skipL0116
   3510  f776				   .
   3511  f776							;
   3512  f776
   3513  f776				   .
   3514  f776							;
   3515  f776
   3516  f776				   .
   3517  f776							;
   3518  f776
   3519  f776				   .
   3520  f776							;
   3521  f776
   3522  f776				   .L0117		;  _Bit0_P1_Dir_Up{0}	=  1
   3523  f776
   3524  f776		       a5 de		      LDA	_Bit0_P1_Dir_Up
   3525  f778		       09 01		      ORA	#1
   3526  f77a		       85 de		      STA	_Bit0_P1_Dir_Up
   3527  f77c				   .
   3528  f77c							;
   3529  f77c
   3530  f77c				   .
   3531  f77c							;
   3532  f77c
   3533  f77c				   .
   3534  f77c							;
   3535  f77c
   3536  f77c				   .
   3537  f77c							;
   3538  f77c
   3539  f77c				   .L0118		;  if player1y  <=  _P_Edge_Top then goto __Skip_AI_Up
   3540  f77c
   3541  f77c		       a9 09		      LDA	#_P_Edge_Top
   3542  f77e		       c5 86		      CMP	player1y
   3543  f780		       90 03		      BCC	.skipL0118
   3544  f782				   .condpart40
   3545  f782		       4c e0 f7 	      jmp	.__Skip_AI_Up
   3546  f785
   3547  f785				   .skipL0118
   3548  f785				   .
   3549  f785							;
   3550  f785
   3551  f785				   .
   3552  f785							;
   3553  f785
   3554  f785				   .
   3555  f785							;
   3556  f785
   3557  f785				   .
   3558  f785							;
   3559  f785
   3560  f785				   .L0119		;  temp5  =   ( player1x - 10 )  / 4
   3561  f785
   3562  f785							; complex statement detected
   3563  f785		       a5 81		      LDA	player1x
   3564  f787		       38		      SEC
   3565  f788		       e9 0a		      SBC	#10
   3566  f78a		       4a		      lsr
   3567  f78b		       4a		      lsr
   3568  f78c		       85 a0		      STA	temp5
   3569  f78e				   .
   3570  f78e							;
   3571  f78e
   3572  f78e				   .L0120		;  temp6  =   ( player1y - 9 )  / 8
   3573  f78e
   3574  f78e							; complex statement detected
   3575  f78e		       a5 86		      LDA	player1y
   3576  f790		       38		      SEC
   3577  f791		       e9 09		      SBC	#9
   3578  f793		       4a		      lsr
   3579  f794		       4a		      lsr
   3580  f795		       4a		      lsr
   3581  f796		       85 a1		      STA	temp6
   3582  f798				   .
   3583  f798							;
   3584  f798
   3585  f798				   .L0121		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Up
   3586  f798
   3587  f798		       a5 a0		      LDA	temp5
   3588  f79a		       c9 22		      CMP	#34
   3589  f79c		       b0 0c		      BCS	.skipL0121
   3590  f79e				   .condpart41
   3591  f79e		       a5 a0		      LDA	temp5
   3592  f7a0		       a4 a1		      LDY	temp6
   3593  f7a2		       20 6b f2 	      jsr	pfread
   3594  f7a5		       d0 03		      BNE	.skip41then
   3595  f7a7				   .condpart42
   3596  f7a7		       4c e0 f7 	      jmp	.__Skip_AI_Up
   3597  f7aa
   3598  f7aa				   .skip41then
   3599  f7aa				   .skipL0121
   3600  f7aa				   .
   3601  f7aa							;
   3602  f7aa
   3603  f7aa				   .L0122		;  temp4  =   ( player1x - 17 )  / 4
   3604  f7aa
   3605  f7aa							; complex statement detected
   3606  f7aa		       a5 81		      LDA	player1x
   3607  f7ac		       38		      SEC
   3608  f7ad		       e9 11		      SBC	#17
   3609  f7af		       4a		      lsr
   3610  f7b0		       4a		      lsr
   3611  f7b1		       85 9f		      STA	temp4
   3612  f7b3				   .
   3613  f7b3							;
   3614  f7b3
   3615  f7b3				   .L0123		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Up
   3616  f7b3
   3617  f7b3		       a5 9f		      LDA	temp4
   3618  f7b5		       c9 22		      CMP	#34
   3619  f7b7		       b0 0c		      BCS	.skipL0123
   3620  f7b9				   .condpart43
   3621  f7b9		       a5 9f		      LDA	temp4
   3622  f7bb		       a4 a1		      LDY	temp6
   3623  f7bd		       20 6b f2 	      jsr	pfread
   3624  f7c0		       d0 03		      BNE	.skip43then
   3625  f7c2				   .condpart44
   3626  f7c2		       4c e0 f7 	      jmp	.__Skip_AI_Up
   3627  f7c5
   3628  f7c5				   .skip43then
   3629  f7c5				   .skipL0123
   3630  f7c5				   .
   3631  f7c5							;
   3632  f7c5
   3633  f7c5				   .L0124		;  temp3  =  temp5  -	1
   3634  f7c5
   3635  f7c5		       a5 a0		      LDA	temp5
   3636  f7c7		       38		      SEC
   3637  f7c8		       e9 01		      SBC	#1
   3638  f7ca		       85 9e		      STA	temp3
   3639  f7cc				   .
   3640  f7cc							;
   3641  f7cc
   3642  f7cc				   .L0125		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Up
   3643  f7cc
   3644  f7cc		       a5 9e		      LDA	temp3
   3645  f7ce		       c9 22		      CMP	#34
   3646  f7d0		       b0 0c		      BCS	.skipL0125
   3647  f7d2				   .condpart45
   3648  f7d2		       a5 9e		      LDA	temp3
   3649  f7d4		       a4 a1		      LDY	temp6
   3650  f7d6		       20 6b f2 	      jsr	pfread
   3651  f7d9		       d0 03		      BNE	.skip45then
   3652  f7db				   .condpart46
   3653  f7db		       4c e0 f7 	      jmp	.__Skip_AI_Up
   3654  f7de
   3655  f7de				   .skip45then
   3656  f7de				   .skipL0125
   3657  f7de				   .
   3658  f7de							;
   3659  f7de
   3660  f7de				   .
   3661  f7de							;
   3662  f7de
   3663  f7de				   .
   3664  f7de							;
   3665  f7de
   3666  f7de				   .
   3667  f7de							;
   3668  f7de
   3669  f7de				   .L0126		;  player1y  =  player1y  -  1
   3670  f7de
   3671  f7de		       c6 86		      DEC	player1y
   3672  f7e0				   .
   3673  f7e0							;
   3674  f7e0
   3675  f7e0				   .__Skip_AI_Up
   3676  f7e0							; __Skip_AI_Up
   3677  f7e0
   3678  f7e0				   .
   3679  f7e0							;
   3680  f7e0
   3681  f7e0				   .
   3682  f7e0							;
   3683  f7e0
   3684  f7e0				   .
   3685  f7e0							;
   3686  f7e0
   3687  f7e0				   .
   3688  f7e0							;
   3689  f7e0
   3690  f7e0				   .
   3691  f7e0							;
   3692  f7e0
   3693  f7e0				   .
   3694  f7e0							;
   3695  f7e0
   3696  f7e0				   .
   3697  f7e0							;
   3698  f7e0
   3699  f7e0				   .
   3700  f7e0							;
   3701  f7e0
   3702  f7e0				   .
   3703  f7e0							;
   3704  f7e0
   3705  f7e0				   .
   3706  f7e0							;
   3707  f7e0
   3708  f7e0				   .L0127		;  if player1y  >=  player0y then goto __Skip_AI_Down
   3709  f7e0
   3710  f7e0		       a5 86		      LDA	player1y
   3711  f7e2		       c5 85		      CMP	player0y
   3712  f7e4		       90 03		      BCC	.skipL0127
   3713  f7e6				   .condpart47
   3714  f7e6		       4c 50 f8 	      jmp	.__Skip_AI_Down
   3715  f7e9
   3716  f7e9				   .skipL0127
   3717  f7e9				   .
   3718  f7e9							;
   3719  f7e9
   3720  f7e9				   .
   3721  f7e9							;
   3722  f7e9
   3723  f7e9				   .
   3724  f7e9							;
   3725  f7e9
   3726  f7e9				   .
   3727  f7e9							;
   3728  f7e9
   3729  f7e9				   .L0128		;  _Bit1_P1_Dir_Down{1}  =  1
   3730  f7e9
   3731  f7e9		       a5 de		      LDA	_Bit1_P1_Dir_Down
   3732  f7eb		       09 02		      ORA	#2
   3733  f7ed		       85 de		      STA	_Bit1_P1_Dir_Down
   3734  f7ef				   .
   3735  f7ef							;
   3736  f7ef
   3737  f7ef				   .
   3738  f7ef							;
   3739  f7ef
   3740  f7ef				   .
   3741  f7ef							;
   3742  f7ef
   3743  f7ef				   .
   3744  f7ef							;
   3745  f7ef
   3746  f7ef				   .L0129		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_AI_Down
   3747  f7ef
   3748  f7ef		       a5 86		      LDA	player1y
   3749  f7f1		       c9 58		      CMP	#_P_Edge_Bottom
   3750  f7f3		       90 03		      BCC	.skipL0129
   3751  f7f5				   .condpart48
   3752  f7f5		       4c 50 f8 	      jmp	.__Skip_AI_Down
   3753  f7f8
   3754  f7f8				   .skipL0129
   3755  f7f8				   .
   3756  f7f8							;
   3757  f7f8
   3758  f7f8				   .
   3759  f7f8							;
   3760  f7f8
   3761  f7f8				   .
   3762  f7f8							;
   3763  f7f8
   3764  f7f8				   .
   3765  f7f8							;
   3766  f7f8
   3767  f7f8				   .L0130		;  temp5  =   ( player1x - 10 )  / 4
   3768  f7f8
   3769  f7f8							; complex statement detected
   3770  f7f8		       a5 81		      LDA	player1x
   3771  f7fa		       38		      SEC
   3772  f7fb		       e9 0a		      SBC	#10
   3773  f7fd		       4a		      lsr
   3774  f7fe		       4a		      lsr
   3775  f7ff		       85 a0		      STA	temp5
   3776  f801				   .
   3777  f801							;
   3778  f801
   3779  f801				   .L0131		;  temp6  =   ( player1y )  / 8
   3780  f801
   3781  f801							; complex statement detected
   3782  f801		       a5 86		      LDA	player1y
   3783  f803		       4a		      lsr
   3784  f804		       4a		      lsr
   3785  f805		       4a		      lsr
   3786  f806		       85 a1		      STA	temp6
   3787  f808				   .
   3788  f808							;
   3789  f808
   3790  f808				   .L0132		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Down
   3791  f808
   3792  f808		       a5 a0		      LDA	temp5
   3793  f80a		       c9 22		      CMP	#34
   3794  f80c		       b0 0c		      BCS	.skipL0132
   3795  f80e				   .condpart49
   3796  f80e		       a5 a0		      LDA	temp5
   3797  f810		       a4 a1		      LDY	temp6
   3798  f812		       20 6b f2 	      jsr	pfread
   3799  f815		       d0 03		      BNE	.skip49then
   3800  f817				   .condpart50
   3801  f817		       4c 50 f8 	      jmp	.__Skip_AI_Down
   3802  f81a
   3803  f81a				   .skip49then
   3804  f81a				   .skipL0132
   3805  f81a				   .
   3806  f81a							;
   3807  f81a
   3808  f81a				   .L0133		;  temp4  =   ( player1x - 17 )  / 4
   3809  f81a
   3810  f81a							; complex statement detected
   3811  f81a		       a5 81		      LDA	player1x
   3812  f81c		       38		      SEC
   3813  f81d		       e9 11		      SBC	#17
   3814  f81f		       4a		      lsr
   3815  f820		       4a		      lsr
   3816  f821		       85 9f		      STA	temp4
   3817  f823				   .
   3818  f823							;
   3819  f823
   3820  f823				   .L0134		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Down
   3821  f823
   3822  f823		       a5 9f		      LDA	temp4
   3823  f825		       c9 22		      CMP	#34
   3824  f827		       b0 0c		      BCS	.skipL0134
   3825  f829				   .condpart51
   3826  f829		       a5 9f		      LDA	temp4
   3827  f82b		       a4 a1		      LDY	temp6
   3828  f82d		       20 6b f2 	      jsr	pfread
   3829  f830		       d0 03		      BNE	.skip51then
   3830  f832				   .condpart52
   3831  f832		       4c 50 f8 	      jmp	.__Skip_AI_Down
   3832  f835
   3833  f835				   .skip51then
   3834  f835				   .skipL0134
   3835  f835				   .
   3836  f835							;
   3837  f835
   3838  f835				   .L0135		;  temp3  =  temp5  -	1
   3839  f835
   3840  f835		       a5 a0		      LDA	temp5
   3841  f837		       38		      SEC
   3842  f838		       e9 01		      SBC	#1
   3843  f83a		       85 9e		      STA	temp3
   3844  f83c				   .
   3845  f83c							;
   3846  f83c
   3847  f83c				   .L0136		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Down
   3848  f83c
   3849  f83c		       a5 9e		      LDA	temp3
   3850  f83e		       c9 22		      CMP	#34
   3851  f840		       b0 0c		      BCS	.skipL0136
   3852  f842				   .condpart53
   3853  f842		       a5 9e		      LDA	temp3
   3854  f844		       a4 a1		      LDY	temp6
   3855  f846		       20 6b f2 	      jsr	pfread
   3856  f849		       d0 03		      BNE	.skip53then
   3857  f84b				   .condpart54
   3858  f84b		       4c 50 f8 	      jmp	.__Skip_AI_Down
   3859  f84e
   3860  f84e				   .skip53then
   3861  f84e				   .skipL0136
   3862  f84e				   .
   3863  f84e							;
   3864  f84e
   3865  f84e				   .
   3866  f84e							;
   3867  f84e
   3868  f84e				   .
   3869  f84e							;
   3870  f84e
   3871  f84e				   .
   3872  f84e							;
   3873  f84e
   3874  f84e				   .L0137		;  player1y  =  player1y  +  1
   3875  f84e
   3876  f84e		       e6 86		      INC	player1y
   3877  f850				   .
   3878  f850							;
   3879  f850
   3880  f850				   .__Skip_AI_Down
   3881  f850							; __Skip_AI_Down
   3882  f850
   3883  f850				   .
   3884  f850							;
   3885  f850
   3886  f850				   .
   3887  f850							;
   3888  f850
   3889  f850				   .
   3890  f850							;
   3891  f850
   3892  f850				   .
   3893  f850							;
   3894  f850
   3895  f850				   .
   3896  f850							;
   3897  f850
   3898  f850				   .
   3899  f850							;
   3900  f850
   3901  f850				   .
   3902  f850							;
   3903  f850
   3904  f850				   .
   3905  f850							;
   3906  f850
   3907  f850				   .
   3908  f850							;
   3909  f850
   3910  f850				   .L0138		;  if player1x  <=  player0x then goto __Skip_AI_Left
   3911  f850
   3912  f850		       a5 80		      LDA	player0x
   3913  f852		       c5 81		      CMP	player1x
   3914  f854		       90 03		      BCC	.skipL0138
   3915  f856				   .condpart55
   3916  f856		       4c ab f8 	      jmp	.__Skip_AI_Left
   3917  f859
   3918  f859				   .skipL0138
   3919  f859				   .
   3920  f859							;
   3921  f859
   3922  f859				   .
   3923  f859							;
   3924  f859
   3925  f859				   .
   3926  f859							;
   3927  f859
   3928  f859				   .
   3929  f859							;
   3930  f859
   3931  f859				   .L0139		;  _Bit2_P1_Dir_Left{2}  =  1
   3932  f859
   3933  f859		       a5 de		      LDA	_Bit2_P1_Dir_Left
   3934  f85b		       09 04		      ORA	#4
   3935  f85d		       85 de		      STA	_Bit2_P1_Dir_Left
   3936  f85f				   .
   3937  f85f							;
   3938  f85f
   3939  f85f				   .
   3940  f85f							;
   3941  f85f
   3942  f85f				   .
   3943  f85f							;
   3944  f85f
   3945  f85f				   .
   3946  f85f							;
   3947  f85f
   3948  f85f				   .L0140		;  if player1x  <=  _P_Edge_Left then goto __Skip_AI_Left
   3949  f85f
   3950  f85f		       a9 01		      LDA	#_P_Edge_Left
   3951  f861		       c5 81		      CMP	player1x
   3952  f863		       90 03		      BCC	.skipL0140
   3953  f865				   .condpart56
   3954  f865		       4c ab f8 	      jmp	.__Skip_AI_Left
   3955  f868
   3956  f868				   .skipL0140
   3957  f868				   .
   3958  f868							;
   3959  f868
   3960  f868				   .
   3961  f868							;
   3962  f868
   3963  f868				   .
   3964  f868							;
   3965  f868
   3966  f868				   .
   3967  f868							;
   3968  f868
   3969  f868				   .L0141		;  temp5  =   ( player1y - 1 )  / 8
   3970  f868
   3971  f868							; complex statement detected
   3972  f868		       a5 86		      LDA	player1y
   3973  f86a		       38		      SEC
   3974  f86b		       e9 01		      SBC	#1
   3975  f86d		       4a		      lsr
   3976  f86e		       4a		      lsr
   3977  f86f		       4a		      lsr
   3978  f870		       85 a0		      STA	temp5
   3979  f872				   .
   3980  f872							;
   3981  f872
   3982  f872				   .L0142		;  temp6  =   ( player1x - 18 )  / 4
   3983  f872
   3984  f872							; complex statement detected
   3985  f872		       a5 81		      LDA	player1x
   3986  f874		       38		      SEC
   3987  f875		       e9 12		      SBC	#18
   3988  f877		       4a		      lsr
   3989  f878		       4a		      lsr
   3990  f879		       85 a1		      STA	temp6
   3991  f87b				   .
   3992  f87b							;
   3993  f87b
   3994  f87b				   .L0143		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Left
   3995  f87b
   3996  f87b		       a5 a1		      LDA	temp6
   3997  f87d		       c9 22		      CMP	#34
   3998  f87f		       b0 0c		      BCS	.skipL0143
   3999  f881				   .condpart57
   4000  f881		       a5 a1		      LDA	temp6
   4001  f883		       a4 a0		      LDY	temp5
   4002  f885		       20 6b f2 	      jsr	pfread
   4003  f888		       d0 03		      BNE	.skip57then
   4004  f88a				   .condpart58
   4005  f88a		       4c ab f8 	      jmp	.__Skip_AI_Left
   4006  f88d
   4007  f88d				   .skip57then
   4008  f88d				   .skipL0143
   4009  f88d				   .
   4010  f88d							;
   4011  f88d
   4012  f88d				   .L0144		;  temp3  =   ( player1y - 8 )  / 8
   4013  f88d
   4014  f88d							; complex statement detected
   4015  f88d		       a5 86		      LDA	player1y
   4016  f88f		       38		      SEC
   4017  f890		       e9 08		      SBC	#8
   4018  f892		       4a		      lsr
   4019  f893		       4a		      lsr
   4020  f894		       4a		      lsr
   4021  f895		       85 9e		      STA	temp3
   4022  f897				   .
   4023  f897							;
   4024  f897
   4025  f897				   .L0145		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Left
   4026  f897
   4027  f897		       a5 a1		      LDA	temp6
   4028  f899		       c9 22		      CMP	#34
   4029  f89b		       b0 0c		      BCS	.skipL0145
   4030  f89d				   .condpart59
   4031  f89d		       a5 a1		      LDA	temp6
   4032  f89f		       a4 9e		      LDY	temp3
   4033  f8a1		       20 6b f2 	      jsr	pfread
   4034  f8a4		       d0 03		      BNE	.skip59then
   4035  f8a6				   .condpart60
   4036  f8a6		       4c ab f8 	      jmp	.__Skip_AI_Left
   4037  f8a9
   4038  f8a9				   .skip59then
   4039  f8a9				   .skipL0145
   4040  f8a9				   .
   4041  f8a9							;
   4042  f8a9
   4043  f8a9				   .
   4044  f8a9							;
   4045  f8a9
   4046  f8a9				   .
   4047  f8a9							;
   4048  f8a9
   4049  f8a9				   .
   4050  f8a9							;
   4051  f8a9
   4052  f8a9				   .L0146		;  player1x  =  player1x  -  1
   4053  f8a9
   4054  f8a9		       c6 81		      DEC	player1x
   4055  f8ab				   .
   4056  f8ab							;
   4057  f8ab
   4058  f8ab				   .__Skip_AI_Left
   4059  f8ab							; __Skip_AI_Left
   4060  f8ab
   4061  f8ab				   .
   4062  f8ab							;
   4063  f8ab
   4064  f8ab				   .
   4065  f8ab							;
   4066  f8ab
   4067  f8ab				   .
   4068  f8ab							;
   4069  f8ab
   4070  f8ab				   .
   4071  f8ab							;
   4072  f8ab
   4073  f8ab				   .
   4074  f8ab							;
   4075  f8ab
   4076  f8ab				   .
   4077  f8ab							;
   4078  f8ab
   4079  f8ab				   .
   4080  f8ab							;
   4081  f8ab
   4082  f8ab				   .
   4083  f8ab							;
   4084  f8ab
   4085  f8ab				   .
   4086  f8ab							;
   4087  f8ab
   4088  f8ab				   .L0147		;  if player1x  >=  player0x then goto __Skip_AI_Right
   4089  f8ab
   4090  f8ab		       a5 81		      LDA	player1x
   4091  f8ad		       c5 80		      CMP	player0x
   4092  f8af		       90 03		      BCC	.skipL0147
   4093  f8b1				   .condpart61
   4094  f8b1		       4c 06 f9 	      jmp	.__Skip_AI_Right
   4095  f8b4
   4096  f8b4				   .skipL0147
   4097  f8b4				   .
   4098  f8b4							;
   4099  f8b4
   4100  f8b4				   .
   4101  f8b4							;
   4102  f8b4
   4103  f8b4				   .
   4104  f8b4							;
   4105  f8b4
   4106  f8b4				   .
   4107  f8b4							;
   4108  f8b4
   4109  f8b4				   .L0148		;  _Bit3_P1_Dir_Right{3}  =  1
   4110  f8b4
   4111  f8b4		       a5 de		      LDA	_Bit3_P1_Dir_Right
   4112  f8b6		       09 08		      ORA	#8
   4113  f8b8		       85 de		      STA	_Bit3_P1_Dir_Right
   4114  f8ba				   .
   4115  f8ba							;
   4116  f8ba
   4117  f8ba				   .
   4118  f8ba							;
   4119  f8ba
   4120  f8ba				   .
   4121  f8ba							;
   4122  f8ba
   4123  f8ba				   .
   4124  f8ba							;
   4125  f8ba
   4126  f8ba				   .L0149		;  if player1x  >=  _P_Edge_Right then goto __Skip_AI_Right
   4127  f8ba
   4128  f8ba		       a5 81		      LDA	player1x
   4129  f8bc		       c9 99		      CMP	#_P_Edge_Right
   4130  f8be		       90 03		      BCC	.skipL0149
   4131  f8c0				   .condpart62
   4132  f8c0		       4c 06 f9 	      jmp	.__Skip_AI_Right
   4133  f8c3
   4134  f8c3				   .skipL0149
   4135  f8c3				   .
   4136  f8c3							;
   4137  f8c3
   4138  f8c3				   .
   4139  f8c3							;
   4140  f8c3
   4141  f8c3				   .
   4142  f8c3							;
   4143  f8c3
   4144  f8c3				   .
   4145  f8c3							;
   4146  f8c3
   4147  f8c3				   .L0150		;  temp5  =   ( player1y - 1 )  / 8
   4148  f8c3
   4149  f8c3							; complex statement detected
   4150  f8c3		       a5 86		      LDA	player1y
   4151  f8c5		       38		      SEC
   4152  f8c6		       e9 01		      SBC	#1
   4153  f8c8		       4a		      lsr
   4154  f8c9		       4a		      lsr
   4155  f8ca		       4a		      lsr
   4156  f8cb		       85 a0		      STA	temp5
   4157  f8cd				   .
   4158  f8cd							;
   4159  f8cd
   4160  f8cd				   .L0151		;  temp6  =   ( player1x - 9 )  / 4
   4161  f8cd
   4162  f8cd							; complex statement detected
   4163  f8cd		       a5 81		      LDA	player1x
   4164  f8cf		       38		      SEC
   4165  f8d0		       e9 09		      SBC	#9
   4166  f8d2		       4a		      lsr
   4167  f8d3		       4a		      lsr
   4168  f8d4		       85 a1		      STA	temp6
   4169  f8d6				   .
   4170  f8d6							;
   4171  f8d6
   4172  f8d6				   .L0152		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Right
   4173  f8d6
   4174  f8d6		       a5 a1		      LDA	temp6
   4175  f8d8		       c9 22		      CMP	#34
   4176  f8da		       b0 0c		      BCS	.skipL0152
   4177  f8dc				   .condpart63
   4178  f8dc		       a5 a1		      LDA	temp6
   4179  f8de		       a4 a0		      LDY	temp5
   4180  f8e0		       20 6b f2 	      jsr	pfread
   4181  f8e3		       d0 03		      BNE	.skip63then
   4182  f8e5				   .condpart64
   4183  f8e5		       4c 06 f9 	      jmp	.__Skip_AI_Right
   4184  f8e8
   4185  f8e8				   .skip63then
   4186  f8e8				   .skipL0152
   4187  f8e8				   .
   4188  f8e8							;
   4189  f8e8
   4190  f8e8				   .L0153		;  temp3  =   ( player1y - 8 )  / 8
   4191  f8e8
   4192  f8e8							; complex statement detected
   4193  f8e8		       a5 86		      LDA	player1y
   4194  f8ea		       38		      SEC
   4195  f8eb		       e9 08		      SBC	#8
   4196  f8ed		       4a		      lsr
   4197  f8ee		       4a		      lsr
   4198  f8ef		       4a		      lsr
   4199  f8f0		       85 9e		      STA	temp3
   4200  f8f2				   .
   4201  f8f2							;
   4202  f8f2
   4203  f8f2				   .L0154		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Right
   4204  f8f2
   4205  f8f2		       a5 a1		      LDA	temp6
   4206  f8f4		       c9 22		      CMP	#34
   4207  f8f6		       b0 0c		      BCS	.skipL0154
   4208  f8f8				   .condpart65
   4209  f8f8		       a5 a1		      LDA	temp6
   4210  f8fa		       a4 9e		      LDY	temp3
   4211  f8fc		       20 6b f2 	      jsr	pfread
   4212  f8ff		       d0 03		      BNE	.skip65then
   4213  f901				   .condpart66
   4214  f901		       4c 06 f9 	      jmp	.__Skip_AI_Right
   4215  f904
   4216  f904				   .skip65then
   4217  f904				   .skipL0154
   4218  f904				   .
   4219  f904							;
   4220  f904
   4221  f904				   .
   4222  f904							;
   4223  f904
   4224  f904				   .
   4225  f904							;
   4226  f904
   4227  f904				   .
   4228  f904							;
   4229  f904
   4230  f904				   .L0155		;  player1x  =  player1x  +  1
   4231  f904
   4232  f904		       e6 81		      INC	player1x
   4233  f906				   .
   4234  f906							;
   4235  f906
   4236  f906				   .__Skip_AI_Right
   4237  f906							; __Skip_AI_Right
   4238  f906
   4239  f906				   .
   4240  f906							;
   4241  f906
   4242  f906				   .L0156		;  if !collision(ball,player0) then __Skip_Gem_Collection
   4243  f906
   4244  f906		       24 02		      bit	CXP0FB
   4245  f908		       50 2f		      bvc	.__Skip_Gem_Collection
   4246  f90a				   .L0157		;  _Bit0_Carrying_Gem{0}  =  1
   4247  f90a
   4248  f90a		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4249  f90c		       09 01		      ORA	#1
   4250  f90e		       85 eb		      STA	_Bit0_Carrying_Gem
   4251  f910				   .L0158		;  score  =  score  +	1
   4252  f910
   4253  f910		       f8		      SED
   4254  f911		       18		      CLC
   4255  f912		       a5 95		      LDA	score+2
   4256  f914		       69 01		      ADC	#$01
   4257  f916		       85 95		      STA	score+2
   4258  f918		       a5 94		      LDA	score+1
   4259  f91a		       69 00		      ADC	#$00
   4260  f91c		       85 94		      STA	score+1
   4261  f91e		       a5 93		      LDA	score
   4262  f920		       69 00		      ADC	#$00
   4263  f922		       85 93		      STA	score
   4264  f924		       d8		      CLD
   4265  f925				   .L0159		;  ballx  =   ( rand  &  118 )   +  23  :  bally  =   ( rand  &  70 )	 +  9
   4266  f925
   4267  f925							; complex statement detected
   4268  f925		       20 b3 f3 	      jsr	randomize
   4269  f928		       29 76		      AND	#118
   4270  f92a		       18		      CLC
   4271  f92b		       69 17		      ADC	#23
   4272  f92d		       85 84		      STA	ballx
   4273  f92f							; complex statement detected
   4274  f92f		       20 b3 f3 	      jsr	randomize
   4275  f932		       29 46		      AND	#70
   4276  f934		       18		      CLC
   4277  f935		       69 09		      ADC	#9
   4278  f937		       85 89		      STA	bally
   4279  f939				   .__Skip_Gem_Collection
   4280  f939							; __Skip_Gem_Collection
   4281  f939
   4282  f939				   .
   4283  f939							;
   4284  f939
   4285  f939				   .
   4286  f939							;
   4287  f939
   4288  f939				   .
   4289  f939							;
   4290  f939
   4291  f939				   .
   4292  f939							;
   4293  f939
   4294  f939				   .
   4295  f939							;
   4296  f939
   4297  f939				   .
   4298  f939							;
   4299  f939
   4300  f939				   .
   4301  f939							;
   4302  f939
   4303  f939				   .
   4304  f939							;
   4305  f939
   4306  f939				   .
   4307  f939							;
   4308  f939
   4309  f939				   .
   4310  f939							;
   4311  f939
   4312  f939				   .
   4313  f939							;
   4314  f939
   4315  f939				   .
   4316  f939							;
   4317  f939
   4318  f939				   .L0160		;  if !joy0fire then goto __Skip_Fire
   4319  f939
   4320  f939		       24 0c		      bit	INPT4
   4321  f93b		       10 03		      BPL	.skipL0160
   4322  f93d				   .condpart67
   4323  f93d		       4c d9 f9 	      jmp	.__Skip_Fire
   4324  f940
   4325  f940				   .skipL0160
   4326  f940				   .
   4327  f940							;
   4328  f940
   4329  f940				   .
   4330  f940							;
   4331  f940
   4332  f940				   .
   4333  f940							;
   4334  f940
   4335  f940				   .
   4336  f940							;
   4337  f940
   4338  f940				   .L0161		;  if _Bit2_M0_Moving{7} then goto __Skip_Fire
   4339  f940
   4340  f940		       24 ec		      BIT	_Bit2_M0_Moving
   4341  f942		       10 03		      BPL	.skipL0161
   4342  f944				   .condpart68
   4343  f944		       4c d9 f9 	      jmp	.__Skip_Fire
   4344  f947
   4345  f947				   .skipL0161
   4346  f947				   .
   4347  f947							;
   4348  f947
   4349  f947				   .
   4350  f947							;
   4351  f947
   4352  f947				   .
   4353  f947							;
   4354  f947
   4355  f947				   .
   4356  f947							;
   4357  f947
   4358  f947				   .L0162		;  _Bit2_M0_Moving{7}	=  1
   4359  f947
   4360  f947		       a5 ec		      LDA	_Bit2_M0_Moving
   4361  f949		       09 80		      ORA	#128
   4362  f94b		       85 ec		      STA	_Bit2_M0_Moving
   4363  f94d				   .
   4364  f94d							;
   4365  f94d
   4366  f94d				   .
   4367  f94d							;
   4368  f94d
   4369  f94d				   .
   4370  f94d							;
   4371  f94d
   4372  f94d				   .
   4373  f94d							;
   4374  f94d
   4375  f94d				   .
   4376  f94d							;
   4377  f94d
   4378  f94d				   .L0163		;  _Bit4_M0_Dir_Up{4}	=  _Bit0_P0_Dir_Up{0}
   4379  f94d
   4380  f94d		       a5 da		      LDA	_Bit0_P0_Dir_Up
   4381  f94f		       29 01		      AND	#1
   4382  f951		       08		      PHP
   4383  f952		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4384  f954		       29 ef		      AND	#239
   4385  f956		       28		      PLP
   4386  f957		       f0 02		      .byte.b	$F0, $02
   4387  f959		       09 10		      ORA	#16
   4388  f95b		       85 da		      STA	_Bit4_M0_Dir_Up
   4389  f95d				   .L0164		;  _Bit5_M0_Dir_Down{5}  =  _Bit1_P0_Dir_Down{1}
   4390  f95d
   4391  f95d		       a5 da		      LDA	_Bit1_P0_Dir_Down
   4392  f95f		       29 02		      AND	#2
   4393  f961		       08		      PHP
   4394  f962		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4395  f964		       29 df		      AND	#223
   4396  f966		       28		      PLP
   4397  f967		       f0 02		      .byte.b	$F0, $02
   4398  f969		       09 20		      ORA	#32
   4399  f96b		       85 da		      STA	_Bit5_M0_Dir_Down
   4400  f96d				   .L0165		;  _Bit6_M0_Dir_Left{6}  =  _Bit2_P0_Dir_Left{2}
   4401  f96d
   4402  f96d		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4403  f96f		       29 04		      AND	#4
   4404  f971		       08		      PHP
   4405  f972		       a5 da		      LDA	_Bit6_M0_Dir_Left
   4406  f974		       29 bf		      AND	#191
   4407  f976		       28		      PLP
   4408  f977		       f0 02		      .byte.b	$F0, $02
   4409  f979		       09 40		      ORA	#64
   4410  f97b		       85 da		      STA	_Bit6_M0_Dir_Left
   4411  f97d				   .L0166		;  _Bit7_M0_Dir_Right{7}  =  _Bit3_P0_Dir_Right{3}
   4412  f97d
   4413  f97d		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4414  f97f		       29 08		      AND	#8
   4415  f981		       08		      PHP
   4416  f982		       a5 da		      LDA	_Bit7_M0_Dir_Right
   4417  f984		       29 7f		      AND	#127
   4418  f986		       28		      PLP
   4419  f987		       f0 02		      .byte.b	$F0, $02
   4420  f989		       09 80		      ORA	#128
   4421  f98b		       85 da		      STA	_Bit7_M0_Dir_Right
   4422  f98d				   .
   4423  f98d							;
   4424  f98d
   4425  f98d				   .
   4426  f98d							;
   4427  f98d
   4428  f98d				   .
   4429  f98d							;
   4430  f98d
   4431  f98d				   .
   4432  f98d							;
   4433  f98d
   4434  f98d				   .L0167		;  if _Bit4_M0_Dir_Up{4} then missile0x  =  player0x  +  4  :	missile0y  =  player0y	-  5
   4435  f98d
   4436  f98d		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4437  f98f		       29 10		      AND	#16
   4438  f991		       f0 0e		      BEQ	.skipL0167
   4439  f993				   .condpart69
   4440  f993		       a5 80		      LDA	player0x
   4441  f995		       18		      CLC
   4442  f996		       69 04		      ADC	#4
   4443  f998		       85 82		      STA	missile0x
   4444  f99a		       a5 85		      LDA	player0y
   4445  f99c		       38		      SEC
   4446  f99d		       e9 05		      SBC	#5
   4447  f99f		       85 91		      STA	missile0y
   4448  f9a1				   .skipL0167
   4449  f9a1				   .L0168		;  if _Bit5_M0_Dir_Down{5} then missile0x  =  player0x  +  4  :  missile0y  =	player0y  -  1
   4450  f9a1
   4451  f9a1		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4452  f9a3		       29 20		      AND	#32
   4453  f9a5		       f0 0e		      BEQ	.skipL0168
   4454  f9a7				   .condpart70
   4455  f9a7		       a5 80		      LDA	player0x
   4456  f9a9		       18		      CLC
   4457  f9aa		       69 04		      ADC	#4
   4458  f9ac		       85 82		      STA	missile0x
   4459  f9ae		       a5 85		      LDA	player0y
   4460  f9b0		       38		      SEC
   4461  f9b1		       e9 01		      SBC	#1
   4462  f9b3		       85 91		      STA	missile0y
   4463  f9b5				   .skipL0168
   4464  f9b5				   .L0169		;  if _Bit6_M0_Dir_Left{6} then missile0x  =  player0x  +  2  :  missile0y  =	player0y  -  3
   4465  f9b5
   4466  f9b5		       24 da		      BIT	_Bit6_M0_Dir_Left
   4467  f9b7		       50 0e		      BVC	.skipL0169
   4468  f9b9				   .condpart71
   4469  f9b9		       a5 80		      LDA	player0x
   4470  f9bb		       18		      CLC
   4471  f9bc		       69 02		      ADC	#2
   4472  f9be		       85 82		      STA	missile0x
   4473  f9c0		       a5 85		      LDA	player0y
   4474  f9c2		       38		      SEC
   4475  f9c3		       e9 03		      SBC	#3
   4476  f9c5		       85 91		      STA	missile0y
   4477  f9c7				   .skipL0169
   4478  f9c7				   .L0170		;  if _Bit7_M0_Dir_Right{7} then missile0x  =	player0x  +  6	:  missile0y  =  player0y  -  3
   4479  f9c7
   4480  f9c7		       24 da		      BIT	_Bit7_M0_Dir_Right
   4481  f9c9		       10 0e		      BPL	.skipL0170
   4482  f9cb				   .condpart72
   4483  f9cb		       a5 80		      LDA	player0x
   4484  f9cd		       18		      CLC
   4485  f9ce		       69 06		      ADC	#6
   4486  f9d0		       85 82		      STA	missile0x
   4487  f9d2		       a5 85		      LDA	player0y
   4488  f9d4		       38		      SEC
   4489  f9d5		       e9 03		      SBC	#3
   4490  f9d7		       85 91		      STA	missile0y
   4491  f9d9				   .skipL0170
   4492  f9d9				   .
   4493  f9d9							;
   4494  f9d9
   4495  f9d9				   .__Skip_Fire
   4496  f9d9							; __Skip_Fire
   4497  f9d9
   4498  f9d9				   .
   4499  f9d9							;
   4500  f9d9
   4501  f9d9				   .
   4502  f9d9							;
   4503  f9d9
   4504  f9d9				   .
   4505  f9d9							;
   4506  f9d9
   4507  f9d9				   .
   4508  f9d9							;
   4509  f9d9
   4510  f9d9				   .
   4511  f9d9							;
   4512  f9d9
   4513  f9d9				   .
   4514  f9d9							;
   4515  f9d9
   4516  f9d9				   .
   4517  f9d9							;
   4518  f9d9
   4519  f9d9				   .
   4520  f9d9							;
   4521  f9d9
   4522  f9d9				   .L0171		;  if !_Bit2_M0_Moving{7} then goto __Skip_Missile
   4523  f9d9
   4524  f9d9		       24 ec		      BIT	_Bit2_M0_Moving
   4525  f9db		       30 03		      BMI	.skipL0171
   4526  f9dd				   .condpart73
   4527  f9dd		       4c 47 fa 	      jmp	.__Skip_Missile
   4528  f9e0
   4529  f9e0				   .skipL0171
   4530  f9e0				   .
   4531  f9e0							;
   4532  f9e0
   4533  f9e0				   .
   4534  f9e0							;
   4535  f9e0
   4536  f9e0				   .
   4537  f9e0							;
   4538  f9e0
   4539  f9e0				   .
   4540  f9e0							;
   4541  f9e0
   4542  f9e0				   .L0172		;  if _Bit4_M0_Dir_Up{4} then missile0y  =  missile0y	-  2
   4543  f9e0
   4544  f9e0		       a5 da		      LDA	_Bit4_M0_Dir_Up
   4545  f9e2		       29 10		      AND	#16
   4546  f9e4		       f0 07		      BEQ	.skipL0172
   4547  f9e6				   .condpart74
   4548  f9e6		       a5 91		      LDA	missile0y
   4549  f9e8		       38		      SEC
   4550  f9e9		       e9 02		      SBC	#2
   4551  f9eb		       85 91		      STA	missile0y
   4552  f9ed				   .skipL0172
   4553  f9ed				   .L0173		;  if _Bit5_M0_Dir_Down{5} then missile0y  =  missile0y  +  2
   4554  f9ed
   4555  f9ed		       a5 da		      LDA	_Bit5_M0_Dir_Down
   4556  f9ef		       29 20		      AND	#32
   4557  f9f1		       f0 07		      BEQ	.skipL0173
   4558  f9f3				   .condpart75
   4559  f9f3		       a5 91		      LDA	missile0y
   4560  f9f5		       18		      CLC
   4561  f9f6		       69 02		      ADC	#2
   4562  f9f8		       85 91		      STA	missile0y
   4563  f9fa				   .skipL0173
   4564  f9fa				   .L0174		;  if _Bit6_M0_Dir_Left{6} then missile0x  =  missile0x  -  2
   4565  f9fa
   4566  f9fa		       24 da		      BIT	_Bit6_M0_Dir_Left
   4567  f9fc		       50 07		      BVC	.skipL0174
   4568  f9fe				   .condpart76
   4569  f9fe		       a5 82		      LDA	missile0x
   4570  fa00		       38		      SEC
   4571  fa01		       e9 02		      SBC	#2
   4572  fa03		       85 82		      STA	missile0x
   4573  fa05				   .skipL0174
   4574  fa05				   .L0175		;  if _Bit7_M0_Dir_Right{7} then missile0x  =	missile0x  +  2
   4575  fa05
   4576  fa05		       24 da		      BIT	_Bit7_M0_Dir_Right
   4577  fa07		       10 07		      BPL	.skipL0175
   4578  fa09				   .condpart77
   4579  fa09		       a5 82		      LDA	missile0x
   4580  fa0b		       18		      CLC
   4581  fa0c		       69 02		      ADC	#2
   4582  fa0e		       85 82		      STA	missile0x
   4583  fa10				   .skipL0175
   4584  fa10				   .
   4585  fa10							;
   4586  fa10
   4587  fa10				   .
   4588  fa10							;
   4589  fa10
   4590  fa10				   .
   4591  fa10							;
   4592  fa10
   4593  fa10				   .
   4594  fa10							;
   4595  fa10
   4596  fa10				   .L0176		;  if missile0y  <  _M_Edge_Top then goto __Skip_to_Clear_Missile
   4597  fa10
   4598  fa10		       a5 91		      LDA	missile0y
   4599  fa12		       c9 02		      CMP	#_M_Edge_Top
   4600  fa14		       b0 03		      BCS	.skipL0176
   4601  fa16				   .condpart78
   4602  fa16		       4c 3b fa 	      jmp	.__Skip_to_Clear_Missile
   4603  fa19
   4604  fa19				   .skipL0176
   4605  fa19				   .L0177		;  if missile0y  >  _M_Edge_Bottom then goto __Skip_to_Clear_Missile
   4606  fa19
   4607  fa19		       a9 58		      LDA	#_M_Edge_Bottom
   4608  fa1b		       c5 91		      CMP	missile0y
   4609  fa1d		       b0 03		      BCS	.skipL0177
   4610  fa1f				   .condpart79
   4611  fa1f		       4c 3b fa 	      jmp	.__Skip_to_Clear_Missile
   4612  fa22
   4613  fa22				   .skipL0177
   4614  fa22				   .L0178		;  if missile0x  <  _M_Edge_Left then goto __Skip_to_Clear_Missile
   4615  fa22
   4616  fa22		       a5 82		      LDA	missile0x
   4617  fa24		       c9 02		      CMP	#_M_Edge_Left
   4618  fa26		       b0 03		      BCS	.skipL0178
   4619  fa28				   .condpart80
   4620  fa28		       4c 3b fa 	      jmp	.__Skip_to_Clear_Missile
   4621  fa2b
   4622  fa2b				   .skipL0178
   4623  fa2b				   .L0179		;  if missile0x  >  _M_Edge_Right then goto __Skip_to_Clear_Missile
   4624  fa2b
   4625  fa2b		       a9 9f		      LDA	#_M_Edge_Right
   4626  fa2d		       c5 82		      CMP	missile0x
   4627  fa2f		       b0 03		      BCS	.skipL0179
   4628  fa31				   .condpart81
   4629  fa31		       4c 3b fa 	      jmp	.__Skip_to_Clear_Missile
   4630  fa34
   4631  fa34				   .skipL0179
   4632  fa34				   .
   4633  fa34							;
   4634  fa34
   4635  fa34				   .
   4636  fa34							;
   4637  fa34
   4638  fa34				   .
   4639  fa34							;
   4640  fa34
   4641  fa34				   .
   4642  fa34							;
   4643  fa34
   4644  fa34				   .L0180		;  if !collision(playfield,missile0) then goto __Skip_Missile
   4645  fa34
   4646  fa34		       24 04		      bit	CXM0FB
   4647  fa36		       30 03		      BMI	.skipL0180
   4648  fa38				   .condpart82
   4649  fa38		       4c 47 fa 	      jmp	.__Skip_Missile
   4650  fa3b
   4651  fa3b				   .skipL0180
   4652  fa3b				   .
   4653  fa3b							;
   4654  fa3b
   4655  fa3b				   .__Skip_to_Clear_Missile
   4656  fa3b							; __Skip_to_Clear_Missile
   4657  fa3b
   4658  fa3b				   .
   4659  fa3b							;
   4660  fa3b
   4661  fa3b				   .
   4662  fa3b							;
   4663  fa3b
   4664  fa3b				   .
   4665  fa3b							;
   4666  fa3b
   4667  fa3b				   .
   4668  fa3b							;
   4669  fa3b
   4670  fa3b				   .L0181		;  _Bit2_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   4671  fa3b
   4672  fa3b		       a5 ec		      LDA	_Bit2_M0_Moving
   4673  fa3d		       29 7f		      AND	#127
   4674  fa3f		       85 ec		      STA	_Bit2_M0_Moving
   4675  fa41		       a9 c8		      LDA	#200
   4676  fa43		       85 82		      STA	missile0x
   4677  fa45		       85 91		      STA	missile0y
   4678  fa47				   .
   4679  fa47							;
   4680  fa47
   4681  fa47				   .__Skip_Missile
   4682  fa47							; __Skip_Missile
   4683  fa47
   4684  fa47				   .
   4685  fa47							;
   4686  fa47
   4687  fa47				   .
   4688  fa47							;
   4689  fa47
   4690  fa47				   .
   4691  fa47							;
   4692  fa47
   4693  fa47				   .
   4694  fa47							;
   4695  fa47
   4696  fa47				   .
   4697  fa47							;
   4698  fa47
   4699  fa47				   .L0182		;  drawscreen
   4700  fa47
   4701  fa47		       20 c1 f3 	      jsr	drawscreen
   4702  fa4a				   .
   4703  fa4a							;
   4704  fa4a
   4705  fa4a				   .
   4706  fa4a							;
   4707  fa4a
   4708  fa4a				   .
   4709  fa4a							;
   4710  fa4a
   4711  fa4a				   .
   4712  fa4a							;
   4713  fa4a
   4714  fa4a				   .
   4715  fa4a							;
   4716  fa4a
   4717  fa4a				   .
   4718  fa4a							;
   4719  fa4a
   4720  fa4a				   .
   4721  fa4a							;
   4722  fa4a
   4723  fa4a				   .
   4724  fa4a							;
   4725  fa4a
   4726  fa4a				   .
   4727  fa4a							;
   4728  fa4a
   4729  fa4a				   .
   4730  fa4a							;
   4731  fa4a
   4732  fa4a				   .
   4733  fa4a							;
   4734  fa4a
   4735  fa4a				   .
   4736  fa4a							;
   4737  fa4a
   4738  fa4a				   .
   4739  fa4a							;
   4740  fa4a
   4741  fa4a				   .
   4742  fa4a							;
   4743  fa4a
   4744  fa4a				   .
   4745  fa4a							;
   4746  fa4a
   4747  fa4a				   .L0183		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   4748  fa4a
   4749  fa4a		       a9 01		      lda	#1
   4750  fa4c		       2c 82 02 	      bit	SWCHB
   4751  fa4f		       f0 09		      BEQ	.skipL0183
   4752  fa51				   .condpart83
   4753  fa51		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4754  fa53		       29 fe		      AND	#254
   4755  fa55		       85 ec		      STA	_Bit0_Reset_Restrainer
   4756  fa57		       4c 2e f5 	      jmp	.__Main_Loop
   4757  fa5a
   4758  fa5a				   .skipL0183
   4759  fa5a				   .
   4760  fa5a							;
   4761  fa5a
   4762  fa5a				   .
   4763  fa5a							;
   4764  fa5a
   4765  fa5a				   .
   4766  fa5a							;
   4767  fa5a
   4768  fa5a				   .
   4769  fa5a							;
   4770  fa5a
   4771  fa5a				   .
   4772  fa5a							;
   4773  fa5a
   4774  fa5a				   .L0184		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   4775  fa5a
   4776  fa5a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4777  fa5c		       4a		      LSR
   4778  fa5d		       90 03		      BCC	.skipL0184
   4779  fa5f				   .condpart84
   4780  fa5f		       4c 2e f5 	      jmp	.__Main_Loop
   4781  fa62
   4782  fa62				   .skipL0184
   4783  fa62				   .
   4784  fa62							;
   4785  fa62
   4786  fa62				   .
   4787  fa62							;
   4788  fa62
   4789  fa62				   .
   4790  fa62							;
   4791  fa62
   4792  fa62				   .
   4793  fa62							;
   4794  fa62
   4795  fa62				   .L0185		;  goto __Start_Restart
   4796  fa62
   4797  fa62		       4c 61 f4 	      jmp	.__Start_Restart
   4798  fa65
   4799  fa65				  -	      if	(<*) > (<(*+7))
   4800  fa65				  -	      repeat	($100-<*)
   4801  fa65				  -	      .byte	0
   4802  fa65				  -	      repend
   4803  fa65					      endif
   4804  fa65				   playerL053_0
   4805  fa65		       e7		      .byte.b	%11100111
   4806  fa66		       24		      .byte.b	%00100100
   4807  fa67		       24		      .byte.b	%00100100
   4808  fa68		       99		      .byte.b	%10011001
   4809  fa69		       5a		      .byte.b	%01011010
   4810  fa6a		       3c		      .byte.b	%00111100
   4811  fa6b		       18		      .byte.b	%00011000
   4812  fa6c		       ff		      .byte.b	%11111111
   4813  fa6d				  -	      if	(<*) > (<(*+7))
   4814  fa6d				  -	      repeat	($100-<*)
   4815  fa6d				  -	      .byte	0
   4816  fa6d				  -	      repend
   4817  fa6d					      endif
   4818  fa6d				   playerL054_1
   4819  fa6d		       66		      .byte.b	%01100110
   4820  fa6e		       24		      .byte.b	%00100100
   4821  fa6f		       99		      .byte.b	%10011001
   4822  fa70		       bd		      .byte.b	%10111101
   4823  fa71		       7e		      .byte.b	%01111110
   4824  fa72		       18		      .byte.b	%00011000
   4825  fa73		       3c		      .byte.b	%00111100
   4826  fa74		       24		      .byte.b	%00100100
   4827  fa75					      if	ECHOFIRST
      1319 bytes of ROM space left
   4828  fa75					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4829  fa75					      endif
   4830  fa75		       00 01	   ECHOFIRST  =	1
   4831  fa75
   4832  fa75
   4833  fa75
   4834  fa75							; feel free to modify the score graphics - just keep each digit 8 high
   4835  fa75							; and keep the conditional compilation stuff intact
   4836  fa75				  -	      ifconst	ROM2k
   4837  fa75				  -	      ORG	$F7AC-8
   4838  fa75					      else
   4839  fa75				  -	      ifconst	bankswitch
   4840  fa75				  -	      if	bankswitch == 8
   4841  fa75				  -	      ORG	$2F94-bscode_length
   4842  fa75				  -	      RORG	$FF94-bscode_length
   4843  fa75				  -	      endif
   4844  fa75				  -	      if	bankswitch == 16
   4845  fa75				  -	      ORG	$4F94-bscode_length
   4846  fa75				  -	      RORG	$FF94-bscode_length
   4847  fa75				  -	      endif
   4848  fa75				  -	      if	bankswitch == 32
   4849  fa75				  -	      ORG	$8F94-bscode_length
   4850  fa75				  -	      RORG	$FF94-bscode_length
   4851  fa75				  -	      endif
   4852  fa75				  -	      if	bankswitch == 64
   4853  fa75				  -	      ORG	$10F80-bscode_length
   4854  fa75				  -	      RORG	$1FF80-bscode_length
   4855  fa75				  -	      endif
   4856  fa75					      else
   4857  ff9c					      ORG	$FF9C
   4858  ff9c					      endif
   4859  ff9c					      endif
   4860  ff9c
   4861  ff9c							; font equates
   4862  ff9c		       00 01	   .21stcentury =	1
   4863  ff9c		       00 02	   alarmclock =	2
   4864  ff9c		       00 03	   handwritten =	3
   4865  ff9c		       00 04	   interrupted =	4
   4866  ff9c		       00 05	   retroputer =	5
   4867  ff9c		       00 06	   whimsey    =	6
   4868  ff9c		       00 07	   tiny       =	7
   4869  ff9c
   4870  ff9c				   scoretable
   4871  ff9c
   4872  ff9c				  -	      ifconst	font
   4873  ff9c				  -	      if	font == .21stcentury
   4874  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4875  ff9c				  -	      endif
   4876  ff9c				  -	      if	font == alarmclock
   4877  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4878  ff9c				  -	      endif
   4879  ff9c				  -	      if	font == handwritten
   4880  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4881  ff9c				  -	      endif
   4882  ff9c				  -	      if	font == interrupted
   4883  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4884  ff9c				  -	      endif
   4885  ff9c				  -	      if	font == retroputer
   4886  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4887  ff9c				  -	      endif
   4888  ff9c				  -	      if	font == whimsey
   4889  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4890  ff9c				  -	      endif
   4891  ff9c				  -	      if	font == tiny
   4892  ff9c				  -	      include	"score_graphics.asm.tiny"
   4893  ff9c				  -	      endif
   4894  ff9c					      else		; default font
   4895  ff9c
   4896  ff9c		       3c		      .byte.b	%00111100
   4897  ff9d		       66		      .byte.b	%01100110
   4898  ff9e		       66		      .byte.b	%01100110
   4899  ff9f		       66		      .byte.b	%01100110
   4900  ffa0		       66		      .byte.b	%01100110
   4901  ffa1		       66		      .byte.b	%01100110
   4902  ffa2		       66		      .byte.b	%01100110
   4903  ffa3		       3c		      .byte.b	%00111100
   4904  ffa4
   4905  ffa4		       7e		      .byte.b	%01111110
   4906  ffa5		       18		      .byte.b	%00011000
   4907  ffa6		       18		      .byte.b	%00011000
   4908  ffa7		       18		      .byte.b	%00011000
   4909  ffa8		       18		      .byte.b	%00011000
   4910  ffa9		       38		      .byte.b	%00111000
   4911  ffaa		       18		      .byte.b	%00011000
   4912  ffab		       08		      .byte.b	%00001000
   4913  ffac
   4914  ffac		       7e		      .byte.b	%01111110
   4915  ffad		       60		      .byte.b	%01100000
   4916  ffae		       60		      .byte.b	%01100000
   4917  ffaf		       3c		      .byte.b	%00111100
   4918  ffb0		       06		      .byte.b	%00000110
   4919  ffb1		       06		      .byte.b	%00000110
   4920  ffb2		       46		      .byte.b	%01000110
   4921  ffb3		       3c		      .byte.b	%00111100
   4922  ffb4
   4923  ffb4		       3c		      .byte.b	%00111100
   4924  ffb5		       46		      .byte.b	%01000110
   4925  ffb6		       06		      .byte.b	%00000110
   4926  ffb7		       06		      .byte.b	%00000110
   4927  ffb8		       1c		      .byte.b	%00011100
   4928  ffb9		       06		      .byte.b	%00000110
   4929  ffba		       46		      .byte.b	%01000110
   4930  ffbb		       3c		      .byte.b	%00111100
   4931  ffbc
   4932  ffbc		       0c		      .byte.b	%00001100
   4933  ffbd		       0c		      .byte.b	%00001100
   4934  ffbe		       7e		      .byte.b	%01111110
   4935  ffbf		       4c		      .byte.b	%01001100
   4936  ffc0		       4c		      .byte.b	%01001100
   4937  ffc1		       2c		      .byte.b	%00101100
   4938  ffc2		       1c		      .byte.b	%00011100
   4939  ffc3		       0c		      .byte.b	%00001100
   4940  ffc4
   4941  ffc4		       3c		      .byte.b	%00111100
   4942  ffc5		       46		      .byte.b	%01000110
   4943  ffc6		       06		      .byte.b	%00000110
   4944  ffc7		       06		      .byte.b	%00000110
   4945  ffc8		       3c		      .byte.b	%00111100
   4946  ffc9		       60		      .byte.b	%01100000
   4947  ffca		       60		      .byte.b	%01100000
   4948  ffcb		       7e		      .byte.b	%01111110
   4949  ffcc
   4950  ffcc		       3c		      .byte.b	%00111100
   4951  ffcd		       66		      .byte.b	%01100110
   4952  ffce		       66		      .byte.b	%01100110
   4953  ffcf		       66		      .byte.b	%01100110
   4954  ffd0		       7c		      .byte.b	%01111100
   4955  ffd1		       60		      .byte.b	%01100000
   4956  ffd2		       62		      .byte.b	%01100010
   4957  ffd3		       3c		      .byte.b	%00111100
   4958  ffd4
   4959  ffd4		       30		      .byte.b	%00110000
   4960  ffd5		       30		      .byte.b	%00110000
   4961  ffd6		       30		      .byte.b	%00110000
   4962  ffd7		       18		      .byte.b	%00011000
   4963  ffd8		       0c		      .byte.b	%00001100
   4964  ffd9		       06		      .byte.b	%00000110
   4965  ffda		       42		      .byte.b	%01000010
   4966  ffdb		       3e		      .byte.b	%00111110
   4967  ffdc
   4968  ffdc		       3c		      .byte.b	%00111100
   4969  ffdd		       66		      .byte.b	%01100110
   4970  ffde		       66		      .byte.b	%01100110
   4971  ffdf		       66		      .byte.b	%01100110
   4972  ffe0		       3c		      .byte.b	%00111100
   4973  ffe1		       66		      .byte.b	%01100110
   4974  ffe2		       66		      .byte.b	%01100110
   4975  ffe3		       3c		      .byte.b	%00111100
   4976  ffe4
   4977  ffe4		       3c		      .byte.b	%00111100
   4978  ffe5		       46		      .byte.b	%01000110
   4979  ffe6		       06		      .byte.b	%00000110
   4980  ffe7		       3e		      .byte.b	%00111110
   4981  ffe8		       66		      .byte.b	%01100110
   4982  ffe9		       66		      .byte.b	%01100110
   4983  ffea		       66		      .byte.b	%01100110
   4984  ffeb		       3c		      .byte.b	%00111100
   4985  ffec
   4986  ffec					      ifnconst	DPC_kernel_options
   4987  ffec
   4988  ffec		       00		      .byte.b	%00000000
   4989  ffed		       00		      .byte.b	%00000000
   4990  ffee		       00		      .byte.b	%00000000
   4991  ffef		       00		      .byte.b	%00000000
   4992  fff0		       00		      .byte.b	%00000000
   4993  fff1		       00		      .byte.b	%00000000
   4994  fff2		       00		      .byte.b	%00000000
   4995  fff3		       00		      .byte.b	%00000000
   4996  fff4
   4997  fff4					      endif
   4998  fff4
   4999  fff4					      endif
   5000  fff4
   5001  fff4				  -	      ifconst	ROM2k
   5002  fff4				  -	      ORG	$F7FC
   5003  fff4					      else
   5004  fff4				  -	      ifconst	bankswitch
   5005  fff4				  -	      if	bankswitch == 8
   5006  fff4				  -	      ORG	$2FF4-bscode_length
   5007  fff4				  -	      RORG	$FFF4-bscode_length
   5008  fff4				  -	      endif
   5009  fff4				  -	      if	bankswitch == 16
   5010  fff4				  -	      ORG	$4FF4-bscode_length
   5011  fff4				  -	      RORG	$FFF4-bscode_length
   5012  fff4				  -	      endif
   5013  fff4				  -	      if	bankswitch == 32
   5014  fff4				  -	      ORG	$8FF4-bscode_length
   5015  fff4				  -	      RORG	$FFF4-bscode_length
   5016  fff4				  -	      endif
   5017  fff4				  -	      if	bankswitch == 64
   5018  fff4				  -	      ORG	$10FE0-bscode_length
   5019  fff4				  -	      RORG	$1FFE0-bscode_length
   5020  fff4				  -	      endif
   5021  fff4					      else
   5022  fffc					      ORG	$FFFC
   5023  fffc					      endif
   5024  fffc					      endif
   5025  fffc				  -	      ifconst	bankswitch
   5026  fffc				  -	      if	bankswitch == 8
   5027  fffc				  -	      ORG	$2FFC
   5028  fffc				  -	      RORG	$FFFC
   5029  fffc				  -	      endif
   5030  fffc				  -	      if	bankswitch == 16
   5031  fffc				  -	      ORG	$4FFC
   5032  fffc				  -	      RORG	$FFFC
   5033  fffc				  -	      endif
   5034  fffc				  -	      if	bankswitch == 32
   5035  fffc				  -	      ORG	$8FFC
   5036  fffc				  -	      RORG	$FFFC
   5037  fffc				  -	      endif
   5038  fffc				  -	      if	bankswitch == 64
   5039  fffc				  -	      ORG	$10FF0
   5040  fffc				  -	      RORG	$1FFF0
   5041  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5042  fffc				  -	      ORG	$10FF8
   5043  fffc				  -	      RORG	$1FFF8
   5044  fffc				  -	      ifconst	superchip
   5045  fffc				  -	      .byte	"E","F","S","C"
   5046  fffc				  -	      else
   5047  fffc				  -	      .byte	"E","F","E","F"
   5048  fffc				  -	      endif
   5049  fffc				  -	      ORG	$10FFC
   5050  fffc				  -	      RORG	$1FFFC
   5051  fffc				  -	      endif
   5052  fffc					      else
   5053  fffc				  -	      ifconst	ROM2k
   5054  fffc				  -	      ORG	$F7FC
   5055  fffc					      else
   5056  fffc					      ORG	$FFFC
   5057  fffc					      endif
   5058  fffc					      endif
   5059  fffc		       00 f0		      .word.w	start
   5060  fffe		       00 f0		      .word.w	start
