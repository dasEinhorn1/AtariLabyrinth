------- FILE LabLevel1.bas.asm LEVEL 1 PASS 3
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 e5	    _Chase_Speed =	r
      4  10000 ????
      5  10000 ????		00 95	    _sc3       =	score + 2
      6  10000 ????
      7  10000 ????		00 94	    _sc2       =	score + 1
      8  10000 ????
      9  10000 ????		00 93	    _sc1       =	score
     10  10000 ????
     11  10000 ????		00 9f	    _M_Edge_Right =	159
     12  10000 ????
     13  10000 ????		00 02	    _M_Edge_Left =	2
     14  10000 ????
     15  10000 ????		00 58	    _M_Edge_Bottom =	88
     16  10000 ????
     17  10000 ????		00 02	    _M_Edge_Top =	2
     18  10000 ????
     19  10000 ????		00 a0	    _B_Edge_Right =	160
     20  10000 ????
     21  10000 ????		00 02	    _B_Edge_Left =	2
     22  10000 ????
     23  10000 ????		00 58	    _B_Edge_Bottom =	88
     24  10000 ????
     25  10000 ????		00 02	    _B_Edge_Top =	2
     26  10000 ????
     27  10000 ????		00 99	    _P_Edge_Right =	153
     28  10000 ????
     29  10000 ????		00 01	    _P_Edge_Left =	1
     30  10000 ????
     31  10000 ????		00 58	    _P_Edge_Bottom =	88
     32  10000 ????
     33  10000 ????		00 09	    _P_Edge_Top =	9
     34  10000 ????
     35  10000 ????		00 ed	    rand16     =	z
     36  10000 ????
     37  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     38  10000 ????
     39  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     40  10000 ????
     41  10000 ????		00 ec	    _BitOp_01  =	y
     42  10000 ????
     43  10000 ????		00 eb	    _Bit3_Mino_Moving =	x
     44  10000 ????
     45  10000 ????		00 eb	    _Bit2_Player_Moving =	x
     46  10000 ????
     47  10000 ????		00 eb	    _Bit1_Game_Over =	x
     48  10000 ????
     49  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     50  10000 ????
     51  10000 ????		00 df	    _Score_Phase_2 =	l
     52  10000 ????
     53  10000 ????		00 e0	    _Score_Phase_1 =	m
     54  10000 ????
     55  10000 ????		00 64	    _Minotaur_Awareness_Size =	100
     56  10000 ????
     57  10000 ????		00 d5	    _Frame_Counter =	b
     58  10000 ????
     59  10000 ????		00 d4	    _Master_Counter =	a
     60  10000 ????
     61  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     64  10000 ????
     65  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     66  10000 ????
     67  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     68  10000 ????
     69  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     70  10000 ????
     71  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     72  10000 ????
     73  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     74  10000 ????
     75  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     76  10000 ????
     77  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     78  10000 ????
     79  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     82  10000 ????
     83  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     84  10000 ????
     85  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     86  10000 ????
     87  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     88  10000 ????
     89  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     90  10000 ????
     91  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     92  10000 ????
     93  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     94  10000 ????
     95  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     96  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE LabLevel1.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 e5	    _Chase_Speed =	r
      4  10000 ????
      5  10000 ????		00 95	    _sc3       =	score + 2
      6  10000 ????
      7  10000 ????		00 94	    _sc2       =	score + 1
      8  10000 ????
      9  10000 ????		00 93	    _sc1       =	score
     10  10000 ????
     11  10000 ????		00 9f	    _M_Edge_Right =	159
     12  10000 ????
     13  10000 ????		00 02	    _M_Edge_Left =	2
     14  10000 ????
     15  10000 ????		00 58	    _M_Edge_Bottom =	88
     16  10000 ????
     17  10000 ????		00 02	    _M_Edge_Top =	2
     18  10000 ????
     19  10000 ????		00 a0	    _B_Edge_Right =	160
     20  10000 ????
     21  10000 ????		00 02	    _B_Edge_Left =	2
     22  10000 ????
     23  10000 ????		00 58	    _B_Edge_Bottom =	88
     24  10000 ????
     25  10000 ????		00 02	    _B_Edge_Top =	2
     26  10000 ????
     27  10000 ????		00 99	    _P_Edge_Right =	153
     28  10000 ????
     29  10000 ????		00 01	    _P_Edge_Left =	1
     30  10000 ????
     31  10000 ????		00 58	    _P_Edge_Bottom =	88
     32  10000 ????
     33  10000 ????		00 09	    _P_Edge_Top =	9
     34  10000 ????
     35  10000 ????		00 ed	    rand16     =	z
     36  10000 ????
     37  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     38  10000 ????
     39  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     40  10000 ????
     41  10000 ????		00 ec	    _BitOp_01  =	y
     42  10000 ????
     43  10000 ????		00 eb	    _Bit3_Mino_Moving =	x
     44  10000 ????
     45  10000 ????		00 eb	    _Bit2_Player_Moving =	x
     46  10000 ????
     47  10000 ????		00 eb	    _Bit1_Game_Over =	x
     48  10000 ????
     49  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     50  10000 ????
     51  10000 ????		00 df	    _Score_Phase_2 =	l
     52  10000 ????
     53  10000 ????		00 e0	    _Score_Phase_1 =	m
     54  10000 ????
     55  10000 ????		00 64	    _Minotaur_Awareness_Size =	100
     56  10000 ????
     57  10000 ????		00 d5	    _Frame_Counter =	b
     58  10000 ????
     59  10000 ????		00 d4	    _Master_Counter =	a
     60  10000 ????
     61  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     64  10000 ????
     65  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     66  10000 ????
     67  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     68  10000 ????
     69  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     70  10000 ????
     71  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     72  10000 ????
     73  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     74  10000 ????
     75  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     76  10000 ????
     77  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     78  10000 ????
     79  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     82  10000 ????
     83  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     84  10000 ????
     85  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     86  10000 ????
     87  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     88  10000 ????
     89  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     90  10000 ????
     91  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     92  10000 ????
     93  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     94  10000 ????
     95  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     96  10000 ????
------- FILE LabLevel1.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 61 f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x 
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8 
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6					      ifconst	rand16
   1369  f3b6		       26 ed		      rol	rand16
   1370  f3b8					      endif
   1371  f3b8		       90 02		      bcc	noeor
   1372  f3ba		       49 b4		      eor	#$B4
   1373  f3bc				   noeor
   1374  f3bc		       85 a2		      sta	rand
   1375  f3be					      ifconst	rand16
   1376  f3be		       45 ed		      eor	rand16
   1377  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1379  f3c1				   drawscreen
   1380  f3c1				  -	      ifconst	debugscore
   1381  f3c1				  -	      ldx	#14
   1382  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3c1				  -
   1384  f3c1				  -	      ifconst	mincycles
   1385  f3c1				  -	      lda	mincycles
   1386  f3c1				  -	      cmp	INTIM
   1387  f3c1				  -	      lda	mincycles
   1388  f3c1				  -	      bcc	nochange
   1389  f3c1				  -	      lda	INTIM
   1390  f3c1				  -	      sta	mincycles
   1391  f3c1				  -nochange
   1392  f3c1				  -	      endif
   1393  f3c1				  -
   1394  f3c1				  -			; cmp #$2B
   1395  f3c1				  -			; bcs no_cycles_left
   1396  f3c1				  -	      bmi	cycles_left
   1397  f3c1				  -	      ldx	#64
   1398  f3c1				  -	      eor	#$ff	;make negative
   1399  f3c1				  -cycles_left
   1400  f3c1				  -	      stx	scorecolor
   1401  f3c1				  -	      and	#$7f	; clear sign bit
   1402  f3c1				  -	      tax
   1403  f3c1				  -	      lda	scorebcd,x
   1404  f3c1				  -	      sta	score+2
   1405  f3c1				  -	      lda	scorebcd1,x
   1406  f3c1				  -	      sta	score+1
   1407  f3c1				  -	      jmp	done_debugscore
   1408  f3c1				  -scorebcd
   1409  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3c1				  -scorebcd1
   1414  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3c1				  -done_debugscore
   1419  f3c1					      endif
   1420  f3c1
   1421  f3c1				  -	      ifconst	debugcycles
   1422  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3c1				  -			; cmp #$2B
   1424  f3c1				  -			; BCC overscan
   1425  f3c1				  -	      bmi	overscan
   1426  f3c1				  -	      sta	COLUBK
   1427  f3c1				  -	      bcs	doneoverscan
   1428  f3c1					      endif
   1429  f3c1
   1430  f3c1				   overscan
   1431  f3c1				  -	      ifconst	interlaced
   1432  f3c1				  -	      PHP
   1433  f3c1				  -	      PLA
   1434  f3c1				  -	      EOR	#4	; flip interrupt bit
   1435  f3c1				  -	      PHA
   1436  f3c1				  -	      PLP
   1437  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1438  f3c1				  -	      TAX		; save it for later
   1439  f3c1					      endif
   1440  f3c1
   1441  f3c1				   overscanloop
   1442  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c4		       30 fb		      bmi	overscanloop
   1444  f3c6				   doneoverscan
   1445  f3c6
   1446  f3c6							;do VSYNC
   1447  f3c6
   1448  f3c6				  -	      ifconst	interlaced
   1449  f3c6				  -	      CPX	#4
   1450  f3c6				  -	      BNE	oddframevsync
   1451  f3c6					      endif
   1452  f3c6
   1453  f3c6		       a9 02		      lda	#2
   1454  f3c8		       85 02		      sta	WSYNC
   1455  f3ca		       85 00		      sta	VSYNC
   1456  f3cc		       85 02		      STA	WSYNC
   1457  f3ce		       85 02		      STA	WSYNC
   1458  f3d0		       4a		      lsr
   1459  f3d1		       85 02		      STA	WSYNC
   1460  f3d3		       85 00		      STA	VSYNC
   1461  f3d5		       85 01		      sta	VBLANK
   1462  f3d7					      ifnconst	overscan_time
   1463  f3d7		       a9 a5		      lda	#37+128
   1464  f3d9				  -	      else
   1465  f3d9				  -	      lda	#overscan_time+128
   1466  f3d9					      endif
   1467  f3d9		       8d 96 02 	      sta	TIM64T
   1468  f3dc
   1469  f3dc				  -	      ifconst	interlaced
   1470  f3dc				  -	      jmp	postsync
   1471  f3dc				  -
   1472  f3dc				  -oddframevsync
   1473  f3dc				  -	      sta	WSYNC
   1474  f3dc				  -
   1475  f3dc				  -	      LDA	($80,X)	; 11 waste
   1476  f3dc				  -	      LDA	($80,X)	; 11 waste
   1477  f3dc				  -	      LDA	($80,X)	; 11 waste
   1478  f3dc				  -
   1479  f3dc				  -	      lda	#2
   1480  f3dc				  -	      sta	VSYNC
   1481  f3dc				  -	      sta	WSYNC
   1482  f3dc				  -	      sta	WSYNC
   1483  f3dc				  -	      sta	WSYNC
   1484  f3dc				  -
   1485  f3dc				  -	      LDA	($80,X)	; 11 waste
   1486  f3dc				  -	      LDA	($80,X)	; 11 waste
   1487  f3dc				  -	      LDA	($80,X)	; 11 waste
   1488  f3dc				  -
   1489  f3dc				  -	      lda	#0
   1490  f3dc				  -	      sta	VSYNC
   1491  f3dc				  -	      sta	VBLANK
   1492  f3dc				  -	      ifnconst	overscan_time
   1493  f3dc				  -	      lda	#37+128
   1494  f3dc				  -	      else
   1495  f3dc				  -	      lda	#overscan_time+128
   1496  f3dc				  -	      endif
   1497  f3dc				  -	      sta	TIM64T
   1498  f3dc				  -
   1499  f3dc				  -postsync
   1500  f3dc					      endif
   1501  f3dc
   1502  f3dc				  -	      ifconst	legacy
   1503  f3dc				  -	      if	legacy < 100
   1504  f3dc				  -	      ldx	#4
   1505  f3dc				  -adjustloop
   1506  f3dc				  -	      lda	player0x,x
   1507  f3dc				  -	      sec
   1508  f3dc				  -	      sbc	#14	;?
   1509  f3dc				  -	      sta	player0x,x
   1510  f3dc				  -	      dex
   1511  f3dc				  -	      bpl	adjustloop
   1512  f3dc				  -	      endif
   1513  f3dc					      endif
   1514  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3dc				  -	      repeat	($fa-(<*))
   1516  f3dc				  -	      nop
   1517  f3dc				  -	      repend
   1518  f3dc					      endif
   1519  f3dc		       85 02		      sta	WSYNC
   1520  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1522  f3e2				   HorPosLoop		; 5
   1523  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e4		       38		      sec		;+2 11
   1525  f3e5				   DivideLoop
   1526  f3e5		       e9 0f		      sbc	#15
   1527  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1529  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1530  f3ed		       85 02		      sta	WSYNC
   1531  f3ef		       ca		      dex
   1532  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3f2							; 4
   1534  f3f2
   1535  f3f2		       a2 04		      ldx	#4
   1536  f3f4		       b4 9c		      ldy	temp1,X
   1537  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1538  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1539  f3fb
   1540  f3fb		       ca		      dex
   1541  f3fc		       b4 9c		      ldy	temp1,X
   1542  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1543  f401		       95 20		      sta	HMP0,X	;+14 32
   1544  f403
   1545  f403		       ca		      dex
   1546  f404		       b4 9c		      ldy	temp1,X
   1547  f406		       b9 52 f3 	      lda	repostable-256,Y
   1548  f409		       95 20		      sta	HMP0,X	;+14 46
   1549  f40b
   1550  f40b		       ca		      dex
   1551  f40c		       b4 9c		      ldy	temp1,X
   1552  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1553  f411		       95 20		      sta	HMP0,X	;+14 60
   1554  f413
   1555  f413		       ca		      dex
   1556  f414		       b4 9c		      ldy	temp1,X
   1557  f416		       b9 52 f3 	      lda	repostable-256,Y
   1558  f419		       95 20		      sta	HMP0,X	;+14 74
   1559  f41b
   1560  f41b		       85 02		      sta	WSYNC
   1561  f41d
   1562  f41d		       85 2a		      sta	HMOVE	;+3 3
   1563  f41f
   1564  f41f
   1565  f41f				  -	      ifconst	legacy
   1566  f41f				  -	      if	legacy < 100
   1567  f41f				  -	      ldx	#4
   1568  f41f				  -adjustloop2
   1569  f41f				  -	      lda	player0x,x
   1570  f41f				  -	      clc
   1571  f41f				  -	      adc	#14	;?
   1572  f41f				  -	      sta	player0x,x
   1573  f41f				  -	      dex
   1574  f41f				  -	      bpl	adjustloop2
   1575  f41f				  -	      endif
   1576  f41f					      endif
   1577  f41f
   1578  f41f
   1579  f41f
   1580  f41f
   1581  f41f							;set score pointers
   1582  f41f		       a7 95		      lax	score+2
   1583  f421		       20 52 f4 	      jsr	scorepointerset
   1584  f424		       84 9b		      sty	scorepointers+5
   1585  f426		       86 98		      stx	scorepointers+2
   1586  f428		       a7 94		      lax	score+1
   1587  f42a		       20 52 f4 	      jsr	scorepointerset
   1588  f42d		       84 9a		      sty	scorepointers+4
   1589  f42f		       86 97		      stx	scorepointers+1
   1590  f431		       a7 93		      lax	score
   1591  f433		       20 52 f4 	      jsr	scorepointerset
   1592  f436		       84 99		      sty	scorepointers+3
   1593  f438		       86 96		      stx	scorepointers
   1594  f43a
   1595  f43a				   vblk
   1596  f43a							; run possible vblank bB code
   1597  f43a				  -	      ifconst	vblank_bB_code
   1598  f43a				  -	      jsr	vblank_bB_code
   1599  f43a					      endif
   1600  f43a				   vblk2
   1601  f43a		       ad 84 02 	      LDA	INTIM
   1602  f43d		       30 fb		      bmi	vblk2
   1603  f43f		       4c 34 f0 	      jmp	kernel
   1604  f442
   1605  f442
   1606  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f452				   repostable
   1609  f452
   1610  f452				   scorepointerset
   1611  f452		       29 0f		      and	#$0F
   1612  f454		       0a		      asl
   1613  f455		       0a		      asl
   1614  f456		       0a		      asl
   1615  f457		       69 9c		      adc	#<scoretable
   1616  f459		       a8		      tay
   1617  f45a		       8a		      txa
   1618  f45b							; and #$F0
   1619  f45b							; lsr
   1620  f45b		       4b f0		      asr	#$F0
   1621  f45d		       69 9c		      adc	#<scoretable
   1622  f45f		       aa		      tax
   1623  f460		       60		      rts
   1624  f461				   game
   1625  f461				   .
   1626  f461							;
   1627  f461
   1628  f461				   .
   1629  f461							;
   1630  f461
   1631  f461				   .
   1632  f461							;
   1633  f461
   1634  f461				   .
   1635  f461							;
   1636  f461
   1637  f461				   .
   1638  f461							;
   1639  f461
   1640  f461				   .
   1641  f461							;
   1642  f461
   1643  f461				   .
   1644  f461							;
   1645  f461
   1646  f461				   .
   1647  f461							;
   1648  f461
   1649  f461				   .
   1650  f461							;
   1651  f461
   1652  f461				   .
   1653  f461							;
   1654  f461
   1655  f461				   .
   1656  f461							;
   1657  f461
   1658  f461				   .
   1659  f461							;
   1660  f461
   1661  f461				   .
   1662  f461							;
   1663  f461
   1664  f461				   .
   1665  f461							;
   1666  f461
   1667  f461				   .
   1668  f461							;
   1669  f461
   1670  f461				   .
   1671  f461							;
   1672  f461
   1673  f461				   .
   1674  f461							;
   1675  f461
   1676  f461				   .
   1677  f461							;
   1678  f461
   1679  f461				   .
   1680  f461							;
   1681  f461
   1682  f461				   .
   1683  f461							;
   1684  f461
   1685  f461				   .
   1686  f461							;
   1687  f461
   1688  f461				   .
   1689  f461							;
   1690  f461
   1691  f461				   .
   1692  f461							;
   1693  f461
   1694  f461				   .
   1695  f461							;
   1696  f461
   1697  f461				   .
   1698  f461							;
   1699  f461
   1700  f461				   .
   1701  f461							;
   1702  f461
   1703  f461				   .L00 		;  set smartbranching on
   1704  f461
   1705  f461				   .
   1706  f461							;
   1707  f461
   1708  f461				   .
   1709  f461							;
   1710  f461
   1711  f461				   .
   1712  f461							;
   1713  f461
   1714  f461				   .
   1715  f461							;
   1716  f461
   1717  f461				   .
   1718  f461							;
   1719  f461
   1720  f461				   .
   1721  f461							;
   1722  f461
   1723  f461				   .
   1724  f461							;
   1725  f461
   1726  f461				   .
   1727  f461							;
   1728  f461
   1729  f461				   .
   1730  f461							;
   1731  f461
   1732  f461				   .
   1733  f461							;
   1734  f461
   1735  f461				   .
   1736  f461							;
   1737  f461
   1738  f461				   .
   1739  f461							;
   1740  f461
   1741  f461				   .
   1742  f461							;
   1743  f461
   1744  f461				   .
   1745  f461							;
   1746  f461
   1747  f461				   .
   1748  f461							;
   1749  f461
   1750  f461				   .
   1751  f461							;
   1752  f461
   1753  f461				   .
   1754  f461							;
   1755  f461
   1756  f461				   .
   1757  f461							;
   1758  f461
   1759  f461				   .
   1760  f461							;
   1761  f461
   1762  f461				   .
   1763  f461							;
   1764  f461
   1765  f461				   .
   1766  f461							;
   1767  f461
   1768  f461				   .
   1769  f461							;
   1770  f461
   1771  f461				   .
   1772  f461							;
   1773  f461
   1774  f461				   .
   1775  f461							;
   1776  f461
   1777  f461				   .
   1778  f461							;
   1779  f461
   1780  f461				   .
   1781  f461							;
   1782  f461
   1783  f461				   .
   1784  f461							;
   1785  f461
   1786  f461				   .L01 		;  dim _BitOp_P0_M0_Dir  =  g
   1787  f461
   1788  f461				   .L02 		;  dim _Bit0_P0_Dir_Up  =  g
   1789  f461
   1790  f461				   .L03 		;  dim _Bit1_P0_Dir_Down  =  g
   1791  f461
   1792  f461				   .L04 		;  dim _Bit2_P0_Dir_Left  =  g
   1793  f461
   1794  f461				   .L05 		;  dim _Bit3_P0_Dir_Right  =  g
   1795  f461
   1796  f461				   .L06 		;  dim _Bit4_M0_Dir_Up  =  g
   1797  f461
   1798  f461				   .L07 		;  dim _Bit5_M0_Dir_Down  =  g
   1799  f461
   1800  f461				   .L08 		;  dim _Bit6_M0_Dir_Left  =  g
   1801  f461
   1802  f461				   .L09 		;  dim _Bit7_M0_Dir_Right  =  g
   1803  f461
   1804  f461				   .
   1805  f461							;
   1806  f461
   1807  f461				   .
   1808  f461							;
   1809  f461
   1810  f461				   .
   1811  f461							;
   1812  f461
   1813  f461				   .L010		;  dim _BitOp_P1_M1_Dir  =  k
   1814  f461
   1815  f461				   .L011		;  dim _Bit0_P1_Dir_Up  =  k
   1816  f461
   1817  f461				   .L012		;  dim _Bit1_P1_Dir_Down  =  k
   1818  f461
   1819  f461				   .L013		;  dim _Bit2_P1_Dir_Left  =  k
   1820  f461
   1821  f461				   .L014		;  dim _Bit3_P1_Dir_Right  =  k
   1822  f461
   1823  f461				   .L015		;  dim _Bit4_P1_Col_Up  =  k
   1824  f461
   1825  f461				   .L016		;  dim _Bit5_P1_Col_Down  =  k
   1826  f461
   1827  f461				   .L017		;  dim _Bit6_P1_Col_Left  =  k
   1828  f461
   1829  f461				   .L018		;  dim _Bit7_P1_Col_Right  =  k
   1830  f461
   1831  f461				   .
   1832  f461							;
   1833  f461
   1834  f461				   .L019		;  dim _Master_Counter  =  a
   1835  f461
   1836  f461				   .L020		;  dim _Frame_Counter	=  b
   1837  f461
   1838  f461				   .
   1839  f461							;
   1840  f461
   1841  f461				   .
   1842  f461							;
   1843  f461
   1844  f461				   .
   1845  f461							;
   1846  f461
   1847  f461				   .
   1848  f461							;
   1849  f461
   1850  f461				   .L021		;  const _Minotaur_Awareness_Size  =  100
   1851  f461
   1852  f461				   .
   1853  f461							;
   1854  f461
   1855  f461				   .
   1856  f461							;
   1857  f461
   1858  f461				   .
   1859  f461							;
   1860  f461
   1861  f461				   .
   1862  f461							;
   1863  f461
   1864  f461				   .L022		;  l  =  $15
   1865  f461
   1866  f461		       a9 15		      LDA	#$15
   1867  f463		       85 df		      STA	l
   1868  f465				   .L023		;  m  =  $30
   1869  f465
   1870  f465		       a9 30		      LDA	#$30
   1871  f467		       85 e0		      STA	m
   1872  f469				   .L024		;  dim _Score_Phase_1	=  m
   1873  f469
   1874  f469				   .L025		;  dim _Score_Phase_2	=  l
   1875  f469
   1876  f469				   .L026		;  dim _Bit0_Carrying_Gem  =  x
   1877  f469
   1878  f469				   .L027		;  dim _Bit1_Game_Over  =  x
   1879  f469
   1880  f469				   .L028		;  dim _Bit2_Player_Moving  =	x
   1881  f469
   1882  f469				   .L029		;  dim _Bit3_Mino_Moving  =  x
   1883  f469
   1884  f469				   .
   1885  f469							;
   1886  f469
   1887  f469				   .
   1888  f469							;
   1889  f469
   1890  f469				   .
   1891  f469							;
   1892  f469
   1893  f469				   .
   1894  f469							;
   1895  f469
   1896  f469				   .L030		;  dim _BitOp_01  =  y
   1897  f469
   1898  f469				   .L031		;  dim _Bit0_Reset_Restrainer	=  y
   1899  f469
   1900  f469				   .L032		;  dim _Bit1_Toggle_Screen  =	y
   1901  f469
   1902  f469				   .
   1903  f469							;
   1904  f469
   1905  f469				   .
   1906  f469							;
   1907  f469
   1908  f469				   .
   1909  f469							;
   1910  f469
   1911  f469				   .
   1912  f469							;
   1913  f469
   1914  f469				   .L033		;  dim rand16	=  z
   1915  f469
   1916  f469				   .
   1917  f469							;
   1918  f469
   1919  f469				   .
   1920  f469							;
   1921  f469
   1922  f469				   .
   1923  f469							;
   1924  f469
   1925  f469				   .
   1926  f469							;
   1927  f469
   1928  f469				   .
   1929  f469							;
   1930  f469
   1931  f469				   .
   1932  f469							;
   1933  f469
   1934  f469				   .
   1935  f469							;
   1936  f469
   1937  f469				   .L034		;  const _P_Edge_Top  =  9
   1938  f469
   1939  f469				   .L035		;  const _P_Edge_Bottom  =  88
   1940  f469
   1941  f469				   .L036		;  const _P_Edge_Left	=  1
   1942  f469
   1943  f469				   .L037		;  const _P_Edge_Right  =  153
   1944  f469
   1945  f469				   .
   1946  f469							;
   1947  f469
   1948  f469				   .
   1949  f469							;
   1950  f469
   1951  f469				   .
   1952  f469							;
   1953  f469
   1954  f469				   .
   1955  f469							;
   1956  f469
   1957  f469				   .
   1958  f469							;
   1959  f469
   1960  f469				   .
   1961  f469							;
   1962  f469
   1963  f469				   .
   1964  f469							;
   1965  f469
   1966  f469				   .
   1967  f469							;
   1968  f469
   1969  f469				   .L038		;  const _B_Edge_Top  =  2
   1970  f469
   1971  f469				   .L039		;  const _B_Edge_Bottom  =  88
   1972  f469
   1973  f469				   .L040		;  const _B_Edge_Left	=  2
   1974  f469
   1975  f469				   .L041		;  const _B_Edge_Right  =  160
   1976  f469
   1977  f469				   .
   1978  f469							;
   1979  f469
   1980  f469				   .
   1981  f469							;
   1982  f469
   1983  f469				   .
   1984  f469							;
   1985  f469
   1986  f469				   .
   1987  f469							;
   1988  f469
   1989  f469				   .
   1990  f469							;
   1991  f469
   1992  f469				   .
   1993  f469							;
   1994  f469
   1995  f469				   .
   1996  f469							;
   1997  f469
   1998  f469				   .
   1999  f469							;
   2000  f469
   2001  f469				   .
   2002  f469							;
   2003  f469
   2004  f469				   .L042		;  const _M_Edge_Top  =  2
   2005  f469
   2006  f469				   .L043		;  const _M_Edge_Bottom  =  88
   2007  f469
   2008  f469				   .L044		;  const _M_Edge_Left	=  2
   2009  f469
   2010  f469				   .L045		;  const _M_Edge_Right  =  159
   2011  f469
   2012  f469				   .
   2013  f469							;
   2014  f469
   2015  f469				   .
   2016  f469							;
   2017  f469
   2018  f469				   .
   2019  f469							;
   2020  f469
   2021  f469				   .
   2022  f469							;
   2023  f469
   2024  f469				   .
   2025  f469							;
   2026  f469
   2027  f469				   .
   2028  f469							;
   2029  f469
   2030  f469				   .
   2031  f469							;
   2032  f469
   2033  f469				   .__Start_Restart
   2034  f469							; __Start_Restart
   2035  f469
   2036  f469				   .
   2037  f469							;
   2038  f469
   2039  f469				   .__Title_Screen
   2040  f469							; __Title_Screen
   2041  f469
   2042  f469				   .L046		;  playfield:
   2043  f469
   2044  f469				  -	      ifconst	pfres
   2045  f469				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2046  f469					      else
   2047  f469		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2048  f46b					      endif
   2049  f46b		       4c 9a f4 	      jmp	pflabel0
   2050  f46e				   PF_data0
   2051  f46e		       00 00		      .byte.b	%00000000, %00000000
   2052  f470					      if	(pfwidth>2)
   2053  f470		       00 00		      .byte.b	%00000000, %00000000
   2054  f472					      endif
   2055  f472		       9d a9		      .byte.b	%10011101, %10101001
   2056  f474					      if	(pfwidth>2)
   2057  f474		       96 ae		      .byte.b	%10010110, %10101110
   2058  f476					      endif
   2059  f476		       95 aa		      .byte.b	%10010101, %10101010
   2060  f478					      if	(pfwidth>2)
   2061  f478		       55 a4		      .byte.b	%01010101, %10100100
   2062  f47a					      endif
   2063  f47a		       9d 91		      .byte.b	%10011101, %10010001
   2064  f47c					      if	(pfwidth>2)
   2065  f47c		       95 e4		      .byte.b	%10010101, %11100100
   2066  f47e					      endif
   2067  f47e		       95 92		      .byte.b	%10010101, %10010010
   2068  f480					      if	(pfwidth>2)
   2069  f480		       55 a4		      .byte.b	%01010101, %10100100
   2070  f482					      endif
   2071  f482		       d5 91		      .byte.b	%11010101, %10010001
   2072  f484					      if	(pfwidth>2)
   2073  f484		       55 a4		      .byte.b	%01010101, %10100100
   2074  f486					      endif
   2075  f486		       00 00		      .byte.b	%00000000, %00000000
   2076  f488					      if	(pfwidth>2)
   2077  f488		       00 00		      .byte.b	%00000000, %00000000
   2078  f48a					      endif
   2079  f48a		       1f ff		      .byte.b	%00011111, %11111111
   2080  f48c					      if	(pfwidth>2)
   2081  f48c		       ff 1f		      .byte.b	%11111111, %00011111
   2082  f48e					      endif
   2083  f48e		       0a 55		      .byte.b	%00001010, %01010101
   2084  f490					      if	(pfwidth>2)
   2085  f490		       55 0a		      .byte.b	%01010101, %00001010
   2086  f492					      endif
   2087  f492		       1f 7f		      .byte.b	%00011111, %01111111
   2088  f494					      if	(pfwidth>2)
   2089  f494		       7f 1f		      .byte.b	%01111111, %00011111
   2090  f496					      endif
   2091  f496		       00 00		      .byte.b	%00000000, %00000000
   2092  f498					      if	(pfwidth>2)
   2093  f498		       00 00		      .byte.b	%00000000, %00000000
   2094  f49a					      endif
   2095  f49a				   pflabel0
   2096  f49a		       bd 6e f4 	      lda	PF_data0,x
   2097  f49d		       95 a4		      sta	playfield,x
   2098  f49f		       ca		      dex
   2099  f4a0		       10 f8		      bpl	pflabel0
   2100  f4a2				   .L047		;  player0:
   2101  f4a2
   2102  f4a2		       a2 ea		      LDX	#<playerL047_0
   2103  f4a4		       86 8a		      STX	player0pointerlo
   2104  f4a6		       a9 fb		      LDA	#>playerL047_0
   2105  f4a8		       85 8b		      STA	player0pointerhi
   2106  f4aa		       a9 07		      LDA	#7
   2107  f4ac		       85 8e		      STA	player0height
   2108  f4ae				   .L048		;  player1:
   2109  f4ae
   2110  f4ae		       a2 f2		      LDX	#<playerL048_1
   2111  f4b0		       86 8c		      STX	player1pointerlo
   2112  f4b2		       a9 fb		      LDA	#>playerL048_1
   2113  f4b4		       85 8d		      STA	player1pointerhi
   2114  f4b6		       a9 07		      LDA	#7
   2115  f4b8		       85 8f		      STA	player1height
   2116  f4ba				   .
   2117  f4ba							;
   2118  f4ba
   2119  f4ba				   .__Start_Screen_Loop
   2120  f4ba							; __Start_Screen_Loop
   2121  f4ba
   2122  f4ba				   .L049		;  if joy0up then goto __Skip_Start_Screen
   2123  f4ba
   2124  f4ba		       a9 10		      lda	#$10
   2125  f4bc		       2c 80 02 	      bit	SWCHA
   2126  f4bf		       d0 03		      BNE	.skipL049
   2127  f4c1				   .condpart0
   2128  f4c1		       4c 0d f5 	      jmp	.__Skip_Start_Screen
   2129  f4c4
   2130  f4c4				   .skipL049
   2131  f4c4				   .L050		;  if joy0down then goto __Skip_Start_Screen
   2132  f4c4
   2133  f4c4		       a9 20		      lda	#$20
   2134  f4c6		       2c 80 02 	      bit	SWCHA
   2135  f4c9		       d0 03		      BNE	.skipL050
   2136  f4cb				   .condpart1
   2137  f4cb		       4c 0d f5 	      jmp	.__Skip_Start_Screen
   2138  f4ce
   2139  f4ce				   .skipL050
   2140  f4ce				   .L051		;  if joy0right then goto __Skip_Start_Screen
   2141  f4ce
   2142  f4ce		       2c 80 02 	      bit	SWCHA
   2143  f4d1		       30 03		      BMI	.skipL051
   2144  f4d3				   .condpart2
   2145  f4d3		       4c 0d f5 	      jmp	.__Skip_Start_Screen
   2146  f4d6
   2147  f4d6				   .skipL051
   2148  f4d6				   .L052		;  if joy0left then goto __Skip_Start_Screen
   2149  f4d6
   2150  f4d6		       2c 80 02 	      bit	SWCHA
   2151  f4d9		       70 03		      BVS	.skipL052
   2152  f4db				   .condpart3
   2153  f4db		       4c 0d f5 	      jmp	.__Skip_Start_Screen
   2154  f4de
   2155  f4de				   .skipL052
   2156  f4de				   .L053		;  if joy0fire then goto __Skip_Start_Screen
   2157  f4de
   2158  f4de		       24 0c		      bit	INPT4
   2159  f4e0		       30 03		      BMI	.skipL053
   2160  f4e2				   .condpart4
   2161  f4e2		       4c 0d f5 	      jmp	.__Skip_Start_Screen
   2162  f4e5
   2163  f4e5				   .skipL053
   2164  f4e5				   .L054		;  player1x  =  77
   2165  f4e5
   2166  f4e5		       a9 4d		      LDA	#77
   2167  f4e7		       85 81		      STA	player1x
   2168  f4e9				   .L055		;  player1y  =  80
   2169  f4e9
   2170  f4e9		       a9 50		      LDA	#80
   2171  f4eb		       85 86		      STA	player1y
   2172  f4ed				   .L056		;  player0x  =  77
   2173  f4ed
   2174  f4ed		       a9 4d		      LDA	#77
   2175  f4ef		       85 80		      STA	player0x
   2176  f4f1				   .L057		;  player0y  =  72
   2177  f4f1
   2178  f4f1		       a9 48		      LDA	#72
   2179  f4f3		       85 85		      STA	player0y
   2180  f4f5				   .L058		;  COLUP0  =  $36
   2181  f4f5
   2182  f4f5		       a9 36		      LDA	#$36
   2183  f4f7		       85 06		      STA	COLUP0
   2184  f4f9				   .L059		;  COLUP1  =  $14
   2185  f4f9
   2186  f4f9		       a9 14		      LDA	#$14
   2187  f4fb		       85 07		      STA	COLUP1
   2188  f4fd				   .L060		;  COLUPF  =  $14
   2189  f4fd
   2190  f4fd		       a9 14		      LDA	#$14
   2191  f4ff		       85 08		      STA	COLUPF
   2192  f501				   .L061		;  drawscreen
   2193  f501
   2194  f501		       20 c1 f3 	      jsr	drawscreen
   2195  f504				   .L062		;  goto __Start_Screen_Loop
   2196  f504
   2197  f504		       4c ba f4 	      jmp	.__Start_Screen_Loop
   2198  f507
   2199  f507				   .
   2200  f507							;
   2201  f507
   2202  f507				   .L063		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   2203  f507
   2204  f507		       a9 00		      LDA	#0
   2205  f509		       85 d4		      STA	_Master_Counter
   2206  f50b		       85 d5		      STA	_Frame_Counter
   2207  f50d				   .__Skip_Start_Screen
   2208  f50d							; __Skip_Start_Screen
   2209  f50d
   2210  f50d				   .
   2211  f50d							;
   2212  f50d
   2213  f50d				   .
   2214  f50d							;
   2215  f50d
   2216  f50d				   .
   2217  f50d							;
   2218  f50d
   2219  f50d				   .
   2220  f50d							;
   2221  f50d
   2222  f50d				   .
   2223  f50d							;
   2224  f50d
   2225  f50d				   .L064		;  AUDV0  =  0  :  AUDV1  =  0
   2226  f50d
   2227  f50d		       a9 00		      LDA	#0
   2228  f50f		       85 19		      STA	AUDV0
   2229  f511		       85 1a		      STA	AUDV1
   2230  f513				   .
   2231  f513							;
   2232  f513
   2233  f513				   .
   2234  f513							;
   2235  f513
   2236  f513				   .
   2237  f513							;
   2238  f513
   2239  f513				   .
   2240  f513							;
   2241  f513
   2242  f513				   .
   2243  f513							;
   2244  f513
   2245  f513				   .
   2246  f513							;
   2247  f513
   2248  f513				   .
   2249  f513							;
   2250  f513
   2251  f513				   .
   2252  f513							;
   2253  f513
   2254  f513				   .
   2255  f513							;
   2256  f513
   2257  f513				   .L065		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2258  f513
   2259  f513		       a9 00		      LDA	#0
   2260  f515		       85 d4		      STA	a
   2261  f517		       85 d5		      STA	b
   2262  f519		       85 d6		      STA	c
   2263  f51b		       85 d7		      STA	d
   2264  f51d		       85 d8		      STA	e
   2265  f51f		       85 d9		      STA	f
   2266  f521		       85 da		      STA	g
   2267  f523		       85 db		      STA	h
   2268  f525		       85 dc		      STA	i
   2269  f527				   .L066		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2270  f527
   2271  f527		       a9 00		      LDA	#0
   2272  f529		       85 dd		      STA	j
   2273  f52b		       85 de		      STA	k
   2274  f52d		       85 df		      STA	l
   2275  f52f		       85 e0		      STA	m
   2276  f531		       85 e1		      STA	n
   2277  f533		       85 e2		      STA	o
   2278  f535		       85 e3		      STA	p
   2279  f537		       85 e4		      STA	q
   2280  f539		       85 e5		      STA	r
   2281  f53b				   .L067		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2282  f53b
   2283  f53b		       a9 00		      LDA	#0
   2284  f53d		       85 e6		      STA	s
   2285  f53f		       85 e7		      STA	t
   2286  f541		       85 e8		      STA	u
   2287  f543		       85 e9		      STA	v
   2288  f545		       85 ea		      STA	w
   2289  f547		       85 eb		      STA	x
   2290  f549				   .
   2291  f549							;
   2292  f549
   2293  f549				   .
   2294  f549							;
   2295  f549
   2296  f549				   .
   2297  f549							;
   2298  f549
   2299  f549				   .
   2300  f549							;
   2301  f549
   2302  f549				   .
   2303  f549							;
   2304  f549
   2305  f549				   .
   2306  f549							;
   2307  f549
   2308  f549				   .
   2309  f549							;
   2310  f549
   2311  f549				   .
   2312  f549							;
   2313  f549
   2314  f549				   .L068		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2315  f549
   2316  f549		       a5 ec		      LDA	_BitOp_01
   2317  f54b		       29 10		      AND	#%00010000
   2318  f54d		       85 ec		      STA	_BitOp_01
   2319  f54f				   .
   2320  f54f							;
   2321  f54f
   2322  f54f				   .
   2323  f54f							;
   2324  f54f
   2325  f54f				   .
   2326  f54f							;
   2327  f54f
   2328  f54f				   .
   2329  f54f							;
   2330  f54f
   2331  f54f				   .
   2332  f54f							;
   2333  f54f
   2334  f54f				   .
   2335  f54f							;
   2336  f54f
   2337  f54f				   .L069		;  player0x  =  77  :	player0y  =  60
   2338  f54f
   2339  f54f		       a9 4d		      LDA	#77
   2340  f551		       85 80		      STA	player0x
   2341  f553		       a9 3c		      LDA	#60
   2342  f555		       85 85		      STA	player0y
   2343  f557				   .L070		;  player1x  =  21  :	player1y  =  16
   2344  f557
   2345  f557		       a9 15		      LDA	#21
   2346  f559		       85 81		      STA	player1x
   2347  f55b		       a9 10		      LDA	#16
   2348  f55d		       85 86		      STA	player1y
   2349  f55f				   .
   2350  f55f							;
   2351  f55f
   2352  f55f				   .
   2353  f55f							;
   2354  f55f
   2355  f55f				   .
   2356  f55f							;
   2357  f55f
   2358  f55f				   .
   2359  f55f							;
   2360  f55f
   2361  f55f				   .
   2362  f55f							;
   2363  f55f
   2364  f55f				   .L071		;  missile0x  =  200  :  missile0y  =	200
   2365  f55f
   2366  f55f		       a9 c8		      LDA	#200
   2367  f561		       85 82		      STA	missile0x
   2368  f563		       85 91		      STA	missile0y
   2369  f565				   .
   2370  f565							;
   2371  f565
   2372  f565				   .
   2373  f565							;
   2374  f565
   2375  f565				   .
   2376  f565							;
   2377  f565
   2378  f565				   .
   2379  f565							;
   2380  f565
   2381  f565				   .L072		;  missile0x  =  80  :  missile0y  =  79
   2382  f565
   2383  f565		       a9 50		      LDA	#80
   2384  f567		       85 82		      STA	missile0x
   2385  f569		       a9 4f		      LDA	#79
   2386  f56b		       85 91		      STA	missile0y
   2387  f56d				   .
   2388  f56d							;
   2389  f56d
   2390  f56d				   .
   2391  f56d							;
   2392  f56d
   2393  f56d				   .
   2394  f56d							;
   2395  f56d
   2396  f56d				   .
   2397  f56d							;
   2398  f56d
   2399  f56d				   .
   2400  f56d							;
   2401  f56d
   2402  f56d				   .L073		;  NUSIZ0  =  $10  :  missile0height  =  1
   2403  f56d
   2404  f56d		       a9 10		      LDA	#$10
   2405  f56f		       85 04		      STA	NUSIZ0
   2406  f571		       a9 01		      LDA	#1
   2407  f573		       85 90		      STA	missile0height
   2408  f575				   .L074		;  NUSIZ1  =  $30  :  missile0height  =  4
   2409  f575
   2410  f575		       a9 30		      LDA	#$30
   2411  f577		       85 05		      STA	NUSIZ1
   2412  f579		       a9 04		      LDA	#4
   2413  f57b		       85 90		      STA	missile0height
   2414  f57d				   .
   2415  f57d							;
   2416  f57d
   2417  f57d				   .
   2418  f57d							;
   2419  f57d
   2420  f57d				   .
   2421  f57d							;
   2422  f57d
   2423  f57d				   .
   2424  f57d							;
   2425  f57d
   2426  f57d				   .
   2427  f57d							;
   2428  f57d
   2429  f57d				   .
   2430  f57d							;
   2431  f57d
   2432  f57d				   .L075		;  COLUPF  =  $14
   2433  f57d
   2434  f57d		       a9 14		      LDA	#$14
   2435  f57f		       85 08		      STA	COLUPF
   2436  f581				   .
   2437  f581							;
   2438  f581
   2439  f581				   .
   2440  f581							;
   2441  f581
   2442  f581				   .
   2443  f581							;
   2444  f581
   2445  f581				   .
   2446  f581							;
   2447  f581
   2448  f581				   .
   2449  f581							;
   2450  f581
   2451  f581				   .
   2452  f581							;
   2453  f581
   2454  f581				   .L076		;  COLUBK  =  0
   2455  f581
   2456  f581		       a9 00		      LDA	#0
   2457  f583		       85 09		      STA	COLUBK
   2458  f585				   .
   2459  f585							;
   2460  f585
   2461  f585				   .
   2462  f585							;
   2463  f585
   2464  f585				   .
   2465  f585							;
   2466  f585
   2467  f585				   .
   2468  f585							;
   2469  f585
   2470  f585				   .
   2471  f585							;
   2472  f585
   2473  f585				   .
   2474  f585							;
   2475  f585
   2476  f585				   .L077		;  _Bit3_P0_Dir_Right{3}  =  1
   2477  f585
   2478  f585		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2479  f587		       09 08		      ORA	#8
   2480  f589		       85 da		      STA	_Bit3_P0_Dir_Right
   2481  f58b				   .
   2482  f58b							;
   2483  f58b
   2484  f58b				   .
   2485  f58b							;
   2486  f58b
   2487  f58b				   .
   2488  f58b							;
   2489  f58b
   2490  f58b				   .
   2491  f58b							;
   2492  f58b
   2493  f58b				   .
   2494  f58b							;
   2495  f58b
   2496  f58b				   .
   2497  f58b							;
   2498  f58b
   2499  f58b				   .
   2500  f58b							;
   2501  f58b
   2502  f58b				   .
   2503  f58b							;
   2504  f58b
   2505  f58b				   .
   2506  f58b							;
   2507  f58b
   2508  f58b				   .L078		;  _Bit0_Reset_Restrainer{0}  =  1
   2509  f58b
   2510  f58b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2511  f58d		       09 01		      ORA	#1
   2512  f58f		       85 ec		      STA	_Bit0_Reset_Restrainer
   2513  f591				   .
   2514  f591							;
   2515  f591
   2516  f591				   .L079		;  playfield:
   2517  f591
   2518  f591				  -	      ifconst	pfres
   2519  f591				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2520  f591					      else
   2521  f591		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2522  f593					      endif
   2523  f593		       4c c2 f5 	      jmp	pflabel1
   2524  f596				   PF_data1
   2525  f596		       ff ff		      .byte.b	%11111111, %11111111
   2526  f598					      if	(pfwidth>2)
   2527  f598		       ff ff		      .byte.b	%11111111, %11111111
   2528  f59a					      endif
   2529  f59a		       80 00		      .byte.b	%10000000, %00000000
   2530  f59c					      if	(pfwidth>2)
   2531  f59c		       00 80		      .byte.b	%00000000, %10000000
   2532  f59e					      endif
   2533  f59e		       93 61		      .byte.b	%10010011, %01100001
   2534  f5a0					      if	(pfwidth>2)
   2535  f5a0		       61 93		      .byte.b	%01100001, %10010011
   2536  f5a2					      endif
   2537  f5a2		       90 60		      .byte.b	%10010000, %01100000
   2538  f5a4					      if	(pfwidth>2)
   2539  f5a4		       60 90		      .byte.b	%01100000, %10010000
   2540  f5a6					      endif
   2541  f5a6		       80 00		      .byte.b	%10000000, %00000000
   2542  f5a8					      if	(pfwidth>2)
   2543  f5a8		       00 80		      .byte.b	%00000000, %10000000
   2544  f5aa					      endif
   2545  f5aa		       99 19		      .byte.b	%10011001, %00011001
   2546  f5ac					      if	(pfwidth>2)
   2547  f5ac		       19 99		      .byte.b	%00011001, %10011001
   2548  f5ae					      endif
   2549  f5ae		       80 00		      .byte.b	%10000000, %00000000
   2550  f5b0					      if	(pfwidth>2)
   2551  f5b0		       00 80		      .byte.b	%00000000, %10000000
   2552  f5b2					      endif
   2553  f5b2		       90 60		      .byte.b	%10010000, %01100000
   2554  f5b4					      if	(pfwidth>2)
   2555  f5b4		       60 90		      .byte.b	%01100000, %10010000
   2556  f5b6					      endif
   2557  f5b6		       93 61		      .byte.b	%10010011, %01100001
   2558  f5b8					      if	(pfwidth>2)
   2559  f5b8		       61 93		      .byte.b	%01100001, %10010011
   2560  f5ba					      endif
   2561  f5ba		       80 00		      .byte.b	%10000000, %00000000
   2562  f5bc					      if	(pfwidth>2)
   2563  f5bc		       00 80		      .byte.b	%00000000, %10000000
   2564  f5be					      endif
   2565  f5be		       ff ff		      .byte.b	%11111111, %11111111
   2566  f5c0					      if	(pfwidth>2)
   2567  f5c0		       ff ff		      .byte.b	%11111111, %11111111
   2568  f5c2					      endif
   2569  f5c2				   pflabel1
   2570  f5c2		       bd 96 f5 	      lda	PF_data1,x
   2571  f5c5		       95 a4		      sta	playfield,x
   2572  f5c7		       ca		      dex
   2573  f5c8		       10 f8		      bpl	pflabel1
   2574  f5ca				   .
   2575  f5ca							;
   2576  f5ca
   2577  f5ca				   .
   2578  f5ca							;
   2579  f5ca
   2580  f5ca				   .
   2581  f5ca							;
   2582  f5ca
   2583  f5ca				   .
   2584  f5ca							;
   2585  f5ca
   2586  f5ca				   .
   2587  f5ca							;
   2588  f5ca
   2589  f5ca				   .
   2590  f5ca							;
   2591  f5ca
   2592  f5ca				   .
   2593  f5ca							;
   2594  f5ca
   2595  f5ca				   .
   2596  f5ca							;
   2597  f5ca
   2598  f5ca				   .
   2599  f5ca							;
   2600  f5ca
   2601  f5ca				   .
   2602  f5ca							;
   2603  f5ca
   2604  f5ca				   .L080		;  score  =  0
   2605  f5ca
   2606  f5ca		       a9 00		      LDA	#$00
   2607  f5cc		       85 95		      STA	score+2
   2608  f5ce		       a9 00		      LDA	#$00
   2609  f5d0		       85 94		      STA	score+1
   2610  f5d2		       a9 00		      LDA	#$00
   2611  f5d4		       85 93		      STA	score
   2612  f5d6				   .
   2613  f5d6							;
   2614  f5d6
   2615  f5d6				   .L081		;  dim _sc1  =  score
   2616  f5d6
   2617  f5d6				   .L082		;  dim _sc2  =  score + 1
   2618  f5d6
   2619  f5d6				   .L083		;  dim _sc3  =  score + 2
   2620  f5d6
   2621  f5d6				   .
   2622  f5d6							;
   2623  f5d6
   2624  f5d6				   .L084		;  r  =  $3
   2625  f5d6
   2626  f5d6		       a9 03		      LDA	#$3
   2627  f5d8		       85 e5		      STA	r
   2628  f5da				   .L085		;  dim _Chase_Speed  =  r
   2629  f5da
   2630  f5da				   .
   2631  f5da							;
   2632  f5da
   2633  f5da				   .
   2634  f5da							;
   2635  f5da
   2636  f5da				   .
   2637  f5da							;
   2638  f5da
   2639  f5da				   .
   2640  f5da							;
   2641  f5da
   2642  f5da				   .
   2643  f5da							;
   2644  f5da
   2645  f5da				   .
   2646  f5da							;
   2647  f5da
   2648  f5da				   .
   2649  f5da							;
   2650  f5da
   2651  f5da				   .__Main_Loop
   2652  f5da							; __Main_Loop
   2653  f5da
   2654  f5da				   .
   2655  f5da							;
   2656  f5da
   2657  f5da				   .L086		;  if _Bit1_Game_Over{1} then if joy0fire goto __Start_Restart
   2658  f5da
   2659  f5da		       a5 eb		      LDA	_Bit1_Game_Over
   2660  f5dc		       29 02		      AND	#2
   2661  f5de		       f0 07		      BEQ	.skipL086
   2662  f5e0				   .condpart5
   2663  f5e0		       24 0c		      bit	INPT4
   2664  f5e2				  -	      if	((* - .__Start_Restart) < 127) && ((* - .__Start_Restart) > -128)
   2665  f5e2				  -	      bpl	.__Start_Restart
   2666  f5e2					      else
   2667  f5e2		       30 03		      bmi	.0skip__Start_Restart
   2668  f5e4		       4c 69 f4 	      jmp	.__Start_Restart
   2669  f5e7				   .0skip__Start_Restart
   2670  f5e7					      endif
   2671  f5e7				   .skipL086
   2672  f5e7				   .
   2673  f5e7							;
   2674  f5e7
   2675  f5e7				   .
   2676  f5e7							;
   2677  f5e7
   2678  f5e7				   .
   2679  f5e7							;
   2680  f5e7
   2681  f5e7				   .
   2682  f5e7							;
   2683  f5e7
   2684  f5e7				   .
   2685  f5e7							;
   2686  f5e7
   2687  f5e7				   .
   2688  f5e7							;
   2689  f5e7
   2690  f5e7				   .
   2691  f5e7							;
   2692  f5e7
   2693  f5e7				   .
   2694  f5e7							;
   2695  f5e7
   2696  f5e7				   .L087		;  _Master_Counter  =	_Master_Counter  +  1
   2697  f5e7
   2698  f5e7		       e6 d4		      INC	_Master_Counter
   2699  f5e9				   .
   2700  f5e9							;
   2701  f5e9
   2702  f5e9				   .
   2703  f5e9							;
   2704  f5e9
   2705  f5e9				   .
   2706  f5e9							;
   2707  f5e9
   2708  f5e9				   .
   2709  f5e9							;
   2710  f5e9
   2711  f5e9				   .L088		;  if _Master_Counter	<  7 then goto __Skip_Counters
   2712  f5e9
   2713  f5e9		       a5 d4		      LDA	_Master_Counter
   2714  f5eb		       c9 07		      CMP	#7
   2715  f5ed		       b0 03		      BCS	.skipL088
   2716  f5ef				   .condpart6
   2717  f5ef		       4c 02 f6 	      jmp	.__Skip_Counters
   2718  f5f2
   2719  f5f2				   .skipL088
   2720  f5f2				   .
   2721  f5f2							;
   2722  f5f2
   2723  f5f2				   .
   2724  f5f2							;
   2725  f5f2
   2726  f5f2				   .
   2727  f5f2							;
   2728  f5f2
   2729  f5f2				   .
   2730  f5f2							;
   2731  f5f2
   2732  f5f2				   .L089		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2733  f5f2
   2734  f5f2		       e6 d5		      INC	_Frame_Counter
   2735  f5f4		       a9 00		      LDA	#0
   2736  f5f6		       85 d4		      STA	_Master_Counter
   2737  f5f8				   .
   2738  f5f8							;
   2739  f5f8
   2740  f5f8				   .
   2741  f5f8							;
   2742  f5f8
   2743  f5f8				   .
   2744  f5f8							;
   2745  f5f8
   2746  f5f8				   .
   2747  f5f8							;
   2748  f5f8
   2749  f5f8				   .L090		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   2750  f5f8
   2751  f5f8		       a9 03		      LDA	#3
   2752  f5fa		       c5 d5		      CMP	_Frame_Counter
   2753  f5fc		       b0 04		      BCS	.skipL090
   2754  f5fe				   .condpart7
   2755  f5fe		       a9 00		      LDA	#0
   2756  f600		       85 d5		      STA	_Frame_Counter
   2757  f602				   .skipL090
   2758  f602				   .
   2759  f602							;
   2760  f602
   2761  f602				   .__Skip_Counters
   2762  f602							; __Skip_Counters
   2763  f602
   2764  f602				   .
   2765  f602							;
   2766  f602
   2767  f602				   .
   2768  f602							;
   2769  f602
   2770  f602				   .
   2771  f602							;
   2772  f602
   2773  f602				   .
   2774  f602							;
   2775  f602
   2776  f602				   .
   2777  f602							;
   2778  f602
   2779  f602				   .
   2780  f602							;
   2781  f602
   2782  f602				   .
   2783  f602							;
   2784  f602
   2785  f602				   .
   2786  f602							;
   2787  f602
   2788  f602				   .
   2789  f602							;
   2790  f602
   2791  f602				   .L091		;  player0:
   2792  f602
   2793  f602		       a2 00		      LDX	#<playerL091_0
   2794  f604		       86 8a		      STX	player0pointerlo
   2795  f606		       a9 fc		      LDA	#>playerL091_0
   2796  f608		       85 8b		      STA	player0pointerhi
   2797  f60a		       a9 07		      LDA	#7
   2798  f60c		       85 8e		      STA	player0height
   2799  f60e				   .L092		;  if !_Bit2_Player_Moving{2} goto __Pl_Frame_Done
   2800  f60e
   2801  f60e		       a5 eb		      LDA	_Bit2_Player_Moving
   2802  f610		       29 04		      AND	#4
   2803  f612					      if	((* - .__Pl_Frame_Done) < 127) && ((* - .__Pl_Frame_Done) > -128)
   2804  f612		       f0 13		      BEQ	.__Pl_Frame_Done
   2805  f614				  -	      else
   2806  f614				  -	      bne	.1skip__Pl_Frame_Done
   2807  f614				  -	      jmp	.__Pl_Frame_Done
   2808  f614				  -.1skip__Pl_Frame_Done
   2809  f614					      endif
   2810  f614				   .L093		;  on _Frame_Counter goto __Pl00 __Pl01 __Pl00 __Pl02
   2811  f614
   2812  f614		       a6 d5		      LDX	_Frame_Counter
   2813  f616		       bd 1f f6 	      LDA	.L093jumptablehi,x
   2814  f619		       48		      PHA
   2815  f61a		       bd 23 f6 	      LDA	.L093jumptablelo,x
   2816  f61d		       48		      PHA
   2817  f61e		       60		      RTS
   2818  f61f				   .L093jumptablehi
   2819  f61f		       fb		      .byte.b	>(.__Pl00-1)
   2820  f620		       fb		      .byte.b	>(.__Pl01-1)
   2821  f621		       fb		      .byte.b	>(.__Pl00-1)
   2822  f622		       fb		      .byte.b	>(.__Pl02-1)
   2823  f623				   .L093jumptablelo
   2824  f623		       8f		      .byte.b	<(.__Pl00-1)
   2825  f624		       9e		      .byte.b	<(.__Pl01-1)
   2826  f625		       8f		      .byte.b	<(.__Pl00-1)
   2827  f626		       ad		      .byte.b	<(.__Pl02-1)
   2828  f627				   .
   2829  f627							;
   2830  f627
   2831  f627				   .__Pl_Frame_Done
   2832  f627							; __Pl_Frame_Done
   2833  f627
   2834  f627				   .
   2835  f627							;
   2836  f627
   2837  f627				   .
   2838  f627							;
   2839  f627
   2840  f627				   .
   2841  f627							;
   2842  f627
   2843  f627				   .
   2844  f627							;
   2845  f627
   2846  f627				   .
   2847  f627							;
   2848  f627
   2849  f627				   .
   2850  f627							;
   2851  f627
   2852  f627				   .
   2853  f627							;
   2854  f627
   2855  f627				   .L094		;  player1:
   2856  f627
   2857  f627		       a2 08		      LDX	#<playerL094_1
   2858  f629		       86 8c		      STX	player1pointerlo
   2859  f62b		       a9 fc		      LDA	#>playerL094_1
   2860  f62d		       85 8d		      STA	player1pointerhi
   2861  f62f		       a9 07		      LDA	#7
   2862  f631		       85 8f		      STA	player1height
   2863  f633				   .L095		;  if !_Bit3_Mino_Moving{3} goto __Mn_Frame_Done
   2864  f633
   2865  f633		       a5 eb		      LDA	_Bit3_Mino_Moving
   2866  f635		       29 08		      AND	#8
   2867  f637					      if	((* - .__Mn_Frame_Done) < 127) && ((* - .__Mn_Frame_Done) > -128)
   2868  f637		       f0 13		      BEQ	.__Mn_Frame_Done
   2869  f639				  -	      else
   2870  f639				  -	      bne	.2skip__Mn_Frame_Done
   2871  f639				  -	      jmp	.__Mn_Frame_Done
   2872  f639				  -.2skip__Mn_Frame_Done
   2873  f639					      endif
   2874  f639				   .L096		;  on _Frame_Counter goto __Mn00 __Mn01 __Mn00 __Mn02
   2875  f639
   2876  f639		       a6 d5		      LDX	_Frame_Counter
   2877  f63b		       bd 44 f6 	      LDA	.L096jumptablehi,x
   2878  f63e		       48		      PHA
   2879  f63f		       bd 48 f6 	      LDA	.L096jumptablelo,x
   2880  f642		       48		      PHA
   2881  f643		       60		      RTS
   2882  f644				   .L096jumptablehi
   2883  f644		       fb		      .byte.b	>(.__Mn00-1)
   2884  f645		       fb		      .byte.b	>(.__Mn01-1)
   2885  f646		       fb		      .byte.b	>(.__Mn00-1)
   2886  f647		       fb		      .byte.b	>(.__Mn02-1)
   2887  f648				   .L096jumptablelo
   2888  f648		       bc		      .byte.b	<(.__Mn00-1)
   2889  f649		       cb		      .byte.b	<(.__Mn01-1)
   2890  f64a		       bc		      .byte.b	<(.__Mn00-1)
   2891  f64b		       da		      .byte.b	<(.__Mn02-1)
   2892  f64c				   .
   2893  f64c							;
   2894  f64c
   2895  f64c				   .__Mn_Frame_Done
   2896  f64c							; __Mn_Frame_Done
   2897  f64c
   2898  f64c				   .
   2899  f64c							;
   2900  f64c
   2901  f64c				   .
   2902  f64c							;
   2903  f64c
   2904  f64c				   .
   2905  f64c							;
   2906  f64c
   2907  f64c				   .
   2908  f64c							;
   2909  f64c
   2910  f64c				   .
   2911  f64c							;
   2912  f64c
   2913  f64c				   .
   2914  f64c							;
   2915  f64c
   2916  f64c				   .
   2917  f64c							;
   2918  f64c
   2919  f64c				   .
   2920  f64c							;
   2921  f64c
   2922  f64c				   .L097		;  if !collision(player0,player1) then __Skip_Player_Caught
   2923  f64c
   2924  f64c		       24 07		      bit	CXPPMM
   2925  f64e					      if	((* - .__Skip_Player_Caught) < 127) && ((* - .__Skip_Player_Caught) > -128)
   2926  f64e		       10 09		      bpl	.__Skip_Player_Caught
   2927  f650				  -	      else
   2928  f650				  -	      bmi	.3skip__Skip_Player_Caught
   2929  f650				  -	      jmp	.__Skip_Player_Caught
   2930  f650				  -.3skip__Skip_Player_Caught
   2931  f650					      endif
   2932  f650				   .L098		;  _Bit1_Game_Over{1}	=  1
   2933  f650
   2934  f650		       a5 eb		      LDA	_Bit1_Game_Over
   2935  f652		       09 02		      ORA	#2
   2936  f654		       85 eb		      STA	_Bit1_Game_Over
   2937  f656				   .L099		;  goto __Game_Over
   2938  f656
   2939  f656		       4c 0c fb 	      jmp	.__Game_Over
   2940  f659
   2941  f659				   .__Skip_Player_Caught
   2942  f659							; __Skip_Player_Caught
   2943  f659
   2944  f659				   .
   2945  f659							;
   2946  f659
   2947  f659				   .
   2948  f659							;
   2949  f659
   2950  f659				   .
   2951  f659							;
   2952  f659
   2953  f659				   .
   2954  f659							;
   2955  f659
   2956  f659				   .
   2957  f659							;
   2958  f659
   2959  f659				   .L0100		;  NUSIZ0  =  $20  :  missile0height  =  2
   2960  f659
   2961  f659		       a9 20		      LDA	#$20
   2962  f65b		       85 04		      STA	NUSIZ0
   2963  f65d		       a9 02		      LDA	#2
   2964  f65f		       85 90		      STA	missile0height
   2965  f661				   .L0101		;  NUSIZ1  =  $30  :  missile1height  =  7
   2966  f661
   2967  f661		       a9 30		      LDA	#$30
   2968  f663		       85 05		      STA	NUSIZ1
   2969  f665		       a9 07		      LDA	#7
   2970  f667		       85 87		      STA	missile1height
   2971  f669				   .
   2972  f669							;
   2973  f669
   2974  f669				   .L0102		;  missile1x  =  78  :  missile1y  =  48
   2975  f669
   2976  f669		       a9 4e		      LDA	#78
   2977  f66b		       85 83		      STA	missile1x
   2978  f66d		       a9 30		      LDA	#48
   2979  f66f		       85 88		      STA	missile1y
   2980  f671				   .
   2981  f671							;
   2982  f671
   2983  f671				   .
   2984  f671							;
   2985  f671
   2986  f671				   .
   2987  f671							;
   2988  f671
   2989  f671				   .
   2990  f671							;
   2991  f671
   2992  f671				   .
   2993  f671							;
   2994  f671
   2995  f671				   .
   2996  f671							;
   2997  f671
   2998  f671				   .L0103		;  COLUP0  =  $9C
   2999  f671
   3000  f671		       a9 9c		      LDA	#$9C
   3001  f673		       85 06		      STA	COLUP0
   3002  f675				   .L0104		;  COLUP1  =  $34
   3003  f675
   3004  f675		       a9 34		      LDA	#$34
   3005  f677		       85 07		      STA	COLUP1
   3006  f679				   .L0105		;  scorecolor	=  $9C
   3007  f679
   3008  f679		       a9 9c		      LDA	#$9C
   3009  f67b		       85 a3		      STA	scorecolor
   3010  f67d				   .
   3011  f67d							;
   3012  f67d
   3013  f67d				   .L0106		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  >	$5 then _Chase_Speed  =  $0  :	goto __Skip_Speed_Check2 else COLUP1  =  $33
   3014  f67d
   3015  f67d		       a5 93		      LDA	_sc1
   3016  f67f		       c9 00		      CMP	#%00
   3017  f681		       d0 16		      BNE	.skipL0106
   3018  f683				   .condpart8
   3019  f683		       a5 94		      LDA	_sc2
   3020  f685		       c9 00		      CMP	#%00
   3021  f687		       d0 10		      BNE	.skip8then
   3022  f689				   .condpart9
   3023  f689		       a9 05		      LDA	#$5
   3024  f68b		       c5 95		      CMP	_sc3
   3025  f68d		       b0 0a		      BCS	.skip9then
   3026  f68f				   .condpart10
   3027  f68f		       a9 00		      LDA	#$0
   3028  f691		       85 e5		      STA	_Chase_Speed
   3029  f693		       4c ba f6 	      jmp	.__Skip_Speed_Check2
   3030  f696		       4c 9d f6 	      jmp	.skipelse0
   3031  f699				   .skip9then
   3032  f699				   .skip8then
   3033  f699				   .skipL0106
   3034  f699		       a9 33		      LDA	#$33
   3035  f69b		       85 07		      STA	COLUP1
   3036  f69d				   .skipelse0
   3037  f69d				   .L0107		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  >	$1 then _Chase_Speed  =  $1 else COLUP1  =  $30
   3038  f69d
   3039  f69d		       a5 93		      LDA	_sc1
   3040  f69f		       c9 00		      CMP	#%00
   3041  f6a1		       d0 13		      BNE	.skipL0107
   3042  f6a3				   .condpart11
   3043  f6a3		       a5 94		      LDA	_sc2
   3044  f6a5		       c9 00		      CMP	#%00
   3045  f6a7		       d0 0d		      BNE	.skip11then
   3046  f6a9				   .condpart12
   3047  f6a9		       a9 01		      LDA	#$1
   3048  f6ab		       c5 95		      CMP	_sc3
   3049  f6ad		       b0 07		      BCS	.skip12then
   3050  f6af				   .condpart13
   3051  f6af		       a9 01		      LDA	#$1
   3052  f6b1		       85 e5		      STA	_Chase_Speed
   3053  f6b3		       4c ba f6 	      jmp	.skipelse1
   3054  f6b6				   .skip12then
   3055  f6b6				   .skip11then
   3056  f6b6				   .skipL0107
   3057  f6b6		       a9 30		      LDA	#$30
   3058  f6b8		       85 07		      STA	COLUP1
   3059  f6ba				   .skipelse1
   3060  f6ba				   .__Skip_Speed_Check2
   3061  f6ba							; __Skip_Speed_Check2
   3062  f6ba
   3063  f6ba				   .
   3064  f6ba							;
   3065  f6ba
   3066  f6ba				   .
   3067  f6ba							;
   3068  f6ba
   3069  f6ba				   .
   3070  f6ba							;
   3071  f6ba
   3072  f6ba				   .
   3073  f6ba							;
   3074  f6ba
   3075  f6ba				   .
   3076  f6ba							;
   3077  f6ba
   3078  f6ba				   .
   3079  f6ba							;
   3080  f6ba
   3081  f6ba				   .
   3082  f6ba							;
   3083  f6ba
   3084  f6ba				   .
   3085  f6ba							;
   3086  f6ba
   3087  f6ba				   .L0108		;  _Bit2_Player_Moving{2}  =  0
   3088  f6ba
   3089  f6ba		       a5 eb		      LDA	_Bit2_Player_Moving
   3090  f6bc		       29 fb		      AND	#251
   3091  f6be		       85 eb		      STA	_Bit2_Player_Moving
   3092  f6c0				   .L0109		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   3093  f6c0
   3094  f6c0		       a9 10		      lda	#$10
   3095  f6c2		       2c 80 02 	      bit	SWCHA
   3096  f6c5		       f0 14		      BEQ	.skipL0109
   3097  f6c7				   .condpart14
   3098  f6c7		       a9 20		      lda	#$20
   3099  f6c9		       2c 80 02 	      bit	SWCHA
   3100  f6cc		       f0 0d		      BEQ	.skip14then
   3101  f6ce				   .condpart15
   3102  f6ce		       2c 80 02 	      bit	SWCHA
   3103  f6d1		       50 08		      BVC	.skip15then
   3104  f6d3				   .condpart16
   3105  f6d3		       2c 80 02 	      bit	SWCHA
   3106  f6d6		       10 03		      BPL	.skip16then
   3107  f6d8				   .condpart17
   3108  f6d8		       4c e1 f6 	      jmp	.__Skip_Joystick_Precheck
   3109  f6db
   3110  f6db				   .skip16then
   3111  f6db				   .skip15then
   3112  f6db				   .skip14then
   3113  f6db				   .skipL0109
   3114  f6db				   .
   3115  f6db							;
   3116  f6db
   3117  f6db				   .
   3118  f6db							;
   3119  f6db
   3120  f6db				   .
   3121  f6db							;
   3122  f6db
   3123  f6db				   .L0110		;  _BitOp_P0_M0_Dir  =  _BitOp_P0_M0_Dir  &  %11110000
   3124  f6db
   3125  f6db		       a5 da		      LDA	_BitOp_P0_M0_Dir
   3126  f6dd		       29 f0		      AND	#%11110000
   3127  f6df		       85 da		      STA	_BitOp_P0_M0_Dir
   3128  f6e1				   .
   3129  f6e1							;
   3130  f6e1
   3131  f6e1				   .__Skip_Joystick_Precheck
   3132  f6e1							; __Skip_Joystick_Precheck
   3133  f6e1
   3134  f6e1				   .
   3135  f6e1							;
   3136  f6e1
   3137  f6e1				   .
   3138  f6e1							;
   3139  f6e1
   3140  f6e1				   .
   3141  f6e1							;
   3142  f6e1
   3143  f6e1				   .
   3144  f6e1							;
   3145  f6e1
   3146  f6e1				   .
   3147  f6e1							;
   3148  f6e1
   3149  f6e1				   .
   3150  f6e1							;
   3151  f6e1
   3152  f6e1				   .
   3153  f6e1							;
   3154  f6e1
   3155  f6e1				   .
   3156  f6e1							;
   3157  f6e1
   3158  f6e1				   .L0111		;  if !joy0up then goto __Skip_Joy0_Up
   3159  f6e1
   3160  f6e1		       a9 10		      lda	#$10
   3161  f6e3		       2c 80 02 	      bit	SWCHA
   3162  f6e6		       f0 03		      BEQ	.skipL0111
   3163  f6e8				   .condpart18
   3164  f6e8		       4c 5b f7 	      jmp	.__Skip_Joy0_Up
   3165  f6eb
   3166  f6eb				   .skipL0111
   3167  f6eb				   .
   3168  f6eb							;
   3169  f6eb
   3170  f6eb				   .
   3171  f6eb							;
   3172  f6eb
   3173  f6eb				   .
   3174  f6eb							;
   3175  f6eb
   3176  f6eb				   .
   3177  f6eb							;
   3178  f6eb
   3179  f6eb				   .L0112		;  _Bit0_P0_Dir_Up{0}	=  1
   3180  f6eb
   3181  f6eb		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3182  f6ed		       09 01		      ORA	#1
   3183  f6ef		       85 da		      STA	_Bit0_P0_Dir_Up
   3184  f6f1				   .
   3185  f6f1							;
   3186  f6f1
   3187  f6f1				   .
   3188  f6f1							;
   3189  f6f1
   3190  f6f1				   .
   3191  f6f1							;
   3192  f6f1
   3193  f6f1				   .
   3194  f6f1							;
   3195  f6f1
   3196  f6f1				   .L0113		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   3197  f6f1
   3198  f6f1		       a9 09		      LDA	#_P_Edge_Top
   3199  f6f3		       c5 85		      CMP	player0y
   3200  f6f5		       90 03		      BCC	.skipL0113
   3201  f6f7				   .condpart19
   3202  f6f7		       4c 5b f7 	      jmp	.__Skip_Joy0_Up
   3203  f6fa
   3204  f6fa				   .skipL0113
   3205  f6fa				   .
   3206  f6fa							;
   3207  f6fa
   3208  f6fa				   .
   3209  f6fa							;
   3210  f6fa
   3211  f6fa				   .
   3212  f6fa							;
   3213  f6fa
   3214  f6fa				   .
   3215  f6fa							;
   3216  f6fa
   3217  f6fa				   .L0114		;  temp5  =   ( player0x - 11 )  / 4
   3218  f6fa
   3219  f6fa							; complex statement detected
   3220  f6fa		       a5 80		      LDA	player0x
   3221  f6fc		       38		      SEC
   3222  f6fd		       e9 0b		      SBC	#11
   3223  f6ff		       4a		      lsr
   3224  f700		       4a		      lsr
   3225  f701		       85 a0		      STA	temp5
   3226  f703				   .
   3227  f703							;
   3228  f703
   3229  f703				   .L0115		;  temp6  =   ( player0y - 8 )  / 8
   3230  f703
   3231  f703							; complex statement detected
   3232  f703		       a5 85		      LDA	player0y
   3233  f705		       38		      SEC
   3234  f706		       e9 08		      SBC	#8
   3235  f708		       4a		      lsr
   3236  f709		       4a		      lsr
   3237  f70a		       4a		      lsr
   3238  f70b		       85 a1		      STA	temp6
   3239  f70d				   .
   3240  f70d							;
   3241  f70d
   3242  f70d				   .L0116		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   3243  f70d
   3244  f70d		       a5 a0		      LDA	temp5
   3245  f70f		       c9 22		      CMP	#34
   3246  f711		       b0 0c		      BCS	.skipL0116
   3247  f713				   .condpart20
   3248  f713		       a5 a0		      LDA	temp5
   3249  f715		       a4 a1		      LDY	temp6
   3250  f717		       20 6b f2 	      jsr	pfread
   3251  f71a		       d0 03		      BNE	.skip20then
   3252  f71c				   .condpart21
   3253  f71c		       4c 5b f7 	      jmp	.__Skip_Joy0_Up
   3254  f71f
   3255  f71f				   .skip20then
   3256  f71f				   .skipL0116
   3257  f71f				   .
   3258  f71f							;
   3259  f71f
   3260  f71f				   .L0117		;  temp4  =   ( player0x - 16 )  / 4
   3261  f71f
   3262  f71f							; complex statement detected
   3263  f71f		       a5 80		      LDA	player0x
   3264  f721		       38		      SEC
   3265  f722		       e9 10		      SBC	#16
   3266  f724		       4a		      lsr
   3267  f725		       4a		      lsr
   3268  f726		       85 9f		      STA	temp4
   3269  f728				   .
   3270  f728							;
   3271  f728
   3272  f728				   .L0118		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   3273  f728
   3274  f728		       a5 9f		      LDA	temp4
   3275  f72a		       c9 22		      CMP	#34
   3276  f72c		       b0 0c		      BCS	.skipL0118
   3277  f72e				   .condpart22
   3278  f72e		       a5 9f		      LDA	temp4
   3279  f730		       a4 a1		      LDY	temp6
   3280  f732		       20 6b f2 	      jsr	pfread
   3281  f735		       d0 03		      BNE	.skip22then
   3282  f737				   .condpart23
   3283  f737		       4c 5b f7 	      jmp	.__Skip_Joy0_Up
   3284  f73a
   3285  f73a				   .skip22then
   3286  f73a				   .skipL0118
   3287  f73a				   .
   3288  f73a							;
   3289  f73a
   3290  f73a				   .L0119		;  temp3  =  temp5  -	1
   3291  f73a
   3292  f73a		       a5 a0		      LDA	temp5
   3293  f73c		       38		      SEC
   3294  f73d		       e9 01		      SBC	#1
   3295  f73f		       85 9e		      STA	temp3
   3296  f741				   .
   3297  f741							;
   3298  f741
   3299  f741				   .L0120		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   3300  f741
   3301  f741		       a5 9e		      LDA	temp3
   3302  f743		       c9 22		      CMP	#34
   3303  f745		       b0 0c		      BCS	.skipL0120
   3304  f747				   .condpart24
   3305  f747		       a5 9e		      LDA	temp3
   3306  f749		       a4 a1		      LDY	temp6
   3307  f74b		       20 6b f2 	      jsr	pfread
   3308  f74e		       d0 03		      BNE	.skip24then
   3309  f750				   .condpart25
   3310  f750		       4c 5b f7 	      jmp	.__Skip_Joy0_Up
   3311  f753
   3312  f753				   .skip24then
   3313  f753				   .skipL0120
   3314  f753				   .
   3315  f753							;
   3316  f753
   3317  f753				   .
   3318  f753							;
   3319  f753
   3320  f753				   .
   3321  f753							;
   3322  f753
   3323  f753				   .
   3324  f753							;
   3325  f753
   3326  f753				   .L0121		;  _Bit2_Player_Moving{2}  =  1
   3327  f753
   3328  f753		       a5 eb		      LDA	_Bit2_Player_Moving
   3329  f755		       09 04		      ORA	#4
   3330  f757		       85 eb		      STA	_Bit2_Player_Moving
   3331  f759				   .L0122		;  player0y  =  player0y  -  1
   3332  f759
   3333  f759		       c6 85		      DEC	player0y
   3334  f75b				   .
   3335  f75b							;
   3336  f75b
   3337  f75b				   .__Skip_Joy0_Up
   3338  f75b							; __Skip_Joy0_Up
   3339  f75b
   3340  f75b				   .
   3341  f75b							;
   3342  f75b
   3343  f75b				   .
   3344  f75b							;
   3345  f75b
   3346  f75b				   .
   3347  f75b							;
   3348  f75b
   3349  f75b				   .
   3350  f75b							;
   3351  f75b
   3352  f75b				   .
   3353  f75b							;
   3354  f75b
   3355  f75b				   .
   3356  f75b							;
   3357  f75b
   3358  f75b				   .
   3359  f75b							;
   3360  f75b
   3361  f75b				   .
   3362  f75b							;
   3363  f75b
   3364  f75b				   .
   3365  f75b							;
   3366  f75b
   3367  f75b				   .
   3368  f75b							;
   3369  f75b
   3370  f75b				   .L0123		;  if !joy0down then goto __Skip_Joy0_Down
   3371  f75b
   3372  f75b		       a9 20		      lda	#$20
   3373  f75d		       2c 80 02 	      bit	SWCHA
   3374  f760		       f0 03		      BEQ	.skipL0123
   3375  f762				   .condpart26
   3376  f762		       4c d2 f7 	      jmp	.__Skip_Joy0_Down
   3377  f765
   3378  f765				   .skipL0123
   3379  f765				   .
   3380  f765							;
   3381  f765
   3382  f765				   .
   3383  f765							;
   3384  f765
   3385  f765				   .
   3386  f765							;
   3387  f765
   3388  f765				   .
   3389  f765							;
   3390  f765
   3391  f765				   .L0124		;  _Bit1_P0_Dir_Down{1}  =  1
   3392  f765
   3393  f765		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3394  f767		       09 02		      ORA	#2
   3395  f769		       85 da		      STA	_Bit1_P0_Dir_Down
   3396  f76b				   .
   3397  f76b							;
   3398  f76b
   3399  f76b				   .
   3400  f76b							;
   3401  f76b
   3402  f76b				   .
   3403  f76b							;
   3404  f76b
   3405  f76b				   .
   3406  f76b							;
   3407  f76b
   3408  f76b				   .L0125		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   3409  f76b
   3410  f76b		       a5 85		      LDA	player0y
   3411  f76d		       c9 58		      CMP	#_P_Edge_Bottom
   3412  f76f		       90 03		      BCC	.skipL0125
   3413  f771				   .condpart27
   3414  f771		       4c d2 f7 	      jmp	.__Skip_Joy0_Down
   3415  f774
   3416  f774				   .skipL0125
   3417  f774				   .
   3418  f774							;
   3419  f774
   3420  f774				   .
   3421  f774							;
   3422  f774
   3423  f774				   .
   3424  f774							;
   3425  f774
   3426  f774				   .
   3427  f774							;
   3428  f774
   3429  f774				   .L0126		;  temp5  =   ( player0x - 11 )  / 4
   3430  f774
   3431  f774							; complex statement detected
   3432  f774		       a5 80		      LDA	player0x
   3433  f776		       38		      SEC
   3434  f777		       e9 0b		      SBC	#11
   3435  f779		       4a		      lsr
   3436  f77a		       4a		      lsr
   3437  f77b		       85 a0		      STA	temp5
   3438  f77d				   .
   3439  f77d							;
   3440  f77d
   3441  f77d				   .L0127		;  temp6  =   ( player0y )  / 8
   3442  f77d
   3443  f77d							; complex statement detected
   3444  f77d		       a5 85		      LDA	player0y
   3445  f77f		       4a		      lsr
   3446  f780		       4a		      lsr
   3447  f781		       4a		      lsr
   3448  f782		       85 a1		      STA	temp6
   3449  f784				   .
   3450  f784							;
   3451  f784
   3452  f784				   .L0128		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   3453  f784
   3454  f784		       a5 a0		      LDA	temp5
   3455  f786		       c9 22		      CMP	#34
   3456  f788		       b0 0c		      BCS	.skipL0128
   3457  f78a				   .condpart28
   3458  f78a		       a5 a0		      LDA	temp5
   3459  f78c		       a4 a1		      LDY	temp6
   3460  f78e		       20 6b f2 	      jsr	pfread
   3461  f791		       d0 03		      BNE	.skip28then
   3462  f793				   .condpart29
   3463  f793		       4c d2 f7 	      jmp	.__Skip_Joy0_Down
   3464  f796
   3465  f796				   .skip28then
   3466  f796				   .skipL0128
   3467  f796				   .
   3468  f796							;
   3469  f796
   3470  f796				   .L0129		;  temp4  =   ( player0x - 16 )  / 4
   3471  f796
   3472  f796							; complex statement detected
   3473  f796		       a5 80		      LDA	player0x
   3474  f798		       38		      SEC
   3475  f799		       e9 10		      SBC	#16
   3476  f79b		       4a		      lsr
   3477  f79c		       4a		      lsr
   3478  f79d		       85 9f		      STA	temp4
   3479  f79f				   .
   3480  f79f							;
   3481  f79f
   3482  f79f				   .L0130		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3483  f79f
   3484  f79f		       a5 9f		      LDA	temp4
   3485  f7a1		       c9 22		      CMP	#34
   3486  f7a3		       b0 0c		      BCS	.skipL0130
   3487  f7a5				   .condpart30
   3488  f7a5		       a5 9f		      LDA	temp4
   3489  f7a7		       a4 a1		      LDY	temp6
   3490  f7a9		       20 6b f2 	      jsr	pfread
   3491  f7ac		       d0 03		      BNE	.skip30then
   3492  f7ae				   .condpart31
   3493  f7ae		       4c d2 f7 	      jmp	.__Skip_Joy0_Down
   3494  f7b1
   3495  f7b1				   .skip30then
   3496  f7b1				   .skipL0130
   3497  f7b1				   .
   3498  f7b1							;
   3499  f7b1
   3500  f7b1				   .L0131		;  temp3  =  temp5  -	1
   3501  f7b1
   3502  f7b1		       a5 a0		      LDA	temp5
   3503  f7b3		       38		      SEC
   3504  f7b4		       e9 01		      SBC	#1
   3505  f7b6		       85 9e		      STA	temp3
   3506  f7b8				   .
   3507  f7b8							;
   3508  f7b8
   3509  f7b8				   .L0132		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   3510  f7b8
   3511  f7b8		       a5 9e		      LDA	temp3
   3512  f7ba		       c9 22		      CMP	#34
   3513  f7bc		       b0 0c		      BCS	.skipL0132
   3514  f7be				   .condpart32
   3515  f7be		       a5 9e		      LDA	temp3
   3516  f7c0		       a4 a1		      LDY	temp6
   3517  f7c2		       20 6b f2 	      jsr	pfread
   3518  f7c5		       d0 03		      BNE	.skip32then
   3519  f7c7				   .condpart33
   3520  f7c7		       4c d2 f7 	      jmp	.__Skip_Joy0_Down
   3521  f7ca
   3522  f7ca				   .skip32then
   3523  f7ca				   .skipL0132
   3524  f7ca				   .
   3525  f7ca							;
   3526  f7ca
   3527  f7ca				   .
   3528  f7ca							;
   3529  f7ca
   3530  f7ca				   .
   3531  f7ca							;
   3532  f7ca
   3533  f7ca				   .
   3534  f7ca							;
   3535  f7ca
   3536  f7ca				   .L0133		;  _Bit2_Player_Moving{2}  =  1
   3537  f7ca
   3538  f7ca		       a5 eb		      LDA	_Bit2_Player_Moving
   3539  f7cc		       09 04		      ORA	#4
   3540  f7ce		       85 eb		      STA	_Bit2_Player_Moving
   3541  f7d0				   .L0134		;  player0y  =  player0y  +  1
   3542  f7d0
   3543  f7d0		       e6 85		      INC	player0y
   3544  f7d2				   .
   3545  f7d2							;
   3546  f7d2
   3547  f7d2				   .__Skip_Joy0_Down
   3548  f7d2							; __Skip_Joy0_Down
   3549  f7d2
   3550  f7d2				   .
   3551  f7d2							;
   3552  f7d2
   3553  f7d2				   .
   3554  f7d2							;
   3555  f7d2
   3556  f7d2				   .
   3557  f7d2							;
   3558  f7d2
   3559  f7d2				   .
   3560  f7d2							;
   3561  f7d2
   3562  f7d2				   .
   3563  f7d2							;
   3564  f7d2
   3565  f7d2				   .
   3566  f7d2							;
   3567  f7d2
   3568  f7d2				   .
   3569  f7d2							;
   3570  f7d2
   3571  f7d2				   .
   3572  f7d2							;
   3573  f7d2
   3574  f7d2				   .
   3575  f7d2							;
   3576  f7d2
   3577  f7d2				   .
   3578  f7d2							;
   3579  f7d2
   3580  f7d2				   .L0135		;  if !joy0left then goto __Skip_Joy0_Left
   3581  f7d2
   3582  f7d2		       2c 80 02 	      bit	SWCHA
   3583  f7d5		       50 03		      BVC	.skipL0135
   3584  f7d7				   .condpart34
   3585  f7d7		       4c 36 f8 	      jmp	.__Skip_Joy0_Left
   3586  f7da
   3587  f7da				   .skipL0135
   3588  f7da				   .
   3589  f7da							;
   3590  f7da
   3591  f7da				   .
   3592  f7da							;
   3593  f7da
   3594  f7da				   .
   3595  f7da							;
   3596  f7da
   3597  f7da				   .
   3598  f7da							;
   3599  f7da
   3600  f7da				   .L0136		;  _Bit2_P0_Dir_Left{2}  =  1
   3601  f7da
   3602  f7da		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3603  f7dc		       09 04		      ORA	#4
   3604  f7de		       85 da		      STA	_Bit2_P0_Dir_Left
   3605  f7e0				   .
   3606  f7e0							;
   3607  f7e0
   3608  f7e0				   .
   3609  f7e0							;
   3610  f7e0
   3611  f7e0				   .
   3612  f7e0							;
   3613  f7e0
   3614  f7e0				   .
   3615  f7e0							;
   3616  f7e0
   3617  f7e0				   .L0137		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   3618  f7e0
   3619  f7e0		       a9 01		      LDA	#_P_Edge_Left
   3620  f7e2		       c5 80		      CMP	player0x
   3621  f7e4		       90 03		      BCC	.skipL0137
   3622  f7e6				   .condpart35
   3623  f7e6		       4c 36 f8 	      jmp	.__Skip_Joy0_Left
   3624  f7e9
   3625  f7e9				   .skipL0137
   3626  f7e9				   .
   3627  f7e9							;
   3628  f7e9
   3629  f7e9				   .
   3630  f7e9							;
   3631  f7e9
   3632  f7e9				   .
   3633  f7e9							;
   3634  f7e9
   3635  f7e9				   .
   3636  f7e9							;
   3637  f7e9
   3638  f7e9				   .L0138		;  temp5  =   ( player0y - 1 )  / 8
   3639  f7e9
   3640  f7e9							; complex statement detected
   3641  f7e9		       a5 85		      LDA	player0y
   3642  f7eb		       38		      SEC
   3643  f7ec		       e9 01		      SBC	#1
   3644  f7ee		       4a		      lsr
   3645  f7ef		       4a		      lsr
   3646  f7f0		       4a		      lsr
   3647  f7f1		       85 a0		      STA	temp5
   3648  f7f3				   .
   3649  f7f3							;
   3650  f7f3
   3651  f7f3				   .L0139		;  temp6  =   ( player0x - 17 )  / 4
   3652  f7f3
   3653  f7f3							; complex statement detected
   3654  f7f3		       a5 80		      LDA	player0x
   3655  f7f5		       38		      SEC
   3656  f7f6		       e9 11		      SBC	#17
   3657  f7f8		       4a		      lsr
   3658  f7f9		       4a		      lsr
   3659  f7fa		       85 a1		      STA	temp6
   3660  f7fc				   .
   3661  f7fc							;
   3662  f7fc
   3663  f7fc				   .L0140		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3664  f7fc
   3665  f7fc		       a5 a1		      LDA	temp6
   3666  f7fe		       c9 22		      CMP	#34
   3667  f800		       b0 0c		      BCS	.skipL0140
   3668  f802				   .condpart36
   3669  f802		       a5 a1		      LDA	temp6
   3670  f804		       a4 a0		      LDY	temp5
   3671  f806		       20 6b f2 	      jsr	pfread
   3672  f809		       d0 03		      BNE	.skip36then
   3673  f80b				   .condpart37
   3674  f80b		       4c 36 f8 	      jmp	.__Skip_Joy0_Left
   3675  f80e
   3676  f80e				   .skip36then
   3677  f80e				   .skipL0140
   3678  f80e				   .
   3679  f80e							;
   3680  f80e
   3681  f80e				   .L0141		;  temp3  =   ( player0y - 7 )  / 8
   3682  f80e
   3683  f80e							; complex statement detected
   3684  f80e		       a5 85		      LDA	player0y
   3685  f810		       38		      SEC
   3686  f811		       e9 07		      SBC	#7
   3687  f813		       4a		      lsr
   3688  f814		       4a		      lsr
   3689  f815		       4a		      lsr
   3690  f816		       85 9e		      STA	temp3
   3691  f818				   .
   3692  f818							;
   3693  f818
   3694  f818				   .L0142		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3695  f818
   3696  f818		       a5 a1		      LDA	temp6
   3697  f81a		       c9 22		      CMP	#34
   3698  f81c		       b0 0c		      BCS	.skipL0142
   3699  f81e				   .condpart38
   3700  f81e		       a5 a1		      LDA	temp6
   3701  f820		       a4 9e		      LDY	temp3
   3702  f822		       20 6b f2 	      jsr	pfread
   3703  f825		       d0 03		      BNE	.skip38then
   3704  f827				   .condpart39
   3705  f827		       4c 36 f8 	      jmp	.__Skip_Joy0_Left
   3706  f82a
   3707  f82a				   .skip38then
   3708  f82a				   .skipL0142
   3709  f82a				   .
   3710  f82a							;
   3711  f82a
   3712  f82a				   .
   3713  f82a							;
   3714  f82a
   3715  f82a				   .
   3716  f82a							;
   3717  f82a
   3718  f82a				   .
   3719  f82a							;
   3720  f82a
   3721  f82a				   .L0143		;  _Bit2_Player_Moving{2}  =  1
   3722  f82a
   3723  f82a		       a5 eb		      LDA	_Bit2_Player_Moving
   3724  f82c		       09 04		      ORA	#4
   3725  f82e		       85 eb		      STA	_Bit2_Player_Moving
   3726  f830				   .L0144		;  REFP0  =  8
   3727  f830
   3728  f830		       a9 08		      LDA	#8
   3729  f832		       85 0b		      STA	REFP0
   3730  f834				   .L0145		;  player0x  =  player0x  -  1
   3731  f834
   3732  f834		       c6 80		      DEC	player0x
   3733  f836				   .
   3734  f836							;
   3735  f836
   3736  f836				   .__Skip_Joy0_Left
   3737  f836							; __Skip_Joy0_Left
   3738  f836
   3739  f836				   .
   3740  f836							;
   3741  f836
   3742  f836				   .
   3743  f836							;
   3744  f836
   3745  f836				   .
   3746  f836							;
   3747  f836
   3748  f836				   .
   3749  f836							;
   3750  f836
   3751  f836				   .
   3752  f836							;
   3753  f836
   3754  f836				   .
   3755  f836							;
   3756  f836
   3757  f836				   .
   3758  f836							;
   3759  f836
   3760  f836				   .
   3761  f836							;
   3762  f836
   3763  f836				   .
   3764  f836							;
   3765  f836
   3766  f836				   .
   3767  f836							;
   3768  f836
   3769  f836				   .L0146		;  if !joy0right then goto __Skip_Joy0_Right
   3770  f836
   3771  f836		       2c 80 02 	      bit	SWCHA
   3772  f839		       10 03		      BPL	.skipL0146
   3773  f83b				   .condpart40
   3774  f83b		       4c 96 f8 	      jmp	.__Skip_Joy0_Right
   3775  f83e
   3776  f83e				   .skipL0146
   3777  f83e				   .
   3778  f83e							;
   3779  f83e
   3780  f83e				   .
   3781  f83e							;
   3782  f83e
   3783  f83e				   .
   3784  f83e							;
   3785  f83e
   3786  f83e				   .
   3787  f83e							;
   3788  f83e
   3789  f83e				   .L0147		;  _Bit3_P0_Dir_Right{3}  =  1
   3790  f83e
   3791  f83e		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3792  f840		       09 08		      ORA	#8
   3793  f842		       85 da		      STA	_Bit3_P0_Dir_Right
   3794  f844				   .
   3795  f844							;
   3796  f844
   3797  f844				   .
   3798  f844							;
   3799  f844
   3800  f844				   .
   3801  f844							;
   3802  f844
   3803  f844				   .
   3804  f844							;
   3805  f844
   3806  f844				   .L0148		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3807  f844
   3808  f844		       a5 80		      LDA	player0x
   3809  f846		       c9 99		      CMP	#_P_Edge_Right
   3810  f848		       90 03		      BCC	.skipL0148
   3811  f84a				   .condpart41
   3812  f84a		       4c 96 f8 	      jmp	.__Skip_Joy0_Right
   3813  f84d
   3814  f84d				   .skipL0148
   3815  f84d				   .
   3816  f84d							;
   3817  f84d
   3818  f84d				   .
   3819  f84d							;
   3820  f84d
   3821  f84d				   .
   3822  f84d							;
   3823  f84d
   3824  f84d				   .
   3825  f84d							;
   3826  f84d
   3827  f84d				   .L0149		;  temp5  =   ( player0y - 1 )  / 8
   3828  f84d
   3829  f84d							; complex statement detected
   3830  f84d		       a5 85		      LDA	player0y
   3831  f84f		       38		      SEC
   3832  f850		       e9 01		      SBC	#1
   3833  f852		       4a		      lsr
   3834  f853		       4a		      lsr
   3835  f854		       4a		      lsr
   3836  f855		       85 a0		      STA	temp5
   3837  f857				   .
   3838  f857							;
   3839  f857
   3840  f857				   .L0150		;  temp6  =   ( player0x - 10 )  / 4
   3841  f857
   3842  f857							; complex statement detected
   3843  f857		       a5 80		      LDA	player0x
   3844  f859		       38		      SEC
   3845  f85a		       e9 0a		      SBC	#10
   3846  f85c		       4a		      lsr
   3847  f85d		       4a		      lsr
   3848  f85e		       85 a1		      STA	temp6
   3849  f860				   .
   3850  f860							;
   3851  f860
   3852  f860				   .L0151		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3853  f860
   3854  f860		       a5 a1		      LDA	temp6
   3855  f862		       c9 22		      CMP	#34
   3856  f864		       b0 0c		      BCS	.skipL0151
   3857  f866				   .condpart42
   3858  f866		       a5 a1		      LDA	temp6
   3859  f868		       a4 a0		      LDY	temp5
   3860  f86a		       20 6b f2 	      jsr	pfread
   3861  f86d		       d0 03		      BNE	.skip42then
   3862  f86f				   .condpart43
   3863  f86f		       4c 96 f8 	      jmp	.__Skip_Joy0_Right
   3864  f872
   3865  f872				   .skip42then
   3866  f872				   .skipL0151
   3867  f872				   .
   3868  f872							;
   3869  f872
   3870  f872				   .L0152		;  temp3  =   ( player0y - 7 )  / 8
   3871  f872
   3872  f872							; complex statement detected
   3873  f872		       a5 85		      LDA	player0y
   3874  f874		       38		      SEC
   3875  f875		       e9 07		      SBC	#7
   3876  f877		       4a		      lsr
   3877  f878		       4a		      lsr
   3878  f879		       4a		      lsr
   3879  f87a		       85 9e		      STA	temp3
   3880  f87c				   .
   3881  f87c							;
   3882  f87c
   3883  f87c				   .L0153		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3884  f87c
   3885  f87c		       a5 a1		      LDA	temp6
   3886  f87e		       c9 22		      CMP	#34
   3887  f880		       b0 0c		      BCS	.skipL0153
   3888  f882				   .condpart44
   3889  f882		       a5 a1		      LDA	temp6
   3890  f884		       a4 9e		      LDY	temp3
   3891  f886		       20 6b f2 	      jsr	pfread
   3892  f889		       d0 03		      BNE	.skip44then
   3893  f88b				   .condpart45
   3894  f88b		       4c 96 f8 	      jmp	.__Skip_Joy0_Right
   3895  f88e
   3896  f88e				   .skip44then
   3897  f88e				   .skipL0153
   3898  f88e				   .
   3899  f88e							;
   3900  f88e
   3901  f88e				   .
   3902  f88e							;
   3903  f88e
   3904  f88e				   .
   3905  f88e							;
   3906  f88e
   3907  f88e				   .
   3908  f88e							;
   3909  f88e
   3910  f88e				   .L0154		;  _Bit2_Player_Moving{2}  =  1
   3911  f88e
   3912  f88e		       a5 eb		      LDA	_Bit2_Player_Moving
   3913  f890		       09 04		      ORA	#4
   3914  f892		       85 eb		      STA	_Bit2_Player_Moving
   3915  f894				   .L0155		;  player0x  =  player0x  +  1
   3916  f894
   3917  f894		       e6 80		      INC	player0x
   3918  f896				   .
   3919  f896							;
   3920  f896
   3921  f896				   .__Skip_Joy0_Right
   3922  f896							; __Skip_Joy0_Right
   3923  f896
   3924  f896				   .
   3925  f896							;
   3926  f896
   3927  f896				   .
   3928  f896							;
   3929  f896
   3930  f896				   .
   3931  f896							;
   3932  f896
   3933  f896				   .
   3934  f896							;
   3935  f896
   3936  f896				   .
   3937  f896							;
   3938  f896
   3939  f896				   .
   3940  f896							;
   3941  f896
   3942  f896				   .
   3943  f896							;
   3944  f896
   3945  f896				   .L0156		;  temp1  =  player0x	+  8
   3946  f896
   3947  f896		       a5 80		      LDA	player0x
   3948  f898		       18		      CLC
   3949  f899		       69 08		      ADC	#8
   3950  f89b		       85 9c		      STA	temp1
   3951  f89d				   .L0157		;  temp2  =  player0y	+  8
   3952  f89d
   3953  f89d		       a5 85		      LDA	player0y
   3954  f89f		       18		      CLC
   3955  f8a0		       69 08		      ADC	#8
   3956  f8a2		       85 9d		      STA	temp2
   3957  f8a4				   .
   3958  f8a4							;
   3959  f8a4
   3960  f8a4				   .L0158		;  temp3  =  player1x	+  4
   3961  f8a4
   3962  f8a4		       a5 81		      LDA	player1x
   3963  f8a6		       18		      CLC
   3964  f8a7		       69 04		      ADC	#4
   3965  f8a9		       85 9e		      STA	temp3
   3966  f8ab				   .L0159		;  temp4  =  player1y	+  4
   3967  f8ab
   3968  f8ab		       a5 86		      LDA	player1y
   3969  f8ad		       18		      CLC
   3970  f8ae		       69 04		      ADC	#4
   3971  f8b0		       85 9f		      STA	temp4
   3972  f8b2				   .
   3973  f8b2							;
   3974  f8b2
   3975  f8b2				   .L0160		;  temp5  =  _Minotaur_Awareness_Size
   3976  f8b2
   3977  f8b2		       a9 64		      LDA	#_Minotaur_Awareness_Size
   3978  f8b4		       85 a0		      STA	temp5
   3979  f8b6				   .
   3980  f8b6							;
   3981  f8b6
   3982  f8b6				   .L0161		;  if _Master_Counter & _Chase_Speed then goto __Skip_AI_Right
   3983  f8b6
   3984  f8b6		       a5 d4		      LDA	_Master_Counter
   3985  f8b8		       25 e5		      AND	_Chase_Speed
   3986  f8ba		       f0 03		      BEQ	.skipL0161
   3987  f8bc				   .condpart46
   3988  f8bc		       4c c4 fa 	      jmp	.__Skip_AI_Right
   3989  f8bf
   3990  f8bf				   .skipL0161
   3991  f8bf				   .L0162		;  _Bit3_Mino_Moving{3}  =  0
   3992  f8bf
   3993  f8bf		       a5 eb		      LDA	_Bit3_Mino_Moving
   3994  f8c1		       29 f7		      AND	#247
   3995  f8c3		       85 eb		      STA	_Bit3_Mino_Moving
   3996  f8c5				   .
   3997  f8c5							;
   3998  f8c5
   3999  f8c5				   .
   4000  f8c5							;
   4001  f8c5
   4002  f8c5				   .L0163		;  if player0y  >=  temp4  +  temp5 then goto __Skip_AI_Right
   4003  f8c5
   4004  f8c5							; complex condition detected
   4005  f8c5		       a5 9f		      LDA	temp4
   4006  f8c7		       18		      CLC
   4007  f8c8		       65 a0		      ADC	temp5
   4008  f8ca		       48		      PHA
   4009  f8cb		       ba		      TSX
   4010  f8cc		       68		      PLA
   4011  f8cd		       a5 85		      LDA	player0y
   4012  f8cf		       d5 01		      CMP	1,x
   4013  f8d1		       90 03		      BCC	.skipL0163
   4014  f8d3				   .condpart47
   4015  f8d3		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4016  f8d6
   4017  f8d6				   .skipL0163
   4018  f8d6				   .
   4019  f8d6							;
   4020  f8d6
   4021  f8d6				   .
   4022  f8d6							;
   4023  f8d6
   4024  f8d6				   .L0164		;  if temp4  <  temp5 then temp4  =  temp5
   4025  f8d6
   4026  f8d6		       a5 9f		      LDA	temp4
   4027  f8d8		       c5 a0		      CMP	temp5
   4028  f8da		       b0 04		      BCS	.skipL0164
   4029  f8dc				   .condpart48
   4030  f8dc		       a5 a0		      LDA	temp5
   4031  f8de		       85 9f		      STA	temp4
   4032  f8e0				   .skipL0164
   4033  f8e0				   .L0165		;  if temp2  <=  temp4  -  temp5 then goto __Skip_AI_Right
   4034  f8e0
   4035  f8e0							; complex condition detected
   4036  f8e0		       a5 9f		      LDA	temp4
   4037  f8e2		       38		      SEC
   4038  f8e3		       e5 a0		      SBC	temp5
   4039  f8e5		       c5 9d		      CMP	temp2
   4040  f8e7		       90 03		      BCC	.skipL0165
   4041  f8e9				   .condpart49
   4042  f8e9		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4043  f8ec
   4044  f8ec				   .skipL0165
   4045  f8ec				   .
   4046  f8ec							;
   4047  f8ec
   4048  f8ec				   .
   4049  f8ec							;
   4050  f8ec
   4051  f8ec				   .L0166		;  if temp3  <  temp5 then temp3  =  temp5
   4052  f8ec
   4053  f8ec		       a5 9e		      LDA	temp3
   4054  f8ee		       c5 a0		      CMP	temp5
   4055  f8f0		       b0 04		      BCS	.skipL0166
   4056  f8f2				   .condpart50
   4057  f8f2		       a5 a0		      LDA	temp5
   4058  f8f4		       85 9e		      STA	temp3
   4059  f8f6				   .skipL0166
   4060  f8f6				   .L0167		;  if temp1  <=  temp3  -  temp5 then goto __Skip_AI_Right
   4061  f8f6
   4062  f8f6							; complex condition detected
   4063  f8f6		       a5 9e		      LDA	temp3
   4064  f8f8		       38		      SEC
   4065  f8f9		       e5 a0		      SBC	temp5
   4066  f8fb		       c5 9c		      CMP	temp1
   4067  f8fd		       90 03		      BCC	.skipL0167
   4068  f8ff				   .condpart51
   4069  f8ff		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4070  f902
   4071  f902				   .skipL0167
   4072  f902				   .
   4073  f902							;
   4074  f902
   4075  f902				   .
   4076  f902							;
   4077  f902
   4078  f902				   .L0168		;  if player0x  >=  temp3  +  temp5 then goto __Skip_AI_Right
   4079  f902
   4080  f902							; complex condition detected
   4081  f902		       a5 9e		      LDA	temp3
   4082  f904		       18		      CLC
   4083  f905		       65 a0		      ADC	temp5
   4084  f907		       48		      PHA
   4085  f908		       ba		      TSX
   4086  f909		       68		      PLA
   4087  f90a		       a5 80		      LDA	player0x
   4088  f90c		       d5 01		      CMP	1,x
   4089  f90e		       90 03		      BCC	.skipL0168
   4090  f910				   .condpart52
   4091  f910		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4092  f913
   4093  f913				   .skipL0168
   4094  f913				   .
   4095  f913							;
   4096  f913
   4097  f913				   .
   4098  f913							;
   4099  f913
   4100  f913				   .
   4101  f913							;
   4102  f913
   4103  f913				   .
   4104  f913							;
   4105  f913
   4106  f913				   .
   4107  f913							;
   4108  f913
   4109  f913				   .
   4110  f913							;
   4111  f913
   4112  f913				   .
   4113  f913							;
   4114  f913
   4115  f913				   .
   4116  f913							;
   4117  f913
   4118  f913				   .
   4119  f913							;
   4120  f913
   4121  f913				   .
   4122  f913							;
   4123  f913
   4124  f913				   .
   4125  f913							;
   4126  f913
   4127  f913				   .L0169		;  if player1y  <=  player0y then goto __Skip_AI_Up
   4128  f913
   4129  f913		       a5 85		      LDA	player0y
   4130  f915		       c5 86		      CMP	player1y
   4131  f917		       90 03		      BCC	.skipL0169
   4132  f919				   .condpart53
   4133  f919		       4c 8c f9 	      jmp	.__Skip_AI_Up
   4134  f91c
   4135  f91c				   .skipL0169
   4136  f91c				   .
   4137  f91c							;
   4138  f91c
   4139  f91c				   .
   4140  f91c							;
   4141  f91c
   4142  f91c				   .
   4143  f91c							;
   4144  f91c
   4145  f91c				   .
   4146  f91c							;
   4147  f91c
   4148  f91c				   .L0170		;  _Bit0_P1_Dir_Up{0}	=  1
   4149  f91c
   4150  f91c		       a5 de		      LDA	_Bit0_P1_Dir_Up
   4151  f91e		       09 01		      ORA	#1
   4152  f920		       85 de		      STA	_Bit0_P1_Dir_Up
   4153  f922				   .
   4154  f922							;
   4155  f922
   4156  f922				   .
   4157  f922							;
   4158  f922
   4159  f922				   .
   4160  f922							;
   4161  f922
   4162  f922				   .
   4163  f922							;
   4164  f922
   4165  f922				   .L0171		;  if player1y  <=  _P_Edge_Top then goto __Skip_AI_Up
   4166  f922
   4167  f922		       a9 09		      LDA	#_P_Edge_Top
   4168  f924		       c5 86		      CMP	player1y
   4169  f926		       90 03		      BCC	.skipL0171
   4170  f928				   .condpart54
   4171  f928		       4c 8c f9 	      jmp	.__Skip_AI_Up
   4172  f92b
   4173  f92b				   .skipL0171
   4174  f92b				   .
   4175  f92b							;
   4176  f92b
   4177  f92b				   .
   4178  f92b							;
   4179  f92b
   4180  f92b				   .
   4181  f92b							;
   4182  f92b
   4183  f92b				   .
   4184  f92b							;
   4185  f92b
   4186  f92b				   .L0172		;  temp5  =   ( player1x - 10 )  / 4
   4187  f92b
   4188  f92b							; complex statement detected
   4189  f92b		       a5 81		      LDA	player1x
   4190  f92d		       38		      SEC
   4191  f92e		       e9 0a		      SBC	#10
   4192  f930		       4a		      lsr
   4193  f931		       4a		      lsr
   4194  f932		       85 a0		      STA	temp5
   4195  f934				   .
   4196  f934							;
   4197  f934
   4198  f934				   .L0173		;  temp6  =   ( player1y - 9 )  / 8
   4199  f934
   4200  f934							; complex statement detected
   4201  f934		       a5 86		      LDA	player1y
   4202  f936		       38		      SEC
   4203  f937		       e9 09		      SBC	#9
   4204  f939		       4a		      lsr
   4205  f93a		       4a		      lsr
   4206  f93b		       4a		      lsr
   4207  f93c		       85 a1		      STA	temp6
   4208  f93e				   .
   4209  f93e							;
   4210  f93e
   4211  f93e				   .L0174		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Up
   4212  f93e
   4213  f93e		       a5 a0		      LDA	temp5
   4214  f940		       c9 22		      CMP	#34
   4215  f942		       b0 0c		      BCS	.skipL0174
   4216  f944				   .condpart55
   4217  f944		       a5 a0		      LDA	temp5
   4218  f946		       a4 a1		      LDY	temp6
   4219  f948		       20 6b f2 	      jsr	pfread
   4220  f94b		       d0 03		      BNE	.skip55then
   4221  f94d				   .condpart56
   4222  f94d		       4c 8c f9 	      jmp	.__Skip_AI_Up
   4223  f950
   4224  f950				   .skip55then
   4225  f950				   .skipL0174
   4226  f950				   .
   4227  f950							;
   4228  f950
   4229  f950				   .L0175		;  temp4  =   ( player1x - 17 )  / 4
   4230  f950
   4231  f950							; complex statement detected
   4232  f950		       a5 81		      LDA	player1x
   4233  f952		       38		      SEC
   4234  f953		       e9 11		      SBC	#17
   4235  f955		       4a		      lsr
   4236  f956		       4a		      lsr
   4237  f957		       85 9f		      STA	temp4
   4238  f959				   .
   4239  f959							;
   4240  f959
   4241  f959				   .L0176		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Up
   4242  f959
   4243  f959		       a5 9f		      LDA	temp4
   4244  f95b		       c9 22		      CMP	#34
   4245  f95d		       b0 0c		      BCS	.skipL0176
   4246  f95f				   .condpart57
   4247  f95f		       a5 9f		      LDA	temp4
   4248  f961		       a4 a1		      LDY	temp6
   4249  f963		       20 6b f2 	      jsr	pfread
   4250  f966		       d0 03		      BNE	.skip57then
   4251  f968				   .condpart58
   4252  f968		       4c 8c f9 	      jmp	.__Skip_AI_Up
   4253  f96b
   4254  f96b				   .skip57then
   4255  f96b				   .skipL0176
   4256  f96b				   .
   4257  f96b							;
   4258  f96b
   4259  f96b				   .L0177		;  temp3  =  temp5  -	1
   4260  f96b
   4261  f96b		       a5 a0		      LDA	temp5
   4262  f96d		       38		      SEC
   4263  f96e		       e9 01		      SBC	#1
   4264  f970		       85 9e		      STA	temp3
   4265  f972				   .
   4266  f972							;
   4267  f972
   4268  f972				   .L0178		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Up
   4269  f972
   4270  f972		       a5 9e		      LDA	temp3
   4271  f974		       c9 22		      CMP	#34
   4272  f976		       b0 0c		      BCS	.skipL0178
   4273  f978				   .condpart59
   4274  f978		       a5 9e		      LDA	temp3
   4275  f97a		       a4 a1		      LDY	temp6
   4276  f97c		       20 6b f2 	      jsr	pfread
   4277  f97f		       d0 03		      BNE	.skip59then
   4278  f981				   .condpart60
   4279  f981		       4c 8c f9 	      jmp	.__Skip_AI_Up
   4280  f984
   4281  f984				   .skip59then
   4282  f984				   .skipL0178
   4283  f984				   .
   4284  f984							;
   4285  f984
   4286  f984				   .
   4287  f984							;
   4288  f984
   4289  f984				   .
   4290  f984							;
   4291  f984
   4292  f984				   .
   4293  f984							;
   4294  f984
   4295  f984				   .L0179		;  _Bit3_Mino_Moving{3}  =  1
   4296  f984
   4297  f984		       a5 eb		      LDA	_Bit3_Mino_Moving
   4298  f986		       09 08		      ORA	#8
   4299  f988		       85 eb		      STA	_Bit3_Mino_Moving
   4300  f98a				   .L0180		;  player1y  =  player1y  -  1
   4301  f98a
   4302  f98a		       c6 86		      DEC	player1y
   4303  f98c				   .
   4304  f98c							;
   4305  f98c
   4306  f98c				   .__Skip_AI_Up
   4307  f98c							; __Skip_AI_Up
   4308  f98c
   4309  f98c				   .
   4310  f98c							;
   4311  f98c
   4312  f98c				   .
   4313  f98c							;
   4314  f98c
   4315  f98c				   .
   4316  f98c							;
   4317  f98c
   4318  f98c				   .
   4319  f98c							;
   4320  f98c
   4321  f98c				   .
   4322  f98c							;
   4323  f98c
   4324  f98c				   .
   4325  f98c							;
   4326  f98c
   4327  f98c				   .
   4328  f98c							;
   4329  f98c
   4330  f98c				   .
   4331  f98c							;
   4332  f98c
   4333  f98c				   .L0181		;  if player1y  >=  player0y then goto __Skip_AI_Down
   4334  f98c
   4335  f98c		       a5 86		      LDA	player1y
   4336  f98e		       c5 85		      CMP	player0y
   4337  f990		       90 03		      BCC	.skipL0181
   4338  f992				   .condpart61
   4339  f992		       4c 02 fa 	      jmp	.__Skip_AI_Down
   4340  f995
   4341  f995				   .skipL0181
   4342  f995				   .
   4343  f995							;
   4344  f995
   4345  f995				   .
   4346  f995							;
   4347  f995
   4348  f995				   .
   4349  f995							;
   4350  f995
   4351  f995				   .
   4352  f995							;
   4353  f995
   4354  f995				   .L0182		;  _Bit1_P1_Dir_Down{1}  =  1
   4355  f995
   4356  f995		       a5 de		      LDA	_Bit1_P1_Dir_Down
   4357  f997		       09 02		      ORA	#2
   4358  f999		       85 de		      STA	_Bit1_P1_Dir_Down
   4359  f99b				   .
   4360  f99b							;
   4361  f99b
   4362  f99b				   .
   4363  f99b							;
   4364  f99b
   4365  f99b				   .
   4366  f99b							;
   4367  f99b
   4368  f99b				   .
   4369  f99b							;
   4370  f99b
   4371  f99b				   .L0183		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_AI_Down
   4372  f99b
   4373  f99b		       a5 86		      LDA	player1y
   4374  f99d		       c9 58		      CMP	#_P_Edge_Bottom
   4375  f99f		       90 03		      BCC	.skipL0183
   4376  f9a1				   .condpart62
   4377  f9a1		       4c 02 fa 	      jmp	.__Skip_AI_Down
   4378  f9a4
   4379  f9a4				   .skipL0183
   4380  f9a4				   .
   4381  f9a4							;
   4382  f9a4
   4383  f9a4				   .
   4384  f9a4							;
   4385  f9a4
   4386  f9a4				   .
   4387  f9a4							;
   4388  f9a4
   4389  f9a4				   .
   4390  f9a4							;
   4391  f9a4
   4392  f9a4				   .L0184		;  temp5  =   ( player1x - 10 )  / 4
   4393  f9a4
   4394  f9a4							; complex statement detected
   4395  f9a4		       a5 81		      LDA	player1x
   4396  f9a6		       38		      SEC
   4397  f9a7		       e9 0a		      SBC	#10
   4398  f9a9		       4a		      lsr
   4399  f9aa		       4a		      lsr
   4400  f9ab		       85 a0		      STA	temp5
   4401  f9ad				   .
   4402  f9ad							;
   4403  f9ad
   4404  f9ad				   .L0185		;  temp6  =   ( player1y )  / 8
   4405  f9ad
   4406  f9ad							; complex statement detected
   4407  f9ad		       a5 86		      LDA	player1y
   4408  f9af		       4a		      lsr
   4409  f9b0		       4a		      lsr
   4410  f9b1		       4a		      lsr
   4411  f9b2		       85 a1		      STA	temp6
   4412  f9b4				   .
   4413  f9b4							;
   4414  f9b4
   4415  f9b4				   .L0186		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Down
   4416  f9b4
   4417  f9b4		       a5 a0		      LDA	temp5
   4418  f9b6		       c9 22		      CMP	#34
   4419  f9b8		       b0 0c		      BCS	.skipL0186
   4420  f9ba				   .condpart63
   4421  f9ba		       a5 a0		      LDA	temp5
   4422  f9bc		       a4 a1		      LDY	temp6
   4423  f9be		       20 6b f2 	      jsr	pfread
   4424  f9c1		       d0 03		      BNE	.skip63then
   4425  f9c3				   .condpart64
   4426  f9c3		       4c 02 fa 	      jmp	.__Skip_AI_Down
   4427  f9c6
   4428  f9c6				   .skip63then
   4429  f9c6				   .skipL0186
   4430  f9c6				   .
   4431  f9c6							;
   4432  f9c6
   4433  f9c6				   .L0187		;  temp4  =   ( player1x - 17 )  / 4
   4434  f9c6
   4435  f9c6							; complex statement detected
   4436  f9c6		       a5 81		      LDA	player1x
   4437  f9c8		       38		      SEC
   4438  f9c9		       e9 11		      SBC	#17
   4439  f9cb		       4a		      lsr
   4440  f9cc		       4a		      lsr
   4441  f9cd		       85 9f		      STA	temp4
   4442  f9cf				   .
   4443  f9cf							;
   4444  f9cf
   4445  f9cf				   .L0188		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Down
   4446  f9cf
   4447  f9cf		       a5 9f		      LDA	temp4
   4448  f9d1		       c9 22		      CMP	#34
   4449  f9d3		       b0 0c		      BCS	.skipL0188
   4450  f9d5				   .condpart65
   4451  f9d5		       a5 9f		      LDA	temp4
   4452  f9d7		       a4 a1		      LDY	temp6
   4453  f9d9		       20 6b f2 	      jsr	pfread
   4454  f9dc		       d0 03		      BNE	.skip65then
   4455  f9de				   .condpart66
   4456  f9de		       4c 02 fa 	      jmp	.__Skip_AI_Down
   4457  f9e1
   4458  f9e1				   .skip65then
   4459  f9e1				   .skipL0188
   4460  f9e1				   .
   4461  f9e1							;
   4462  f9e1
   4463  f9e1				   .L0189		;  temp3  =  temp5  -	1
   4464  f9e1
   4465  f9e1		       a5 a0		      LDA	temp5
   4466  f9e3		       38		      SEC
   4467  f9e4		       e9 01		      SBC	#1
   4468  f9e6		       85 9e		      STA	temp3
   4469  f9e8				   .
   4470  f9e8							;
   4471  f9e8
   4472  f9e8				   .L0190		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Down
   4473  f9e8
   4474  f9e8		       a5 9e		      LDA	temp3
   4475  f9ea		       c9 22		      CMP	#34
   4476  f9ec		       b0 0c		      BCS	.skipL0190
   4477  f9ee				   .condpart67
   4478  f9ee		       a5 9e		      LDA	temp3
   4479  f9f0		       a4 a1		      LDY	temp6
   4480  f9f2		       20 6b f2 	      jsr	pfread
   4481  f9f5		       d0 03		      BNE	.skip67then
   4482  f9f7				   .condpart68
   4483  f9f7		       4c 02 fa 	      jmp	.__Skip_AI_Down
   4484  f9fa
   4485  f9fa				   .skip67then
   4486  f9fa				   .skipL0190
   4487  f9fa				   .
   4488  f9fa							;
   4489  f9fa
   4490  f9fa				   .
   4491  f9fa							;
   4492  f9fa
   4493  f9fa				   .
   4494  f9fa							;
   4495  f9fa
   4496  f9fa				   .
   4497  f9fa							;
   4498  f9fa
   4499  f9fa				   .L0191		;  _Bit3_Mino_Moving{3}  =  1
   4500  f9fa
   4501  f9fa		       a5 eb		      LDA	_Bit3_Mino_Moving
   4502  f9fc		       09 08		      ORA	#8
   4503  f9fe		       85 eb		      STA	_Bit3_Mino_Moving
   4504  fa00				   .L0192		;  player1y  =  player1y  +  1
   4505  fa00
   4506  fa00		       e6 86		      INC	player1y
   4507  fa02				   .
   4508  fa02							;
   4509  fa02
   4510  fa02				   .__Skip_AI_Down
   4511  fa02							; __Skip_AI_Down
   4512  fa02
   4513  fa02				   .
   4514  fa02							;
   4515  fa02
   4516  fa02				   .
   4517  fa02							;
   4518  fa02
   4519  fa02				   .
   4520  fa02							;
   4521  fa02
   4522  fa02				   .
   4523  fa02							;
   4524  fa02
   4525  fa02				   .
   4526  fa02							;
   4527  fa02
   4528  fa02				   .
   4529  fa02							;
   4530  fa02
   4531  fa02				   .
   4532  fa02							;
   4533  fa02
   4534  fa02				   .
   4535  fa02							;
   4536  fa02
   4537  fa02				   .
   4538  fa02							;
   4539  fa02
   4540  fa02				   .L0193		;  if player1x  <=  player0x then goto __Skip_AI_Left
   4541  fa02
   4542  fa02		       a5 80		      LDA	player0x
   4543  fa04		       c5 81		      CMP	player1x
   4544  fa06		       90 03		      BCC	.skipL0193
   4545  fa08				   .condpart69
   4546  fa08		       4c 63 fa 	      jmp	.__Skip_AI_Left
   4547  fa0b
   4548  fa0b				   .skipL0193
   4549  fa0b				   .
   4550  fa0b							;
   4551  fa0b
   4552  fa0b				   .
   4553  fa0b							;
   4554  fa0b
   4555  fa0b				   .
   4556  fa0b							;
   4557  fa0b
   4558  fa0b				   .
   4559  fa0b							;
   4560  fa0b
   4561  fa0b				   .L0194		;  _Bit2_P1_Dir_Left{2}  =  1
   4562  fa0b
   4563  fa0b		       a5 de		      LDA	_Bit2_P1_Dir_Left
   4564  fa0d		       09 04		      ORA	#4
   4565  fa0f		       85 de		      STA	_Bit2_P1_Dir_Left
   4566  fa11				   .
   4567  fa11							;
   4568  fa11
   4569  fa11				   .
   4570  fa11							;
   4571  fa11
   4572  fa11				   .
   4573  fa11							;
   4574  fa11
   4575  fa11				   .
   4576  fa11							;
   4577  fa11
   4578  fa11				   .L0195		;  if player1x  <=  _P_Edge_Left then goto __Skip_AI_Left
   4579  fa11
   4580  fa11		       a9 01		      LDA	#_P_Edge_Left
   4581  fa13		       c5 81		      CMP	player1x
   4582  fa15		       90 03		      BCC	.skipL0195
   4583  fa17				   .condpart70
   4584  fa17		       4c 63 fa 	      jmp	.__Skip_AI_Left
   4585  fa1a
   4586  fa1a				   .skipL0195
   4587  fa1a				   .
   4588  fa1a							;
   4589  fa1a
   4590  fa1a				   .
   4591  fa1a							;
   4592  fa1a
   4593  fa1a				   .
   4594  fa1a							;
   4595  fa1a
   4596  fa1a				   .
   4597  fa1a							;
   4598  fa1a
   4599  fa1a				   .L0196		;  temp5  =   ( player1y - 1 )  / 8
   4600  fa1a
   4601  fa1a							; complex statement detected
   4602  fa1a		       a5 86		      LDA	player1y
   4603  fa1c		       38		      SEC
   4604  fa1d		       e9 01		      SBC	#1
   4605  fa1f		       4a		      lsr
   4606  fa20		       4a		      lsr
   4607  fa21		       4a		      lsr
   4608  fa22		       85 a0		      STA	temp5
   4609  fa24				   .
   4610  fa24							;
   4611  fa24
   4612  fa24				   .L0197		;  temp6  =   ( player1x - 18 )  / 4
   4613  fa24
   4614  fa24							; complex statement detected
   4615  fa24		       a5 81		      LDA	player1x
   4616  fa26		       38		      SEC
   4617  fa27		       e9 12		      SBC	#18
   4618  fa29		       4a		      lsr
   4619  fa2a		       4a		      lsr
   4620  fa2b		       85 a1		      STA	temp6
   4621  fa2d				   .
   4622  fa2d							;
   4623  fa2d
   4624  fa2d				   .L0198		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Left
   4625  fa2d
   4626  fa2d		       a5 a1		      LDA	temp6
   4627  fa2f		       c9 22		      CMP	#34
   4628  fa31		       b0 0c		      BCS	.skipL0198
   4629  fa33				   .condpart71
   4630  fa33		       a5 a1		      LDA	temp6
   4631  fa35		       a4 a0		      LDY	temp5
   4632  fa37		       20 6b f2 	      jsr	pfread
   4633  fa3a		       d0 03		      BNE	.skip71then
   4634  fa3c				   .condpart72
   4635  fa3c		       4c 63 fa 	      jmp	.__Skip_AI_Left
   4636  fa3f
   4637  fa3f				   .skip71then
   4638  fa3f				   .skipL0198
   4639  fa3f				   .
   4640  fa3f							;
   4641  fa3f
   4642  fa3f				   .L0199		;  temp3  =   ( player1y - 8 )  / 8
   4643  fa3f
   4644  fa3f							; complex statement detected
   4645  fa3f		       a5 86		      LDA	player1y
   4646  fa41		       38		      SEC
   4647  fa42		       e9 08		      SBC	#8
   4648  fa44		       4a		      lsr
   4649  fa45		       4a		      lsr
   4650  fa46		       4a		      lsr
   4651  fa47		       85 9e		      STA	temp3
   4652  fa49				   .
   4653  fa49							;
   4654  fa49
   4655  fa49				   .L0200		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Left
   4656  fa49
   4657  fa49		       a5 a1		      LDA	temp6
   4658  fa4b		       c9 22		      CMP	#34
   4659  fa4d		       b0 0c		      BCS	.skipL0200
   4660  fa4f				   .condpart73
   4661  fa4f		       a5 a1		      LDA	temp6
   4662  fa51		       a4 9e		      LDY	temp3
   4663  fa53		       20 6b f2 	      jsr	pfread
   4664  fa56		       d0 03		      BNE	.skip73then
   4665  fa58				   .condpart74
   4666  fa58		       4c 63 fa 	      jmp	.__Skip_AI_Left
   4667  fa5b
   4668  fa5b				   .skip73then
   4669  fa5b				   .skipL0200
   4670  fa5b				   .
   4671  fa5b							;
   4672  fa5b
   4673  fa5b				   .
   4674  fa5b							;
   4675  fa5b
   4676  fa5b				   .
   4677  fa5b							;
   4678  fa5b
   4679  fa5b				   .
   4680  fa5b							;
   4681  fa5b
   4682  fa5b				   .
   4683  fa5b							;
   4684  fa5b
   4685  fa5b				   .L0201		;  _Bit3_Mino_Moving{3}  =  1
   4686  fa5b
   4687  fa5b		       a5 eb		      LDA	_Bit3_Mino_Moving
   4688  fa5d		       09 08		      ORA	#8
   4689  fa5f		       85 eb		      STA	_Bit3_Mino_Moving
   4690  fa61				   .L0202		;  player1x  =  player1x  -  1
   4691  fa61
   4692  fa61		       c6 81		      DEC	player1x
   4693  fa63				   .
   4694  fa63							;
   4695  fa63
   4696  fa63				   .__Skip_AI_Left
   4697  fa63							; __Skip_AI_Left
   4698  fa63
   4699  fa63				   .
   4700  fa63							;
   4701  fa63
   4702  fa63				   .
   4703  fa63							;
   4704  fa63
   4705  fa63				   .
   4706  fa63							;
   4707  fa63
   4708  fa63				   .
   4709  fa63							;
   4710  fa63
   4711  fa63				   .
   4712  fa63							;
   4713  fa63
   4714  fa63				   .
   4715  fa63							;
   4716  fa63
   4717  fa63				   .
   4718  fa63							;
   4719  fa63
   4720  fa63				   .
   4721  fa63							;
   4722  fa63
   4723  fa63				   .
   4724  fa63							;
   4725  fa63
   4726  fa63				   .L0203		;  if player1x  >=  player0x then goto __Skip_AI_Right
   4727  fa63
   4728  fa63		       a5 81		      LDA	player1x
   4729  fa65		       c5 80		      CMP	player0x
   4730  fa67		       90 03		      BCC	.skipL0203
   4731  fa69				   .condpart75
   4732  fa69		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4733  fa6c
   4734  fa6c				   .skipL0203
   4735  fa6c				   .
   4736  fa6c							;
   4737  fa6c
   4738  fa6c				   .
   4739  fa6c							;
   4740  fa6c
   4741  fa6c				   .
   4742  fa6c							;
   4743  fa6c
   4744  fa6c				   .
   4745  fa6c							;
   4746  fa6c
   4747  fa6c				   .L0204		;  _Bit3_P1_Dir_Right{3}  =  1
   4748  fa6c
   4749  fa6c		       a5 de		      LDA	_Bit3_P1_Dir_Right
   4750  fa6e		       09 08		      ORA	#8
   4751  fa70		       85 de		      STA	_Bit3_P1_Dir_Right
   4752  fa72				   .
   4753  fa72							;
   4754  fa72
   4755  fa72				   .
   4756  fa72							;
   4757  fa72
   4758  fa72				   .
   4759  fa72							;
   4760  fa72
   4761  fa72				   .
   4762  fa72							;
   4763  fa72
   4764  fa72				   .L0205		;  if player1x  >=  _P_Edge_Right then goto __Skip_AI_Right
   4765  fa72
   4766  fa72		       a5 81		      LDA	player1x
   4767  fa74		       c9 99		      CMP	#_P_Edge_Right
   4768  fa76		       90 03		      BCC	.skipL0205
   4769  fa78				   .condpart76
   4770  fa78		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4771  fa7b
   4772  fa7b				   .skipL0205
   4773  fa7b				   .
   4774  fa7b							;
   4775  fa7b
   4776  fa7b				   .
   4777  fa7b							;
   4778  fa7b
   4779  fa7b				   .
   4780  fa7b							;
   4781  fa7b
   4782  fa7b				   .
   4783  fa7b							;
   4784  fa7b
   4785  fa7b				   .L0206		;  temp5  =   ( player1y - 1 )  / 8
   4786  fa7b
   4787  fa7b							; complex statement detected
   4788  fa7b		       a5 86		      LDA	player1y
   4789  fa7d		       38		      SEC
   4790  fa7e		       e9 01		      SBC	#1
   4791  fa80		       4a		      lsr
   4792  fa81		       4a		      lsr
   4793  fa82		       4a		      lsr
   4794  fa83		       85 a0		      STA	temp5
   4795  fa85				   .
   4796  fa85							;
   4797  fa85
   4798  fa85				   .L0207		;  temp6  =   ( player1x - 9 )  / 4
   4799  fa85
   4800  fa85							; complex statement detected
   4801  fa85		       a5 81		      LDA	player1x
   4802  fa87		       38		      SEC
   4803  fa88		       e9 09		      SBC	#9
   4804  fa8a		       4a		      lsr
   4805  fa8b		       4a		      lsr
   4806  fa8c		       85 a1		      STA	temp6
   4807  fa8e				   .
   4808  fa8e							;
   4809  fa8e
   4810  fa8e				   .L0208		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Right
   4811  fa8e
   4812  fa8e		       a5 a1		      LDA	temp6
   4813  fa90		       c9 22		      CMP	#34
   4814  fa92		       b0 0c		      BCS	.skipL0208
   4815  fa94				   .condpart77
   4816  fa94		       a5 a1		      LDA	temp6
   4817  fa96		       a4 a0		      LDY	temp5
   4818  fa98		       20 6b f2 	      jsr	pfread
   4819  fa9b		       d0 03		      BNE	.skip77then
   4820  fa9d				   .condpart78
   4821  fa9d		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4822  faa0
   4823  faa0				   .skip77then
   4824  faa0				   .skipL0208
   4825  faa0				   .
   4826  faa0							;
   4827  faa0
   4828  faa0				   .L0209		;  temp3  =   ( player1y - 8 )  / 8
   4829  faa0
   4830  faa0							; complex statement detected
   4831  faa0		       a5 86		      LDA	player1y
   4832  faa2		       38		      SEC
   4833  faa3		       e9 08		      SBC	#8
   4834  faa5		       4a		      lsr
   4835  faa6		       4a		      lsr
   4836  faa7		       4a		      lsr
   4837  faa8		       85 9e		      STA	temp3
   4838  faaa				   .
   4839  faaa							;
   4840  faaa
   4841  faaa				   .L0210		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Right
   4842  faaa
   4843  faaa		       a5 a1		      LDA	temp6
   4844  faac		       c9 22		      CMP	#34
   4845  faae		       b0 0c		      BCS	.skipL0210
   4846  fab0				   .condpart79
   4847  fab0		       a5 a1		      LDA	temp6
   4848  fab2		       a4 9e		      LDY	temp3
   4849  fab4		       20 6b f2 	      jsr	pfread
   4850  fab7		       d0 03		      BNE	.skip79then
   4851  fab9				   .condpart80
   4852  fab9		       4c c4 fa 	      jmp	.__Skip_AI_Right
   4853  fabc
   4854  fabc				   .skip79then
   4855  fabc				   .skipL0210
   4856  fabc				   .
   4857  fabc							;
   4858  fabc
   4859  fabc				   .
   4860  fabc							;
   4861  fabc
   4862  fabc				   .
   4863  fabc							;
   4864  fabc
   4865  fabc				   .
   4866  fabc							;
   4867  fabc
   4868  fabc				   .L0211		;  _Bit3_Mino_Moving{3}  =  1
   4869  fabc
   4870  fabc		       a5 eb		      LDA	_Bit3_Mino_Moving
   4871  fabe		       09 08		      ORA	#8
   4872  fac0		       85 eb		      STA	_Bit3_Mino_Moving
   4873  fac2				   .L0212		;  player1x  =  player1x  +  1
   4874  fac2
   4875  fac2		       e6 81		      INC	player1x
   4876  fac4				   .
   4877  fac4							;
   4878  fac4
   4879  fac4				   .__Skip_AI_Right
   4880  fac4							; __Skip_AI_Right
   4881  fac4
   4882  fac4				   .
   4883  fac4							;
   4884  fac4
   4885  fac4				   .
   4886  fac4							;
   4887  fac4
   4888  fac4				   .
   4889  fac4							;
   4890  fac4
   4891  fac4				   .
   4892  fac4							;
   4893  fac4
   4894  fac4				   .
   4895  fac4							;
   4896  fac4
   4897  fac4				   .L0213		;  if !collision(missile0,player0) then __Skip_Gem_Collection
   4898  fac4
   4899  fac4		       24 00		      bit	CXM0P
   4900  fac6					      if	((* - .__Skip_Gem_Collection) < 127) && ((* - .__Skip_Gem_Collection) > -128)
   4901  fac6		       50 0c		      bvc	.__Skip_Gem_Collection
   4902  fac8				  -	      else
   4903  fac8				  -	      bvs	.4skip__Skip_Gem_Collection
   4904  fac8				  -	      jmp	.__Skip_Gem_Collection
   4905  fac8				  -.4skip__Skip_Gem_Collection
   4906  fac8					      endif
   4907  fac8				   .L0214		;  _Bit0_Carrying_Gem{0}  =  1
   4908  fac8
   4909  fac8		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4910  faca		       09 01		      ORA	#1
   4911  facc		       85 eb		      STA	_Bit0_Carrying_Gem
   4912  face				   .L0215		;  missile0x  =  200  :  missile0y  =	200
   4913  face
   4914  face		       a9 c8		      LDA	#200
   4915  fad0		       85 82		      STA	missile0x
   4916  fad2		       85 91		      STA	missile0y
   4917  fad4				   .__Skip_Gem_Collection
   4918  fad4							; __Skip_Gem_Collection
   4919  fad4
   4920  fad4				   .
   4921  fad4							;
   4922  fad4
   4923  fad4				   .
   4924  fad4							;
   4925  fad4
   4926  fad4				   .
   4927  fad4							;
   4928  fad4
   4929  fad4				   .
   4930  fad4							;
   4931  fad4
   4932  fad4				   .L0216		;  if !collision(missile1,player0) then __Skip_Gem_Deposit
   4933  fad4
   4934  fad4		       24 01		      bit	CXM1P
   4935  fad6					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   4936  fad6		       10 34		      bpl	.__Skip_Gem_Deposit
   4937  fad8				  -	      else
   4938  fad8				  -	      bmi	.5skip__Skip_Gem_Deposit
   4939  fad8				  -	      jmp	.__Skip_Gem_Deposit
   4940  fad8				  -.5skip__Skip_Gem_Deposit
   4941  fad8					      endif
   4942  fad8				   .L0217		;  if !_Bit0_Carrying_Gem{0} then __Skip_Gem_Deposit
   4943  fad8
   4944  fad8		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4945  fada		       4a		      LSR
   4946  fadb					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   4947  fadb		       90 2f		      bcc	.__Skip_Gem_Deposit
   4948  fadd				  -	      else
   4949  fadd				  -	      bcs	.6skip__Skip_Gem_Deposit
   4950  fadd				  -	      jmp	.__Skip_Gem_Deposit
   4951  fadd				  -.6skip__Skip_Gem_Deposit
   4952  fadd					      endif
   4953  fadd				   .L0218		;  _Bit0_Carrying_Gem{0}  =  0
   4954  fadd
   4955  fadd		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4956  fadf		       29 fe		      AND	#254
   4957  fae1		       85 eb		      STA	_Bit0_Carrying_Gem
   4958  fae3				   .L0219		;  score  =  score  +	1
   4959  fae3
   4960  fae3		       f8		      SED
   4961  fae4		       18		      CLC
   4962  fae5		       a5 95		      LDA	score+2
   4963  fae7		       69 01		      ADC	#$01
   4964  fae9		       85 95		      STA	score+2
   4965  faeb		       a5 94		      LDA	score+1
   4966  faed		       69 00		      ADC	#$00
   4967  faef		       85 94		      STA	score+1
   4968  faf1		       a5 93		      LDA	score
   4969  faf3		       69 00		      ADC	#$00
   4970  faf5		       85 93		      STA	score
   4971  faf7		       d8		      CLD
   4972  faf8				   .L0220		;  missile0x  =   ( rand  &  118 )   +  23  :	missile0y  =   ( rand  &  70 )	 +  9
   4973  faf8
   4974  faf8							; complex statement detected
   4975  faf8		       20 b3 f3 	      jsr	randomize
   4976  fafb		       29 76		      AND	#118
   4977  fafd		       18		      CLC
   4978  fafe		       69 17		      ADC	#23
   4979  fb00		       85 82		      STA	missile0x
   4980  fb02							; complex statement detected
   4981  fb02		       20 b3 f3 	      jsr	randomize
   4982  fb05		       29 46		      AND	#70
   4983  fb07		       18		      CLC
   4984  fb08		       69 09		      ADC	#9
   4985  fb0a		       85 91		      STA	missile0y
   4986  fb0c				   .__Skip_Gem_Deposit
   4987  fb0c							; __Skip_Gem_Deposit
   4988  fb0c
   4989  fb0c				   .
   4990  fb0c							;
   4991  fb0c
   4992  fb0c				   .__Game_Over
   4993  fb0c							; __Game_Over
   4994  fb0c
   4995  fb0c				   .L0221		;  if !_Bit1_Game_Over{1} then goto __Skip_Game_Over
   4996  fb0c
   4997  fb0c		       a5 eb		      LDA	_Bit1_Game_Over
   4998  fb0e		       29 02		      AND	#2
   4999  fb10		       d0 03		      BNE	.skipL0221
   5000  fb12				   .condpart81
   5001  fb12		       4c 72 fb 	      jmp	.__Skip_Game_Over
   5002  fb15
   5003  fb15				   .skipL0221
   5004  fb15				   .L0222		;  COLUPF  =  14
   5005  fb15
   5006  fb15		       a9 0e		      LDA	#14
   5007  fb17		       85 08		      STA	COLUPF
   5008  fb19				   .L0223		;  scorecolor	=  14
   5009  fb19
   5010  fb19		       a9 0e		      LDA	#14
   5011  fb1b		       85 a3		      STA	scorecolor
   5012  fb1d				   .L0224		;  COLUBK  =  $36
   5013  fb1d
   5014  fb1d		       a9 36		      LDA	#$36
   5015  fb1f		       85 09		      STA	COLUBK
   5016  fb21				   .L0225		;  playfield:
   5017  fb21
   5018  fb21				  -	      ifconst	pfres
   5019  fb21				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5020  fb21					      else
   5021  fb21		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5022  fb23					      endif
   5023  fb23		       4c 52 fb 	      jmp	pflabel2
   5024  fb26				   PF_data2
   5025  fb26		       0f 79		      .byte.b	%00001111, %01111001
   5026  fb28					      if	(pfwidth>2)
   5027  fb28		       6c 0f		      .byte.b	%01101100, %00001111
   5028  fb2a					      endif
   5029  fb2a		       08 48		      .byte.b	%00001000, %01001000
   5030  fb2c					      if	(pfwidth>2)
   5031  fb2c		       54 01		      .byte.b	%01010100, %00000001
   5032  fb2e					      endif
   5033  fb2e		       09 79		      .byte.b	%00001001, %01111001
   5034  fb30					      if	(pfwidth>2)
   5035  fb30		       54 07		      .byte.b	%01010100, %00000111
   5036  fb32					      endif
   5037  fb32		       08 49		      .byte.b	%00001000, %01001001
   5038  fb34					      if	(pfwidth>2)
   5039  fb34		       54 01		      .byte.b	%01010100, %00000001
   5040  fb36					      endif
   5041  fb36		       0b 49		      .byte.b	%00001011, %01001001
   5042  fb38					      if	(pfwidth>2)
   5043  fb38		       54 0f		      .byte.b	%01010100, %00001111
   5044  fb3a					      endif
   5045  fb3a		       00 00		      .byte.b	%00000000, %00000000
   5046  fb3c					      if	(pfwidth>2)
   5047  fb3c		       00 00		      .byte.b	%00000000, %00000000
   5048  fb3e					      endif
   5049  fb3e		       0f 89		      .byte.b	%00001111, %10001001
   5050  fb40					      if	(pfwidth>2)
   5051  fb40		       3c 07		      .byte.b	%00111100, %00000111
   5052  fb42					      endif
   5053  fb42		       08 89		      .byte.b	%00001000, %10001001
   5054  fb44					      if	(pfwidth>2)
   5055  fb44		       20 09		      .byte.b	%00100000, %00001001
   5056  fb46					      endif
   5057  fb46		       08 89		      .byte.b	%00001000, %10001001
   5058  fb48					      if	(pfwidth>2)
   5059  fb48		       38 07		      .byte.b	%00111000, %00000111
   5060  fb4a					      endif
   5061  fb4a		       08 51		      .byte.b	%00001000, %01010001
   5062  fb4c					      if	(pfwidth>2)
   5063  fb4c		       20 09		      .byte.b	%00100000, %00001001
   5064  fb4e					      endif
   5065  fb4e		       0f 21		      .byte.b	%00001111, %00100001
   5066  fb50					      if	(pfwidth>2)
   5067  fb50		       3c 09		      .byte.b	%00111100, %00001001
   5068  fb52					      endif
   5069  fb52				   pflabel2
   5070  fb52		       bd 26 fb 	      lda	PF_data2,x
   5071  fb55		       95 a4		      sta	playfield,x
   5072  fb57		       ca		      dex
   5073  fb58		       10 f8		      bpl	pflabel2
   5074  fb5a				   .
   5075  fb5a							;
   5076  fb5a
   5077  fb5a				   .L0226		;  player0x  =  200  :  player0y  =  200
   5078  fb5a
   5079  fb5a		       a9 c8		      LDA	#200
   5080  fb5c		       85 80		      STA	player0x
   5081  fb5e		       85 85		      STA	player0y
   5082  fb60				   .L0227		;  player1x  =  200  :  player1y  =  200
   5083  fb60
   5084  fb60		       a9 c8		      LDA	#200
   5085  fb62		       85 81		      STA	player1x
   5086  fb64		       85 86		      STA	player1y
   5087  fb66				   .L0228		;  missile0x  =  200  :  missile0y  =	200
   5088  fb66
   5089  fb66		       a9 c8		      LDA	#200
   5090  fb68		       85 82		      STA	missile0x
   5091  fb6a		       85 91		      STA	missile0y
   5092  fb6c				   .L0229		;  missile1x  =  200  :  missile1y  =	200
   5093  fb6c
   5094  fb6c		       a9 c8		      LDA	#200
   5095  fb6e		       85 83		      STA	missile1x
   5096  fb70		       85 88		      STA	missile1y
   5097  fb72				   .__Skip_Game_Over
   5098  fb72							; __Skip_Game_Over
   5099  fb72
   5100  fb72				   .
   5101  fb72							;
   5102  fb72
   5103  fb72				   .
   5104  fb72							;
   5105  fb72
   5106  fb72				   .
   5107  fb72							;
   5108  fb72
   5109  fb72				   .
   5110  fb72							;
   5111  fb72
   5112  fb72				   .
   5113  fb72							;
   5114  fb72
   5115  fb72				   .L0230		;  drawscreen
   5116  fb72
   5117  fb72		       20 c1 f3 	      jsr	drawscreen
   5118  fb75				   .
   5119  fb75							;
   5120  fb75
   5121  fb75				   .
   5122  fb75							;
   5123  fb75
   5124  fb75				   .
   5125  fb75							;
   5126  fb75
   5127  fb75				   .
   5128  fb75							;
   5129  fb75
   5130  fb75				   .
   5131  fb75							;
   5132  fb75
   5133  fb75				   .
   5134  fb75							;
   5135  fb75
   5136  fb75				   .
   5137  fb75							;
   5138  fb75
   5139  fb75				   .
   5140  fb75							;
   5141  fb75
   5142  fb75				   .
   5143  fb75							;
   5144  fb75
   5145  fb75				   .
   5146  fb75							;
   5147  fb75
   5148  fb75				   .
   5149  fb75							;
   5150  fb75
   5151  fb75				   .
   5152  fb75							;
   5153  fb75
   5154  fb75				   .
   5155  fb75							;
   5156  fb75
   5157  fb75				   .
   5158  fb75							;
   5159  fb75
   5160  fb75				   .
   5161  fb75							;
   5162  fb75
   5163  fb75				   .L0231		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5164  fb75
   5165  fb75		       a9 01		      lda	#1
   5166  fb77		       2c 82 02 	      bit	SWCHB
   5167  fb7a		       f0 09		      BEQ	.skipL0231
   5168  fb7c				   .condpart82
   5169  fb7c		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5170  fb7e		       29 fe		      AND	#254
   5171  fb80		       85 ec		      STA	_Bit0_Reset_Restrainer
   5172  fb82		       4c da f5 	      jmp	.__Main_Loop
   5173  fb85
   5174  fb85				   .skipL0231
   5175  fb85				   .
   5176  fb85							;
   5177  fb85
   5178  fb85				   .
   5179  fb85							;
   5180  fb85
   5181  fb85				   .
   5182  fb85							;
   5183  fb85
   5184  fb85				   .
   5185  fb85							;
   5186  fb85
   5187  fb85				   .
   5188  fb85							;
   5189  fb85
   5190  fb85				   .L0232		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5191  fb85
   5192  fb85		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5193  fb87		       4a		      LSR
   5194  fb88		       90 03		      BCC	.skipL0232
   5195  fb8a				   .condpart83
   5196  fb8a		       4c da f5 	      jmp	.__Main_Loop
   5197  fb8d
   5198  fb8d				   .skipL0232
   5199  fb8d				   .
   5200  fb8d							;
   5201  fb8d
   5202  fb8d				   .
   5203  fb8d							;
   5204  fb8d
   5205  fb8d				   .
   5206  fb8d							;
   5207  fb8d
   5208  fb8d				   .
   5209  fb8d							;
   5210  fb8d
   5211  fb8d				   .L0233		;  goto __Start_Restart
   5212  fb8d
   5213  fb8d		       4c 69 f4 	      jmp	.__Start_Restart
   5214  fb90
   5215  fb90				   .
   5216  fb90							;
   5217  fb90
   5218  fb90				   .__Pl00
   5219  fb90							; __Pl00
   5220  fb90
   5221  fb90				   .L0234		;  player0:
   5222  fb90
   5223  fb90		       a2 10		      LDX	#<playerL0234_0
   5224  fb92		       86 8a		      STX	player0pointerlo
   5225  fb94		       a9 fc		      LDA	#>playerL0234_0
   5226  fb96		       85 8b		      STA	player0pointerhi
   5227  fb98		       a9 07		      LDA	#7
   5228  fb9a		       85 8e		      STA	player0height
   5229  fb9c				   .L0235		;  goto __Pl_Frame_Done
   5230  fb9c
   5231  fb9c		       4c 27 f6 	      jmp	.__Pl_Frame_Done
   5232  fb9f
   5233  fb9f				   .__Pl01
   5234  fb9f							; __Pl01
   5235  fb9f
   5236  fb9f				   .L0236		;  player0:
   5237  fb9f
   5238  fb9f		       a2 18		      LDX	#<playerL0236_0
   5239  fba1		       86 8a		      STX	player0pointerlo
   5240  fba3		       a9 fc		      LDA	#>playerL0236_0
   5241  fba5		       85 8b		      STA	player0pointerhi
   5242  fba7		       a9 07		      LDA	#7
   5243  fba9		       85 8e		      STA	player0height
   5244  fbab				   .L0237		;  goto __Pl_Frame_Done
   5245  fbab
   5246  fbab		       4c 27 f6 	      jmp	.__Pl_Frame_Done
   5247  fbae
   5248  fbae				   .__Pl02
   5249  fbae							; __Pl02
   5250  fbae
   5251  fbae				   .L0238		;  player0:
   5252  fbae
   5253  fbae		       a2 20		      LDX	#<playerL0238_0
   5254  fbb0		       86 8a		      STX	player0pointerlo
   5255  fbb2		       a9 fc		      LDA	#>playerL0238_0
   5256  fbb4		       85 8b		      STA	player0pointerhi
   5257  fbb6		       a9 07		      LDA	#7
   5258  fbb8		       85 8e		      STA	player0height
   5259  fbba				   .L0239		;  goto __Pl_Frame_Done
   5260  fbba
   5261  fbba		       4c 27 f6 	      jmp	.__Pl_Frame_Done
   5262  fbbd
   5263  fbbd				   .
   5264  fbbd							;
   5265  fbbd
   5266  fbbd				   .__Mn00
   5267  fbbd							; __Mn00
   5268  fbbd
   5269  fbbd				   .L0240		;  player1:
   5270  fbbd
   5271  fbbd		       a2 28		      LDX	#<playerL0240_1
   5272  fbbf		       86 8c		      STX	player1pointerlo
   5273  fbc1		       a9 fc		      LDA	#>playerL0240_1
   5274  fbc3		       85 8d		      STA	player1pointerhi
   5275  fbc5		       a9 07		      LDA	#7
   5276  fbc7		       85 8f		      STA	player1height
   5277  fbc9				   .L0241		;  goto __Mn_Frame_Done
   5278  fbc9
   5279  fbc9		       4c 4c f6 	      jmp	.__Mn_Frame_Done
   5280  fbcc
   5281  fbcc				   .__Mn01
   5282  fbcc							; __Mn01
   5283  fbcc
   5284  fbcc				   .L0242		;  player1:
   5285  fbcc
   5286  fbcc		       a2 30		      LDX	#<playerL0242_1
   5287  fbce		       86 8c		      STX	player1pointerlo
   5288  fbd0		       a9 fc		      LDA	#>playerL0242_1
   5289  fbd2		       85 8d		      STA	player1pointerhi
   5290  fbd4		       a9 07		      LDA	#7
   5291  fbd6		       85 8f		      STA	player1height
   5292  fbd8				   .L0243		;  goto __Mn_Frame_Done
   5293  fbd8
   5294  fbd8		       4c 4c f6 	      jmp	.__Mn_Frame_Done
   5295  fbdb
   5296  fbdb				   .__Mn02
   5297  fbdb							; __Mn02
   5298  fbdb
   5299  fbdb				   .L0244		;  player1:
   5300  fbdb
   5301  fbdb		       a2 38		      LDX	#<playerL0244_1
   5302  fbdd		       86 8c		      STX	player1pointerlo
   5303  fbdf		       a9 fc		      LDA	#>playerL0244_1
   5304  fbe1		       85 8d		      STA	player1pointerhi
   5305  fbe3		       a9 07		      LDA	#7
   5306  fbe5		       85 8f		      STA	player1height
   5307  fbe7				   .L0245		;  goto __Mn_Frame_Done
   5308  fbe7
   5309  fbe7		       4c 4c f6 	      jmp	.__Mn_Frame_Done
   5310  fbea
   5311  fbea				  -	      if	(<*) > (<(*+7))
   5312  fbea				  -	      repeat	($100-<*)
   5313  fbea				  -	      .byte	0
   5314  fbea				  -	      repend
   5315  fbea					      endif
   5316  fbea				   playerL047_0
   5317  fbea		       66		      .byte.b	%01100110
   5318  fbeb		       24		      .byte.b	%00100100
   5319  fbec		       99		      .byte.b	%10011001
   5320  fbed		       bd		      .byte.b	%10111101
   5321  fbee		       7e		      .byte.b	%01111110
   5322  fbef		       18		      .byte.b	%00011000
   5323  fbf0		       3c		      .byte.b	%00111100
   5324  fbf1		       24		      .byte.b	%00100100
   5325  fbf2				  -	      if	(<*) > (<(*+7))
   5326  fbf2				  -	      repeat	($100-<*)
   5327  fbf2				  -	      .byte	0
   5328  fbf2				  -	      repend
   5329  fbf2					      endif
   5330  fbf2				   playerL048_1
   5331  fbf2		       ff		      .byte.b	%11111111
   5332  fbf3		       00		      .byte.b	%00000000
   5333  fbf4		       ff		      .byte.b	%11111111
   5334  fbf5		       81		      .byte.b	%10000001
   5335  fbf6		       7e		      .byte.b	%01111110
   5336  fbf7		       c3		      .byte.b	%11000011
   5337  fbf8		       3c		      .byte.b	%00111100
   5338  fbf9		       e7		      .byte.b	%11100111
   5339  fbfa					      if	(<*) > (<(*+7))
   5340  fbfa					      repeat	($100-<*)
   5341  fbfa		       00		      .byte.b	0
   5340  fbfa					      repend
   5341  fbfb		       00		      .byte.b	0
   5340  fbfb					      repend
   5341  fbfc		       00		      .byte.b	0
   5340  fbfc					      repend
   5341  fbfd		       00		      .byte.b	0
   5340  fbfd					      repend
   5341  fbfe		       00		      .byte.b	0
   5340  fbfe					      repend
   5341  fbff		       00		      .byte.b	0
   5342  fc00					      repend
   5343  fc00					      endif
   5344  fc00				   playerL091_0
   5345  fc00		       66		      .byte.b	%01100110
   5346  fc01		       24		      .byte.b	%00100100
   5347  fc02		       24		      .byte.b	%00100100
   5348  fc03		       5a		      .byte.b	%01011010
   5349  fc04		       5a		      .byte.b	%01011010
   5350  fc05		       3c		      .byte.b	%00111100
   5351  fc06		       18		      .byte.b	%00011000
   5352  fc07		       18		      .byte.b	%00011000
   5353  fc08				  -	      if	(<*) > (<(*+7))
   5354  fc08				  -	      repeat	($100-<*)
   5355  fc08				  -	      .byte	0
   5356  fc08				  -	      repend
   5357  fc08					      endif
   5358  fc08				   playerL094_1
   5359  fc08		       66		      .byte.b	%01100110
   5360  fc09		       24		      .byte.b	%00100100
   5361  fc0a		       99		      .byte.b	%10011001
   5362  fc0b		       bd		      .byte.b	%10111101
   5363  fc0c		       7e		      .byte.b	%01111110
   5364  fc0d		       18		      .byte.b	%00011000
   5365  fc0e		       3c		      .byte.b	%00111100
   5366  fc0f		       24		      .byte.b	%00100100
   5367  fc10				  -	      if	(<*) > (<(*+7))
   5368  fc10				  -	      repeat	($100-<*)
   5369  fc10				  -	      .byte	0
   5370  fc10				  -	      repend
   5371  fc10					      endif
   5372  fc10				   playerL0234_0
   5373  fc10		       36		      .byte.b	%00110110
   5374  fc11		       24		      .byte.b	%00100100
   5375  fc12		       24		      .byte.b	%00100100
   5376  fc13		       5a		      .byte.b	%01011010
   5377  fc14		       5a		      .byte.b	%01011010
   5378  fc15		       3c		      .byte.b	%00111100
   5379  fc16		       18		      .byte.b	%00011000
   5380  fc17		       18		      .byte.b	%00011000
   5381  fc18				  -	      if	(<*) > (<(*+7))
   5382  fc18				  -	      repeat	($100-<*)
   5383  fc18				  -	      .byte	0
   5384  fc18				  -	      repend
   5385  fc18					      endif
   5386  fc18				   playerL0236_0
   5387  fc18		       30		      .byte.b	%00110000
   5388  fc19		       26		      .byte.b	%00100110
   5389  fc1a		       24		      .byte.b	%00100100
   5390  fc1b		       1a		      .byte.b	%00011010
   5391  fc1c		       5a		      .byte.b	%01011010
   5392  fc1d		       3c		      .byte.b	%00111100
   5393  fc1e		       18		      .byte.b	%00011000
   5394  fc1f		       18		      .byte.b	%00011000
   5395  fc20				  -	      if	(<*) > (<(*+7))
   5396  fc20				  -	      repeat	($100-<*)
   5397  fc20				  -	      .byte	0
   5398  fc20				  -	      repend
   5399  fc20					      endif
   5400  fc20				   playerL0238_0
   5401  fc20		       06		      .byte.b	%00000110
   5402  fc21		       34		      .byte.b	%00110100
   5403  fc22		       24		      .byte.b	%00100100
   5404  fc23		       58		      .byte.b	%01011000
   5405  fc24		       5a		      .byte.b	%01011010
   5406  fc25		       3c		      .byte.b	%00111100
   5407  fc26		       18		      .byte.b	%00011000
   5408  fc27		       18		      .byte.b	%00011000
   5409  fc28				  -	      if	(<*) > (<(*+7))
   5410  fc28				  -	      repeat	($100-<*)
   5411  fc28				  -	      .byte	0
   5412  fc28				  -	      repend
   5413  fc28					      endif
   5414  fc28				   playerL0240_1
   5415  fc28		       36		      .byte.b	%00110110
   5416  fc29		       24		      .byte.b	%00100100
   5417  fc2a		       99		      .byte.b	%10011001
   5418  fc2b		       bd		      .byte.b	%10111101
   5419  fc2c		       7e		      .byte.b	%01111110
   5420  fc2d		       18		      .byte.b	%00011000
   5421  fc2e		       3c		      .byte.b	%00111100
   5422  fc2f		       24		      .byte.b	%00100100
   5423  fc30				  -	      if	(<*) > (<(*+7))
   5424  fc30				  -	      repeat	($100-<*)
   5425  fc30				  -	      .byte	0
   5426  fc30				  -	      repend
   5427  fc30					      endif
   5428  fc30				   playerL0242_1
   5429  fc30		       06		      .byte.b	%00000110
   5430  fc31		       34		      .byte.b	%00110100
   5431  fc32		       19		      .byte.b	%00011001
   5432  fc33		       bd		      .byte.b	%10111101
   5433  fc34		       7e		      .byte.b	%01111110
   5434  fc35		       18		      .byte.b	%00011000
   5435  fc36		       3c		      .byte.b	%00111100
   5436  fc37		       24		      .byte.b	%00100100
   5437  fc38				  -	      if	(<*) > (<(*+7))
   5438  fc38				  -	      repeat	($100-<*)
   5439  fc38				  -	      .byte	0
   5440  fc38				  -	      repend
   5441  fc38					      endif
   5442  fc38				   playerL0244_1
   5443  fc38		       30		      .byte.b	%00110000
   5444  fc39		       26		      .byte.b	%00100110
   5445  fc3a		       98		      .byte.b	%10011000
   5446  fc3b		       bd		      .byte.b	%10111101
   5447  fc3c		       7e		      .byte.b	%01111110
   5448  fc3d		       18		      .byte.b	%00011000
   5449  fc3e		       3c		      .byte.b	%00111100
   5450  fc3f		       24		      .byte.b	%00100100
   5451  fc40					      if	ECHOFIRST
      860 bytes of ROM space left
   5452  fc40					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   5453  fc40					      endif
   5454  fc40		       00 01	   ECHOFIRST  =	1
   5455  fc40
   5456  fc40
   5457  fc40
   5458  fc40							; feel free to modify the score graphics - just keep each digit 8 high
   5459  fc40							; and keep the conditional compilation stuff intact
   5460  fc40				  -	      ifconst	ROM2k
   5461  fc40				  -	      ORG	$F7AC-8
   5462  fc40					      else
   5463  fc40				  -	      ifconst	bankswitch
   5464  fc40				  -	      if	bankswitch == 8
   5465  fc40				  -	      ORG	$2F94-bscode_length
   5466  fc40				  -	      RORG	$FF94-bscode_length
   5467  fc40				  -	      endif
   5468  fc40				  -	      if	bankswitch == 16
   5469  fc40				  -	      ORG	$4F94-bscode_length
   5470  fc40				  -	      RORG	$FF94-bscode_length
   5471  fc40				  -	      endif
   5472  fc40				  -	      if	bankswitch == 32
   5473  fc40				  -	      ORG	$8F94-bscode_length
   5474  fc40				  -	      RORG	$FF94-bscode_length
   5475  fc40				  -	      endif
   5476  fc40				  -	      if	bankswitch == 64
   5477  fc40				  -	      ORG	$10F80-bscode_length
   5478  fc40				  -	      RORG	$1FF80-bscode_length
   5479  fc40				  -	      endif
   5480  fc40					      else
   5481  ff9c					      ORG	$FF9C
   5482  ff9c					      endif
   5483  ff9c					      endif
   5484  ff9c
   5485  ff9c							; font equates
   5486  ff9c		       00 01	   .21stcentury =	1
   5487  ff9c		       00 02	   alarmclock =	2
   5488  ff9c		       00 03	   handwritten =	3
   5489  ff9c		       00 04	   interrupted =	4
   5490  ff9c		       00 05	   retroputer =	5
   5491  ff9c		       00 06	   whimsey    =	6
   5492  ff9c		       00 07	   tiny       =	7
   5493  ff9c
   5494  ff9c				   scoretable
   5495  ff9c
   5496  ff9c				  -	      ifconst	font
   5497  ff9c				  -	      if	font == .21stcentury
   5498  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   5499  ff9c				  -	      endif
   5500  ff9c				  -	      if	font == alarmclock
   5501  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   5502  ff9c				  -	      endif
   5503  ff9c				  -	      if	font == handwritten
   5504  ff9c				  -	      include	"score_graphics.asm.handwritten"
   5505  ff9c				  -	      endif
   5506  ff9c				  -	      if	font == interrupted
   5507  ff9c				  -	      include	"score_graphics.asm.interrupted"
   5508  ff9c				  -	      endif
   5509  ff9c				  -	      if	font == retroputer
   5510  ff9c				  -	      include	"score_graphics.asm.retroputer"
   5511  ff9c				  -	      endif
   5512  ff9c				  -	      if	font == whimsey
   5513  ff9c				  -	      include	"score_graphics.asm.whimsey"
   5514  ff9c				  -	      endif
   5515  ff9c				  -	      if	font == tiny
   5516  ff9c				  -	      include	"score_graphics.asm.tiny"
   5517  ff9c				  -	      endif
   5518  ff9c					      else		; default font
   5519  ff9c
   5520  ff9c		       3c		      .byte.b	%00111100
   5521  ff9d		       66		      .byte.b	%01100110
   5522  ff9e		       66		      .byte.b	%01100110
   5523  ff9f		       66		      .byte.b	%01100110
   5524  ffa0		       66		      .byte.b	%01100110
   5525  ffa1		       66		      .byte.b	%01100110
   5526  ffa2		       66		      .byte.b	%01100110
   5527  ffa3		       3c		      .byte.b	%00111100
   5528  ffa4
   5529  ffa4		       7e		      .byte.b	%01111110
   5530  ffa5		       18		      .byte.b	%00011000
   5531  ffa6		       18		      .byte.b	%00011000
   5532  ffa7		       18		      .byte.b	%00011000
   5533  ffa8		       18		      .byte.b	%00011000
   5534  ffa9		       38		      .byte.b	%00111000
   5535  ffaa		       18		      .byte.b	%00011000
   5536  ffab		       08		      .byte.b	%00001000
   5537  ffac
   5538  ffac		       7e		      .byte.b	%01111110
   5539  ffad		       60		      .byte.b	%01100000
   5540  ffae		       60		      .byte.b	%01100000
   5541  ffaf		       3c		      .byte.b	%00111100
   5542  ffb0		       06		      .byte.b	%00000110
   5543  ffb1		       06		      .byte.b	%00000110
   5544  ffb2		       46		      .byte.b	%01000110
   5545  ffb3		       3c		      .byte.b	%00111100
   5546  ffb4
   5547  ffb4		       3c		      .byte.b	%00111100
   5548  ffb5		       46		      .byte.b	%01000110
   5549  ffb6		       06		      .byte.b	%00000110
   5550  ffb7		       06		      .byte.b	%00000110
   5551  ffb8		       1c		      .byte.b	%00011100
   5552  ffb9		       06		      .byte.b	%00000110
   5553  ffba		       46		      .byte.b	%01000110
   5554  ffbb		       3c		      .byte.b	%00111100
   5555  ffbc
   5556  ffbc		       0c		      .byte.b	%00001100
   5557  ffbd		       0c		      .byte.b	%00001100
   5558  ffbe		       7e		      .byte.b	%01111110
   5559  ffbf		       4c		      .byte.b	%01001100
   5560  ffc0		       4c		      .byte.b	%01001100
   5561  ffc1		       2c		      .byte.b	%00101100
   5562  ffc2		       1c		      .byte.b	%00011100
   5563  ffc3		       0c		      .byte.b	%00001100
   5564  ffc4
   5565  ffc4		       3c		      .byte.b	%00111100
   5566  ffc5		       46		      .byte.b	%01000110
   5567  ffc6		       06		      .byte.b	%00000110
   5568  ffc7		       06		      .byte.b	%00000110
   5569  ffc8		       3c		      .byte.b	%00111100
   5570  ffc9		       60		      .byte.b	%01100000
   5571  ffca		       60		      .byte.b	%01100000
   5572  ffcb		       7e		      .byte.b	%01111110
   5573  ffcc
   5574  ffcc		       3c		      .byte.b	%00111100
   5575  ffcd		       66		      .byte.b	%01100110
   5576  ffce		       66		      .byte.b	%01100110
   5577  ffcf		       66		      .byte.b	%01100110
   5578  ffd0		       7c		      .byte.b	%01111100
   5579  ffd1		       60		      .byte.b	%01100000
   5580  ffd2		       62		      .byte.b	%01100010
   5581  ffd3		       3c		      .byte.b	%00111100
   5582  ffd4
   5583  ffd4		       30		      .byte.b	%00110000
   5584  ffd5		       30		      .byte.b	%00110000
   5585  ffd6		       30		      .byte.b	%00110000
   5586  ffd7		       18		      .byte.b	%00011000
   5587  ffd8		       0c		      .byte.b	%00001100
   5588  ffd9		       06		      .byte.b	%00000110
   5589  ffda		       42		      .byte.b	%01000010
   5590  ffdb		       3e		      .byte.b	%00111110
   5591  ffdc
   5592  ffdc		       3c		      .byte.b	%00111100
   5593  ffdd		       66		      .byte.b	%01100110
   5594  ffde		       66		      .byte.b	%01100110
   5595  ffdf		       66		      .byte.b	%01100110
   5596  ffe0		       3c		      .byte.b	%00111100
   5597  ffe1		       66		      .byte.b	%01100110
   5598  ffe2		       66		      .byte.b	%01100110
   5599  ffe3		       3c		      .byte.b	%00111100
   5600  ffe4
   5601  ffe4		       3c		      .byte.b	%00111100
   5602  ffe5		       46		      .byte.b	%01000110
   5603  ffe6		       06		      .byte.b	%00000110
   5604  ffe7		       3e		      .byte.b	%00111110
   5605  ffe8		       66		      .byte.b	%01100110
   5606  ffe9		       66		      .byte.b	%01100110
   5607  ffea		       66		      .byte.b	%01100110
   5608  ffeb		       3c		      .byte.b	%00111100
   5609  ffec
   5610  ffec					      ifnconst	DPC_kernel_options
   5611  ffec
   5612  ffec		       00		      .byte.b	%00000000
   5613  ffed		       00		      .byte.b	%00000000
   5614  ffee		       00		      .byte.b	%00000000
   5615  ffef		       00		      .byte.b	%00000000
   5616  fff0		       00		      .byte.b	%00000000
   5617  fff1		       00		      .byte.b	%00000000
   5618  fff2		       00		      .byte.b	%00000000
   5619  fff3		       00		      .byte.b	%00000000
   5620  fff4
   5621  fff4					      endif
   5622  fff4
   5623  fff4					      endif
   5624  fff4
   5625  fff4				  -	      ifconst	ROM2k
   5626  fff4				  -	      ORG	$F7FC
   5627  fff4					      else
   5628  fff4				  -	      ifconst	bankswitch
   5629  fff4				  -	      if	bankswitch == 8
   5630  fff4				  -	      ORG	$2FF4-bscode_length
   5631  fff4				  -	      RORG	$FFF4-bscode_length
   5632  fff4				  -	      endif
   5633  fff4				  -	      if	bankswitch == 16
   5634  fff4				  -	      ORG	$4FF4-bscode_length
   5635  fff4				  -	      RORG	$FFF4-bscode_length
   5636  fff4				  -	      endif
   5637  fff4				  -	      if	bankswitch == 32
   5638  fff4				  -	      ORG	$8FF4-bscode_length
   5639  fff4				  -	      RORG	$FFF4-bscode_length
   5640  fff4				  -	      endif
   5641  fff4				  -	      if	bankswitch == 64
   5642  fff4				  -	      ORG	$10FE0-bscode_length
   5643  fff4				  -	      RORG	$1FFE0-bscode_length
   5644  fff4				  -	      endif
   5645  fff4					      else
   5646  fffc					      ORG	$FFFC
   5647  fffc					      endif
   5648  fffc					      endif
   5649  fffc				  -	      ifconst	bankswitch
   5650  fffc				  -	      if	bankswitch == 8
   5651  fffc				  -	      ORG	$2FFC
   5652  fffc				  -	      RORG	$FFFC
   5653  fffc				  -	      endif
   5654  fffc				  -	      if	bankswitch == 16
   5655  fffc				  -	      ORG	$4FFC
   5656  fffc				  -	      RORG	$FFFC
   5657  fffc				  -	      endif
   5658  fffc				  -	      if	bankswitch == 32
   5659  fffc				  -	      ORG	$8FFC
   5660  fffc				  -	      RORG	$FFFC
   5661  fffc				  -	      endif
   5662  fffc				  -	      if	bankswitch == 64
   5663  fffc				  -	      ORG	$10FF0
   5664  fffc				  -	      RORG	$1FFF0
   5665  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5666  fffc				  -	      ORG	$10FF8
   5667  fffc				  -	      RORG	$1FFF8
   5668  fffc				  -	      ifconst	superchip
   5669  fffc				  -	      .byte	"E","F","S","C"
   5670  fffc				  -	      else
   5671  fffc				  -	      .byte	"E","F","E","F"
   5672  fffc				  -	      endif
   5673  fffc				  -	      ORG	$10FFC
   5674  fffc				  -	      RORG	$1FFFC
   5675  fffc				  -	      endif
   5676  fffc					      else
   5677  fffc				  -	      ifconst	ROM2k
   5678  fffc				  -	      ORG	$F7FC
   5679  fffc					      else
   5680  fffc					      ORG	$FFFC
   5681  fffc					      endif
   5682  fffc					      endif
   5683  fffc		       00 f0		      .word.w	start
   5684  fffe		       00 f0		      .word.w	start
