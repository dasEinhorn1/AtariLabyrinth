------- FILE LabLevel1.bas.asm LEVEL 1 PASS 3
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 e5	    _Chase_Speed =	r
      4  10000 ????
      5  10000 ????		00 95	    _sc3       =	score + 2
      6  10000 ????
      7  10000 ????		00 94	    _sc2       =	score + 1
      8  10000 ????
      9  10000 ????		00 93	    _sc1       =	score
     10  10000 ????
     11  10000 ????		00 9f	    _M_Edge_Right =	159
     12  10000 ????
     13  10000 ????		00 02	    _M_Edge_Left =	2
     14  10000 ????
     15  10000 ????		00 58	    _M_Edge_Bottom =	88
     16  10000 ????
     17  10000 ????		00 02	    _M_Edge_Top =	2
     18  10000 ????
     19  10000 ????		00 a0	    _B_Edge_Right =	160
     20  10000 ????
     21  10000 ????		00 02	    _B_Edge_Left =	2
     22  10000 ????
     23  10000 ????		00 58	    _B_Edge_Bottom =	88
     24  10000 ????
     25  10000 ????		00 02	    _B_Edge_Top =	2
     26  10000 ????
     27  10000 ????		00 99	    _P_Edge_Right =	153
     28  10000 ????
     29  10000 ????		00 01	    _P_Edge_Left =	1
     30  10000 ????
     31  10000 ????		00 58	    _P_Edge_Bottom =	88
     32  10000 ????
     33  10000 ????		00 09	    _P_Edge_Top =	9
     34  10000 ????
     35  10000 ????		00 ed	    rand16     =	z
     36  10000 ????
     37  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     38  10000 ????
     39  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     40  10000 ????
     41  10000 ????		00 ec	    _BitOp_01  =	y
     42  10000 ????
     43  10000 ????		00 eb	    _Bit1_Game_Over =	x
     44  10000 ????
     45  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     46  10000 ????
     47  10000 ????		00 64	    _Minotaur_Awareness_Size =	100
     48  10000 ????
     49  10000 ????		00 db	    _Frame_Count =	h
     50  10000 ????
     51  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     52  10000 ????
     53  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     54  10000 ????
     55  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     56  10000 ????
     57  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     58  10000 ????
     59  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     60  10000 ????
     61  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     64  10000 ????
     65  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     66  10000 ????
     67  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     68  10000 ????
     69  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     74  10000 ????
     75  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     76  10000 ????
     77  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     78  10000 ????
     79  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     82  10000 ????
     83  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     84  10000 ????
     85  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     86  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE LabLevel1.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 e5	    _Chase_Speed =	r
      4  10000 ????
      5  10000 ????		00 95	    _sc3       =	score + 2
      6  10000 ????
      7  10000 ????		00 94	    _sc2       =	score + 1
      8  10000 ????
      9  10000 ????		00 93	    _sc1       =	score
     10  10000 ????
     11  10000 ????		00 9f	    _M_Edge_Right =	159
     12  10000 ????
     13  10000 ????		00 02	    _M_Edge_Left =	2
     14  10000 ????
     15  10000 ????		00 58	    _M_Edge_Bottom =	88
     16  10000 ????
     17  10000 ????		00 02	    _M_Edge_Top =	2
     18  10000 ????
     19  10000 ????		00 a0	    _B_Edge_Right =	160
     20  10000 ????
     21  10000 ????		00 02	    _B_Edge_Left =	2
     22  10000 ????
     23  10000 ????		00 58	    _B_Edge_Bottom =	88
     24  10000 ????
     25  10000 ????		00 02	    _B_Edge_Top =	2
     26  10000 ????
     27  10000 ????		00 99	    _P_Edge_Right =	153
     28  10000 ????
     29  10000 ????		00 01	    _P_Edge_Left =	1
     30  10000 ????
     31  10000 ????		00 58	    _P_Edge_Bottom =	88
     32  10000 ????
     33  10000 ????		00 09	    _P_Edge_Top =	9
     34  10000 ????
     35  10000 ????		00 ed	    rand16     =	z
     36  10000 ????
     37  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     38  10000 ????
     39  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     40  10000 ????
     41  10000 ????		00 ec	    _BitOp_01  =	y
     42  10000 ????
     43  10000 ????		00 eb	    _Bit1_Game_Over =	x
     44  10000 ????
     45  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     46  10000 ????
     47  10000 ????		00 64	    _Minotaur_Awareness_Size =	100
     48  10000 ????
     49  10000 ????		00 db	    _Frame_Count =	h
     50  10000 ????
     51  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     52  10000 ????
     53  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     54  10000 ????
     55  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     56  10000 ????
     57  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     58  10000 ????
     59  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     60  10000 ????
     61  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     62  10000 ????
     63  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     64  10000 ????
     65  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     66  10000 ????
     67  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     68  10000 ????
     69  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
     74  10000 ????
     75  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
     76  10000 ????
     77  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     78  10000 ????
     79  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     80  10000 ????
     81  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     82  10000 ????
     83  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     84  10000 ????
     85  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
     86  10000 ????
------- FILE LabLevel1.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 61 f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x 
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8 
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6					      ifconst	rand16
   1369  f3b6		       26 ed		      rol	rand16
   1370  f3b8					      endif
   1371  f3b8		       90 02		      bcc	noeor
   1372  f3ba		       49 b4		      eor	#$B4
   1373  f3bc				   noeor
   1374  f3bc		       85 a2		      sta	rand
   1375  f3be					      ifconst	rand16
   1376  f3be		       45 ed		      eor	rand16
   1377  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1379  f3c1				   drawscreen
   1380  f3c1				  -	      ifconst	debugscore
   1381  f3c1				  -	      ldx	#14
   1382  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3c1				  -
   1384  f3c1				  -	      ifconst	mincycles
   1385  f3c1				  -	      lda	mincycles
   1386  f3c1				  -	      cmp	INTIM
   1387  f3c1				  -	      lda	mincycles
   1388  f3c1				  -	      bcc	nochange
   1389  f3c1				  -	      lda	INTIM
   1390  f3c1				  -	      sta	mincycles
   1391  f3c1				  -nochange
   1392  f3c1				  -	      endif
   1393  f3c1				  -
   1394  f3c1				  -			; cmp #$2B
   1395  f3c1				  -			; bcs no_cycles_left
   1396  f3c1				  -	      bmi	cycles_left
   1397  f3c1				  -	      ldx	#64
   1398  f3c1				  -	      eor	#$ff	;make negative
   1399  f3c1				  -cycles_left
   1400  f3c1				  -	      stx	scorecolor
   1401  f3c1				  -	      and	#$7f	; clear sign bit
   1402  f3c1				  -	      tax
   1403  f3c1				  -	      lda	scorebcd,x
   1404  f3c1				  -	      sta	score+2
   1405  f3c1				  -	      lda	scorebcd1,x
   1406  f3c1				  -	      sta	score+1
   1407  f3c1				  -	      jmp	done_debugscore
   1408  f3c1				  -scorebcd
   1409  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3c1				  -scorebcd1
   1414  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3c1				  -done_debugscore
   1419  f3c1					      endif
   1420  f3c1
   1421  f3c1				  -	      ifconst	debugcycles
   1422  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3c1				  -			; cmp #$2B
   1424  f3c1				  -			; BCC overscan
   1425  f3c1				  -	      bmi	overscan
   1426  f3c1				  -	      sta	COLUBK
   1427  f3c1				  -	      bcs	doneoverscan
   1428  f3c1					      endif
   1429  f3c1
   1430  f3c1				   overscan
   1431  f3c1				  -	      ifconst	interlaced
   1432  f3c1				  -	      PHP
   1433  f3c1				  -	      PLA
   1434  f3c1				  -	      EOR	#4	; flip interrupt bit
   1435  f3c1				  -	      PHA
   1436  f3c1				  -	      PLP
   1437  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1438  f3c1				  -	      TAX		; save it for later
   1439  f3c1					      endif
   1440  f3c1
   1441  f3c1				   overscanloop
   1442  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c4		       30 fb		      bmi	overscanloop
   1444  f3c6				   doneoverscan
   1445  f3c6
   1446  f3c6							;do VSYNC
   1447  f3c6
   1448  f3c6				  -	      ifconst	interlaced
   1449  f3c6				  -	      CPX	#4
   1450  f3c6				  -	      BNE	oddframevsync
   1451  f3c6					      endif
   1452  f3c6
   1453  f3c6		       a9 02		      lda	#2
   1454  f3c8		       85 02		      sta	WSYNC
   1455  f3ca		       85 00		      sta	VSYNC
   1456  f3cc		       85 02		      STA	WSYNC
   1457  f3ce		       85 02		      STA	WSYNC
   1458  f3d0		       4a		      lsr
   1459  f3d1		       85 02		      STA	WSYNC
   1460  f3d3		       85 00		      STA	VSYNC
   1461  f3d5		       85 01		      sta	VBLANK
   1462  f3d7					      ifnconst	overscan_time
   1463  f3d7		       a9 a5		      lda	#37+128
   1464  f3d9				  -	      else
   1465  f3d9				  -	      lda	#overscan_time+128
   1466  f3d9					      endif
   1467  f3d9		       8d 96 02 	      sta	TIM64T
   1468  f3dc
   1469  f3dc				  -	      ifconst	interlaced
   1470  f3dc				  -	      jmp	postsync
   1471  f3dc				  -
   1472  f3dc				  -oddframevsync
   1473  f3dc				  -	      sta	WSYNC
   1474  f3dc				  -
   1475  f3dc				  -	      LDA	($80,X)	; 11 waste
   1476  f3dc				  -	      LDA	($80,X)	; 11 waste
   1477  f3dc				  -	      LDA	($80,X)	; 11 waste
   1478  f3dc				  -
   1479  f3dc				  -	      lda	#2
   1480  f3dc				  -	      sta	VSYNC
   1481  f3dc				  -	      sta	WSYNC
   1482  f3dc				  -	      sta	WSYNC
   1483  f3dc				  -	      sta	WSYNC
   1484  f3dc				  -
   1485  f3dc				  -	      LDA	($80,X)	; 11 waste
   1486  f3dc				  -	      LDA	($80,X)	; 11 waste
   1487  f3dc				  -	      LDA	($80,X)	; 11 waste
   1488  f3dc				  -
   1489  f3dc				  -	      lda	#0
   1490  f3dc				  -	      sta	VSYNC
   1491  f3dc				  -	      sta	VBLANK
   1492  f3dc				  -	      ifnconst	overscan_time
   1493  f3dc				  -	      lda	#37+128
   1494  f3dc				  -	      else
   1495  f3dc				  -	      lda	#overscan_time+128
   1496  f3dc				  -	      endif
   1497  f3dc				  -	      sta	TIM64T
   1498  f3dc				  -
   1499  f3dc				  -postsync
   1500  f3dc					      endif
   1501  f3dc
   1502  f3dc				  -	      ifconst	legacy
   1503  f3dc				  -	      if	legacy < 100
   1504  f3dc				  -	      ldx	#4
   1505  f3dc				  -adjustloop
   1506  f3dc				  -	      lda	player0x,x
   1507  f3dc				  -	      sec
   1508  f3dc				  -	      sbc	#14	;?
   1509  f3dc				  -	      sta	player0x,x
   1510  f3dc				  -	      dex
   1511  f3dc				  -	      bpl	adjustloop
   1512  f3dc				  -	      endif
   1513  f3dc					      endif
   1514  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3dc				  -	      repeat	($fa-(<*))
   1516  f3dc				  -	      nop
   1517  f3dc				  -	      repend
   1518  f3dc					      endif
   1519  f3dc		       85 02		      sta	WSYNC
   1520  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1522  f3e2				   HorPosLoop		; 5
   1523  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e4		       38		      sec		;+2 11
   1525  f3e5				   DivideLoop
   1526  f3e5		       e9 0f		      sbc	#15
   1527  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1529  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1530  f3ed		       85 02		      sta	WSYNC
   1531  f3ef		       ca		      dex
   1532  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3f2							; 4
   1534  f3f2
   1535  f3f2		       a2 04		      ldx	#4
   1536  f3f4		       b4 9c		      ldy	temp1,X
   1537  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1538  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1539  f3fb
   1540  f3fb		       ca		      dex
   1541  f3fc		       b4 9c		      ldy	temp1,X
   1542  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1543  f401		       95 20		      sta	HMP0,X	;+14 32
   1544  f403
   1545  f403		       ca		      dex
   1546  f404		       b4 9c		      ldy	temp1,X
   1547  f406		       b9 52 f3 	      lda	repostable-256,Y
   1548  f409		       95 20		      sta	HMP0,X	;+14 46
   1549  f40b
   1550  f40b		       ca		      dex
   1551  f40c		       b4 9c		      ldy	temp1,X
   1552  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1553  f411		       95 20		      sta	HMP0,X	;+14 60
   1554  f413
   1555  f413		       ca		      dex
   1556  f414		       b4 9c		      ldy	temp1,X
   1557  f416		       b9 52 f3 	      lda	repostable-256,Y
   1558  f419		       95 20		      sta	HMP0,X	;+14 74
   1559  f41b
   1560  f41b		       85 02		      sta	WSYNC
   1561  f41d
   1562  f41d		       85 2a		      sta	HMOVE	;+3 3
   1563  f41f
   1564  f41f
   1565  f41f				  -	      ifconst	legacy
   1566  f41f				  -	      if	legacy < 100
   1567  f41f				  -	      ldx	#4
   1568  f41f				  -adjustloop2
   1569  f41f				  -	      lda	player0x,x
   1570  f41f				  -	      clc
   1571  f41f				  -	      adc	#14	;?
   1572  f41f				  -	      sta	player0x,x
   1573  f41f				  -	      dex
   1574  f41f				  -	      bpl	adjustloop2
   1575  f41f				  -	      endif
   1576  f41f					      endif
   1577  f41f
   1578  f41f
   1579  f41f
   1580  f41f
   1581  f41f							;set score pointers
   1582  f41f		       a7 95		      lax	score+2
   1583  f421		       20 52 f4 	      jsr	scorepointerset
   1584  f424		       84 9b		      sty	scorepointers+5
   1585  f426		       86 98		      stx	scorepointers+2
   1586  f428		       a7 94		      lax	score+1
   1587  f42a		       20 52 f4 	      jsr	scorepointerset
   1588  f42d		       84 9a		      sty	scorepointers+4
   1589  f42f		       86 97		      stx	scorepointers+1
   1590  f431		       a7 93		      lax	score
   1591  f433		       20 52 f4 	      jsr	scorepointerset
   1592  f436		       84 99		      sty	scorepointers+3
   1593  f438		       86 96		      stx	scorepointers
   1594  f43a
   1595  f43a				   vblk
   1596  f43a							; run possible vblank bB code
   1597  f43a				  -	      ifconst	vblank_bB_code
   1598  f43a				  -	      jsr	vblank_bB_code
   1599  f43a					      endif
   1600  f43a				   vblk2
   1601  f43a		       ad 84 02 	      LDA	INTIM
   1602  f43d		       30 fb		      bmi	vblk2
   1603  f43f		       4c 34 f0 	      jmp	kernel
   1604  f442
   1605  f442
   1606  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f452				   repostable
   1609  f452
   1610  f452				   scorepointerset
   1611  f452		       29 0f		      and	#$0F
   1612  f454		       0a		      asl
   1613  f455		       0a		      asl
   1614  f456		       0a		      asl
   1615  f457		       69 9c		      adc	#<scoretable
   1616  f459		       a8		      tay
   1617  f45a		       8a		      txa
   1618  f45b							; and #$F0
   1619  f45b							; lsr
   1620  f45b		       4b f0		      asr	#$F0
   1621  f45d		       69 9c		      adc	#<scoretable
   1622  f45f		       aa		      tax
   1623  f460		       60		      rts
   1624  f461				   game
   1625  f461				   .
   1626  f461							;
   1627  f461
   1628  f461				   .
   1629  f461							;
   1630  f461
   1631  f461				   .
   1632  f461							;
   1633  f461
   1634  f461				   .
   1635  f461							;
   1636  f461
   1637  f461				   .
   1638  f461							;
   1639  f461
   1640  f461				   .
   1641  f461							;
   1642  f461
   1643  f461				   .
   1644  f461							;
   1645  f461
   1646  f461				   .
   1647  f461							;
   1648  f461
   1649  f461				   .
   1650  f461							;
   1651  f461
   1652  f461				   .
   1653  f461							;
   1654  f461
   1655  f461				   .
   1656  f461							;
   1657  f461
   1658  f461				   .
   1659  f461							;
   1660  f461
   1661  f461				   .
   1662  f461							;
   1663  f461
   1664  f461				   .
   1665  f461							;
   1666  f461
   1667  f461				   .
   1668  f461							;
   1669  f461
   1670  f461				   .
   1671  f461							;
   1672  f461
   1673  f461				   .
   1674  f461							;
   1675  f461
   1676  f461				   .
   1677  f461							;
   1678  f461
   1679  f461				   .
   1680  f461							;
   1681  f461
   1682  f461				   .
   1683  f461							;
   1684  f461
   1685  f461				   .
   1686  f461							;
   1687  f461
   1688  f461				   .
   1689  f461							;
   1690  f461
   1691  f461				   .
   1692  f461							;
   1693  f461
   1694  f461				   .
   1695  f461							;
   1696  f461
   1697  f461				   .
   1698  f461							;
   1699  f461
   1700  f461				   .
   1701  f461							;
   1702  f461
   1703  f461				   .L00 		;  set smartbranching on
   1704  f461
   1705  f461				   .
   1706  f461							;
   1707  f461
   1708  f461				   .
   1709  f461							;
   1710  f461
   1711  f461				   .
   1712  f461							;
   1713  f461
   1714  f461				   .
   1715  f461							;
   1716  f461
   1717  f461				   .
   1718  f461							;
   1719  f461
   1720  f461				   .
   1721  f461							;
   1722  f461
   1723  f461				   .
   1724  f461							;
   1725  f461
   1726  f461				   .
   1727  f461							;
   1728  f461
   1729  f461				   .
   1730  f461							;
   1731  f461
   1732  f461				   .
   1733  f461							;
   1734  f461
   1735  f461				   .
   1736  f461							;
   1737  f461
   1738  f461				   .
   1739  f461							;
   1740  f461
   1741  f461				   .
   1742  f461							;
   1743  f461
   1744  f461				   .
   1745  f461							;
   1746  f461
   1747  f461				   .
   1748  f461							;
   1749  f461
   1750  f461				   .
   1751  f461							;
   1752  f461
   1753  f461				   .
   1754  f461							;
   1755  f461
   1756  f461				   .
   1757  f461							;
   1758  f461
   1759  f461				   .
   1760  f461							;
   1761  f461
   1762  f461				   .
   1763  f461							;
   1764  f461
   1765  f461				   .
   1766  f461							;
   1767  f461
   1768  f461				   .
   1769  f461							;
   1770  f461
   1771  f461				   .
   1772  f461							;
   1773  f461
   1774  f461				   .
   1775  f461							;
   1776  f461
   1777  f461				   .
   1778  f461							;
   1779  f461
   1780  f461				   .
   1781  f461							;
   1782  f461
   1783  f461				   .
   1784  f461							;
   1785  f461
   1786  f461				   .L01 		;  dim _BitOp_P0_M0_Dir  =  g
   1787  f461
   1788  f461				   .L02 		;  dim _Bit0_P0_Dir_Up  =  g
   1789  f461
   1790  f461				   .L03 		;  dim _Bit1_P0_Dir_Down  =  g
   1791  f461
   1792  f461				   .L04 		;  dim _Bit2_P0_Dir_Left  =  g
   1793  f461
   1794  f461				   .L05 		;  dim _Bit3_P0_Dir_Right  =  g
   1795  f461
   1796  f461				   .L06 		;  dim _Bit4_M0_Dir_Up  =  g
   1797  f461
   1798  f461				   .L07 		;  dim _Bit5_M0_Dir_Down  =  g
   1799  f461
   1800  f461				   .L08 		;  dim _Bit6_M0_Dir_Left  =  g
   1801  f461
   1802  f461				   .L09 		;  dim _Bit7_M0_Dir_Right  =  g
   1803  f461
   1804  f461				   .
   1805  f461							;
   1806  f461
   1807  f461				   .
   1808  f461							;
   1809  f461
   1810  f461				   .
   1811  f461							;
   1812  f461
   1813  f461				   .L010		;  dim _BitOp_P1_M1_Dir  =  k
   1814  f461
   1815  f461				   .L011		;  dim _Bit0_P1_Dir_Up  =  k
   1816  f461
   1817  f461				   .L012		;  dim _Bit1_P1_Dir_Down  =  k
   1818  f461
   1819  f461				   .L013		;  dim _Bit2_P1_Dir_Left  =  k
   1820  f461
   1821  f461				   .L014		;  dim _Bit3_P1_Dir_Right  =  k
   1822  f461
   1823  f461				   .L015		;  dim _Bit4_P1_Col_Up  =  k
   1824  f461
   1825  f461				   .L016		;  dim _Bit5_P1_Col_Down  =  k
   1826  f461
   1827  f461				   .L017		;  dim _Bit6_P1_Col_Left  =  k
   1828  f461
   1829  f461				   .L018		;  dim _Bit7_P1_Col_Right  =  k
   1830  f461
   1831  f461				   .
   1832  f461							;
   1833  f461
   1834  f461				   .L019		;  dim _Frame_Count  =  h
   1835  f461
   1836  f461				   .
   1837  f461							;
   1838  f461
   1839  f461				   .
   1840  f461							;
   1841  f461
   1842  f461				   .
   1843  f461							;
   1844  f461
   1845  f461				   .
   1846  f461							;
   1847  f461
   1848  f461				   .L020		;  const _Minotaur_Awareness_Size  =  100
   1849  f461
   1850  f461				   .
   1851  f461							;
   1852  f461
   1853  f461				   .
   1854  f461							;
   1855  f461
   1856  f461				   .
   1857  f461							;
   1858  f461
   1859  f461				   .
   1860  f461							;
   1861  f461
   1862  f461				   .L021		;  dim _Bit0_Carrying_Gem  =  x
   1863  f461
   1864  f461				   .L022		;  dim _Bit1_Game_Over  =  x
   1865  f461
   1866  f461				   .
   1867  f461							;
   1868  f461
   1869  f461				   .
   1870  f461							;
   1871  f461
   1872  f461				   .
   1873  f461							;
   1874  f461
   1875  f461				   .
   1876  f461							;
   1877  f461
   1878  f461				   .L023		;  dim _BitOp_01  =  y
   1879  f461
   1880  f461				   .L024		;  dim _Bit0_Reset_Restrainer	=  y
   1881  f461
   1882  f461				   .L025		;  dim _Bit1_Toggle_Screen  =	y
   1883  f461
   1884  f461				   .
   1885  f461							;
   1886  f461
   1887  f461				   .
   1888  f461							;
   1889  f461
   1890  f461				   .
   1891  f461							;
   1892  f461
   1893  f461				   .
   1894  f461							;
   1895  f461
   1896  f461				   .L026		;  dim rand16	=  z
   1897  f461
   1898  f461				   .
   1899  f461							;
   1900  f461
   1901  f461				   .
   1902  f461							;
   1903  f461
   1904  f461				   .
   1905  f461							;
   1906  f461
   1907  f461				   .
   1908  f461							;
   1909  f461
   1910  f461				   .
   1911  f461							;
   1912  f461
   1913  f461				   .
   1914  f461							;
   1915  f461
   1916  f461				   .
   1917  f461							;
   1918  f461
   1919  f461				   .
   1920  f461							;
   1921  f461
   1922  f461				   .
   1923  f461							;
   1924  f461
   1925  f461				   .L027		;  const _P_Edge_Top  =  9
   1926  f461
   1927  f461				   .L028		;  const _P_Edge_Bottom  =  88
   1928  f461
   1929  f461				   .L029		;  const _P_Edge_Left	=  1
   1930  f461
   1931  f461				   .L030		;  const _P_Edge_Right  =  153
   1932  f461
   1933  f461				   .
   1934  f461							;
   1935  f461
   1936  f461				   .
   1937  f461							;
   1938  f461
   1939  f461				   .
   1940  f461							;
   1941  f461
   1942  f461				   .
   1943  f461							;
   1944  f461
   1945  f461				   .
   1946  f461							;
   1947  f461
   1948  f461				   .
   1949  f461							;
   1950  f461
   1951  f461				   .
   1952  f461							;
   1953  f461
   1954  f461				   .
   1955  f461							;
   1956  f461
   1957  f461				   .L031		;  const _B_Edge_Top  =  2
   1958  f461
   1959  f461				   .L032		;  const _B_Edge_Bottom  =  88
   1960  f461
   1961  f461				   .L033		;  const _B_Edge_Left	=  2
   1962  f461
   1963  f461				   .L034		;  const _B_Edge_Right  =  160
   1964  f461
   1965  f461				   .
   1966  f461							;
   1967  f461
   1968  f461				   .
   1969  f461							;
   1970  f461
   1971  f461				   .
   1972  f461							;
   1973  f461
   1974  f461				   .
   1975  f461							;
   1976  f461
   1977  f461				   .
   1978  f461							;
   1979  f461
   1980  f461				   .
   1981  f461							;
   1982  f461
   1983  f461				   .
   1984  f461							;
   1985  f461
   1986  f461				   .
   1987  f461							;
   1988  f461
   1989  f461				   .
   1990  f461							;
   1991  f461
   1992  f461				   .L035		;  const _M_Edge_Top  =  2
   1993  f461
   1994  f461				   .L036		;  const _M_Edge_Bottom  =  88
   1995  f461
   1996  f461				   .L037		;  const _M_Edge_Left	=  2
   1997  f461
   1998  f461				   .L038		;  const _M_Edge_Right  =  159
   1999  f461
   2000  f461				   .
   2001  f461							;
   2002  f461
   2003  f461				   .
   2004  f461							;
   2005  f461
   2006  f461				   .
   2007  f461							;
   2008  f461
   2009  f461				   .
   2010  f461							;
   2011  f461
   2012  f461				   .
   2013  f461							;
   2014  f461
   2015  f461				   .
   2016  f461							;
   2017  f461
   2018  f461				   .
   2019  f461							;
   2020  f461
   2021  f461				   .__Start_Restart
   2022  f461							; __Start_Restart
   2023  f461
   2024  f461				   .
   2025  f461							;
   2026  f461
   2027  f461				   .
   2028  f461							;
   2029  f461
   2030  f461				   .
   2031  f461							;
   2032  f461
   2033  f461				   .
   2034  f461							;
   2035  f461
   2036  f461				   .
   2037  f461							;
   2038  f461
   2039  f461				   .
   2040  f461							;
   2041  f461
   2042  f461				   .L039		;  AUDV0  =  0  :  AUDV1  =  0
   2043  f461
   2044  f461		       a9 00		      LDA	#0
   2045  f463		       85 19		      STA	AUDV0
   2046  f465		       85 1a		      STA	AUDV1
   2047  f467				   .
   2048  f467							;
   2049  f467
   2050  f467				   .
   2051  f467							;
   2052  f467
   2053  f467				   .
   2054  f467							;
   2055  f467
   2056  f467				   .
   2057  f467							;
   2058  f467
   2059  f467				   .
   2060  f467							;
   2061  f467
   2062  f467				   .
   2063  f467							;
   2064  f467
   2065  f467				   .
   2066  f467							;
   2067  f467
   2068  f467				   .
   2069  f467							;
   2070  f467
   2071  f467				   .
   2072  f467							;
   2073  f467
   2074  f467				   .L040		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2075  f467
   2076  f467		       a9 00		      LDA	#0
   2077  f469		       85 d4		      STA	a
   2078  f46b		       85 d5		      STA	b
   2079  f46d		       85 d6		      STA	c
   2080  f46f		       85 d7		      STA	d
   2081  f471		       85 d8		      STA	e
   2082  f473		       85 d9		      STA	f
   2083  f475		       85 da		      STA	g
   2084  f477		       85 db		      STA	h
   2085  f479		       85 dc		      STA	i
   2086  f47b				   .L041		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2087  f47b
   2088  f47b		       a9 00		      LDA	#0
   2089  f47d		       85 dd		      STA	j
   2090  f47f		       85 de		      STA	k
   2091  f481		       85 df		      STA	l
   2092  f483		       85 e0		      STA	m
   2093  f485		       85 e1		      STA	n
   2094  f487		       85 e2		      STA	o
   2095  f489		       85 e3		      STA	p
   2096  f48b		       85 e4		      STA	q
   2097  f48d		       85 e5		      STA	r
   2098  f48f				   .L042		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2099  f48f
   2100  f48f		       a9 00		      LDA	#0
   2101  f491		       85 e6		      STA	s
   2102  f493		       85 e7		      STA	t
   2103  f495		       85 e8		      STA	u
   2104  f497		       85 e9		      STA	v
   2105  f499		       85 ea		      STA	w
   2106  f49b		       85 eb		      STA	x
   2107  f49d				   .
   2108  f49d							;
   2109  f49d
   2110  f49d				   .
   2111  f49d							;
   2112  f49d
   2113  f49d				   .
   2114  f49d							;
   2115  f49d
   2116  f49d				   .
   2117  f49d							;
   2118  f49d
   2119  f49d				   .
   2120  f49d							;
   2121  f49d
   2122  f49d				   .
   2123  f49d							;
   2124  f49d
   2125  f49d				   .
   2126  f49d							;
   2127  f49d
   2128  f49d				   .
   2129  f49d							;
   2130  f49d
   2131  f49d				   .L043		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2132  f49d
   2133  f49d		       a5 ec		      LDA	_BitOp_01
   2134  f49f		       29 10		      AND	#%00010000
   2135  f4a1		       85 ec		      STA	_BitOp_01
   2136  f4a3				   .
   2137  f4a3							;
   2138  f4a3
   2139  f4a3				   .
   2140  f4a3							;
   2141  f4a3
   2142  f4a3				   .
   2143  f4a3							;
   2144  f4a3
   2145  f4a3				   .
   2146  f4a3							;
   2147  f4a3
   2148  f4a3				   .
   2149  f4a3							;
   2150  f4a3
   2151  f4a3				   .
   2152  f4a3							;
   2153  f4a3
   2154  f4a3				   .L044		;  player0x  =  77  :	player0y  =  60
   2155  f4a3
   2156  f4a3		       a9 4d		      LDA	#77
   2157  f4a5		       85 80		      STA	player0x
   2158  f4a7		       a9 3c		      LDA	#60
   2159  f4a9		       85 85		      STA	player0y
   2160  f4ab				   .L045		;  player1x  =  21  :	player1y  =  16
   2161  f4ab
   2162  f4ab		       a9 15		      LDA	#21
   2163  f4ad		       85 81		      STA	player1x
   2164  f4af		       a9 10		      LDA	#16
   2165  f4b1		       85 86		      STA	player1y
   2166  f4b3				   .
   2167  f4b3							;
   2168  f4b3
   2169  f4b3				   .
   2170  f4b3							;
   2171  f4b3
   2172  f4b3				   .
   2173  f4b3							;
   2174  f4b3
   2175  f4b3				   .
   2176  f4b3							;
   2177  f4b3
   2178  f4b3				   .
   2179  f4b3							;
   2180  f4b3
   2181  f4b3				   .L046		;  missile0x  =  200  :  missile0y  =	200
   2182  f4b3
   2183  f4b3		       a9 c8		      LDA	#200
   2184  f4b5		       85 82		      STA	missile0x
   2185  f4b7		       85 91		      STA	missile0y
   2186  f4b9				   .
   2187  f4b9							;
   2188  f4b9
   2189  f4b9				   .
   2190  f4b9							;
   2191  f4b9
   2192  f4b9				   .
   2193  f4b9							;
   2194  f4b9
   2195  f4b9				   .
   2196  f4b9							;
   2197  f4b9
   2198  f4b9				   .L047		;  missile0x  =  80  :  missile0y  =  79
   2199  f4b9
   2200  f4b9		       a9 50		      LDA	#80
   2201  f4bb		       85 82		      STA	missile0x
   2202  f4bd		       a9 4f		      LDA	#79
   2203  f4bf		       85 91		      STA	missile0y
   2204  f4c1				   .
   2205  f4c1							;
   2206  f4c1
   2207  f4c1				   .
   2208  f4c1							;
   2209  f4c1
   2210  f4c1				   .
   2211  f4c1							;
   2212  f4c1
   2213  f4c1				   .
   2214  f4c1							;
   2215  f4c1
   2216  f4c1				   .
   2217  f4c1							;
   2218  f4c1
   2219  f4c1				   .L048		;  NUSIZ0  =  $10  :  missile0height  =  1
   2220  f4c1
   2221  f4c1		       a9 10		      LDA	#$10
   2222  f4c3		       85 04		      STA	NUSIZ0
   2223  f4c5		       a9 01		      LDA	#1
   2224  f4c7		       85 90		      STA	missile0height
   2225  f4c9				   .L049		;  NUSIZ1  =  $30  :  missile0height  =  4
   2226  f4c9
   2227  f4c9		       a9 30		      LDA	#$30
   2228  f4cb		       85 05		      STA	NUSIZ1
   2229  f4cd		       a9 04		      LDA	#4
   2230  f4cf		       85 90		      STA	missile0height
   2231  f4d1				   .
   2232  f4d1							;
   2233  f4d1
   2234  f4d1				   .
   2235  f4d1							;
   2236  f4d1
   2237  f4d1				   .
   2238  f4d1							;
   2239  f4d1
   2240  f4d1				   .
   2241  f4d1							;
   2242  f4d1
   2243  f4d1				   .
   2244  f4d1							;
   2245  f4d1
   2246  f4d1				   .
   2247  f4d1							;
   2248  f4d1
   2249  f4d1				   .L050		;  COLUPF  =  $2C
   2250  f4d1
   2251  f4d1		       a9 2c		      LDA	#$2C
   2252  f4d3		       85 08		      STA	COLUPF
   2253  f4d5				   .
   2254  f4d5							;
   2255  f4d5
   2256  f4d5				   .
   2257  f4d5							;
   2258  f4d5
   2259  f4d5				   .
   2260  f4d5							;
   2261  f4d5
   2262  f4d5				   .
   2263  f4d5							;
   2264  f4d5
   2265  f4d5				   .
   2266  f4d5							;
   2267  f4d5
   2268  f4d5				   .
   2269  f4d5							;
   2270  f4d5
   2271  f4d5				   .L051		;  COLUBK  =  0
   2272  f4d5
   2273  f4d5		       a9 00		      LDA	#0
   2274  f4d7		       85 09		      STA	COLUBK
   2275  f4d9				   .
   2276  f4d9							;
   2277  f4d9
   2278  f4d9				   .
   2279  f4d9							;
   2280  f4d9
   2281  f4d9				   .
   2282  f4d9							;
   2283  f4d9
   2284  f4d9				   .
   2285  f4d9							;
   2286  f4d9
   2287  f4d9				   .
   2288  f4d9							;
   2289  f4d9
   2290  f4d9				   .
   2291  f4d9							;
   2292  f4d9
   2293  f4d9				   .L052		;  _Bit3_P0_Dir_Right{3}  =  1
   2294  f4d9
   2295  f4d9		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2296  f4db		       09 08		      ORA	#8
   2297  f4dd		       85 da		      STA	_Bit3_P0_Dir_Right
   2298  f4df				   .
   2299  f4df							;
   2300  f4df
   2301  f4df				   .
   2302  f4df							;
   2303  f4df
   2304  f4df				   .
   2305  f4df							;
   2306  f4df
   2307  f4df				   .
   2308  f4df							;
   2309  f4df
   2310  f4df				   .
   2311  f4df							;
   2312  f4df
   2313  f4df				   .
   2314  f4df							;
   2315  f4df
   2316  f4df				   .
   2317  f4df							;
   2318  f4df
   2319  f4df				   .
   2320  f4df							;
   2321  f4df
   2322  f4df				   .
   2323  f4df							;
   2324  f4df
   2325  f4df				   .L053		;  _Bit0_Reset_Restrainer{0}  =  1
   2326  f4df
   2327  f4df		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2328  f4e1		       09 01		      ORA	#1
   2329  f4e3		       85 ec		      STA	_Bit0_Reset_Restrainer
   2330  f4e5				   .
   2331  f4e5							;
   2332  f4e5
   2333  f4e5				   .
   2334  f4e5							;
   2335  f4e5
   2336  f4e5				   .
   2337  f4e5							;
   2338  f4e5
   2339  f4e5				   .
   2340  f4e5							;
   2341  f4e5
   2342  f4e5				   .
   2343  f4e5							;
   2344  f4e5
   2345  f4e5				   .
   2346  f4e5							;
   2347  f4e5
   2348  f4e5				   .
   2349  f4e5							;
   2350  f4e5
   2351  f4e5				   .
   2352  f4e5							;
   2353  f4e5
   2354  f4e5				   .
   2355  f4e5							;
   2356  f4e5
   2357  f4e5				   .
   2358  f4e5							;
   2359  f4e5
   2360  f4e5				   .
   2361  f4e5							;
   2362  f4e5
   2363  f4e5				   .
   2364  f4e5							;
   2365  f4e5
   2366  f4e5				   .
   2367  f4e5							;
   2368  f4e5
   2369  f4e5				   .
   2370  f4e5							;
   2371  f4e5
   2372  f4e5				   .
   2373  f4e5							;
   2374  f4e5
   2375  f4e5				   .L054		;  playfield:
   2376  f4e5
   2377  f4e5				  -	      ifconst	pfres
   2378  f4e5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2379  f4e5					      else
   2380  f4e5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2381  f4e7					      endif
   2382  f4e7		       4c 16 f5 	      jmp	pflabel0
   2383  f4ea				   PF_data0
   2384  f4ea		       ff ff		      .byte.b	%11111111, %11111111
   2385  f4ec					      if	(pfwidth>2)
   2386  f4ec		       ff ff		      .byte.b	%11111111, %11111111
   2387  f4ee					      endif
   2388  f4ee		       80 00		      .byte.b	%10000000, %00000000
   2389  f4f0					      if	(pfwidth>2)
   2390  f4f0		       00 80		      .byte.b	%00000000, %10000000
   2391  f4f2					      endif
   2392  f4f2		       9f 61		      .byte.b	%10011111, %01100001
   2393  f4f4					      if	(pfwidth>2)
   2394  f4f4		       61 9f		      .byte.b	%01100001, %10011111
   2395  f4f6					      endif
   2396  f4f6		       90 70		      .byte.b	%10010000, %01110000
   2397  f4f8					      if	(pfwidth>2)
   2398  f4f8		       70 90		      .byte.b	%01110000, %10010000
   2399  f4fa					      endif
   2400  f4fa		       80 00		      .byte.b	%10000000, %00000000
   2401  f4fc					      if	(pfwidth>2)
   2402  f4fc		       00 80		      .byte.b	%00000000, %10000000
   2403  f4fe					      endif
   2404  f4fe		       99 19		      .byte.b	%10011001, %00011001
   2405  f500					      if	(pfwidth>2)
   2406  f500		       19 99		      .byte.b	%00011001, %10011001
   2407  f502					      endif
   2408  f502		       80 00		      .byte.b	%10000000, %00000000
   2409  f504					      if	(pfwidth>2)
   2410  f504		       00 80		      .byte.b	%00000000, %10000000
   2411  f506					      endif
   2412  f506		       90 70		      .byte.b	%10010000, %01110000
   2413  f508					      if	(pfwidth>2)
   2414  f508		       70 90		      .byte.b	%01110000, %10010000
   2415  f50a					      endif
   2416  f50a		       9f 61		      .byte.b	%10011111, %01100001
   2417  f50c					      if	(pfwidth>2)
   2418  f50c		       61 9f		      .byte.b	%01100001, %10011111
   2419  f50e					      endif
   2420  f50e		       80 00		      .byte.b	%10000000, %00000000
   2421  f510					      if	(pfwidth>2)
   2422  f510		       00 80		      .byte.b	%00000000, %10000000
   2423  f512					      endif
   2424  f512		       ff ff		      .byte.b	%11111111, %11111111
   2425  f514					      if	(pfwidth>2)
   2426  f514		       ff ff		      .byte.b	%11111111, %11111111
   2427  f516					      endif
   2428  f516				   pflabel0
   2429  f516		       bd ea f4 	      lda	PF_data0,x
   2430  f519		       95 a4		      sta	playfield,x
   2431  f51b		       ca		      dex
   2432  f51c		       10 f8		      bpl	pflabel0
   2433  f51e				   .
   2434  f51e							;
   2435  f51e
   2436  f51e				   .L055		;  player0:
   2437  f51e
   2438  f51e		       a2 30		      LDX	#<playerL055_0
   2439  f520		       86 8a		      STX	player0pointerlo
   2440  f522		       a9 fa		      LDA	#>playerL055_0
   2441  f524		       85 8b		      STA	player0pointerhi
   2442  f526		       a9 07		      LDA	#7
   2443  f528		       85 8e		      STA	player0height
   2444  f52a				   .
   2445  f52a							;
   2446  f52a
   2447  f52a				   .L056		;  player1:
   2448  f52a
   2449  f52a		       a2 38		      LDX	#<playerL056_1
   2450  f52c		       86 8c		      STX	player1pointerlo
   2451  f52e		       a9 fa		      LDA	#>playerL056_1
   2452  f530		       85 8d		      STA	player1pointerhi
   2453  f532		       a9 07		      LDA	#7
   2454  f534		       85 8f		      STA	player1height
   2455  f536				   .
   2456  f536							;
   2457  f536
   2458  f536				   .
   2459  f536							;
   2460  f536
   2461  f536				   .
   2462  f536							;
   2463  f536
   2464  f536				   .L057		;  score  =  0
   2465  f536
   2466  f536		       a9 00		      LDA	#$00
   2467  f538		       85 95		      STA	score+2
   2468  f53a		       a9 00		      LDA	#$00
   2469  f53c		       85 94		      STA	score+1
   2470  f53e		       a9 00		      LDA	#$00
   2471  f540		       85 93		      STA	score
   2472  f542				   .
   2473  f542							;
   2474  f542
   2475  f542				   .L058		;  dim _sc1  =  score
   2476  f542
   2477  f542				   .L059		;  dim _sc2  =  score + 1
   2478  f542
   2479  f542				   .L060		;  dim _sc3  =  score + 2
   2480  f542
   2481  f542				   .
   2482  f542							;
   2483  f542
   2484  f542				   .L061		;  r  =  2
   2485  f542
   2486  f542		       a9 02		      LDA	#2
   2487  f544		       85 e5		      STA	r
   2488  f546				   .L062		;  dim _Chase_Speed  =  r
   2489  f546
   2490  f546				   .
   2491  f546							;
   2492  f546
   2493  f546				   .
   2494  f546							;
   2495  f546
   2496  f546				   .
   2497  f546							;
   2498  f546
   2499  f546				   .
   2500  f546							;
   2501  f546
   2502  f546				   .
   2503  f546							;
   2504  f546
   2505  f546				   .
   2506  f546							;
   2507  f546
   2508  f546				   .
   2509  f546							;
   2510  f546
   2511  f546				   .__Main_Loop
   2512  f546							; __Main_Loop
   2513  f546
   2514  f546				   .
   2515  f546							;
   2516  f546
   2517  f546				   .L063		;  if _Bit1_Game_Over{1} then if joy0fire goto __Start_Restart
   2518  f546
   2519  f546		       a5 eb		      LDA	_Bit1_Game_Over
   2520  f548		       29 02		      AND	#2
   2521  f54a		       f0 07		      BEQ	.skipL063
   2522  f54c				   .condpart0
   2523  f54c		       24 0c		      bit	INPT4
   2524  f54e				  -	      if	((* - .__Start_Restart) < 127) && ((* - .__Start_Restart) > -128)
   2525  f54e				  -	      bpl	.__Start_Restart
   2526  f54e					      else
   2527  f54e		       30 03		      bmi	.0skip__Start_Restart
   2528  f550		       4c 61 f4 	      jmp	.__Start_Restart
   2529  f553				   .0skip__Start_Restart
   2530  f553					      endif
   2531  f553				   .skipL063
   2532  f553				   .
   2533  f553							;
   2534  f553
   2535  f553				   .L064		;  if score  >  15 then _Chase_Speed  =  1
   2536  f553
   2537  f553		       a9 0f		      LDA	#15
   2538  f555		       c5 93		      CMP	score
   2539  f557		       b0 04		      BCS	.skipL064
   2540  f559				   .condpart1
   2541  f559		       a9 01		      LDA	#1
   2542  f55b		       85 e5		      STA	_Chase_Speed
   2543  f55d				   .skipL064
   2544  f55d				   .L065		;  if score  >  30 then _Chase_Speed  =  0
   2545  f55d
   2546  f55d		       a9 1e		      LDA	#30
   2547  f55f		       c5 93		      CMP	score
   2548  f561		       b0 04		      BCS	.skipL065
   2549  f563				   .condpart2
   2550  f563		       a9 00		      LDA	#0
   2551  f565		       85 e5		      STA	_Chase_Speed
   2552  f567				   .skipL065
   2553  f567				   .
   2554  f567							;
   2555  f567
   2556  f567				   .
   2557  f567							;
   2558  f567
   2559  f567				   .
   2560  f567							;
   2561  f567
   2562  f567				   .
   2563  f567							;
   2564  f567
   2565  f567				   .L066		;  if !collision(player0,player1) then __Skip_Player_Caught
   2566  f567
   2567  f567		       24 07		      bit	CXPPMM
   2568  f569					      if	((* - .__Skip_Player_Caught) < 127) && ((* - .__Skip_Player_Caught) > -128)
   2569  f569		       10 09		      bpl	.__Skip_Player_Caught
   2570  f56b				  -	      else
   2571  f56b				  -	      bmi	.1skip__Skip_Player_Caught
   2572  f56b				  -	      jmp	.__Skip_Player_Caught
   2573  f56b				  -.1skip__Skip_Player_Caught
   2574  f56b					      endif
   2575  f56b				   .L067		;  _Bit1_Game_Over{1}	=  1
   2576  f56b
   2577  f56b		       a5 eb		      LDA	_Bit1_Game_Over
   2578  f56d		       09 02		      ORA	#2
   2579  f56f		       85 eb		      STA	_Bit1_Game_Over
   2580  f571				   .L068		;  goto __Game_Over
   2581  f571
   2582  f571		       4c ac f9 	      jmp	.__Game_Over
   2583  f574
   2584  f574				   .__Skip_Player_Caught
   2585  f574							; __Skip_Player_Caught
   2586  f574
   2587  f574				   .
   2588  f574							;
   2589  f574
   2590  f574				   .
   2591  f574							;
   2592  f574
   2593  f574				   .
   2594  f574							;
   2595  f574
   2596  f574				   .
   2597  f574							;
   2598  f574
   2599  f574				   .
   2600  f574							;
   2601  f574
   2602  f574				   .L069		;  NUSIZ0  =  $10  :  missile0height  =  1
   2603  f574
   2604  f574		       a9 10		      LDA	#$10
   2605  f576		       85 04		      STA	NUSIZ0
   2606  f578		       a9 01		      LDA	#1
   2607  f57a		       85 90		      STA	missile0height
   2608  f57c				   .L070		;  NUSIZ1  =  $30  :  missile1height  =  7
   2609  f57c
   2610  f57c		       a9 30		      LDA	#$30
   2611  f57e		       85 05		      STA	NUSIZ1
   2612  f580		       a9 07		      LDA	#7
   2613  f582		       85 87		      STA	missile1height
   2614  f584				   .
   2615  f584							;
   2616  f584
   2617  f584				   .L071		;  missile1x  =  78  :  missile1y  =  48
   2618  f584
   2619  f584		       a9 4e		      LDA	#78
   2620  f586		       85 83		      STA	missile1x
   2621  f588		       a9 30		      LDA	#48
   2622  f58a		       85 88		      STA	missile1y
   2623  f58c				   .
   2624  f58c							;
   2625  f58c
   2626  f58c				   .L072		;  _Frame_Count  =  _Frame_Count  +  1
   2627  f58c
   2628  f58c		       e6 db		      INC	_Frame_Count
   2629  f58e				   .
   2630  f58e							;
   2631  f58e
   2632  f58e				   .
   2633  f58e							;
   2634  f58e
   2635  f58e				   .
   2636  f58e							;
   2637  f58e
   2638  f58e				   .
   2639  f58e							;
   2640  f58e
   2641  f58e				   .
   2642  f58e							;
   2643  f58e
   2644  f58e				   .L073		;  COLUP0  =  $9C
   2645  f58e
   2646  f58e		       a9 9c		      LDA	#$9C
   2647  f590		       85 06		      STA	COLUP0
   2648  f592				   .L074		;  COLUP1  =  $34
   2649  f592
   2650  f592		       a9 34		      LDA	#$34
   2651  f594		       85 07		      STA	COLUP1
   2652  f596				   .L075		;  scorecolor	=  $9C
   2653  f596
   2654  f596		       a9 9c		      LDA	#$9C
   2655  f598		       85 a3		      STA	scorecolor
   2656  f59a				   .
   2657  f59a							;
   2658  f59a
   2659  f59a				   .
   2660  f59a							;
   2661  f59a
   2662  f59a				   .
   2663  f59a							;
   2664  f59a
   2665  f59a				   .
   2666  f59a							;
   2667  f59a
   2668  f59a				   .
   2669  f59a							;
   2670  f59a
   2671  f59a				   .
   2672  f59a							;
   2673  f59a
   2674  f59a				   .
   2675  f59a							;
   2676  f59a
   2677  f59a				   .
   2678  f59a							;
   2679  f59a
   2680  f59a				   .L076		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   2681  f59a
   2682  f59a		       a9 10		      lda	#$10
   2683  f59c		       2c 80 02 	      bit	SWCHA
   2684  f59f		       f0 14		      BEQ	.skipL076
   2685  f5a1				   .condpart3
   2686  f5a1		       a9 20		      lda	#$20
   2687  f5a3		       2c 80 02 	      bit	SWCHA
   2688  f5a6		       f0 0d		      BEQ	.skip3then
   2689  f5a8				   .condpart4
   2690  f5a8		       2c 80 02 	      bit	SWCHA
   2691  f5ab		       50 08		      BVC	.skip4then
   2692  f5ad				   .condpart5
   2693  f5ad		       2c 80 02 	      bit	SWCHA
   2694  f5b0		       10 03		      BPL	.skip5then
   2695  f5b2				   .condpart6
   2696  f5b2		       4c bb f5 	      jmp	.__Skip_Joystick_Precheck
   2697  f5b5
   2698  f5b5				   .skip5then
   2699  f5b5				   .skip4then
   2700  f5b5				   .skip3then
   2701  f5b5				   .skipL076
   2702  f5b5				   .
   2703  f5b5							;
   2704  f5b5
   2705  f5b5				   .
   2706  f5b5							;
   2707  f5b5
   2708  f5b5				   .
   2709  f5b5							;
   2710  f5b5
   2711  f5b5				   .
   2712  f5b5							;
   2713  f5b5
   2714  f5b5				   .L077		;  _BitOp_P0_M0_Dir  =  _BitOp_P0_M0_Dir  &  %11110000
   2715  f5b5
   2716  f5b5		       a5 da		      LDA	_BitOp_P0_M0_Dir
   2717  f5b7		       29 f0		      AND	#%11110000
   2718  f5b9		       85 da		      STA	_BitOp_P0_M0_Dir
   2719  f5bb				   .
   2720  f5bb							;
   2721  f5bb
   2722  f5bb				   .__Skip_Joystick_Precheck
   2723  f5bb							; __Skip_Joystick_Precheck
   2724  f5bb
   2725  f5bb				   .
   2726  f5bb							;
   2727  f5bb
   2728  f5bb				   .
   2729  f5bb							;
   2730  f5bb
   2731  f5bb				   .
   2732  f5bb							;
   2733  f5bb
   2734  f5bb				   .
   2735  f5bb							;
   2736  f5bb
   2737  f5bb				   .
   2738  f5bb							;
   2739  f5bb
   2740  f5bb				   .
   2741  f5bb							;
   2742  f5bb
   2743  f5bb				   .
   2744  f5bb							;
   2745  f5bb
   2746  f5bb				   .
   2747  f5bb							;
   2748  f5bb
   2749  f5bb				   .L078		;  if !joy0up then goto __Skip_Joy0_Up
   2750  f5bb
   2751  f5bb		       a9 10		      lda	#$10
   2752  f5bd		       2c 80 02 	      bit	SWCHA
   2753  f5c0		       f0 03		      BEQ	.skipL078
   2754  f5c2				   .condpart7
   2755  f5c2		       4c 2f f6 	      jmp	.__Skip_Joy0_Up
   2756  f5c5
   2757  f5c5				   .skipL078
   2758  f5c5				   .
   2759  f5c5							;
   2760  f5c5
   2761  f5c5				   .
   2762  f5c5							;
   2763  f5c5
   2764  f5c5				   .
   2765  f5c5							;
   2766  f5c5
   2767  f5c5				   .
   2768  f5c5							;
   2769  f5c5
   2770  f5c5				   .L079		;  _Bit0_P0_Dir_Up{0}	=  1
   2771  f5c5
   2772  f5c5		       a5 da		      LDA	_Bit0_P0_Dir_Up
   2773  f5c7		       09 01		      ORA	#1
   2774  f5c9		       85 da		      STA	_Bit0_P0_Dir_Up
   2775  f5cb				   .
   2776  f5cb							;
   2777  f5cb
   2778  f5cb				   .
   2779  f5cb							;
   2780  f5cb
   2781  f5cb				   .
   2782  f5cb							;
   2783  f5cb
   2784  f5cb				   .
   2785  f5cb							;
   2786  f5cb
   2787  f5cb				   .L080		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   2788  f5cb
   2789  f5cb		       a9 09		      LDA	#_P_Edge_Top
   2790  f5cd		       c5 85		      CMP	player0y
   2791  f5cf		       90 03		      BCC	.skipL080
   2792  f5d1				   .condpart8
   2793  f5d1		       4c 2f f6 	      jmp	.__Skip_Joy0_Up
   2794  f5d4
   2795  f5d4				   .skipL080
   2796  f5d4				   .
   2797  f5d4							;
   2798  f5d4
   2799  f5d4				   .
   2800  f5d4							;
   2801  f5d4
   2802  f5d4				   .
   2803  f5d4							;
   2804  f5d4
   2805  f5d4				   .
   2806  f5d4							;
   2807  f5d4
   2808  f5d4				   .L081		;  temp5  =   ( player0x - 10 )  / 4
   2809  f5d4
   2810  f5d4							; complex statement detected
   2811  f5d4		       a5 80		      LDA	player0x
   2812  f5d6		       38		      SEC
   2813  f5d7		       e9 0a		      SBC	#10
   2814  f5d9		       4a		      lsr
   2815  f5da		       4a		      lsr
   2816  f5db		       85 a0		      STA	temp5
   2817  f5dd				   .
   2818  f5dd							;
   2819  f5dd
   2820  f5dd				   .L082		;  temp6  =   ( player0y - 9 )  / 8
   2821  f5dd
   2822  f5dd							; complex statement detected
   2823  f5dd		       a5 85		      LDA	player0y
   2824  f5df		       38		      SEC
   2825  f5e0		       e9 09		      SBC	#9
   2826  f5e2		       4a		      lsr
   2827  f5e3		       4a		      lsr
   2828  f5e4		       4a		      lsr
   2829  f5e5		       85 a1		      STA	temp6
   2830  f5e7				   .
   2831  f5e7							;
   2832  f5e7
   2833  f5e7				   .L083		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   2834  f5e7
   2835  f5e7		       a5 a0		      LDA	temp5
   2836  f5e9		       c9 22		      CMP	#34
   2837  f5eb		       b0 0c		      BCS	.skipL083
   2838  f5ed				   .condpart9
   2839  f5ed		       a5 a0		      LDA	temp5
   2840  f5ef		       a4 a1		      LDY	temp6
   2841  f5f1		       20 6b f2 	      jsr	pfread
   2842  f5f4		       d0 03		      BNE	.skip9then
   2843  f5f6				   .condpart10
   2844  f5f6		       4c 2f f6 	      jmp	.__Skip_Joy0_Up
   2845  f5f9
   2846  f5f9				   .skip9then
   2847  f5f9				   .skipL083
   2848  f5f9				   .
   2849  f5f9							;
   2850  f5f9
   2851  f5f9				   .L084		;  temp4  =   ( player0x - 17 )  / 4
   2852  f5f9
   2853  f5f9							; complex statement detected
   2854  f5f9		       a5 80		      LDA	player0x
   2855  f5fb		       38		      SEC
   2856  f5fc		       e9 11		      SBC	#17
   2857  f5fe		       4a		      lsr
   2858  f5ff		       4a		      lsr
   2859  f600		       85 9f		      STA	temp4
   2860  f602				   .
   2861  f602							;
   2862  f602
   2863  f602				   .L085		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   2864  f602
   2865  f602		       a5 9f		      LDA	temp4
   2866  f604		       c9 22		      CMP	#34
   2867  f606		       b0 0c		      BCS	.skipL085
   2868  f608				   .condpart11
   2869  f608		       a5 9f		      LDA	temp4
   2870  f60a		       a4 a1		      LDY	temp6
   2871  f60c		       20 6b f2 	      jsr	pfread
   2872  f60f		       d0 03		      BNE	.skip11then
   2873  f611				   .condpart12
   2874  f611		       4c 2f f6 	      jmp	.__Skip_Joy0_Up
   2875  f614
   2876  f614				   .skip11then
   2877  f614				   .skipL085
   2878  f614				   .
   2879  f614							;
   2880  f614
   2881  f614				   .L086		;  temp3  =  temp5  -	1
   2882  f614
   2883  f614		       a5 a0		      LDA	temp5
   2884  f616		       38		      SEC
   2885  f617		       e9 01		      SBC	#1
   2886  f619		       85 9e		      STA	temp3
   2887  f61b				   .
   2888  f61b							;
   2889  f61b
   2890  f61b				   .L087		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   2891  f61b
   2892  f61b		       a5 9e		      LDA	temp3
   2893  f61d		       c9 22		      CMP	#34
   2894  f61f		       b0 0c		      BCS	.skipL087
   2895  f621				   .condpart13
   2896  f621		       a5 9e		      LDA	temp3
   2897  f623		       a4 a1		      LDY	temp6
   2898  f625		       20 6b f2 	      jsr	pfread
   2899  f628		       d0 03		      BNE	.skip13then
   2900  f62a				   .condpart14
   2901  f62a		       4c 2f f6 	      jmp	.__Skip_Joy0_Up
   2902  f62d
   2903  f62d				   .skip13then
   2904  f62d				   .skipL087
   2905  f62d				   .
   2906  f62d							;
   2907  f62d
   2908  f62d				   .
   2909  f62d							;
   2910  f62d
   2911  f62d				   .
   2912  f62d							;
   2913  f62d
   2914  f62d				   .
   2915  f62d							;
   2916  f62d
   2917  f62d				   .L088		;  player0y  =  player0y  -  1
   2918  f62d
   2919  f62d		       c6 85		      DEC	player0y
   2920  f62f				   .
   2921  f62f							;
   2922  f62f
   2923  f62f				   .__Skip_Joy0_Up
   2924  f62f							; __Skip_Joy0_Up
   2925  f62f
   2926  f62f				   .
   2927  f62f							;
   2928  f62f
   2929  f62f				   .
   2930  f62f							;
   2931  f62f
   2932  f62f				   .
   2933  f62f							;
   2934  f62f
   2935  f62f				   .
   2936  f62f							;
   2937  f62f
   2938  f62f				   .
   2939  f62f							;
   2940  f62f
   2941  f62f				   .
   2942  f62f							;
   2943  f62f
   2944  f62f				   .
   2945  f62f							;
   2946  f62f
   2947  f62f				   .
   2948  f62f							;
   2949  f62f
   2950  f62f				   .
   2951  f62f							;
   2952  f62f
   2953  f62f				   .
   2954  f62f							;
   2955  f62f
   2956  f62f				   .L089		;  if !joy0down then goto __Skip_Joy0_Down
   2957  f62f
   2958  f62f		       a9 20		      lda	#$20
   2959  f631		       2c 80 02 	      bit	SWCHA
   2960  f634		       f0 03		      BEQ	.skipL089
   2961  f636				   .condpart15
   2962  f636		       4c a0 f6 	      jmp	.__Skip_Joy0_Down
   2963  f639
   2964  f639				   .skipL089
   2965  f639				   .
   2966  f639							;
   2967  f639
   2968  f639				   .
   2969  f639							;
   2970  f639
   2971  f639				   .
   2972  f639							;
   2973  f639
   2974  f639				   .
   2975  f639							;
   2976  f639
   2977  f639				   .L090		;  _Bit1_P0_Dir_Down{1}  =  1
   2978  f639
   2979  f639		       a5 da		      LDA	_Bit1_P0_Dir_Down
   2980  f63b		       09 02		      ORA	#2
   2981  f63d		       85 da		      STA	_Bit1_P0_Dir_Down
   2982  f63f				   .
   2983  f63f							;
   2984  f63f
   2985  f63f				   .
   2986  f63f							;
   2987  f63f
   2988  f63f				   .
   2989  f63f							;
   2990  f63f
   2991  f63f				   .
   2992  f63f							;
   2993  f63f
   2994  f63f				   .L091		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   2995  f63f
   2996  f63f		       a5 85		      LDA	player0y
   2997  f641		       c9 58		      CMP	#_P_Edge_Bottom
   2998  f643		       90 03		      BCC	.skipL091
   2999  f645				   .condpart16
   3000  f645		       4c a0 f6 	      jmp	.__Skip_Joy0_Down
   3001  f648
   3002  f648				   .skipL091
   3003  f648				   .
   3004  f648							;
   3005  f648
   3006  f648				   .
   3007  f648							;
   3008  f648
   3009  f648				   .
   3010  f648							;
   3011  f648
   3012  f648				   .
   3013  f648							;
   3014  f648
   3015  f648				   .L092		;  temp5  =   ( player0x - 10 )  / 4
   3016  f648
   3017  f648							; complex statement detected
   3018  f648		       a5 80		      LDA	player0x
   3019  f64a		       38		      SEC
   3020  f64b		       e9 0a		      SBC	#10
   3021  f64d		       4a		      lsr
   3022  f64e		       4a		      lsr
   3023  f64f		       85 a0		      STA	temp5
   3024  f651				   .
   3025  f651							;
   3026  f651
   3027  f651				   .L093		;  temp6  =   ( player0y )  / 8
   3028  f651
   3029  f651							; complex statement detected
   3030  f651		       a5 85		      LDA	player0y
   3031  f653		       4a		      lsr
   3032  f654		       4a		      lsr
   3033  f655		       4a		      lsr
   3034  f656		       85 a1		      STA	temp6
   3035  f658				   .
   3036  f658							;
   3037  f658
   3038  f658				   .L094		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   3039  f658
   3040  f658		       a5 a0		      LDA	temp5
   3041  f65a		       c9 22		      CMP	#34
   3042  f65c		       b0 0c		      BCS	.skipL094
   3043  f65e				   .condpart17
   3044  f65e		       a5 a0		      LDA	temp5
   3045  f660		       a4 a1		      LDY	temp6
   3046  f662		       20 6b f2 	      jsr	pfread
   3047  f665		       d0 03		      BNE	.skip17then
   3048  f667				   .condpart18
   3049  f667		       4c a0 f6 	      jmp	.__Skip_Joy0_Down
   3050  f66a
   3051  f66a				   .skip17then
   3052  f66a				   .skipL094
   3053  f66a				   .
   3054  f66a							;
   3055  f66a
   3056  f66a				   .L095		;  temp4  =   ( player0x - 17 )  / 4
   3057  f66a
   3058  f66a							; complex statement detected
   3059  f66a		       a5 80		      LDA	player0x
   3060  f66c		       38		      SEC
   3061  f66d		       e9 11		      SBC	#17
   3062  f66f		       4a		      lsr
   3063  f670		       4a		      lsr
   3064  f671		       85 9f		      STA	temp4
   3065  f673				   .
   3066  f673							;
   3067  f673
   3068  f673				   .L096		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3069  f673
   3070  f673		       a5 9f		      LDA	temp4
   3071  f675		       c9 22		      CMP	#34
   3072  f677		       b0 0c		      BCS	.skipL096
   3073  f679				   .condpart19
   3074  f679		       a5 9f		      LDA	temp4
   3075  f67b		       a4 a1		      LDY	temp6
   3076  f67d		       20 6b f2 	      jsr	pfread
   3077  f680		       d0 03		      BNE	.skip19then
   3078  f682				   .condpart20
   3079  f682		       4c a0 f6 	      jmp	.__Skip_Joy0_Down
   3080  f685
   3081  f685				   .skip19then
   3082  f685				   .skipL096
   3083  f685				   .
   3084  f685							;
   3085  f685
   3086  f685				   .L097		;  temp3  =  temp5  -	1
   3087  f685
   3088  f685		       a5 a0		      LDA	temp5
   3089  f687		       38		      SEC
   3090  f688		       e9 01		      SBC	#1
   3091  f68a		       85 9e		      STA	temp3
   3092  f68c				   .
   3093  f68c							;
   3094  f68c
   3095  f68c				   .L098		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   3096  f68c
   3097  f68c		       a5 9e		      LDA	temp3
   3098  f68e		       c9 22		      CMP	#34
   3099  f690		       b0 0c		      BCS	.skipL098
   3100  f692				   .condpart21
   3101  f692		       a5 9e		      LDA	temp3
   3102  f694		       a4 a1		      LDY	temp6
   3103  f696		       20 6b f2 	      jsr	pfread
   3104  f699		       d0 03		      BNE	.skip21then
   3105  f69b				   .condpart22
   3106  f69b		       4c a0 f6 	      jmp	.__Skip_Joy0_Down
   3107  f69e
   3108  f69e				   .skip21then
   3109  f69e				   .skipL098
   3110  f69e				   .
   3111  f69e							;
   3112  f69e
   3113  f69e				   .
   3114  f69e							;
   3115  f69e
   3116  f69e				   .
   3117  f69e							;
   3118  f69e
   3119  f69e				   .
   3120  f69e							;
   3121  f69e
   3122  f69e				   .L099		;  player0y  =  player0y  +  1
   3123  f69e
   3124  f69e		       e6 85		      INC	player0y
   3125  f6a0				   .
   3126  f6a0							;
   3127  f6a0
   3128  f6a0				   .__Skip_Joy0_Down
   3129  f6a0							; __Skip_Joy0_Down
   3130  f6a0
   3131  f6a0				   .
   3132  f6a0							;
   3133  f6a0
   3134  f6a0				   .
   3135  f6a0							;
   3136  f6a0
   3137  f6a0				   .
   3138  f6a0							;
   3139  f6a0
   3140  f6a0				   .
   3141  f6a0							;
   3142  f6a0
   3143  f6a0				   .
   3144  f6a0							;
   3145  f6a0
   3146  f6a0				   .
   3147  f6a0							;
   3148  f6a0
   3149  f6a0				   .
   3150  f6a0							;
   3151  f6a0
   3152  f6a0				   .
   3153  f6a0							;
   3154  f6a0
   3155  f6a0				   .
   3156  f6a0							;
   3157  f6a0
   3158  f6a0				   .
   3159  f6a0							;
   3160  f6a0
   3161  f6a0				   .L0100		;  if !joy0left then goto __Skip_Joy0_Left
   3162  f6a0
   3163  f6a0		       2c 80 02 	      bit	SWCHA
   3164  f6a3		       50 03		      BVC	.skipL0100
   3165  f6a5				   .condpart23
   3166  f6a5		       4c fa f6 	      jmp	.__Skip_Joy0_Left
   3167  f6a8
   3168  f6a8				   .skipL0100
   3169  f6a8				   .
   3170  f6a8							;
   3171  f6a8
   3172  f6a8				   .
   3173  f6a8							;
   3174  f6a8
   3175  f6a8				   .
   3176  f6a8							;
   3177  f6a8
   3178  f6a8				   .
   3179  f6a8							;
   3180  f6a8
   3181  f6a8				   .L0101		;  _Bit2_P0_Dir_Left{2}  =  1
   3182  f6a8
   3183  f6a8		       a5 da		      LDA	_Bit2_P0_Dir_Left
   3184  f6aa		       09 04		      ORA	#4
   3185  f6ac		       85 da		      STA	_Bit2_P0_Dir_Left
   3186  f6ae				   .
   3187  f6ae							;
   3188  f6ae
   3189  f6ae				   .
   3190  f6ae							;
   3191  f6ae
   3192  f6ae				   .
   3193  f6ae							;
   3194  f6ae
   3195  f6ae				   .
   3196  f6ae							;
   3197  f6ae
   3198  f6ae				   .L0102		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   3199  f6ae
   3200  f6ae		       a9 01		      LDA	#_P_Edge_Left
   3201  f6b0		       c5 80		      CMP	player0x
   3202  f6b2		       90 03		      BCC	.skipL0102
   3203  f6b4				   .condpart24
   3204  f6b4		       4c fa f6 	      jmp	.__Skip_Joy0_Left
   3205  f6b7
   3206  f6b7				   .skipL0102
   3207  f6b7				   .
   3208  f6b7							;
   3209  f6b7
   3210  f6b7				   .
   3211  f6b7							;
   3212  f6b7
   3213  f6b7				   .
   3214  f6b7							;
   3215  f6b7
   3216  f6b7				   .
   3217  f6b7							;
   3218  f6b7
   3219  f6b7				   .L0103		;  temp5  =   ( player0y - 1 )  / 8
   3220  f6b7
   3221  f6b7							; complex statement detected
   3222  f6b7		       a5 85		      LDA	player0y
   3223  f6b9		       38		      SEC
   3224  f6ba		       e9 01		      SBC	#1
   3225  f6bc		       4a		      lsr
   3226  f6bd		       4a		      lsr
   3227  f6be		       4a		      lsr
   3228  f6bf		       85 a0		      STA	temp5
   3229  f6c1				   .
   3230  f6c1							;
   3231  f6c1
   3232  f6c1				   .L0104		;  temp6  =   ( player0x - 18 )  / 4
   3233  f6c1
   3234  f6c1							; complex statement detected
   3235  f6c1		       a5 80		      LDA	player0x
   3236  f6c3		       38		      SEC
   3237  f6c4		       e9 12		      SBC	#18
   3238  f6c6		       4a		      lsr
   3239  f6c7		       4a		      lsr
   3240  f6c8		       85 a1		      STA	temp6
   3241  f6ca				   .
   3242  f6ca							;
   3243  f6ca
   3244  f6ca				   .L0105		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   3245  f6ca
   3246  f6ca		       a5 a1		      LDA	temp6
   3247  f6cc		       c9 22		      CMP	#34
   3248  f6ce		       b0 0c		      BCS	.skipL0105
   3249  f6d0				   .condpart25
   3250  f6d0		       a5 a1		      LDA	temp6
   3251  f6d2		       a4 a0		      LDY	temp5
   3252  f6d4		       20 6b f2 	      jsr	pfread
   3253  f6d7		       d0 03		      BNE	.skip25then
   3254  f6d9				   .condpart26
   3255  f6d9		       4c fa f6 	      jmp	.__Skip_Joy0_Left
   3256  f6dc
   3257  f6dc				   .skip25then
   3258  f6dc				   .skipL0105
   3259  f6dc				   .
   3260  f6dc							;
   3261  f6dc
   3262  f6dc				   .L0106		;  temp3  =   ( player0y - 8 )  / 8
   3263  f6dc
   3264  f6dc							; complex statement detected
   3265  f6dc		       a5 85		      LDA	player0y
   3266  f6de		       38		      SEC
   3267  f6df		       e9 08		      SBC	#8
   3268  f6e1		       4a		      lsr
   3269  f6e2		       4a		      lsr
   3270  f6e3		       4a		      lsr
   3271  f6e4		       85 9e		      STA	temp3
   3272  f6e6				   .
   3273  f6e6							;
   3274  f6e6
   3275  f6e6				   .L0107		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   3276  f6e6
   3277  f6e6		       a5 a1		      LDA	temp6
   3278  f6e8		       c9 22		      CMP	#34
   3279  f6ea		       b0 0c		      BCS	.skipL0107
   3280  f6ec				   .condpart27
   3281  f6ec		       a5 a1		      LDA	temp6
   3282  f6ee		       a4 9e		      LDY	temp3
   3283  f6f0		       20 6b f2 	      jsr	pfread
   3284  f6f3		       d0 03		      BNE	.skip27then
   3285  f6f5				   .condpart28
   3286  f6f5		       4c fa f6 	      jmp	.__Skip_Joy0_Left
   3287  f6f8
   3288  f6f8				   .skip27then
   3289  f6f8				   .skipL0107
   3290  f6f8				   .
   3291  f6f8							;
   3292  f6f8
   3293  f6f8				   .
   3294  f6f8							;
   3295  f6f8
   3296  f6f8				   .
   3297  f6f8							;
   3298  f6f8
   3299  f6f8				   .
   3300  f6f8							;
   3301  f6f8
   3302  f6f8				   .L0108		;  player0x  =  player0x  -  1
   3303  f6f8
   3304  f6f8		       c6 80		      DEC	player0x
   3305  f6fa				   .
   3306  f6fa							;
   3307  f6fa
   3308  f6fa				   .__Skip_Joy0_Left
   3309  f6fa							; __Skip_Joy0_Left
   3310  f6fa
   3311  f6fa				   .
   3312  f6fa							;
   3313  f6fa
   3314  f6fa				   .
   3315  f6fa							;
   3316  f6fa
   3317  f6fa				   .
   3318  f6fa							;
   3319  f6fa
   3320  f6fa				   .
   3321  f6fa							;
   3322  f6fa
   3323  f6fa				   .
   3324  f6fa							;
   3325  f6fa
   3326  f6fa				   .
   3327  f6fa							;
   3328  f6fa
   3329  f6fa				   .
   3330  f6fa							;
   3331  f6fa
   3332  f6fa				   .
   3333  f6fa							;
   3334  f6fa
   3335  f6fa				   .
   3336  f6fa							;
   3337  f6fa
   3338  f6fa				   .
   3339  f6fa							;
   3340  f6fa
   3341  f6fa				   .L0109		;  if !joy0right then goto __Skip_Joy0_Right
   3342  f6fa
   3343  f6fa		       2c 80 02 	      bit	SWCHA
   3344  f6fd		       10 03		      BPL	.skipL0109
   3345  f6ff				   .condpart29
   3346  f6ff		       4c 54 f7 	      jmp	.__Skip_Joy0_Right
   3347  f702
   3348  f702				   .skipL0109
   3349  f702				   .
   3350  f702							;
   3351  f702
   3352  f702				   .
   3353  f702							;
   3354  f702
   3355  f702				   .
   3356  f702							;
   3357  f702
   3358  f702				   .
   3359  f702							;
   3360  f702
   3361  f702				   .L0110		;  _Bit3_P0_Dir_Right{3}  =  1
   3362  f702
   3363  f702		       a5 da		      LDA	_Bit3_P0_Dir_Right
   3364  f704		       09 08		      ORA	#8
   3365  f706		       85 da		      STA	_Bit3_P0_Dir_Right
   3366  f708				   .
   3367  f708							;
   3368  f708
   3369  f708				   .
   3370  f708							;
   3371  f708
   3372  f708				   .
   3373  f708							;
   3374  f708
   3375  f708				   .
   3376  f708							;
   3377  f708
   3378  f708				   .L0111		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   3379  f708
   3380  f708		       a5 80		      LDA	player0x
   3381  f70a		       c9 99		      CMP	#_P_Edge_Right
   3382  f70c		       90 03		      BCC	.skipL0111
   3383  f70e				   .condpart30
   3384  f70e		       4c 54 f7 	      jmp	.__Skip_Joy0_Right
   3385  f711
   3386  f711				   .skipL0111
   3387  f711				   .
   3388  f711							;
   3389  f711
   3390  f711				   .
   3391  f711							;
   3392  f711
   3393  f711				   .
   3394  f711							;
   3395  f711
   3396  f711				   .
   3397  f711							;
   3398  f711
   3399  f711				   .L0112		;  temp5  =   ( player0y - 1 )  / 8
   3400  f711
   3401  f711							; complex statement detected
   3402  f711		       a5 85		      LDA	player0y
   3403  f713		       38		      SEC
   3404  f714		       e9 01		      SBC	#1
   3405  f716		       4a		      lsr
   3406  f717		       4a		      lsr
   3407  f718		       4a		      lsr
   3408  f719		       85 a0		      STA	temp5
   3409  f71b				   .
   3410  f71b							;
   3411  f71b
   3412  f71b				   .L0113		;  temp6  =   ( player0x - 9 )  / 4
   3413  f71b
   3414  f71b							; complex statement detected
   3415  f71b		       a5 80		      LDA	player0x
   3416  f71d		       38		      SEC
   3417  f71e		       e9 09		      SBC	#9
   3418  f720		       4a		      lsr
   3419  f721		       4a		      lsr
   3420  f722		       85 a1		      STA	temp6
   3421  f724				   .
   3422  f724							;
   3423  f724
   3424  f724				   .L0114		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   3425  f724
   3426  f724		       a5 a1		      LDA	temp6
   3427  f726		       c9 22		      CMP	#34
   3428  f728		       b0 0c		      BCS	.skipL0114
   3429  f72a				   .condpart31
   3430  f72a		       a5 a1		      LDA	temp6
   3431  f72c		       a4 a0		      LDY	temp5
   3432  f72e		       20 6b f2 	      jsr	pfread
   3433  f731		       d0 03		      BNE	.skip31then
   3434  f733				   .condpart32
   3435  f733		       4c 54 f7 	      jmp	.__Skip_Joy0_Right
   3436  f736
   3437  f736				   .skip31then
   3438  f736				   .skipL0114
   3439  f736				   .
   3440  f736							;
   3441  f736
   3442  f736				   .L0115		;  temp3  =   ( player0y - 8 )  / 8
   3443  f736
   3444  f736							; complex statement detected
   3445  f736		       a5 85		      LDA	player0y
   3446  f738		       38		      SEC
   3447  f739		       e9 08		      SBC	#8
   3448  f73b		       4a		      lsr
   3449  f73c		       4a		      lsr
   3450  f73d		       4a		      lsr
   3451  f73e		       85 9e		      STA	temp3
   3452  f740				   .
   3453  f740							;
   3454  f740
   3455  f740				   .L0116		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   3456  f740
   3457  f740		       a5 a1		      LDA	temp6
   3458  f742		       c9 22		      CMP	#34
   3459  f744		       b0 0c		      BCS	.skipL0116
   3460  f746				   .condpart33
   3461  f746		       a5 a1		      LDA	temp6
   3462  f748		       a4 9e		      LDY	temp3
   3463  f74a		       20 6b f2 	      jsr	pfread
   3464  f74d		       d0 03		      BNE	.skip33then
   3465  f74f				   .condpart34
   3466  f74f		       4c 54 f7 	      jmp	.__Skip_Joy0_Right
   3467  f752
   3468  f752				   .skip33then
   3469  f752				   .skipL0116
   3470  f752				   .
   3471  f752							;
   3472  f752
   3473  f752				   .
   3474  f752							;
   3475  f752
   3476  f752				   .
   3477  f752							;
   3478  f752
   3479  f752				   .
   3480  f752							;
   3481  f752
   3482  f752				   .L0117		;  player0x  =  player0x  +  1
   3483  f752
   3484  f752		       e6 80		      INC	player0x
   3485  f754				   .
   3486  f754							;
   3487  f754
   3488  f754				   .__Skip_Joy0_Right
   3489  f754							; __Skip_Joy0_Right
   3490  f754
   3491  f754				   .
   3492  f754							;
   3493  f754
   3494  f754				   .
   3495  f754							;
   3496  f754
   3497  f754				   .
   3498  f754							;
   3499  f754
   3500  f754				   .
   3501  f754							;
   3502  f754
   3503  f754				   .
   3504  f754							;
   3505  f754
   3506  f754				   .L0118		;  temp1  =  player0x	+  8
   3507  f754
   3508  f754		       a5 80		      LDA	player0x
   3509  f756		       18		      CLC
   3510  f757		       69 08		      ADC	#8
   3511  f759		       85 9c		      STA	temp1
   3512  f75b				   .L0119		;  temp2  =  player0y	+  8
   3513  f75b
   3514  f75b		       a5 85		      LDA	player0y
   3515  f75d		       18		      CLC
   3516  f75e		       69 08		      ADC	#8
   3517  f760		       85 9d		      STA	temp2
   3518  f762				   .
   3519  f762							;
   3520  f762
   3521  f762				   .L0120		;  temp3  =  player1x	+  4
   3522  f762
   3523  f762		       a5 81		      LDA	player1x
   3524  f764		       18		      CLC
   3525  f765		       69 04		      ADC	#4
   3526  f767		       85 9e		      STA	temp3
   3527  f769				   .L0121		;  temp4  =  player1y	+  4
   3528  f769
   3529  f769		       a5 86		      LDA	player1y
   3530  f76b		       18		      CLC
   3531  f76c		       69 04		      ADC	#4
   3532  f76e		       85 9f		      STA	temp4
   3533  f770				   .
   3534  f770							;
   3535  f770
   3536  f770				   .L0122		;  temp5  =  _Minotaur_Awareness_Size
   3537  f770
   3538  f770		       a9 64		      LDA	#_Minotaur_Awareness_Size
   3539  f772		       85 a0		      STA	temp5
   3540  f774				   .
   3541  f774							;
   3542  f774
   3543  f774				   .L0123		;  if _Frame_Count  &	_Chase_Speed then goto __Skip_AI_Right
   3544  f774
   3545  f774		       a5 db		      LDA	_Frame_Count
   3546  f776		       25 e5		      AND	_Chase_Speed
   3547  f778		       f0 03		      BEQ	.skipL0123
   3548  f77a				   .condpart35
   3549  f77a		       4c 64 f9 	      jmp	.__Skip_AI_Right
   3550  f77d
   3551  f77d				   .skipL0123
   3552  f77d				   .
   3553  f77d							;
   3554  f77d
   3555  f77d				   .
   3556  f77d							;
   3557  f77d
   3558  f77d				   .L0124		;  if player0y  >=  temp4  +  temp5 then goto __Skip_AI_Right
   3559  f77d
   3560  f77d							; complex condition detected
   3561  f77d		       a5 9f		      LDA	temp4
   3562  f77f		       18		      CLC
   3563  f780		       65 a0		      ADC	temp5
   3564  f782		       48		      PHA
   3565  f783		       ba		      TSX
   3566  f784		       68		      PLA
   3567  f785		       a5 85		      LDA	player0y
   3568  f787		       d5 01		      CMP	1,x
   3569  f789		       90 03		      BCC	.skipL0124
   3570  f78b				   .condpart36
   3571  f78b		       4c 64 f9 	      jmp	.__Skip_AI_Right
   3572  f78e
   3573  f78e				   .skipL0124
   3574  f78e				   .
   3575  f78e							;
   3576  f78e
   3577  f78e				   .
   3578  f78e							;
   3579  f78e
   3580  f78e				   .L0125		;  if temp4  <  temp5 then temp4  =  temp5
   3581  f78e
   3582  f78e		       a5 9f		      LDA	temp4
   3583  f790		       c5 a0		      CMP	temp5
   3584  f792		       b0 04		      BCS	.skipL0125
   3585  f794				   .condpart37
   3586  f794		       a5 a0		      LDA	temp5
   3587  f796		       85 9f		      STA	temp4
   3588  f798				   .skipL0125
   3589  f798				   .L0126		;  if temp2  <=  temp4  -  temp5 then goto __Skip_AI_Right
   3590  f798
   3591  f798							; complex condition detected
   3592  f798		       a5 9f		      LDA	temp4
   3593  f79a		       38		      SEC
   3594  f79b		       e5 a0		      SBC	temp5
   3595  f79d		       c5 9d		      CMP	temp2
   3596  f79f		       90 03		      BCC	.skipL0126
   3597  f7a1				   .condpart38
   3598  f7a1		       4c 64 f9 	      jmp	.__Skip_AI_Right
   3599  f7a4
   3600  f7a4				   .skipL0126
   3601  f7a4				   .
   3602  f7a4							;
   3603  f7a4
   3604  f7a4				   .
   3605  f7a4							;
   3606  f7a4
   3607  f7a4				   .L0127		;  if temp3  <  temp5 then temp3  =  temp5
   3608  f7a4
   3609  f7a4		       a5 9e		      LDA	temp3
   3610  f7a6		       c5 a0		      CMP	temp5
   3611  f7a8		       b0 04		      BCS	.skipL0127
   3612  f7aa				   .condpart39
   3613  f7aa		       a5 a0		      LDA	temp5
   3614  f7ac		       85 9e		      STA	temp3
   3615  f7ae				   .skipL0127
   3616  f7ae				   .L0128		;  if temp1  <=  temp3  -  temp5 then goto __Skip_AI_Right
   3617  f7ae
   3618  f7ae							; complex condition detected
   3619  f7ae		       a5 9e		      LDA	temp3
   3620  f7b0		       38		      SEC
   3621  f7b1		       e5 a0		      SBC	temp5
   3622  f7b3		       c5 9c		      CMP	temp1
   3623  f7b5		       90 03		      BCC	.skipL0128
   3624  f7b7				   .condpart40
   3625  f7b7		       4c 64 f9 	      jmp	.__Skip_AI_Right
   3626  f7ba
   3627  f7ba				   .skipL0128
   3628  f7ba				   .
   3629  f7ba							;
   3630  f7ba
   3631  f7ba				   .
   3632  f7ba							;
   3633  f7ba
   3634  f7ba				   .L0129		;  if player0x  >=  temp3  +  temp5 then goto __Skip_AI_Right
   3635  f7ba
   3636  f7ba							; complex condition detected
   3637  f7ba		       a5 9e		      LDA	temp3
   3638  f7bc		       18		      CLC
   3639  f7bd		       65 a0		      ADC	temp5
   3640  f7bf		       48		      PHA
   3641  f7c0		       ba		      TSX
   3642  f7c1		       68		      PLA
   3643  f7c2		       a5 80		      LDA	player0x
   3644  f7c4		       d5 01		      CMP	1,x
   3645  f7c6		       90 03		      BCC	.skipL0129
   3646  f7c8				   .condpart41
   3647  f7c8		       4c 64 f9 	      jmp	.__Skip_AI_Right
   3648  f7cb
   3649  f7cb				   .skipL0129
   3650  f7cb				   .
   3651  f7cb							;
   3652  f7cb
   3653  f7cb				   .
   3654  f7cb							;
   3655  f7cb
   3656  f7cb				   .
   3657  f7cb							;
   3658  f7cb
   3659  f7cb				   .
   3660  f7cb							;
   3661  f7cb
   3662  f7cb				   .
   3663  f7cb							;
   3664  f7cb
   3665  f7cb				   .
   3666  f7cb							;
   3667  f7cb
   3668  f7cb				   .
   3669  f7cb							;
   3670  f7cb
   3671  f7cb				   .
   3672  f7cb							;
   3673  f7cb
   3674  f7cb				   .
   3675  f7cb							;
   3676  f7cb
   3677  f7cb				   .
   3678  f7cb							;
   3679  f7cb
   3680  f7cb				   .
   3681  f7cb							;
   3682  f7cb
   3683  f7cb				   .L0130		;  if player1y  <=  player0y then goto __Skip_AI_Up
   3684  f7cb
   3685  f7cb		       a5 85		      LDA	player0y
   3686  f7cd		       c5 86		      CMP	player1y
   3687  f7cf		       90 03		      BCC	.skipL0130
   3688  f7d1				   .condpart42
   3689  f7d1		       4c 3e f8 	      jmp	.__Skip_AI_Up
   3690  f7d4
   3691  f7d4				   .skipL0130
   3692  f7d4				   .
   3693  f7d4							;
   3694  f7d4
   3695  f7d4				   .
   3696  f7d4							;
   3697  f7d4
   3698  f7d4				   .
   3699  f7d4							;
   3700  f7d4
   3701  f7d4				   .
   3702  f7d4							;
   3703  f7d4
   3704  f7d4				   .L0131		;  _Bit0_P1_Dir_Up{0}	=  1
   3705  f7d4
   3706  f7d4		       a5 de		      LDA	_Bit0_P1_Dir_Up
   3707  f7d6		       09 01		      ORA	#1
   3708  f7d8		       85 de		      STA	_Bit0_P1_Dir_Up
   3709  f7da				   .
   3710  f7da							;
   3711  f7da
   3712  f7da				   .
   3713  f7da							;
   3714  f7da
   3715  f7da				   .
   3716  f7da							;
   3717  f7da
   3718  f7da				   .
   3719  f7da							;
   3720  f7da
   3721  f7da				   .L0132		;  if player1y  <=  _P_Edge_Top then goto __Skip_AI_Up
   3722  f7da
   3723  f7da		       a9 09		      LDA	#_P_Edge_Top
   3724  f7dc		       c5 86		      CMP	player1y
   3725  f7de		       90 03		      BCC	.skipL0132
   3726  f7e0				   .condpart43
   3727  f7e0		       4c 3e f8 	      jmp	.__Skip_AI_Up
   3728  f7e3
   3729  f7e3				   .skipL0132
   3730  f7e3				   .
   3731  f7e3							;
   3732  f7e3
   3733  f7e3				   .
   3734  f7e3							;
   3735  f7e3
   3736  f7e3				   .
   3737  f7e3							;
   3738  f7e3
   3739  f7e3				   .
   3740  f7e3							;
   3741  f7e3
   3742  f7e3				   .L0133		;  temp5  =   ( player1x - 10 )  / 4
   3743  f7e3
   3744  f7e3							; complex statement detected
   3745  f7e3		       a5 81		      LDA	player1x
   3746  f7e5		       38		      SEC
   3747  f7e6		       e9 0a		      SBC	#10
   3748  f7e8		       4a		      lsr
   3749  f7e9		       4a		      lsr
   3750  f7ea		       85 a0		      STA	temp5
   3751  f7ec				   .
   3752  f7ec							;
   3753  f7ec
   3754  f7ec				   .L0134		;  temp6  =   ( player1y - 9 )  / 8
   3755  f7ec
   3756  f7ec							; complex statement detected
   3757  f7ec		       a5 86		      LDA	player1y
   3758  f7ee		       38		      SEC
   3759  f7ef		       e9 09		      SBC	#9
   3760  f7f1		       4a		      lsr
   3761  f7f2		       4a		      lsr
   3762  f7f3		       4a		      lsr
   3763  f7f4		       85 a1		      STA	temp6
   3764  f7f6				   .
   3765  f7f6							;
   3766  f7f6
   3767  f7f6				   .L0135		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Up
   3768  f7f6
   3769  f7f6		       a5 a0		      LDA	temp5
   3770  f7f8		       c9 22		      CMP	#34
   3771  f7fa		       b0 0c		      BCS	.skipL0135
   3772  f7fc				   .condpart44
   3773  f7fc		       a5 a0		      LDA	temp5
   3774  f7fe		       a4 a1		      LDY	temp6
   3775  f800		       20 6b f2 	      jsr	pfread
   3776  f803		       d0 03		      BNE	.skip44then
   3777  f805				   .condpart45
   3778  f805		       4c 3e f8 	      jmp	.__Skip_AI_Up
   3779  f808
   3780  f808				   .skip44then
   3781  f808				   .skipL0135
   3782  f808				   .
   3783  f808							;
   3784  f808
   3785  f808				   .L0136		;  temp4  =   ( player1x - 17 )  / 4
   3786  f808
   3787  f808							; complex statement detected
   3788  f808		       a5 81		      LDA	player1x
   3789  f80a		       38		      SEC
   3790  f80b		       e9 11		      SBC	#17
   3791  f80d		       4a		      lsr
   3792  f80e		       4a		      lsr
   3793  f80f		       85 9f		      STA	temp4
   3794  f811				   .
   3795  f811							;
   3796  f811
   3797  f811				   .L0137		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Up
   3798  f811
   3799  f811		       a5 9f		      LDA	temp4
   3800  f813		       c9 22		      CMP	#34
   3801  f815		       b0 0c		      BCS	.skipL0137
   3802  f817				   .condpart46
   3803  f817		       a5 9f		      LDA	temp4
   3804  f819		       a4 a1		      LDY	temp6
   3805  f81b		       20 6b f2 	      jsr	pfread
   3806  f81e		       d0 03		      BNE	.skip46then
   3807  f820				   .condpart47
   3808  f820		       4c 3e f8 	      jmp	.__Skip_AI_Up
   3809  f823
   3810  f823				   .skip46then
   3811  f823				   .skipL0137
   3812  f823				   .
   3813  f823							;
   3814  f823
   3815  f823				   .L0138		;  temp3  =  temp5  -	1
   3816  f823
   3817  f823		       a5 a0		      LDA	temp5
   3818  f825		       38		      SEC
   3819  f826		       e9 01		      SBC	#1
   3820  f828		       85 9e		      STA	temp3
   3821  f82a				   .
   3822  f82a							;
   3823  f82a
   3824  f82a				   .L0139		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Up
   3825  f82a
   3826  f82a		       a5 9e		      LDA	temp3
   3827  f82c		       c9 22		      CMP	#34
   3828  f82e		       b0 0c		      BCS	.skipL0139
   3829  f830				   .condpart48
   3830  f830		       a5 9e		      LDA	temp3
   3831  f832		       a4 a1		      LDY	temp6
   3832  f834		       20 6b f2 	      jsr	pfread
   3833  f837		       d0 03		      BNE	.skip48then
   3834  f839				   .condpart49
   3835  f839		       4c 3e f8 	      jmp	.__Skip_AI_Up
   3836  f83c
   3837  f83c				   .skip48then
   3838  f83c				   .skipL0139
   3839  f83c				   .
   3840  f83c							;
   3841  f83c
   3842  f83c				   .
   3843  f83c							;
   3844  f83c
   3845  f83c				   .
   3846  f83c							;
   3847  f83c
   3848  f83c				   .
   3849  f83c							;
   3850  f83c
   3851  f83c				   .L0140		;  player1y  =  player1y  -  1
   3852  f83c
   3853  f83c		       c6 86		      DEC	player1y
   3854  f83e				   .
   3855  f83e							;
   3856  f83e
   3857  f83e				   .__Skip_AI_Up
   3858  f83e							; __Skip_AI_Up
   3859  f83e
   3860  f83e				   .
   3861  f83e							;
   3862  f83e
   3863  f83e				   .
   3864  f83e							;
   3865  f83e
   3866  f83e				   .
   3867  f83e							;
   3868  f83e
   3869  f83e				   .
   3870  f83e							;
   3871  f83e
   3872  f83e				   .
   3873  f83e							;
   3874  f83e
   3875  f83e				   .
   3876  f83e							;
   3877  f83e
   3878  f83e				   .
   3879  f83e							;
   3880  f83e
   3881  f83e				   .
   3882  f83e							;
   3883  f83e
   3884  f83e				   .
   3885  f83e							;
   3886  f83e
   3887  f83e				   .
   3888  f83e							;
   3889  f83e
   3890  f83e				   .L0141		;  if player1y  >=  player0y then goto __Skip_AI_Down
   3891  f83e
   3892  f83e		       a5 86		      LDA	player1y
   3893  f840		       c5 85		      CMP	player0y
   3894  f842		       90 03		      BCC	.skipL0141
   3895  f844				   .condpart50
   3896  f844		       4c ae f8 	      jmp	.__Skip_AI_Down
   3897  f847
   3898  f847				   .skipL0141
   3899  f847				   .
   3900  f847							;
   3901  f847
   3902  f847				   .
   3903  f847							;
   3904  f847
   3905  f847				   .
   3906  f847							;
   3907  f847
   3908  f847				   .
   3909  f847							;
   3910  f847
   3911  f847				   .L0142		;  _Bit1_P1_Dir_Down{1}  =  1
   3912  f847
   3913  f847		       a5 de		      LDA	_Bit1_P1_Dir_Down
   3914  f849		       09 02		      ORA	#2
   3915  f84b		       85 de		      STA	_Bit1_P1_Dir_Down
   3916  f84d				   .
   3917  f84d							;
   3918  f84d
   3919  f84d				   .
   3920  f84d							;
   3921  f84d
   3922  f84d				   .
   3923  f84d							;
   3924  f84d
   3925  f84d				   .
   3926  f84d							;
   3927  f84d
   3928  f84d				   .L0143		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_AI_Down
   3929  f84d
   3930  f84d		       a5 86		      LDA	player1y
   3931  f84f		       c9 58		      CMP	#_P_Edge_Bottom
   3932  f851		       90 03		      BCC	.skipL0143
   3933  f853				   .condpart51
   3934  f853		       4c ae f8 	      jmp	.__Skip_AI_Down
   3935  f856
   3936  f856				   .skipL0143
   3937  f856				   .
   3938  f856							;
   3939  f856
   3940  f856				   .
   3941  f856							;
   3942  f856
   3943  f856				   .
   3944  f856							;
   3945  f856
   3946  f856				   .
   3947  f856							;
   3948  f856
   3949  f856				   .L0144		;  temp5  =   ( player1x - 10 )  / 4
   3950  f856
   3951  f856							; complex statement detected
   3952  f856		       a5 81		      LDA	player1x
   3953  f858		       38		      SEC
   3954  f859		       e9 0a		      SBC	#10
   3955  f85b		       4a		      lsr
   3956  f85c		       4a		      lsr
   3957  f85d		       85 a0		      STA	temp5
   3958  f85f				   .
   3959  f85f							;
   3960  f85f
   3961  f85f				   .L0145		;  temp6  =   ( player1y )  / 8
   3962  f85f
   3963  f85f							; complex statement detected
   3964  f85f		       a5 86		      LDA	player1y
   3965  f861		       4a		      lsr
   3966  f862		       4a		      lsr
   3967  f863		       4a		      lsr
   3968  f864		       85 a1		      STA	temp6
   3969  f866				   .
   3970  f866							;
   3971  f866
   3972  f866				   .L0146		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Down
   3973  f866
   3974  f866		       a5 a0		      LDA	temp5
   3975  f868		       c9 22		      CMP	#34
   3976  f86a		       b0 0c		      BCS	.skipL0146
   3977  f86c				   .condpart52
   3978  f86c		       a5 a0		      LDA	temp5
   3979  f86e		       a4 a1		      LDY	temp6
   3980  f870		       20 6b f2 	      jsr	pfread
   3981  f873		       d0 03		      BNE	.skip52then
   3982  f875				   .condpart53
   3983  f875		       4c ae f8 	      jmp	.__Skip_AI_Down
   3984  f878
   3985  f878				   .skip52then
   3986  f878				   .skipL0146
   3987  f878				   .
   3988  f878							;
   3989  f878
   3990  f878				   .L0147		;  temp4  =   ( player1x - 17 )  / 4
   3991  f878
   3992  f878							; complex statement detected
   3993  f878		       a5 81		      LDA	player1x
   3994  f87a		       38		      SEC
   3995  f87b		       e9 11		      SBC	#17
   3996  f87d		       4a		      lsr
   3997  f87e		       4a		      lsr
   3998  f87f		       85 9f		      STA	temp4
   3999  f881				   .
   4000  f881							;
   4001  f881
   4002  f881				   .L0148		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Down
   4003  f881
   4004  f881		       a5 9f		      LDA	temp4
   4005  f883		       c9 22		      CMP	#34
   4006  f885		       b0 0c		      BCS	.skipL0148
   4007  f887				   .condpart54
   4008  f887		       a5 9f		      LDA	temp4
   4009  f889		       a4 a1		      LDY	temp6
   4010  f88b		       20 6b f2 	      jsr	pfread
   4011  f88e		       d0 03		      BNE	.skip54then
   4012  f890				   .condpart55
   4013  f890		       4c ae f8 	      jmp	.__Skip_AI_Down
   4014  f893
   4015  f893				   .skip54then
   4016  f893				   .skipL0148
   4017  f893				   .
   4018  f893							;
   4019  f893
   4020  f893				   .L0149		;  temp3  =  temp5  -	1
   4021  f893
   4022  f893		       a5 a0		      LDA	temp5
   4023  f895		       38		      SEC
   4024  f896		       e9 01		      SBC	#1
   4025  f898		       85 9e		      STA	temp3
   4026  f89a				   .
   4027  f89a							;
   4028  f89a
   4029  f89a				   .L0150		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Down
   4030  f89a
   4031  f89a		       a5 9e		      LDA	temp3
   4032  f89c		       c9 22		      CMP	#34
   4033  f89e		       b0 0c		      BCS	.skipL0150
   4034  f8a0				   .condpart56
   4035  f8a0		       a5 9e		      LDA	temp3
   4036  f8a2		       a4 a1		      LDY	temp6
   4037  f8a4		       20 6b f2 	      jsr	pfread
   4038  f8a7		       d0 03		      BNE	.skip56then
   4039  f8a9				   .condpart57
   4040  f8a9		       4c ae f8 	      jmp	.__Skip_AI_Down
   4041  f8ac
   4042  f8ac				   .skip56then
   4043  f8ac				   .skipL0150
   4044  f8ac				   .
   4045  f8ac							;
   4046  f8ac
   4047  f8ac				   .
   4048  f8ac							;
   4049  f8ac
   4050  f8ac				   .
   4051  f8ac							;
   4052  f8ac
   4053  f8ac				   .
   4054  f8ac							;
   4055  f8ac
   4056  f8ac				   .L0151		;  player1y  =  player1y  +  1
   4057  f8ac
   4058  f8ac		       e6 86		      INC	player1y
   4059  f8ae				   .
   4060  f8ae							;
   4061  f8ae
   4062  f8ae				   .__Skip_AI_Down
   4063  f8ae							; __Skip_AI_Down
   4064  f8ae
   4065  f8ae				   .
   4066  f8ae							;
   4067  f8ae
   4068  f8ae				   .
   4069  f8ae							;
   4070  f8ae
   4071  f8ae				   .
   4072  f8ae							;
   4073  f8ae
   4074  f8ae				   .
   4075  f8ae							;
   4076  f8ae
   4077  f8ae				   .
   4078  f8ae							;
   4079  f8ae
   4080  f8ae				   .
   4081  f8ae							;
   4082  f8ae
   4083  f8ae				   .
   4084  f8ae							;
   4085  f8ae
   4086  f8ae				   .
   4087  f8ae							;
   4088  f8ae
   4089  f8ae				   .
   4090  f8ae							;
   4091  f8ae
   4092  f8ae				   .L0152		;  if player1x  <=  player0x then goto __Skip_AI_Left
   4093  f8ae
   4094  f8ae		       a5 80		      LDA	player0x
   4095  f8b0		       c5 81		      CMP	player1x
   4096  f8b2		       90 03		      BCC	.skipL0152
   4097  f8b4				   .condpart58
   4098  f8b4		       4c 09 f9 	      jmp	.__Skip_AI_Left
   4099  f8b7
   4100  f8b7				   .skipL0152
   4101  f8b7				   .
   4102  f8b7							;
   4103  f8b7
   4104  f8b7				   .
   4105  f8b7							;
   4106  f8b7
   4107  f8b7				   .
   4108  f8b7							;
   4109  f8b7
   4110  f8b7				   .
   4111  f8b7							;
   4112  f8b7
   4113  f8b7				   .L0153		;  _Bit2_P1_Dir_Left{2}  =  1
   4114  f8b7
   4115  f8b7		       a5 de		      LDA	_Bit2_P1_Dir_Left
   4116  f8b9		       09 04		      ORA	#4
   4117  f8bb		       85 de		      STA	_Bit2_P1_Dir_Left
   4118  f8bd				   .
   4119  f8bd							;
   4120  f8bd
   4121  f8bd				   .
   4122  f8bd							;
   4123  f8bd
   4124  f8bd				   .
   4125  f8bd							;
   4126  f8bd
   4127  f8bd				   .
   4128  f8bd							;
   4129  f8bd
   4130  f8bd				   .L0154		;  if player1x  <=  _P_Edge_Left then goto __Skip_AI_Left
   4131  f8bd
   4132  f8bd		       a9 01		      LDA	#_P_Edge_Left
   4133  f8bf		       c5 81		      CMP	player1x
   4134  f8c1		       90 03		      BCC	.skipL0154
   4135  f8c3				   .condpart59
   4136  f8c3		       4c 09 f9 	      jmp	.__Skip_AI_Left
   4137  f8c6
   4138  f8c6				   .skipL0154
   4139  f8c6				   .
   4140  f8c6							;
   4141  f8c6
   4142  f8c6				   .
   4143  f8c6							;
   4144  f8c6
   4145  f8c6				   .
   4146  f8c6							;
   4147  f8c6
   4148  f8c6				   .
   4149  f8c6							;
   4150  f8c6
   4151  f8c6				   .L0155		;  temp5  =   ( player1y - 1 )  / 8
   4152  f8c6
   4153  f8c6							; complex statement detected
   4154  f8c6		       a5 86		      LDA	player1y
   4155  f8c8		       38		      SEC
   4156  f8c9		       e9 01		      SBC	#1
   4157  f8cb		       4a		      lsr
   4158  f8cc		       4a		      lsr
   4159  f8cd		       4a		      lsr
   4160  f8ce		       85 a0		      STA	temp5
   4161  f8d0				   .
   4162  f8d0							;
   4163  f8d0
   4164  f8d0				   .L0156		;  temp6  =   ( player1x - 18 )  / 4
   4165  f8d0
   4166  f8d0							; complex statement detected
   4167  f8d0		       a5 81		      LDA	player1x
   4168  f8d2		       38		      SEC
   4169  f8d3		       e9 12		      SBC	#18
   4170  f8d5		       4a		      lsr
   4171  f8d6		       4a		      lsr
   4172  f8d7		       85 a1		      STA	temp6
   4173  f8d9				   .
   4174  f8d9							;
   4175  f8d9
   4176  f8d9				   .L0157		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Left
   4177  f8d9
   4178  f8d9		       a5 a1		      LDA	temp6
   4179  f8db		       c9 22		      CMP	#34
   4180  f8dd		       b0 0c		      BCS	.skipL0157
   4181  f8df				   .condpart60
   4182  f8df		       a5 a1		      LDA	temp6
   4183  f8e1		       a4 a0		      LDY	temp5
   4184  f8e3		       20 6b f2 	      jsr	pfread
   4185  f8e6		       d0 03		      BNE	.skip60then
   4186  f8e8				   .condpart61
   4187  f8e8		       4c 09 f9 	      jmp	.__Skip_AI_Left
   4188  f8eb
   4189  f8eb				   .skip60then
   4190  f8eb				   .skipL0157
   4191  f8eb				   .
   4192  f8eb							;
   4193  f8eb
   4194  f8eb				   .L0158		;  temp3  =   ( player1y - 8 )  / 8
   4195  f8eb
   4196  f8eb							; complex statement detected
   4197  f8eb		       a5 86		      LDA	player1y
   4198  f8ed		       38		      SEC
   4199  f8ee		       e9 08		      SBC	#8
   4200  f8f0		       4a		      lsr
   4201  f8f1		       4a		      lsr
   4202  f8f2		       4a		      lsr
   4203  f8f3		       85 9e		      STA	temp3
   4204  f8f5				   .
   4205  f8f5							;
   4206  f8f5
   4207  f8f5				   .L0159		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Left
   4208  f8f5
   4209  f8f5		       a5 a1		      LDA	temp6
   4210  f8f7		       c9 22		      CMP	#34
   4211  f8f9		       b0 0c		      BCS	.skipL0159
   4212  f8fb				   .condpart62
   4213  f8fb		       a5 a1		      LDA	temp6
   4214  f8fd		       a4 9e		      LDY	temp3
   4215  f8ff		       20 6b f2 	      jsr	pfread
   4216  f902		       d0 03		      BNE	.skip62then
   4217  f904				   .condpart63
   4218  f904		       4c 09 f9 	      jmp	.__Skip_AI_Left
   4219  f907
   4220  f907				   .skip62then
   4221  f907				   .skipL0159
   4222  f907				   .
   4223  f907							;
   4224  f907
   4225  f907				   .
   4226  f907							;
   4227  f907
   4228  f907				   .
   4229  f907							;
   4230  f907
   4231  f907				   .
   4232  f907							;
   4233  f907
   4234  f907				   .L0160		;  player1x  =  player1x  -  1
   4235  f907
   4236  f907		       c6 81		      DEC	player1x
   4237  f909				   .
   4238  f909							;
   4239  f909
   4240  f909				   .__Skip_AI_Left
   4241  f909							; __Skip_AI_Left
   4242  f909
   4243  f909				   .
   4244  f909							;
   4245  f909
   4246  f909				   .
   4247  f909							;
   4248  f909
   4249  f909				   .
   4250  f909							;
   4251  f909
   4252  f909				   .
   4253  f909							;
   4254  f909
   4255  f909				   .
   4256  f909							;
   4257  f909
   4258  f909				   .
   4259  f909							;
   4260  f909
   4261  f909				   .
   4262  f909							;
   4263  f909
   4264  f909				   .
   4265  f909							;
   4266  f909
   4267  f909				   .
   4268  f909							;
   4269  f909
   4270  f909				   .L0161		;  if player1x  >=  player0x then goto __Skip_AI_Right
   4271  f909
   4272  f909		       a5 81		      LDA	player1x
   4273  f90b		       c5 80		      CMP	player0x
   4274  f90d		       90 03		      BCC	.skipL0161
   4275  f90f				   .condpart64
   4276  f90f		       4c 64 f9 	      jmp	.__Skip_AI_Right
   4277  f912
   4278  f912				   .skipL0161
   4279  f912				   .
   4280  f912							;
   4281  f912
   4282  f912				   .
   4283  f912							;
   4284  f912
   4285  f912				   .
   4286  f912							;
   4287  f912
   4288  f912				   .
   4289  f912							;
   4290  f912
   4291  f912				   .L0162		;  _Bit3_P1_Dir_Right{3}  =  1
   4292  f912
   4293  f912		       a5 de		      LDA	_Bit3_P1_Dir_Right
   4294  f914		       09 08		      ORA	#8
   4295  f916		       85 de		      STA	_Bit3_P1_Dir_Right
   4296  f918				   .
   4297  f918							;
   4298  f918
   4299  f918				   .
   4300  f918							;
   4301  f918
   4302  f918				   .
   4303  f918							;
   4304  f918
   4305  f918				   .
   4306  f918							;
   4307  f918
   4308  f918				   .L0163		;  if player1x  >=  _P_Edge_Right then goto __Skip_AI_Right
   4309  f918
   4310  f918		       a5 81		      LDA	player1x
   4311  f91a		       c9 99		      CMP	#_P_Edge_Right
   4312  f91c		       90 03		      BCC	.skipL0163
   4313  f91e				   .condpart65
   4314  f91e		       4c 64 f9 	      jmp	.__Skip_AI_Right
   4315  f921
   4316  f921				   .skipL0163
   4317  f921				   .
   4318  f921							;
   4319  f921
   4320  f921				   .
   4321  f921							;
   4322  f921
   4323  f921				   .
   4324  f921							;
   4325  f921
   4326  f921				   .
   4327  f921							;
   4328  f921
   4329  f921				   .L0164		;  temp5  =   ( player1y - 1 )  / 8
   4330  f921
   4331  f921							; complex statement detected
   4332  f921		       a5 86		      LDA	player1y
   4333  f923		       38		      SEC
   4334  f924		       e9 01		      SBC	#1
   4335  f926		       4a		      lsr
   4336  f927		       4a		      lsr
   4337  f928		       4a		      lsr
   4338  f929		       85 a0		      STA	temp5
   4339  f92b				   .
   4340  f92b							;
   4341  f92b
   4342  f92b				   .L0165		;  temp6  =   ( player1x - 9 )  / 4
   4343  f92b
   4344  f92b							; complex statement detected
   4345  f92b		       a5 81		      LDA	player1x
   4346  f92d		       38		      SEC
   4347  f92e		       e9 09		      SBC	#9
   4348  f930		       4a		      lsr
   4349  f931		       4a		      lsr
   4350  f932		       85 a1		      STA	temp6
   4351  f934				   .
   4352  f934							;
   4353  f934
   4354  f934				   .L0166		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Right
   4355  f934
   4356  f934		       a5 a1		      LDA	temp6
   4357  f936		       c9 22		      CMP	#34
   4358  f938		       b0 0c		      BCS	.skipL0166
   4359  f93a				   .condpart66
   4360  f93a		       a5 a1		      LDA	temp6
   4361  f93c		       a4 a0		      LDY	temp5
   4362  f93e		       20 6b f2 	      jsr	pfread
   4363  f941		       d0 03		      BNE	.skip66then
   4364  f943				   .condpart67
   4365  f943		       4c 64 f9 	      jmp	.__Skip_AI_Right
   4366  f946
   4367  f946				   .skip66then
   4368  f946				   .skipL0166
   4369  f946				   .
   4370  f946							;
   4371  f946
   4372  f946				   .L0167		;  temp3  =   ( player1y - 8 )  / 8
   4373  f946
   4374  f946							; complex statement detected
   4375  f946		       a5 86		      LDA	player1y
   4376  f948		       38		      SEC
   4377  f949		       e9 08		      SBC	#8
   4378  f94b		       4a		      lsr
   4379  f94c		       4a		      lsr
   4380  f94d		       4a		      lsr
   4381  f94e		       85 9e		      STA	temp3
   4382  f950				   .
   4383  f950							;
   4384  f950
   4385  f950				   .L0168		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Right
   4386  f950
   4387  f950		       a5 a1		      LDA	temp6
   4388  f952		       c9 22		      CMP	#34
   4389  f954		       b0 0c		      BCS	.skipL0168
   4390  f956				   .condpart68
   4391  f956		       a5 a1		      LDA	temp6
   4392  f958		       a4 9e		      LDY	temp3
   4393  f95a		       20 6b f2 	      jsr	pfread
   4394  f95d		       d0 03		      BNE	.skip68then
   4395  f95f				   .condpart69
   4396  f95f		       4c 64 f9 	      jmp	.__Skip_AI_Right
   4397  f962
   4398  f962				   .skip68then
   4399  f962				   .skipL0168
   4400  f962				   .
   4401  f962							;
   4402  f962
   4403  f962				   .
   4404  f962							;
   4405  f962
   4406  f962				   .
   4407  f962							;
   4408  f962
   4409  f962				   .
   4410  f962							;
   4411  f962
   4412  f962				   .L0169		;  player1x  =  player1x  +  1
   4413  f962
   4414  f962		       e6 81		      INC	player1x
   4415  f964				   .
   4416  f964							;
   4417  f964
   4418  f964				   .__Skip_AI_Right
   4419  f964							; __Skip_AI_Right
   4420  f964
   4421  f964				   .
   4422  f964							;
   4423  f964
   4424  f964				   .
   4425  f964							;
   4426  f964
   4427  f964				   .
   4428  f964							;
   4429  f964
   4430  f964				   .
   4431  f964							;
   4432  f964
   4433  f964				   .
   4434  f964							;
   4435  f964
   4436  f964				   .L0170		;  if !collision(missile0,player0) then __Skip_Gem_Collection
   4437  f964
   4438  f964		       24 00		      bit	CXM0P
   4439  f966					      if	((* - .__Skip_Gem_Collection) < 127) && ((* - .__Skip_Gem_Collection) > -128)
   4440  f966		       50 0c		      bvc	.__Skip_Gem_Collection
   4441  f968				  -	      else
   4442  f968				  -	      bvs	.2skip__Skip_Gem_Collection
   4443  f968				  -	      jmp	.__Skip_Gem_Collection
   4444  f968				  -.2skip__Skip_Gem_Collection
   4445  f968					      endif
   4446  f968				   .L0171		;  _Bit0_Carrying_Gem{0}  =  1
   4447  f968
   4448  f968		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4449  f96a		       09 01		      ORA	#1
   4450  f96c		       85 eb		      STA	_Bit0_Carrying_Gem
   4451  f96e				   .L0172		;  missile0x  =  200  :  missile0y  =	200
   4452  f96e
   4453  f96e		       a9 c8		      LDA	#200
   4454  f970		       85 82		      STA	missile0x
   4455  f972		       85 91		      STA	missile0y
   4456  f974				   .__Skip_Gem_Collection
   4457  f974							; __Skip_Gem_Collection
   4458  f974
   4459  f974				   .
   4460  f974							;
   4461  f974
   4462  f974				   .
   4463  f974							;
   4464  f974
   4465  f974				   .
   4466  f974							;
   4467  f974
   4468  f974				   .
   4469  f974							;
   4470  f974
   4471  f974				   .L0173		;  if !collision(missile1,player0) then __Skip_Gem_Deposit
   4472  f974
   4473  f974		       24 01		      bit	CXM1P
   4474  f976					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   4475  f976		       10 34		      bpl	.__Skip_Gem_Deposit
   4476  f978				  -	      else
   4477  f978				  -	      bmi	.3skip__Skip_Gem_Deposit
   4478  f978				  -	      jmp	.__Skip_Gem_Deposit
   4479  f978				  -.3skip__Skip_Gem_Deposit
   4480  f978					      endif
   4481  f978				   .L0174		;  if !_Bit0_Carrying_Gem{0} then __Skip_Gem_Deposit
   4482  f978
   4483  f978		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4484  f97a		       4a		      LSR
   4485  f97b					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   4486  f97b		       90 2f		      bcc	.__Skip_Gem_Deposit
   4487  f97d				  -	      else
   4488  f97d				  -	      bcs	.4skip__Skip_Gem_Deposit
   4489  f97d				  -	      jmp	.__Skip_Gem_Deposit
   4490  f97d				  -.4skip__Skip_Gem_Deposit
   4491  f97d					      endif
   4492  f97d				   .L0175		;  _Bit0_Carrying_Gem{0}  =  0
   4493  f97d
   4494  f97d		       a5 eb		      LDA	_Bit0_Carrying_Gem
   4495  f97f		       29 fe		      AND	#254
   4496  f981		       85 eb		      STA	_Bit0_Carrying_Gem
   4497  f983				   .L0176		;  score  =  score  +	1
   4498  f983
   4499  f983		       f8		      SED
   4500  f984		       18		      CLC
   4501  f985		       a5 95		      LDA	score+2
   4502  f987		       69 01		      ADC	#$01
   4503  f989		       85 95		      STA	score+2
   4504  f98b		       a5 94		      LDA	score+1
   4505  f98d		       69 00		      ADC	#$00
   4506  f98f		       85 94		      STA	score+1
   4507  f991		       a5 93		      LDA	score
   4508  f993		       69 00		      ADC	#$00
   4509  f995		       85 93		      STA	score
   4510  f997		       d8		      CLD
   4511  f998				   .L0177		;  missile0x  =   ( rand  &  118 )   +  23  :	missile0y  =   ( rand  &  70 )	 +  9
   4512  f998
   4513  f998							; complex statement detected
   4514  f998		       20 b3 f3 	      jsr	randomize
   4515  f99b		       29 76		      AND	#118
   4516  f99d		       18		      CLC
   4517  f99e		       69 17		      ADC	#23
   4518  f9a0		       85 82		      STA	missile0x
   4519  f9a2							; complex statement detected
   4520  f9a2		       20 b3 f3 	      jsr	randomize
   4521  f9a5		       29 46		      AND	#70
   4522  f9a7		       18		      CLC
   4523  f9a8		       69 09		      ADC	#9
   4524  f9aa		       85 91		      STA	missile0y
   4525  f9ac				   .__Skip_Gem_Deposit
   4526  f9ac							; __Skip_Gem_Deposit
   4527  f9ac
   4528  f9ac				   .
   4529  f9ac							;
   4530  f9ac
   4531  f9ac				   .__Game_Over
   4532  f9ac							; __Game_Over
   4533  f9ac
   4534  f9ac				   .L0178		;  if !_Bit1_Game_Over{1} then goto __Skip_Game_Over
   4535  f9ac
   4536  f9ac		       a5 eb		      LDA	_Bit1_Game_Over
   4537  f9ae		       29 02		      AND	#2
   4538  f9b0		       d0 03		      BNE	.skipL0178
   4539  f9b2				   .condpart70
   4540  f9b2		       4c 12 fa 	      jmp	.__Skip_Game_Over
   4541  f9b5
   4542  f9b5				   .skipL0178
   4543  f9b5				   .L0179		;  COLUPF  =  14
   4544  f9b5
   4545  f9b5		       a9 0e		      LDA	#14
   4546  f9b7		       85 08		      STA	COLUPF
   4547  f9b9				   .L0180		;  scorecolor	=  14
   4548  f9b9
   4549  f9b9		       a9 0e		      LDA	#14
   4550  f9bb		       85 a3		      STA	scorecolor
   4551  f9bd				   .L0181		;  COLUBK  =  $36
   4552  f9bd
   4553  f9bd		       a9 36		      LDA	#$36
   4554  f9bf		       85 09		      STA	COLUBK
   4555  f9c1				   .L0182		;  playfield:
   4556  f9c1
   4557  f9c1				  -	      ifconst	pfres
   4558  f9c1				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   4559  f9c1					      else
   4560  f9c1		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   4561  f9c3					      endif
   4562  f9c3		       4c f2 f9 	      jmp	pflabel1
   4563  f9c6				   PF_data1
   4564  f9c6		       0f 79		      .byte.b	%00001111, %01111001
   4565  f9c8					      if	(pfwidth>2)
   4566  f9c8		       6c 0f		      .byte.b	%01101100, %00001111
   4567  f9ca					      endif
   4568  f9ca		       08 48		      .byte.b	%00001000, %01001000
   4569  f9cc					      if	(pfwidth>2)
   4570  f9cc		       54 01		      .byte.b	%01010100, %00000001
   4571  f9ce					      endif
   4572  f9ce		       09 79		      .byte.b	%00001001, %01111001
   4573  f9d0					      if	(pfwidth>2)
   4574  f9d0		       54 07		      .byte.b	%01010100, %00000111
   4575  f9d2					      endif
   4576  f9d2		       08 49		      .byte.b	%00001000, %01001001
   4577  f9d4					      if	(pfwidth>2)
   4578  f9d4		       54 01		      .byte.b	%01010100, %00000001
   4579  f9d6					      endif
   4580  f9d6		       0b 49		      .byte.b	%00001011, %01001001
   4581  f9d8					      if	(pfwidth>2)
   4582  f9d8		       54 0f		      .byte.b	%01010100, %00001111
   4583  f9da					      endif
   4584  f9da		       00 00		      .byte.b	%00000000, %00000000
   4585  f9dc					      if	(pfwidth>2)
   4586  f9dc		       00 00		      .byte.b	%00000000, %00000000
   4587  f9de					      endif
   4588  f9de		       0f 89		      .byte.b	%00001111, %10001001
   4589  f9e0					      if	(pfwidth>2)
   4590  f9e0		       3c 07		      .byte.b	%00111100, %00000111
   4591  f9e2					      endif
   4592  f9e2		       08 89		      .byte.b	%00001000, %10001001
   4593  f9e4					      if	(pfwidth>2)
   4594  f9e4		       20 09		      .byte.b	%00100000, %00001001
   4595  f9e6					      endif
   4596  f9e6		       08 89		      .byte.b	%00001000, %10001001
   4597  f9e8					      if	(pfwidth>2)
   4598  f9e8		       38 07		      .byte.b	%00111000, %00000111
   4599  f9ea					      endif
   4600  f9ea		       08 51		      .byte.b	%00001000, %01010001
   4601  f9ec					      if	(pfwidth>2)
   4602  f9ec		       20 09		      .byte.b	%00100000, %00001001
   4603  f9ee					      endif
   4604  f9ee		       0f 21		      .byte.b	%00001111, %00100001
   4605  f9f0					      if	(pfwidth>2)
   4606  f9f0		       3c 09		      .byte.b	%00111100, %00001001
   4607  f9f2					      endif
   4608  f9f2				   pflabel1
   4609  f9f2		       bd c6 f9 	      lda	PF_data1,x
   4610  f9f5		       95 a4		      sta	playfield,x
   4611  f9f7		       ca		      dex
   4612  f9f8		       10 f8		      bpl	pflabel1
   4613  f9fa				   .
   4614  f9fa							;
   4615  f9fa
   4616  f9fa				   .L0183		;  player0x  =  200  :  player0y  =  200
   4617  f9fa
   4618  f9fa		       a9 c8		      LDA	#200
   4619  f9fc		       85 80		      STA	player0x
   4620  f9fe		       85 85		      STA	player0y
   4621  fa00				   .L0184		;  player1x  =  200  :  player1y  =  200
   4622  fa00
   4623  fa00		       a9 c8		      LDA	#200
   4624  fa02		       85 81		      STA	player1x
   4625  fa04		       85 86		      STA	player1y
   4626  fa06				   .L0185		;  missile0x  =  200  :  missile0y  =	200
   4627  fa06
   4628  fa06		       a9 c8		      LDA	#200
   4629  fa08		       85 82		      STA	missile0x
   4630  fa0a		       85 91		      STA	missile0y
   4631  fa0c				   .L0186		;  missile1x  =  200  :  missile1y  =	200
   4632  fa0c
   4633  fa0c		       a9 c8		      LDA	#200
   4634  fa0e		       85 83		      STA	missile1x
   4635  fa10		       85 88		      STA	missile1y
   4636  fa12				   .__Skip_Game_Over
   4637  fa12							; __Skip_Game_Over
   4638  fa12
   4639  fa12				   .
   4640  fa12							;
   4641  fa12
   4642  fa12				   .
   4643  fa12							;
   4644  fa12
   4645  fa12				   .
   4646  fa12							;
   4647  fa12
   4648  fa12				   .
   4649  fa12							;
   4650  fa12
   4651  fa12				   .
   4652  fa12							;
   4653  fa12
   4654  fa12				   .L0187		;  drawscreen
   4655  fa12
   4656  fa12		       20 c1 f3 	      jsr	drawscreen
   4657  fa15				   .
   4658  fa15							;
   4659  fa15
   4660  fa15				   .
   4661  fa15							;
   4662  fa15
   4663  fa15				   .
   4664  fa15							;
   4665  fa15
   4666  fa15				   .
   4667  fa15							;
   4668  fa15
   4669  fa15				   .
   4670  fa15							;
   4671  fa15
   4672  fa15				   .
   4673  fa15							;
   4674  fa15
   4675  fa15				   .
   4676  fa15							;
   4677  fa15
   4678  fa15				   .
   4679  fa15							;
   4680  fa15
   4681  fa15				   .
   4682  fa15							;
   4683  fa15
   4684  fa15				   .
   4685  fa15							;
   4686  fa15
   4687  fa15				   .
   4688  fa15							;
   4689  fa15
   4690  fa15				   .
   4691  fa15							;
   4692  fa15
   4693  fa15				   .
   4694  fa15							;
   4695  fa15
   4696  fa15				   .
   4697  fa15							;
   4698  fa15
   4699  fa15				   .
   4700  fa15							;
   4701  fa15
   4702  fa15				   .L0188		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   4703  fa15
   4704  fa15		       a9 01		      lda	#1
   4705  fa17		       2c 82 02 	      bit	SWCHB
   4706  fa1a		       f0 09		      BEQ	.skipL0188
   4707  fa1c				   .condpart71
   4708  fa1c		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4709  fa1e		       29 fe		      AND	#254
   4710  fa20		       85 ec		      STA	_Bit0_Reset_Restrainer
   4711  fa22		       4c 46 f5 	      jmp	.__Main_Loop
   4712  fa25
   4713  fa25				   .skipL0188
   4714  fa25				   .
   4715  fa25							;
   4716  fa25
   4717  fa25				   .
   4718  fa25							;
   4719  fa25
   4720  fa25				   .
   4721  fa25							;
   4722  fa25
   4723  fa25				   .
   4724  fa25							;
   4725  fa25
   4726  fa25				   .
   4727  fa25							;
   4728  fa25
   4729  fa25				   .L0189		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   4730  fa25
   4731  fa25		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   4732  fa27		       4a		      LSR
   4733  fa28		       90 03		      BCC	.skipL0189
   4734  fa2a				   .condpart72
   4735  fa2a		       4c 46 f5 	      jmp	.__Main_Loop
   4736  fa2d
   4737  fa2d				   .skipL0189
   4738  fa2d				   .
   4739  fa2d							;
   4740  fa2d
   4741  fa2d				   .
   4742  fa2d							;
   4743  fa2d
   4744  fa2d				   .
   4745  fa2d							;
   4746  fa2d
   4747  fa2d				   .
   4748  fa2d							;
   4749  fa2d
   4750  fa2d				   .L0190		;  goto __Start_Restart
   4751  fa2d
   4752  fa2d		       4c 61 f4 	      jmp	.__Start_Restart
   4753  fa30
   4754  fa30				  -	      if	(<*) > (<(*+7))
   4755  fa30				  -	      repeat	($100-<*)
   4756  fa30				  -	      .byte	0
   4757  fa30				  -	      repend
   4758  fa30					      endif
   4759  fa30				   playerL055_0
   4760  fa30		       e7		      .byte.b	%11100111
   4761  fa31		       24		      .byte.b	%00100100
   4762  fa32		       24		      .byte.b	%00100100
   4763  fa33		       99		      .byte.b	%10011001
   4764  fa34		       5a		      .byte.b	%01011010
   4765  fa35		       3c		      .byte.b	%00111100
   4766  fa36		       18		      .byte.b	%00011000
   4767  fa37		       ff		      .byte.b	%11111111
   4768  fa38				  -	      if	(<*) > (<(*+7))
   4769  fa38				  -	      repeat	($100-<*)
   4770  fa38				  -	      .byte	0
   4771  fa38				  -	      repend
   4772  fa38					      endif
   4773  fa38				   playerL056_1
   4774  fa38		       66		      .byte.b	%01100110
   4775  fa39		       24		      .byte.b	%00100100
   4776  fa3a		       99		      .byte.b	%10011001
   4777  fa3b		       bd		      .byte.b	%10111101
   4778  fa3c		       7e		      .byte.b	%01111110
   4779  fa3d		       18		      .byte.b	%00011000
   4780  fa3e		       3c		      .byte.b	%00111100
   4781  fa3f		       24		      .byte.b	%00100100
   4782  fa40					      if	ECHOFIRST
      1372 bytes of ROM space left
   4783  fa40					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4784  fa40					      endif
   4785  fa40		       00 01	   ECHOFIRST  =	1
   4786  fa40
   4787  fa40
   4788  fa40
   4789  fa40							; feel free to modify the score graphics - just keep each digit 8 high
   4790  fa40							; and keep the conditional compilation stuff intact
   4791  fa40				  -	      ifconst	ROM2k
   4792  fa40				  -	      ORG	$F7AC-8
   4793  fa40					      else
   4794  fa40				  -	      ifconst	bankswitch
   4795  fa40				  -	      if	bankswitch == 8
   4796  fa40				  -	      ORG	$2F94-bscode_length
   4797  fa40				  -	      RORG	$FF94-bscode_length
   4798  fa40				  -	      endif
   4799  fa40				  -	      if	bankswitch == 16
   4800  fa40				  -	      ORG	$4F94-bscode_length
   4801  fa40				  -	      RORG	$FF94-bscode_length
   4802  fa40				  -	      endif
   4803  fa40				  -	      if	bankswitch == 32
   4804  fa40				  -	      ORG	$8F94-bscode_length
   4805  fa40				  -	      RORG	$FF94-bscode_length
   4806  fa40				  -	      endif
   4807  fa40				  -	      if	bankswitch == 64
   4808  fa40				  -	      ORG	$10F80-bscode_length
   4809  fa40				  -	      RORG	$1FF80-bscode_length
   4810  fa40				  -	      endif
   4811  fa40					      else
   4812  ff9c					      ORG	$FF9C
   4813  ff9c					      endif
   4814  ff9c					      endif
   4815  ff9c
   4816  ff9c							; font equates
   4817  ff9c		       00 01	   .21stcentury =	1
   4818  ff9c		       00 02	   alarmclock =	2
   4819  ff9c		       00 03	   handwritten =	3
   4820  ff9c		       00 04	   interrupted =	4
   4821  ff9c		       00 05	   retroputer =	5
   4822  ff9c		       00 06	   whimsey    =	6
   4823  ff9c		       00 07	   tiny       =	7
   4824  ff9c
   4825  ff9c				   scoretable
   4826  ff9c
   4827  ff9c				  -	      ifconst	font
   4828  ff9c				  -	      if	font == .21stcentury
   4829  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4830  ff9c				  -	      endif
   4831  ff9c				  -	      if	font == alarmclock
   4832  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4833  ff9c				  -	      endif
   4834  ff9c				  -	      if	font == handwritten
   4835  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4836  ff9c				  -	      endif
   4837  ff9c				  -	      if	font == interrupted
   4838  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4839  ff9c				  -	      endif
   4840  ff9c				  -	      if	font == retroputer
   4841  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4842  ff9c				  -	      endif
   4843  ff9c				  -	      if	font == whimsey
   4844  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4845  ff9c				  -	      endif
   4846  ff9c				  -	      if	font == tiny
   4847  ff9c				  -	      include	"score_graphics.asm.tiny"
   4848  ff9c				  -	      endif
   4849  ff9c					      else		; default font
   4850  ff9c
   4851  ff9c		       3c		      .byte.b	%00111100
   4852  ff9d		       66		      .byte.b	%01100110
   4853  ff9e		       66		      .byte.b	%01100110
   4854  ff9f		       66		      .byte.b	%01100110
   4855  ffa0		       66		      .byte.b	%01100110
   4856  ffa1		       66		      .byte.b	%01100110
   4857  ffa2		       66		      .byte.b	%01100110
   4858  ffa3		       3c		      .byte.b	%00111100
   4859  ffa4
   4860  ffa4		       7e		      .byte.b	%01111110
   4861  ffa5		       18		      .byte.b	%00011000
   4862  ffa6		       18		      .byte.b	%00011000
   4863  ffa7		       18		      .byte.b	%00011000
   4864  ffa8		       18		      .byte.b	%00011000
   4865  ffa9		       38		      .byte.b	%00111000
   4866  ffaa		       18		      .byte.b	%00011000
   4867  ffab		       08		      .byte.b	%00001000
   4868  ffac
   4869  ffac		       7e		      .byte.b	%01111110
   4870  ffad		       60		      .byte.b	%01100000
   4871  ffae		       60		      .byte.b	%01100000
   4872  ffaf		       3c		      .byte.b	%00111100
   4873  ffb0		       06		      .byte.b	%00000110
   4874  ffb1		       06		      .byte.b	%00000110
   4875  ffb2		       46		      .byte.b	%01000110
   4876  ffb3		       3c		      .byte.b	%00111100
   4877  ffb4
   4878  ffb4		       3c		      .byte.b	%00111100
   4879  ffb5		       46		      .byte.b	%01000110
   4880  ffb6		       06		      .byte.b	%00000110
   4881  ffb7		       06		      .byte.b	%00000110
   4882  ffb8		       1c		      .byte.b	%00011100
   4883  ffb9		       06		      .byte.b	%00000110
   4884  ffba		       46		      .byte.b	%01000110
   4885  ffbb		       3c		      .byte.b	%00111100
   4886  ffbc
   4887  ffbc		       0c		      .byte.b	%00001100
   4888  ffbd		       0c		      .byte.b	%00001100
   4889  ffbe		       7e		      .byte.b	%01111110
   4890  ffbf		       4c		      .byte.b	%01001100
   4891  ffc0		       4c		      .byte.b	%01001100
   4892  ffc1		       2c		      .byte.b	%00101100
   4893  ffc2		       1c		      .byte.b	%00011100
   4894  ffc3		       0c		      .byte.b	%00001100
   4895  ffc4
   4896  ffc4		       3c		      .byte.b	%00111100
   4897  ffc5		       46		      .byte.b	%01000110
   4898  ffc6		       06		      .byte.b	%00000110
   4899  ffc7		       06		      .byte.b	%00000110
   4900  ffc8		       3c		      .byte.b	%00111100
   4901  ffc9		       60		      .byte.b	%01100000
   4902  ffca		       60		      .byte.b	%01100000
   4903  ffcb		       7e		      .byte.b	%01111110
   4904  ffcc
   4905  ffcc		       3c		      .byte.b	%00111100
   4906  ffcd		       66		      .byte.b	%01100110
   4907  ffce		       66		      .byte.b	%01100110
   4908  ffcf		       66		      .byte.b	%01100110
   4909  ffd0		       7c		      .byte.b	%01111100
   4910  ffd1		       60		      .byte.b	%01100000
   4911  ffd2		       62		      .byte.b	%01100010
   4912  ffd3		       3c		      .byte.b	%00111100
   4913  ffd4
   4914  ffd4		       30		      .byte.b	%00110000
   4915  ffd5		       30		      .byte.b	%00110000
   4916  ffd6		       30		      .byte.b	%00110000
   4917  ffd7		       18		      .byte.b	%00011000
   4918  ffd8		       0c		      .byte.b	%00001100
   4919  ffd9		       06		      .byte.b	%00000110
   4920  ffda		       42		      .byte.b	%01000010
   4921  ffdb		       3e		      .byte.b	%00111110
   4922  ffdc
   4923  ffdc		       3c		      .byte.b	%00111100
   4924  ffdd		       66		      .byte.b	%01100110
   4925  ffde		       66		      .byte.b	%01100110
   4926  ffdf		       66		      .byte.b	%01100110
   4927  ffe0		       3c		      .byte.b	%00111100
   4928  ffe1		       66		      .byte.b	%01100110
   4929  ffe2		       66		      .byte.b	%01100110
   4930  ffe3		       3c		      .byte.b	%00111100
   4931  ffe4
   4932  ffe4		       3c		      .byte.b	%00111100
   4933  ffe5		       46		      .byte.b	%01000110
   4934  ffe6		       06		      .byte.b	%00000110
   4935  ffe7		       3e		      .byte.b	%00111110
   4936  ffe8		       66		      .byte.b	%01100110
   4937  ffe9		       66		      .byte.b	%01100110
   4938  ffea		       66		      .byte.b	%01100110
   4939  ffeb		       3c		      .byte.b	%00111100
   4940  ffec
   4941  ffec					      ifnconst	DPC_kernel_options
   4942  ffec
   4943  ffec		       00		      .byte.b	%00000000
   4944  ffed		       00		      .byte.b	%00000000
   4945  ffee		       00		      .byte.b	%00000000
   4946  ffef		       00		      .byte.b	%00000000
   4947  fff0		       00		      .byte.b	%00000000
   4948  fff1		       00		      .byte.b	%00000000
   4949  fff2		       00		      .byte.b	%00000000
   4950  fff3		       00		      .byte.b	%00000000
   4951  fff4
   4952  fff4					      endif
   4953  fff4
   4954  fff4					      endif
   4955  fff4
   4956  fff4				  -	      ifconst	ROM2k
   4957  fff4				  -	      ORG	$F7FC
   4958  fff4					      else
   4959  fff4				  -	      ifconst	bankswitch
   4960  fff4				  -	      if	bankswitch == 8
   4961  fff4				  -	      ORG	$2FF4-bscode_length
   4962  fff4				  -	      RORG	$FFF4-bscode_length
   4963  fff4				  -	      endif
   4964  fff4				  -	      if	bankswitch == 16
   4965  fff4				  -	      ORG	$4FF4-bscode_length
   4966  fff4				  -	      RORG	$FFF4-bscode_length
   4967  fff4				  -	      endif
   4968  fff4				  -	      if	bankswitch == 32
   4969  fff4				  -	      ORG	$8FF4-bscode_length
   4970  fff4				  -	      RORG	$FFF4-bscode_length
   4971  fff4				  -	      endif
   4972  fff4				  -	      if	bankswitch == 64
   4973  fff4				  -	      ORG	$10FE0-bscode_length
   4974  fff4				  -	      RORG	$1FFE0-bscode_length
   4975  fff4				  -	      endif
   4976  fff4					      else
   4977  fffc					      ORG	$FFFC
   4978  fffc					      endif
   4979  fffc					      endif
   4980  fffc				  -	      ifconst	bankswitch
   4981  fffc				  -	      if	bankswitch == 8
   4982  fffc				  -	      ORG	$2FFC
   4983  fffc				  -	      RORG	$FFFC
   4984  fffc				  -	      endif
   4985  fffc				  -	      if	bankswitch == 16
   4986  fffc				  -	      ORG	$4FFC
   4987  fffc				  -	      RORG	$FFFC
   4988  fffc				  -	      endif
   4989  fffc				  -	      if	bankswitch == 32
   4990  fffc				  -	      ORG	$8FFC
   4991  fffc				  -	      RORG	$FFFC
   4992  fffc				  -	      endif
   4993  fffc				  -	      if	bankswitch == 64
   4994  fffc				  -	      ORG	$10FF0
   4995  fffc				  -	      RORG	$1FFF0
   4996  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4997  fffc				  -	      ORG	$10FF8
   4998  fffc				  -	      RORG	$1FFF8
   4999  fffc				  -	      ifconst	superchip
   5000  fffc				  -	      .byte	"E","F","S","C"
   5001  fffc				  -	      else
   5002  fffc				  -	      .byte	"E","F","E","F"
   5003  fffc				  -	      endif
   5004  fffc				  -	      ORG	$10FFC
   5005  fffc				  -	      RORG	$1FFFC
   5006  fffc				  -	      endif
   5007  fffc					      else
   5008  fffc				  -	      ifconst	ROM2k
   5009  fffc				  -	      ORG	$F7FC
   5010  fffc					      else
   5011  fffc					      ORG	$FFFC
   5012  fffc					      endif
   5013  fffc					      endif
   5014  fffc		       00 f0		      .word.w	start
   5015  fffe		       00 f0		      .word.w	start
