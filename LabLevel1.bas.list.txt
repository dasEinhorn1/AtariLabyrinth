------- FILE LabLevel1.bas.asm LEVEL 1 PASS 3
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE LabLevel1.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 15	    _SD_Mino_Roar_length =	.skipL0311-_SD_Mino_Roar
      4  10000 ????
      5  10000 ????		00 0d	    _SD_Gem_Drop_length =	.skipL0310-_SD_Gem_Drop
      6  10000 ????
      7  10000 ????		00 09	    _SD_Gem_Coll_length =	.skipL0309-_SD_Gem_Coll
      8  10000 ????
      9  10000 ????		00 e7	    _Chase_Speed =	t
     10  10000 ????
     11  10000 ????		00 95	    _sc3       =	score + 2
     12  10000 ????
     13  10000 ????		00 94	    _sc2       =	score + 1
     14  10000 ????
     15  10000 ????		00 93	    _sc1       =	score
     16  10000 ????
     17  10000 ????		00 9f	    _M_Edge_Right =	159
     18  10000 ????
     19  10000 ????		00 02	    _M_Edge_Left =	2
     20  10000 ????
     21  10000 ????		00 58	    _M_Edge_Bottom =	88
     22  10000 ????
     23  10000 ????		00 02	    _M_Edge_Top =	2
     24  10000 ????
     25  10000 ????		00 a0	    _B_Edge_Right =	160
     26  10000 ????
     27  10000 ????		00 02	    _B_Edge_Left =	2
     28  10000 ????
     29  10000 ????		00 58	    _B_Edge_Bottom =	88
     30  10000 ????
     31  10000 ????		00 02	    _B_Edge_Top =	2
     32  10000 ????
     33  10000 ????		00 99	    _P_Edge_Right =	153
     34  10000 ????
     35  10000 ????		00 01	    _P_Edge_Left =	1
     36  10000 ????
     37  10000 ????		00 58	    _P_Edge_Bottom =	88
     38  10000 ????
     39  10000 ????		00 09	    _P_Edge_Top =	9
     40  10000 ????
     41  10000 ????		00 ed	    rand16     =	z
     42  10000 ????
     43  10000 ????		00 e6	    _Ch0_Counter =	s
     44  10000 ????
     45  10000 ????		00 e5	    _Ch0_Duration =	r
     46  10000 ????
     47  10000 ????		00 e4	    _Ch0_Sound =	q
     48  10000 ????
     49  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     50  10000 ????
     51  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     52  10000 ????
     53  10000 ????		00 ec	    _BitOp_01  =	y
     54  10000 ????
     55  10000 ????		00 eb	    _Bit5_Game_Over_Music_Played =	x
     56  10000 ????
     57  10000 ????		00 eb	    _Bit4_New_Chase_Start =	x
     58  10000 ????
     59  10000 ????		00 eb	    _Bit3_Mino_Moving =	x
     60  10000 ????
     61  10000 ????		00 eb	    _Bit2_Player_Moving =	x
     62  10000 ????
     63  10000 ????		00 eb	    _Bit1_Game_Over =	x
     64  10000 ????
     65  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     66  10000 ????
     67  10000 ????		00 df	    _Score_Phase_2 =	l
     68  10000 ????
     69  10000 ????		00 e0	    _Score_Phase_1 =	m
     70  10000 ????
     71  10000 ????		00 64	    _Minotaur_Awareness_Size =	100
     72  10000 ????
     73  10000 ????		00 d5	    _Frame_Counter =	b
     74  10000 ????
     75  10000 ????		00 d4	    _Master_Counter =	a
     76  10000 ????
     77  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     78  10000 ????
     79  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     80  10000 ????
     81  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     82  10000 ????
     83  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     84  10000 ????
     85  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     86  10000 ????
     87  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     88  10000 ????
     89  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     90  10000 ????
     91  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     92  10000 ????
     93  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     94  10000 ????
     95  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     96  10000 ????
     97  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     98  10000 ????
     99  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
    100  10000 ????
    101  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
    102  10000 ????
    103  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
    104  10000 ????
    105  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
    106  10000 ????
    107  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
    108  10000 ????
    109  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
    110  10000 ????
    111  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
    112  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE LabLevel1.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 15	    _SD_Mino_Roar_length =	.skipL0311-_SD_Mino_Roar
      4  10000 ????
      5  10000 ????		00 0d	    _SD_Gem_Drop_length =	.skipL0310-_SD_Gem_Drop
      6  10000 ????
      7  10000 ????		00 09	    _SD_Gem_Coll_length =	.skipL0309-_SD_Gem_Coll
      8  10000 ????
      9  10000 ????		00 e7	    _Chase_Speed =	t
     10  10000 ????
     11  10000 ????		00 95	    _sc3       =	score + 2
     12  10000 ????
     13  10000 ????		00 94	    _sc2       =	score + 1
     14  10000 ????
     15  10000 ????		00 93	    _sc1       =	score
     16  10000 ????
     17  10000 ????		00 9f	    _M_Edge_Right =	159
     18  10000 ????
     19  10000 ????		00 02	    _M_Edge_Left =	2
     20  10000 ????
     21  10000 ????		00 58	    _M_Edge_Bottom =	88
     22  10000 ????
     23  10000 ????		00 02	    _M_Edge_Top =	2
     24  10000 ????
     25  10000 ????		00 a0	    _B_Edge_Right =	160
     26  10000 ????
     27  10000 ????		00 02	    _B_Edge_Left =	2
     28  10000 ????
     29  10000 ????		00 58	    _B_Edge_Bottom =	88
     30  10000 ????
     31  10000 ????		00 02	    _B_Edge_Top =	2
     32  10000 ????
     33  10000 ????		00 99	    _P_Edge_Right =	153
     34  10000 ????
     35  10000 ????		00 01	    _P_Edge_Left =	1
     36  10000 ????
     37  10000 ????		00 58	    _P_Edge_Bottom =	88
     38  10000 ????
     39  10000 ????		00 09	    _P_Edge_Top =	9
     40  10000 ????
     41  10000 ????		00 ed	    rand16     =	z
     42  10000 ????
     43  10000 ????		00 e6	    _Ch0_Counter =	s
     44  10000 ????
     45  10000 ????		00 e5	    _Ch0_Duration =	r
     46  10000 ????
     47  10000 ????		00 e4	    _Ch0_Sound =	q
     48  10000 ????
     49  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     50  10000 ????
     51  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     52  10000 ????
     53  10000 ????		00 ec	    _BitOp_01  =	y
     54  10000 ????
     55  10000 ????		00 eb	    _Bit5_Game_Over_Music_Played =	x
     56  10000 ????
     57  10000 ????		00 eb	    _Bit4_New_Chase_Start =	x
     58  10000 ????
     59  10000 ????		00 eb	    _Bit3_Mino_Moving =	x
     60  10000 ????
     61  10000 ????		00 eb	    _Bit2_Player_Moving =	x
     62  10000 ????
     63  10000 ????		00 eb	    _Bit1_Game_Over =	x
     64  10000 ????
     65  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     66  10000 ????
     67  10000 ????		00 df	    _Score_Phase_2 =	l
     68  10000 ????
     69  10000 ????		00 e0	    _Score_Phase_1 =	m
     70  10000 ????
     71  10000 ????		00 64	    _Minotaur_Awareness_Size =	100
     72  10000 ????
     73  10000 ????		00 d5	    _Frame_Counter =	b
     74  10000 ????
     75  10000 ????		00 d4	    _Master_Counter =	a
     76  10000 ????
     77  10000 ????		00 de	    _Bit7_P1_Col_Right =	k
     78  10000 ????
     79  10000 ????		00 de	    _Bit6_P1_Col_Left =	k
     80  10000 ????
     81  10000 ????		00 de	    _Bit5_P1_Col_Down =	k
     82  10000 ????
     83  10000 ????		00 de	    _Bit4_P1_Col_Up =	k
     84  10000 ????
     85  10000 ????		00 de	    _Bit3_P1_Dir_Right =	k
     86  10000 ????
     87  10000 ????		00 de	    _Bit2_P1_Dir_Left =	k
     88  10000 ????
     89  10000 ????		00 de	    _Bit1_P1_Dir_Down =	k
     90  10000 ????
     91  10000 ????		00 de	    _Bit0_P1_Dir_Up =	k
     92  10000 ????
     93  10000 ????		00 de	    _BitOp_P1_M1_Dir =	k
     94  10000 ????
     95  10000 ????		00 da	    _Bit7_M0_Dir_Right =	g
     96  10000 ????
     97  10000 ????		00 da	    _Bit6_M0_Dir_Left =	g
     98  10000 ????
     99  10000 ????		00 da	    _Bit5_M0_Dir_Down =	g
    100  10000 ????
    101  10000 ????		00 da	    _Bit4_M0_Dir_Up =	g
    102  10000 ????
    103  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
    104  10000 ????
    105  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
    106  10000 ????
    107  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
    108  10000 ????
    109  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
    110  10000 ????
    111  10000 ????		00 da	    _BitOp_P0_M0_Dir =	g
    112  10000 ????
------- FILE LabLevel1.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 61 f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x 
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8 
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6					      ifconst	rand16
   1369  f3b6		       26 ed		      rol	rand16
   1370  f3b8					      endif
   1371  f3b8		       90 02		      bcc	noeor
   1372  f3ba		       49 b4		      eor	#$B4
   1373  f3bc				   noeor
   1374  f3bc		       85 a2		      sta	rand
   1375  f3be					      ifconst	rand16
   1376  f3be		       45 ed		      eor	rand16
   1377  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1379  f3c1				   drawscreen
   1380  f3c1				  -	      ifconst	debugscore
   1381  f3c1				  -	      ldx	#14
   1382  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3c1				  -
   1384  f3c1				  -	      ifconst	mincycles
   1385  f3c1				  -	      lda	mincycles
   1386  f3c1				  -	      cmp	INTIM
   1387  f3c1				  -	      lda	mincycles
   1388  f3c1				  -	      bcc	nochange
   1389  f3c1				  -	      lda	INTIM
   1390  f3c1				  -	      sta	mincycles
   1391  f3c1				  -nochange
   1392  f3c1				  -	      endif
   1393  f3c1				  -
   1394  f3c1				  -			; cmp #$2B
   1395  f3c1				  -			; bcs no_cycles_left
   1396  f3c1				  -	      bmi	cycles_left
   1397  f3c1				  -	      ldx	#64
   1398  f3c1				  -	      eor	#$ff	;make negative
   1399  f3c1				  -cycles_left
   1400  f3c1				  -	      stx	scorecolor
   1401  f3c1				  -	      and	#$7f	; clear sign bit
   1402  f3c1				  -	      tax
   1403  f3c1				  -	      lda	scorebcd,x
   1404  f3c1				  -	      sta	score+2
   1405  f3c1				  -	      lda	scorebcd1,x
   1406  f3c1				  -	      sta	score+1
   1407  f3c1				  -	      jmp	done_debugscore
   1408  f3c1				  -scorebcd
   1409  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3c1				  -scorebcd1
   1414  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3c1				  -done_debugscore
   1419  f3c1					      endif
   1420  f3c1
   1421  f3c1				  -	      ifconst	debugcycles
   1422  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3c1				  -			; cmp #$2B
   1424  f3c1				  -			; BCC overscan
   1425  f3c1				  -	      bmi	overscan
   1426  f3c1				  -	      sta	COLUBK
   1427  f3c1				  -	      bcs	doneoverscan
   1428  f3c1					      endif
   1429  f3c1
   1430  f3c1				   overscan
   1431  f3c1				  -	      ifconst	interlaced
   1432  f3c1				  -	      PHP
   1433  f3c1				  -	      PLA
   1434  f3c1				  -	      EOR	#4	; flip interrupt bit
   1435  f3c1				  -	      PHA
   1436  f3c1				  -	      PLP
   1437  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1438  f3c1				  -	      TAX		; save it for later
   1439  f3c1					      endif
   1440  f3c1
   1441  f3c1				   overscanloop
   1442  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c4		       30 fb		      bmi	overscanloop
   1444  f3c6				   doneoverscan
   1445  f3c6
   1446  f3c6							;do VSYNC
   1447  f3c6
   1448  f3c6				  -	      ifconst	interlaced
   1449  f3c6				  -	      CPX	#4
   1450  f3c6				  -	      BNE	oddframevsync
   1451  f3c6					      endif
   1452  f3c6
   1453  f3c6		       a9 02		      lda	#2
   1454  f3c8		       85 02		      sta	WSYNC
   1455  f3ca		       85 00		      sta	VSYNC
   1456  f3cc		       85 02		      STA	WSYNC
   1457  f3ce		       85 02		      STA	WSYNC
   1458  f3d0		       4a		      lsr
   1459  f3d1		       85 02		      STA	WSYNC
   1460  f3d3		       85 00		      STA	VSYNC
   1461  f3d5		       85 01		      sta	VBLANK
   1462  f3d7					      ifnconst	overscan_time
   1463  f3d7		       a9 a5		      lda	#37+128
   1464  f3d9				  -	      else
   1465  f3d9				  -	      lda	#overscan_time+128
   1466  f3d9					      endif
   1467  f3d9		       8d 96 02 	      sta	TIM64T
   1468  f3dc
   1469  f3dc				  -	      ifconst	interlaced
   1470  f3dc				  -	      jmp	postsync
   1471  f3dc				  -
   1472  f3dc				  -oddframevsync
   1473  f3dc				  -	      sta	WSYNC
   1474  f3dc				  -
   1475  f3dc				  -	      LDA	($80,X)	; 11 waste
   1476  f3dc				  -	      LDA	($80,X)	; 11 waste
   1477  f3dc				  -	      LDA	($80,X)	; 11 waste
   1478  f3dc				  -
   1479  f3dc				  -	      lda	#2
   1480  f3dc				  -	      sta	VSYNC
   1481  f3dc				  -	      sta	WSYNC
   1482  f3dc				  -	      sta	WSYNC
   1483  f3dc				  -	      sta	WSYNC
   1484  f3dc				  -
   1485  f3dc				  -	      LDA	($80,X)	; 11 waste
   1486  f3dc				  -	      LDA	($80,X)	; 11 waste
   1487  f3dc				  -	      LDA	($80,X)	; 11 waste
   1488  f3dc				  -
   1489  f3dc				  -	      lda	#0
   1490  f3dc				  -	      sta	VSYNC
   1491  f3dc				  -	      sta	VBLANK
   1492  f3dc				  -	      ifnconst	overscan_time
   1493  f3dc				  -	      lda	#37+128
   1494  f3dc				  -	      else
   1495  f3dc				  -	      lda	#overscan_time+128
   1496  f3dc				  -	      endif
   1497  f3dc				  -	      sta	TIM64T
   1498  f3dc				  -
   1499  f3dc				  -postsync
   1500  f3dc					      endif
   1501  f3dc
   1502  f3dc				  -	      ifconst	legacy
   1503  f3dc				  -	      if	legacy < 100
   1504  f3dc				  -	      ldx	#4
   1505  f3dc				  -adjustloop
   1506  f3dc				  -	      lda	player0x,x
   1507  f3dc				  -	      sec
   1508  f3dc				  -	      sbc	#14	;?
   1509  f3dc				  -	      sta	player0x,x
   1510  f3dc				  -	      dex
   1511  f3dc				  -	      bpl	adjustloop
   1512  f3dc				  -	      endif
   1513  f3dc					      endif
   1514  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3dc				  -	      repeat	($fa-(<*))
   1516  f3dc				  -	      nop
   1517  f3dc				  -	      repend
   1518  f3dc					      endif
   1519  f3dc		       85 02		      sta	WSYNC
   1520  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1522  f3e2				   HorPosLoop		; 5
   1523  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e4		       38		      sec		;+2 11
   1525  f3e5				   DivideLoop
   1526  f3e5		       e9 0f		      sbc	#15
   1527  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1529  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1530  f3ed		       85 02		      sta	WSYNC
   1531  f3ef		       ca		      dex
   1532  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3f2							; 4
   1534  f3f2
   1535  f3f2		       a2 04		      ldx	#4
   1536  f3f4		       b4 9c		      ldy	temp1,X
   1537  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1538  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1539  f3fb
   1540  f3fb		       ca		      dex
   1541  f3fc		       b4 9c		      ldy	temp1,X
   1542  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1543  f401		       95 20		      sta	HMP0,X	;+14 32
   1544  f403
   1545  f403		       ca		      dex
   1546  f404		       b4 9c		      ldy	temp1,X
   1547  f406		       b9 52 f3 	      lda	repostable-256,Y
   1548  f409		       95 20		      sta	HMP0,X	;+14 46
   1549  f40b
   1550  f40b		       ca		      dex
   1551  f40c		       b4 9c		      ldy	temp1,X
   1552  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1553  f411		       95 20		      sta	HMP0,X	;+14 60
   1554  f413
   1555  f413		       ca		      dex
   1556  f414		       b4 9c		      ldy	temp1,X
   1557  f416		       b9 52 f3 	      lda	repostable-256,Y
   1558  f419		       95 20		      sta	HMP0,X	;+14 74
   1559  f41b
   1560  f41b		       85 02		      sta	WSYNC
   1561  f41d
   1562  f41d		       85 2a		      sta	HMOVE	;+3 3
   1563  f41f
   1564  f41f
   1565  f41f				  -	      ifconst	legacy
   1566  f41f				  -	      if	legacy < 100
   1567  f41f				  -	      ldx	#4
   1568  f41f				  -adjustloop2
   1569  f41f				  -	      lda	player0x,x
   1570  f41f				  -	      clc
   1571  f41f				  -	      adc	#14	;?
   1572  f41f				  -	      sta	player0x,x
   1573  f41f				  -	      dex
   1574  f41f				  -	      bpl	adjustloop2
   1575  f41f				  -	      endif
   1576  f41f					      endif
   1577  f41f
   1578  f41f
   1579  f41f
   1580  f41f
   1581  f41f							;set score pointers
   1582  f41f		       a7 95		      lax	score+2
   1583  f421		       20 52 f4 	      jsr	scorepointerset
   1584  f424		       84 9b		      sty	scorepointers+5
   1585  f426		       86 98		      stx	scorepointers+2
   1586  f428		       a7 94		      lax	score+1
   1587  f42a		       20 52 f4 	      jsr	scorepointerset
   1588  f42d		       84 9a		      sty	scorepointers+4
   1589  f42f		       86 97		      stx	scorepointers+1
   1590  f431		       a7 93		      lax	score
   1591  f433		       20 52 f4 	      jsr	scorepointerset
   1592  f436		       84 99		      sty	scorepointers+3
   1593  f438		       86 96		      stx	scorepointers
   1594  f43a
   1595  f43a				   vblk
   1596  f43a							; run possible vblank bB code
   1597  f43a				  -	      ifconst	vblank_bB_code
   1598  f43a				  -	      jsr	vblank_bB_code
   1599  f43a					      endif
   1600  f43a				   vblk2
   1601  f43a		       ad 84 02 	      LDA	INTIM
   1602  f43d		       30 fb		      bmi	vblk2
   1603  f43f		       4c 34 f0 	      jmp	kernel
   1604  f442
   1605  f442
   1606  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f452				   repostable
   1609  f452
   1610  f452				   scorepointerset
   1611  f452		       29 0f		      and	#$0F
   1612  f454		       0a		      asl
   1613  f455		       0a		      asl
   1614  f456		       0a		      asl
   1615  f457		       69 9c		      adc	#<scoretable
   1616  f459		       a8		      tay
   1617  f45a		       8a		      txa
   1618  f45b							; and #$F0
   1619  f45b							; lsr
   1620  f45b		       4b f0		      asr	#$F0
   1621  f45d		       69 9c		      adc	#<scoretable
   1622  f45f		       aa		      tax
   1623  f460		       60		      rts
   1624  f461				   game
   1625  f461				   .
   1626  f461							;
   1627  f461
   1628  f461				   .
   1629  f461							;
   1630  f461
   1631  f461				   .
   1632  f461							;
   1633  f461
   1634  f461				   .
   1635  f461							;
   1636  f461
   1637  f461				   .
   1638  f461							;
   1639  f461
   1640  f461				   .
   1641  f461							;
   1642  f461
   1643  f461				   .
   1644  f461							;
   1645  f461
   1646  f461				   .
   1647  f461							;
   1648  f461
   1649  f461				   .
   1650  f461							;
   1651  f461
   1652  f461				   .
   1653  f461							;
   1654  f461
   1655  f461				   .
   1656  f461							;
   1657  f461
   1658  f461				   .
   1659  f461							;
   1660  f461
   1661  f461				   .
   1662  f461							;
   1663  f461
   1664  f461				   .
   1665  f461							;
   1666  f461
   1667  f461				   .
   1668  f461							;
   1669  f461
   1670  f461				   .
   1671  f461							;
   1672  f461
   1673  f461				   .
   1674  f461							;
   1675  f461
   1676  f461				   .
   1677  f461							;
   1678  f461
   1679  f461				   .
   1680  f461							;
   1681  f461
   1682  f461				   .
   1683  f461							;
   1684  f461
   1685  f461				   .
   1686  f461							;
   1687  f461
   1688  f461				   .
   1689  f461							;
   1690  f461
   1691  f461				   .
   1692  f461							;
   1693  f461
   1694  f461				   .
   1695  f461							;
   1696  f461
   1697  f461				   .
   1698  f461							;
   1699  f461
   1700  f461				   .
   1701  f461							;
   1702  f461
   1703  f461				   .L00 		;  set smartbranching on
   1704  f461
   1705  f461				   .
   1706  f461							;
   1707  f461
   1708  f461				   .
   1709  f461							;
   1710  f461
   1711  f461				   .
   1712  f461							;
   1713  f461
   1714  f461				   .
   1715  f461							;
   1716  f461
   1717  f461				   .
   1718  f461							;
   1719  f461
   1720  f461				   .
   1721  f461							;
   1722  f461
   1723  f461				   .
   1724  f461							;
   1725  f461
   1726  f461				   .
   1727  f461							;
   1728  f461
   1729  f461				   .
   1730  f461							;
   1731  f461
   1732  f461				   .
   1733  f461							;
   1734  f461
   1735  f461				   .
   1736  f461							;
   1737  f461
   1738  f461				   .
   1739  f461							;
   1740  f461
   1741  f461				   .
   1742  f461							;
   1743  f461
   1744  f461				   .
   1745  f461							;
   1746  f461
   1747  f461				   .
   1748  f461							;
   1749  f461
   1750  f461				   .
   1751  f461							;
   1752  f461
   1753  f461				   .
   1754  f461							;
   1755  f461
   1756  f461				   .
   1757  f461							;
   1758  f461
   1759  f461				   .
   1760  f461							;
   1761  f461
   1762  f461				   .
   1763  f461							;
   1764  f461
   1765  f461				   .
   1766  f461							;
   1767  f461
   1768  f461				   .
   1769  f461							;
   1770  f461
   1771  f461				   .
   1772  f461							;
   1773  f461
   1774  f461				   .
   1775  f461							;
   1776  f461
   1777  f461				   .
   1778  f461							;
   1779  f461
   1780  f461				   .
   1781  f461							;
   1782  f461
   1783  f461				   .
   1784  f461							;
   1785  f461
   1786  f461				   .L01 		;  dim _BitOp_P0_M0_Dir  =  g
   1787  f461
   1788  f461				   .L02 		;  dim _Bit0_P0_Dir_Up  =  g
   1789  f461
   1790  f461				   .L03 		;  dim _Bit1_P0_Dir_Down  =  g
   1791  f461
   1792  f461				   .L04 		;  dim _Bit2_P0_Dir_Left  =  g
   1793  f461
   1794  f461				   .L05 		;  dim _Bit3_P0_Dir_Right  =  g
   1795  f461
   1796  f461				   .L06 		;  dim _Bit4_M0_Dir_Up  =  g
   1797  f461
   1798  f461				   .L07 		;  dim _Bit5_M0_Dir_Down  =  g
   1799  f461
   1800  f461				   .L08 		;  dim _Bit6_M0_Dir_Left  =  g
   1801  f461
   1802  f461				   .L09 		;  dim _Bit7_M0_Dir_Right  =  g
   1803  f461
   1804  f461				   .
   1805  f461							;
   1806  f461
   1807  f461				   .
   1808  f461							;
   1809  f461
   1810  f461				   .
   1811  f461							;
   1812  f461
   1813  f461				   .L010		;  dim _BitOp_P1_M1_Dir  =  k
   1814  f461
   1815  f461				   .L011		;  dim _Bit0_P1_Dir_Up  =  k
   1816  f461
   1817  f461				   .L012		;  dim _Bit1_P1_Dir_Down  =  k
   1818  f461
   1819  f461				   .L013		;  dim _Bit2_P1_Dir_Left  =  k
   1820  f461
   1821  f461				   .L014		;  dim _Bit3_P1_Dir_Right  =  k
   1822  f461
   1823  f461				   .L015		;  dim _Bit4_P1_Col_Up  =  k
   1824  f461
   1825  f461				   .L016		;  dim _Bit5_P1_Col_Down  =  k
   1826  f461
   1827  f461				   .L017		;  dim _Bit6_P1_Col_Left  =  k
   1828  f461
   1829  f461				   .L018		;  dim _Bit7_P1_Col_Right  =  k
   1830  f461
   1831  f461				   .
   1832  f461							;
   1833  f461
   1834  f461				   .L019		;  dim _Master_Counter  =  a
   1835  f461
   1836  f461				   .L020		;  dim _Frame_Counter	=  b
   1837  f461
   1838  f461				   .
   1839  f461							;
   1840  f461
   1841  f461				   .
   1842  f461							;
   1843  f461
   1844  f461				   .
   1845  f461							;
   1846  f461
   1847  f461				   .
   1848  f461							;
   1849  f461
   1850  f461				   .L021		;  const _Minotaur_Awareness_Size  =  100
   1851  f461
   1852  f461				   .
   1853  f461							;
   1854  f461
   1855  f461				   .
   1856  f461							;
   1857  f461
   1858  f461				   .
   1859  f461							;
   1860  f461
   1861  f461				   .
   1862  f461							;
   1863  f461
   1864  f461				   .L022		;  l  =  $15
   1865  f461
   1866  f461		       a9 15		      LDA	#$15
   1867  f463		       85 df		      STA	l
   1868  f465				   .L023		;  m  =  $30
   1869  f465
   1870  f465		       a9 30		      LDA	#$30
   1871  f467		       85 e0		      STA	m
   1872  f469				   .L024		;  dim _Score_Phase_1	=  m
   1873  f469
   1874  f469				   .L025		;  dim _Score_Phase_2	=  l
   1875  f469
   1876  f469				   .L026		;  dim _Bit0_Carrying_Gem  =  x
   1877  f469
   1878  f469				   .L027		;  dim _Bit1_Game_Over  =  x
   1879  f469
   1880  f469				   .L028		;  dim _Bit2_Player_Moving  =	x
   1881  f469
   1882  f469				   .L029		;  dim _Bit3_Mino_Moving  =  x
   1883  f469
   1884  f469				   .L030		;  dim _Bit4_New_Chase_Start  =  x
   1885  f469
   1886  f469				   .L031		;  dim _Bit5_Game_Over_Music_Played  =  x
   1887  f469
   1888  f469				   .
   1889  f469							;
   1890  f469
   1891  f469				   .
   1892  f469							;
   1893  f469
   1894  f469				   .
   1895  f469							;
   1896  f469
   1897  f469				   .
   1898  f469							;
   1899  f469
   1900  f469				   .L032		;  dim _BitOp_01  =  y
   1901  f469
   1902  f469				   .L033		;  dim _Bit0_Reset_Restrainer	=  y
   1903  f469
   1904  f469				   .L034		;  dim _Bit1_Toggle_Screen  =	y
   1905  f469
   1906  f469				   .
   1907  f469							;
   1908  f469
   1909  f469				   .
   1910  f469							;
   1911  f469
   1912  f469				   .
   1913  f469							;
   1914  f469
   1915  f469				   .L035		;  dim _Ch0_Sound  =  q
   1916  f469
   1917  f469				   .L036		;  dim _Ch0_Duration  =  r
   1918  f469
   1919  f469				   .L037		;  dim _Ch0_Counter  =  s
   1920  f469
   1921  f469				   .
   1922  f469							;
   1923  f469
   1924  f469				   .
   1925  f469							;
   1926  f469
   1927  f469				   .
   1928  f469							;
   1929  f469
   1930  f469				   .
   1931  f469							;
   1932  f469
   1933  f469				   .L038		;  dim rand16	=  z
   1934  f469
   1935  f469				   .
   1936  f469							;
   1937  f469
   1938  f469				   .
   1939  f469							;
   1940  f469
   1941  f469				   .
   1942  f469							;
   1943  f469
   1944  f469				   .
   1945  f469							;
   1946  f469
   1947  f469				   .
   1948  f469							;
   1949  f469
   1950  f469				   .
   1951  f469							;
   1952  f469
   1953  f469				   .
   1954  f469							;
   1955  f469
   1956  f469				   .L039		;  const _P_Edge_Top  =  9
   1957  f469
   1958  f469				   .L040		;  const _P_Edge_Bottom  =  88
   1959  f469
   1960  f469				   .L041		;  const _P_Edge_Left	=  1
   1961  f469
   1962  f469				   .L042		;  const _P_Edge_Right  =  153
   1963  f469
   1964  f469				   .
   1965  f469							;
   1966  f469
   1967  f469				   .
   1968  f469							;
   1969  f469
   1970  f469				   .
   1971  f469							;
   1972  f469
   1973  f469				   .
   1974  f469							;
   1975  f469
   1976  f469				   .
   1977  f469							;
   1978  f469
   1979  f469				   .
   1980  f469							;
   1981  f469
   1982  f469				   .
   1983  f469							;
   1984  f469
   1985  f469				   .
   1986  f469							;
   1987  f469
   1988  f469				   .L043		;  const _B_Edge_Top  =  2
   1989  f469
   1990  f469				   .L044		;  const _B_Edge_Bottom  =  88
   1991  f469
   1992  f469				   .L045		;  const _B_Edge_Left	=  2
   1993  f469
   1994  f469				   .L046		;  const _B_Edge_Right  =  160
   1995  f469
   1996  f469				   .
   1997  f469							;
   1998  f469
   1999  f469				   .
   2000  f469							;
   2001  f469
   2002  f469				   .
   2003  f469							;
   2004  f469
   2005  f469				   .
   2006  f469							;
   2007  f469
   2008  f469				   .
   2009  f469							;
   2010  f469
   2011  f469				   .
   2012  f469							;
   2013  f469
   2014  f469				   .
   2015  f469							;
   2016  f469
   2017  f469				   .
   2018  f469							;
   2019  f469
   2020  f469				   .
   2021  f469							;
   2022  f469
   2023  f469				   .L047		;  const _M_Edge_Top  =  2
   2024  f469
   2025  f469				   .L048		;  const _M_Edge_Bottom  =  88
   2026  f469
   2027  f469				   .L049		;  const _M_Edge_Left	=  2
   2028  f469
   2029  f469				   .L050		;  const _M_Edge_Right  =  159
   2030  f469
   2031  f469				   .
   2032  f469							;
   2033  f469
   2034  f469				   .
   2035  f469							;
   2036  f469
   2037  f469				   .
   2038  f469							;
   2039  f469
   2040  f469				   .
   2041  f469							;
   2042  f469
   2043  f469				   .
   2044  f469							;
   2045  f469
   2046  f469				   .
   2047  f469							;
   2048  f469
   2049  f469				   .
   2050  f469							;
   2051  f469
   2052  f469				   .__Start_Restart
   2053  f469							; __Start_Restart
   2054  f469
   2055  f469				   .
   2056  f469							;
   2057  f469
   2058  f469				   .
   2059  f469							;
   2060  f469
   2061  f469				   .
   2062  f469							;
   2063  f469
   2064  f469				   .
   2065  f469							;
   2066  f469
   2067  f469				   .
   2068  f469							;
   2069  f469
   2070  f469				   .L051		;  AUDV0  =  0  :  AUDV1  =  0
   2071  f469
   2072  f469		       a9 00		      LDA	#0
   2073  f46b		       85 19		      STA	AUDV0
   2074  f46d		       85 1a		      STA	AUDV1
   2075  f46f				   .
   2076  f46f							;
   2077  f46f
   2078  f46f				   .
   2079  f46f							;
   2080  f46f
   2081  f46f				   .
   2082  f46f							;
   2083  f46f
   2084  f46f				   .
   2085  f46f							;
   2086  f46f
   2087  f46f				   .
   2088  f46f							;
   2089  f46f
   2090  f46f				   .
   2091  f46f							;
   2092  f46f
   2093  f46f				   .
   2094  f46f							;
   2095  f46f
   2096  f46f				   .
   2097  f46f							;
   2098  f46f
   2099  f46f				   .
   2100  f46f							;
   2101  f46f
   2102  f46f				   .L052		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2103  f46f
   2104  f46f		       a9 00		      LDA	#0
   2105  f471		       85 d4		      STA	a
   2106  f473		       85 d5		      STA	b
   2107  f475		       85 d6		      STA	c
   2108  f477		       85 d7		      STA	d
   2109  f479		       85 d8		      STA	e
   2110  f47b		       85 d9		      STA	f
   2111  f47d		       85 da		      STA	g
   2112  f47f		       85 db		      STA	h
   2113  f481		       85 dc		      STA	i
   2114  f483				   .L053		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2115  f483
   2116  f483		       a9 00		      LDA	#0
   2117  f485		       85 dd		      STA	j
   2118  f487		       85 de		      STA	k
   2119  f489		       85 df		      STA	l
   2120  f48b		       85 e0		      STA	m
   2121  f48d		       85 e1		      STA	n
   2122  f48f		       85 e2		      STA	o
   2123  f491		       85 e3		      STA	p
   2124  f493		       85 e4		      STA	q
   2125  f495		       85 e5		      STA	r
   2126  f497				   .L054		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2127  f497
   2128  f497		       a9 00		      LDA	#0
   2129  f499		       85 e6		      STA	s
   2130  f49b		       85 e7		      STA	t
   2131  f49d		       85 e8		      STA	u
   2132  f49f		       85 e9		      STA	v
   2133  f4a1		       85 ea		      STA	w
   2134  f4a3		       85 eb		      STA	x
   2135  f4a5				   .
   2136  f4a5							;
   2137  f4a5
   2138  f4a5				   .
   2139  f4a5							;
   2140  f4a5
   2141  f4a5				   .
   2142  f4a5							;
   2143  f4a5
   2144  f4a5				   .
   2145  f4a5							;
   2146  f4a5
   2147  f4a5				   .
   2148  f4a5							;
   2149  f4a5
   2150  f4a5				   .
   2151  f4a5							;
   2152  f4a5
   2153  f4a5				   .
   2154  f4a5							;
   2155  f4a5
   2156  f4a5				   .
   2157  f4a5							;
   2158  f4a5
   2159  f4a5				   .L055		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2160  f4a5
   2161  f4a5		       a5 ec		      LDA	_BitOp_01
   2162  f4a7		       29 10		      AND	#%00010000
   2163  f4a9		       85 ec		      STA	_BitOp_01
   2164  f4ab				   .
   2165  f4ab							;
   2166  f4ab
   2167  f4ab				   .
   2168  f4ab							;
   2169  f4ab
   2170  f4ab				   .__Title_Screen
   2171  f4ab							; __Title_Screen
   2172  f4ab
   2173  f4ab				   .L056		;  playfield:
   2174  f4ab
   2175  f4ab				  -	      ifconst	pfres
   2176  f4ab				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2177  f4ab					      else
   2178  f4ab		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2179  f4ad					      endif
   2180  f4ad		       4c dc f4 	      jmp	pflabel0
   2181  f4b0				   PF_data0
   2182  f4b0		       00 00		      .byte.b	%00000000, %00000000
   2183  f4b2					      if	(pfwidth>2)
   2184  f4b2		       00 00		      .byte.b	%00000000, %00000000
   2185  f4b4					      endif
   2186  f4b4		       9d a9		      .byte.b	%10011101, %10101001
   2187  f4b6					      if	(pfwidth>2)
   2188  f4b6		       96 ae		      .byte.b	%10010110, %10101110
   2189  f4b8					      endif
   2190  f4b8		       95 aa		      .byte.b	%10010101, %10101010
   2191  f4ba					      if	(pfwidth>2)
   2192  f4ba		       55 a4		      .byte.b	%01010101, %10100100
   2193  f4bc					      endif
   2194  f4bc		       9d 91		      .byte.b	%10011101, %10010001
   2195  f4be					      if	(pfwidth>2)
   2196  f4be		       95 e4		      .byte.b	%10010101, %11100100
   2197  f4c0					      endif
   2198  f4c0		       95 92		      .byte.b	%10010101, %10010010
   2199  f4c2					      if	(pfwidth>2)
   2200  f4c2		       55 a4		      .byte.b	%01010101, %10100100
   2201  f4c4					      endif
   2202  f4c4		       d5 91		      .byte.b	%11010101, %10010001
   2203  f4c6					      if	(pfwidth>2)
   2204  f4c6		       55 a4		      .byte.b	%01010101, %10100100
   2205  f4c8					      endif
   2206  f4c8		       00 00		      .byte.b	%00000000, %00000000
   2207  f4ca					      if	(pfwidth>2)
   2208  f4ca		       00 00		      .byte.b	%00000000, %00000000
   2209  f4cc					      endif
   2210  f4cc		       1f ff		      .byte.b	%00011111, %11111111
   2211  f4ce					      if	(pfwidth>2)
   2212  f4ce		       ff 1f		      .byte.b	%11111111, %00011111
   2213  f4d0					      endif
   2214  f4d0		       0a 55		      .byte.b	%00001010, %01010101
   2215  f4d2					      if	(pfwidth>2)
   2216  f4d2		       55 0a		      .byte.b	%01010101, %00001010
   2217  f4d4					      endif
   2218  f4d4		       1f 7f		      .byte.b	%00011111, %01111111
   2219  f4d6					      if	(pfwidth>2)
   2220  f4d6		       7f 1f		      .byte.b	%01111111, %00011111
   2221  f4d8					      endif
   2222  f4d8		       00 00		      .byte.b	%00000000, %00000000
   2223  f4da					      if	(pfwidth>2)
   2224  f4da		       00 00		      .byte.b	%00000000, %00000000
   2225  f4dc					      endif
   2226  f4dc				   pflabel0
   2227  f4dc		       bd b0 f4 	      lda	PF_data0,x
   2228  f4df		       95 a4		      sta	playfield,x
   2229  f4e1		       ca		      dex
   2230  f4e2		       10 f8		      bpl	pflabel0
   2231  f4e4				   .L057		;  player0:
   2232  f4e4
   2233  f4e4		       a2 db		      LDX	#<playerL057_0
   2234  f4e6		       86 8a		      STX	player0pointerlo
   2235  f4e8		       a9 fd		      LDA	#>playerL057_0
   2236  f4ea		       85 8b		      STA	player0pointerhi
   2237  f4ec		       a9 07		      LDA	#7
   2238  f4ee		       85 8e		      STA	player0height
   2239  f4f0				   .L058		;  player1:
   2240  f4f0
   2241  f4f0		       a2 e3		      LDX	#<playerL058_1
   2242  f4f2		       86 8c		      STX	player1pointerlo
   2243  f4f4		       a9 fd		      LDA	#>playerL058_1
   2244  f4f6		       85 8d		      STA	player1pointerhi
   2245  f4f8		       a9 07		      LDA	#7
   2246  f4fa		       85 8f		      STA	player1height
   2247  f4fc				   .
   2248  f4fc							;
   2249  f4fc
   2250  f4fc				   .__Start_Screen_Loop
   2251  f4fc							; __Start_Screen_Loop
   2252  f4fc
   2253  f4fc				   .L059		;  if _Master_Counter	<=  10 then goto __Skip_Joy_Checks
   2254  f4fc
   2255  f4fc		       a9 0a		      LDA	#10
   2256  f4fe		       c5 d4		      CMP	_Master_Counter
   2257  f500		       90 03		      BCC	.skipL059
   2258  f502				   .condpart0
   2259  f502		       4c 30 f5 	      jmp	.__Skip_Joy_Checks
   2260  f505
   2261  f505				   .skipL059
   2262  f505				   .L060		;  if joy0up then goto __Skip_Start_Screen
   2263  f505
   2264  f505		       a9 10		      lda	#$10
   2265  f507		       2c 80 02 	      bit	SWCHA
   2266  f50a		       d0 03		      BNE	.skipL060
   2267  f50c				   .condpart1
   2268  f50c		       4c 62 f5 	      jmp	.__Skip_Start_Screen
   2269  f50f
   2270  f50f				   .skipL060
   2271  f50f				   .L061		;  if joy0down then goto __Skip_Start_Screen
   2272  f50f
   2273  f50f		       a9 20		      lda	#$20
   2274  f511		       2c 80 02 	      bit	SWCHA
   2275  f514		       d0 03		      BNE	.skipL061
   2276  f516				   .condpart2
   2277  f516		       4c 62 f5 	      jmp	.__Skip_Start_Screen
   2278  f519
   2279  f519				   .skipL061
   2280  f519				   .L062		;  if joy0right then goto __Skip_Start_Screen
   2281  f519
   2282  f519		       2c 80 02 	      bit	SWCHA
   2283  f51c		       30 03		      BMI	.skipL062
   2284  f51e				   .condpart3
   2285  f51e		       4c 62 f5 	      jmp	.__Skip_Start_Screen
   2286  f521
   2287  f521				   .skipL062
   2288  f521				   .L063		;  if joy0left then goto __Skip_Start_Screen
   2289  f521
   2290  f521		       2c 80 02 	      bit	SWCHA
   2291  f524		       70 03		      BVS	.skipL063
   2292  f526				   .condpart4
   2293  f526		       4c 62 f5 	      jmp	.__Skip_Start_Screen
   2294  f529
   2295  f529				   .skipL063
   2296  f529				   .L064		;  if joy0fire then goto __Skip_Start_Screen
   2297  f529
   2298  f529		       24 0c		      bit	INPT4
   2299  f52b		       30 03		      BMI	.skipL064
   2300  f52d				   .condpart5
   2301  f52d		       4c 62 f5 	      jmp	.__Skip_Start_Screen
   2302  f530
   2303  f530				   .skipL064
   2304  f530				   .__Skip_Joy_Checks
   2305  f530							; __Skip_Joy_Checks
   2306  f530
   2307  f530				   .L065		;  player1x  =  77
   2308  f530
   2309  f530		       a9 4d		      LDA	#77
   2310  f532		       85 81		      STA	player1x
   2311  f534				   .L066		;  player1y  =  80
   2312  f534
   2313  f534		       a9 50		      LDA	#80
   2314  f536		       85 86		      STA	player1y
   2315  f538				   .L067		;  player0x  =  77
   2316  f538
   2317  f538		       a9 4d		      LDA	#77
   2318  f53a		       85 80		      STA	player0x
   2319  f53c				   .L068		;  player0y  =  72
   2320  f53c
   2321  f53c		       a9 48		      LDA	#72
   2322  f53e		       85 85		      STA	player0y
   2323  f540				   .L069		;  COLUP0  =  $36
   2324  f540
   2325  f540		       a9 36		      LDA	#$36
   2326  f542		       85 06		      STA	COLUP0
   2327  f544				   .L070		;  COLUP1  =  $14
   2328  f544
   2329  f544		       a9 14		      LDA	#$14
   2330  f546		       85 07		      STA	COLUP1
   2331  f548				   .L071		;  COLUPF  =  $14
   2332  f548
   2333  f548		       a9 14		      LDA	#$14
   2334  f54a		       85 08		      STA	COLUPF
   2335  f54c				   .L072		;  COLUBK  =  0
   2336  f54c
   2337  f54c		       a9 00		      LDA	#0
   2338  f54e		       85 09		      STA	COLUBK
   2339  f550				   .L073		;  scorecolor	=  0
   2340  f550
   2341  f550		       a9 00		      LDA	#0
   2342  f552		       85 a3		      STA	scorecolor
   2343  f554				   .L074		;  _Master_Counter  =	_Master_Counter  +  1
   2344  f554
   2345  f554		       e6 d4		      INC	_Master_Counter
   2346  f556				   .L075		;  drawscreen
   2347  f556
   2348  f556		       20 c1 f3 	      jsr	drawscreen
   2349  f559				   .L076		;  goto __Start_Screen_Loop
   2350  f559
   2351  f559		       4c fc f4 	      jmp	.__Start_Screen_Loop
   2352  f55c
   2353  f55c				   .
   2354  f55c							;
   2355  f55c
   2356  f55c				   .L077		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   2357  f55c
   2358  f55c		       a9 00		      LDA	#0
   2359  f55e		       85 d4		      STA	_Master_Counter
   2360  f560		       85 d5		      STA	_Frame_Counter
   2361  f562				   .__Skip_Start_Screen
   2362  f562							; __Skip_Start_Screen
   2363  f562
   2364  f562				   .
   2365  f562							;
   2366  f562
   2367  f562				   .
   2368  f562							;
   2369  f562
   2370  f562				   .
   2371  f562							;
   2372  f562
   2373  f562				   .
   2374  f562							;
   2375  f562
   2376  f562				   .
   2377  f562							;
   2378  f562
   2379  f562				   .L078		;  player0x  =  77  :	player0y  =  60
   2380  f562
   2381  f562		       a9 4d		      LDA	#77
   2382  f564		       85 80		      STA	player0x
   2383  f566		       a9 3c		      LDA	#60
   2384  f568		       85 85		      STA	player0y
   2385  f56a				   .L079		;  player1x  =  21  :	player1y  =  16
   2386  f56a
   2387  f56a		       a9 15		      LDA	#21
   2388  f56c		       85 81		      STA	player1x
   2389  f56e		       a9 10		      LDA	#16
   2390  f570		       85 86		      STA	player1y
   2391  f572				   .
   2392  f572							;
   2393  f572
   2394  f572				   .
   2395  f572							;
   2396  f572
   2397  f572				   .
   2398  f572							;
   2399  f572
   2400  f572				   .
   2401  f572							;
   2402  f572
   2403  f572				   .
   2404  f572							;
   2405  f572
   2406  f572				   .L080		;  missile0x  =  200  :  missile0y  =	200
   2407  f572
   2408  f572		       a9 c8		      LDA	#200
   2409  f574		       85 82		      STA	missile0x
   2410  f576		       85 91		      STA	missile0y
   2411  f578				   .
   2412  f578							;
   2413  f578
   2414  f578				   .
   2415  f578							;
   2416  f578
   2417  f578				   .
   2418  f578							;
   2419  f578
   2420  f578				   .
   2421  f578							;
   2422  f578
   2423  f578				   .L081		;  missile0x  =  80  :  missile0y  =  79
   2424  f578
   2425  f578		       a9 50		      LDA	#80
   2426  f57a		       85 82		      STA	missile0x
   2427  f57c		       a9 4f		      LDA	#79
   2428  f57e		       85 91		      STA	missile0y
   2429  f580				   .
   2430  f580							;
   2431  f580
   2432  f580				   .
   2433  f580							;
   2434  f580
   2435  f580				   .
   2436  f580							;
   2437  f580
   2438  f580				   .
   2439  f580							;
   2440  f580
   2441  f580				   .
   2442  f580							;
   2443  f580
   2444  f580				   .L082		;  NUSIZ0  =  $10  :  missile0height  =  1
   2445  f580
   2446  f580		       a9 10		      LDA	#$10
   2447  f582		       85 04		      STA	NUSIZ0
   2448  f584		       a9 01		      LDA	#1
   2449  f586		       85 90		      STA	missile0height
   2450  f588				   .L083		;  NUSIZ1  =  $30  :  missile0height  =  4
   2451  f588
   2452  f588		       a9 30		      LDA	#$30
   2453  f58a		       85 05		      STA	NUSIZ1
   2454  f58c		       a9 04		      LDA	#4
   2455  f58e		       85 90		      STA	missile0height
   2456  f590				   .
   2457  f590							;
   2458  f590
   2459  f590				   .
   2460  f590							;
   2461  f590
   2462  f590				   .
   2463  f590							;
   2464  f590
   2465  f590				   .
   2466  f590							;
   2467  f590
   2468  f590				   .
   2469  f590							;
   2470  f590
   2471  f590				   .
   2472  f590							;
   2473  f590
   2474  f590				   .L084		;  COLUPF  =  $14
   2475  f590
   2476  f590		       a9 14		      LDA	#$14
   2477  f592		       85 08		      STA	COLUPF
   2478  f594				   .
   2479  f594							;
   2480  f594
   2481  f594				   .
   2482  f594							;
   2483  f594
   2484  f594				   .
   2485  f594							;
   2486  f594
   2487  f594				   .
   2488  f594							;
   2489  f594
   2490  f594				   .
   2491  f594							;
   2492  f594
   2493  f594				   .
   2494  f594							;
   2495  f594
   2496  f594				   .L085		;  COLUBK  =  0
   2497  f594
   2498  f594		       a9 00		      LDA	#0
   2499  f596		       85 09		      STA	COLUBK
   2500  f598				   .
   2501  f598							;
   2502  f598
   2503  f598				   .
   2504  f598							;
   2505  f598
   2506  f598				   .
   2507  f598							;
   2508  f598
   2509  f598				   .
   2510  f598							;
   2511  f598
   2512  f598				   .
   2513  f598							;
   2514  f598
   2515  f598				   .
   2516  f598							;
   2517  f598
   2518  f598				   .L086		;  _Bit3_P0_Dir_Right{3}  =  1
   2519  f598
   2520  f598		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2521  f59a		       09 08		      ORA	#8
   2522  f59c		       85 da		      STA	_Bit3_P0_Dir_Right
   2523  f59e				   .
   2524  f59e							;
   2525  f59e
   2526  f59e				   .
   2527  f59e							;
   2528  f59e
   2529  f59e				   .
   2530  f59e							;
   2531  f59e
   2532  f59e				   .
   2533  f59e							;
   2534  f59e
   2535  f59e				   .
   2536  f59e							;
   2537  f59e
   2538  f59e				   .
   2539  f59e							;
   2540  f59e
   2541  f59e				   .
   2542  f59e							;
   2543  f59e
   2544  f59e				   .
   2545  f59e							;
   2546  f59e
   2547  f59e				   .
   2548  f59e							;
   2549  f59e
   2550  f59e				   .L087		;  _Bit0_Reset_Restrainer{0}  =  1
   2551  f59e
   2552  f59e		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2553  f5a0		       09 01		      ORA	#1
   2554  f5a2		       85 ec		      STA	_Bit0_Reset_Restrainer
   2555  f5a4				   .
   2556  f5a4							;
   2557  f5a4
   2558  f5a4				   .L088		;  playfield:
   2559  f5a4
   2560  f5a4				  -	      ifconst	pfres
   2561  f5a4				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2562  f5a4					      else
   2563  f5a4		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2564  f5a6					      endif
   2565  f5a6		       4c d5 f5 	      jmp	pflabel1
   2566  f5a9				   PF_data1
   2567  f5a9		       ff ff		      .byte.b	%11111111, %11111111
   2568  f5ab					      if	(pfwidth>2)
   2569  f5ab		       ff ff		      .byte.b	%11111111, %11111111
   2570  f5ad					      endif
   2571  f5ad		       80 00		      .byte.b	%10000000, %00000000
   2572  f5af					      if	(pfwidth>2)
   2573  f5af		       00 80		      .byte.b	%00000000, %10000000
   2574  f5b1					      endif
   2575  f5b1		       93 61		      .byte.b	%10010011, %01100001
   2576  f5b3					      if	(pfwidth>2)
   2577  f5b3		       61 93		      .byte.b	%01100001, %10010011
   2578  f5b5					      endif
   2579  f5b5		       90 60		      .byte.b	%10010000, %01100000
   2580  f5b7					      if	(pfwidth>2)
   2581  f5b7		       60 90		      .byte.b	%01100000, %10010000
   2582  f5b9					      endif
   2583  f5b9		       80 00		      .byte.b	%10000000, %00000000
   2584  f5bb					      if	(pfwidth>2)
   2585  f5bb		       00 80		      .byte.b	%00000000, %10000000
   2586  f5bd					      endif
   2587  f5bd		       99 19		      .byte.b	%10011001, %00011001
   2588  f5bf					      if	(pfwidth>2)
   2589  f5bf		       19 99		      .byte.b	%00011001, %10011001
   2590  f5c1					      endif
   2591  f5c1		       80 00		      .byte.b	%10000000, %00000000
   2592  f5c3					      if	(pfwidth>2)
   2593  f5c3		       00 80		      .byte.b	%00000000, %10000000
   2594  f5c5					      endif
   2595  f5c5		       90 60		      .byte.b	%10010000, %01100000
   2596  f5c7					      if	(pfwidth>2)
   2597  f5c7		       60 90		      .byte.b	%01100000, %10010000
   2598  f5c9					      endif
   2599  f5c9		       93 61		      .byte.b	%10010011, %01100001
   2600  f5cb					      if	(pfwidth>2)
   2601  f5cb		       61 93		      .byte.b	%01100001, %10010011
   2602  f5cd					      endif
   2603  f5cd		       80 00		      .byte.b	%10000000, %00000000
   2604  f5cf					      if	(pfwidth>2)
   2605  f5cf		       00 80		      .byte.b	%00000000, %10000000
   2606  f5d1					      endif
   2607  f5d1		       ff ff		      .byte.b	%11111111, %11111111
   2608  f5d3					      if	(pfwidth>2)
   2609  f5d3		       ff ff		      .byte.b	%11111111, %11111111
   2610  f5d5					      endif
   2611  f5d5				   pflabel1
   2612  f5d5		       bd a9 f5 	      lda	PF_data1,x
   2613  f5d8		       95 a4		      sta	playfield,x
   2614  f5da		       ca		      dex
   2615  f5db		       10 f8		      bpl	pflabel1
   2616  f5dd				   .
   2617  f5dd							;
   2618  f5dd
   2619  f5dd				   .
   2620  f5dd							;
   2621  f5dd
   2622  f5dd				   .
   2623  f5dd							;
   2624  f5dd
   2625  f5dd				   .
   2626  f5dd							;
   2627  f5dd
   2628  f5dd				   .
   2629  f5dd							;
   2630  f5dd
   2631  f5dd				   .
   2632  f5dd							;
   2633  f5dd
   2634  f5dd				   .
   2635  f5dd							;
   2636  f5dd
   2637  f5dd				   .
   2638  f5dd							;
   2639  f5dd
   2640  f5dd				   .
   2641  f5dd							;
   2642  f5dd
   2643  f5dd				   .
   2644  f5dd							;
   2645  f5dd
   2646  f5dd				   .L089		;  score  =  0
   2647  f5dd
   2648  f5dd		       a9 00		      LDA	#$00
   2649  f5df		       85 95		      STA	score+2
   2650  f5e1		       a9 00		      LDA	#$00
   2651  f5e3		       85 94		      STA	score+1
   2652  f5e5		       a9 00		      LDA	#$00
   2653  f5e7		       85 93		      STA	score
   2654  f5e9				   .
   2655  f5e9							;
   2656  f5e9
   2657  f5e9				   .L090		;  dim _sc1  =  score
   2658  f5e9
   2659  f5e9				   .L091		;  dim _sc2  =  score + 1
   2660  f5e9
   2661  f5e9				   .L092		;  dim _sc3  =  score + 2
   2662  f5e9
   2663  f5e9				   .
   2664  f5e9							;
   2665  f5e9
   2666  f5e9				   .L093		;  t  =  $3
   2667  f5e9
   2668  f5e9		       a9 03		      LDA	#$3
   2669  f5eb		       85 e7		      STA	t
   2670  f5ed				   .L094		;  dim _Chase_Speed  =  t
   2671  f5ed
   2672  f5ed				   .
   2673  f5ed							;
   2674  f5ed
   2675  f5ed				   .
   2676  f5ed							;
   2677  f5ed
   2678  f5ed				   .
   2679  f5ed							;
   2680  f5ed
   2681  f5ed				   .
   2682  f5ed							;
   2683  f5ed
   2684  f5ed				   .
   2685  f5ed							;
   2686  f5ed
   2687  f5ed				   .
   2688  f5ed							;
   2689  f5ed
   2690  f5ed				   .
   2691  f5ed							;
   2692  f5ed
   2693  f5ed				   .__Main_Loop
   2694  f5ed							; __Main_Loop
   2695  f5ed
   2696  f5ed				   .
   2697  f5ed							;
   2698  f5ed
   2699  f5ed				   .L095		;  if _Bit1_Game_Over{1} then if joy0fire goto __Start_Restart
   2700  f5ed
   2701  f5ed		       a5 eb		      LDA	_Bit1_Game_Over
   2702  f5ef		       29 02		      AND	#2
   2703  f5f1		       f0 07		      BEQ	.skipL095
   2704  f5f3				   .condpart6
   2705  f5f3		       24 0c		      bit	INPT4
   2706  f5f5				  -	      if	((* - .__Start_Restart) < 127) && ((* - .__Start_Restart) > -128)
   2707  f5f5				  -	      bpl	.__Start_Restart
   2708  f5f5					      else
   2709  f5f5		       30 03		      bmi	.0skip__Start_Restart
   2710  f5f7		       4c 69 f4 	      jmp	.__Start_Restart
   2711  f5fa				   .0skip__Start_Restart
   2712  f5fa					      endif
   2713  f5fa				   .skipL095
   2714  f5fa				   .
   2715  f5fa							;
   2716  f5fa
   2717  f5fa				   .
   2718  f5fa							;
   2719  f5fa
   2720  f5fa				   .
   2721  f5fa							;
   2722  f5fa
   2723  f5fa				   .
   2724  f5fa							;
   2725  f5fa
   2726  f5fa				   .
   2727  f5fa							;
   2728  f5fa
   2729  f5fa				   .
   2730  f5fa							;
   2731  f5fa
   2732  f5fa				   .
   2733  f5fa							;
   2734  f5fa
   2735  f5fa				   .
   2736  f5fa							;
   2737  f5fa
   2738  f5fa				   .L096		;  _Master_Counter  =	_Master_Counter  +  1
   2739  f5fa
   2740  f5fa		       e6 d4		      INC	_Master_Counter
   2741  f5fc				   .
   2742  f5fc							;
   2743  f5fc
   2744  f5fc				   .
   2745  f5fc							;
   2746  f5fc
   2747  f5fc				   .
   2748  f5fc							;
   2749  f5fc
   2750  f5fc				   .
   2751  f5fc							;
   2752  f5fc
   2753  f5fc				   .L097		;  if _Master_Counter	<  7 then goto __Skip_Counters
   2754  f5fc
   2755  f5fc		       a5 d4		      LDA	_Master_Counter
   2756  f5fe		       c9 07		      CMP	#7
   2757  f600		       b0 03		      BCS	.skipL097
   2758  f602				   .condpart7
   2759  f602		       4c 15 f6 	      jmp	.__Skip_Counters
   2760  f605
   2761  f605				   .skipL097
   2762  f605				   .
   2763  f605							;
   2764  f605
   2765  f605				   .
   2766  f605							;
   2767  f605
   2768  f605				   .
   2769  f605							;
   2770  f605
   2771  f605				   .
   2772  f605							;
   2773  f605
   2774  f605				   .L098		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2775  f605
   2776  f605		       e6 d5		      INC	_Frame_Counter
   2777  f607		       a9 00		      LDA	#0
   2778  f609		       85 d4		      STA	_Master_Counter
   2779  f60b				   .
   2780  f60b							;
   2781  f60b
   2782  f60b				   .
   2783  f60b							;
   2784  f60b
   2785  f60b				   .
   2786  f60b							;
   2787  f60b
   2788  f60b				   .
   2789  f60b							;
   2790  f60b
   2791  f60b				   .L099		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   2792  f60b
   2793  f60b		       a9 03		      LDA	#3
   2794  f60d		       c5 d5		      CMP	_Frame_Counter
   2795  f60f		       b0 04		      BCS	.skipL099
   2796  f611				   .condpart8
   2797  f611		       a9 00		      LDA	#0
   2798  f613		       85 d5		      STA	_Frame_Counter
   2799  f615				   .skipL099
   2800  f615				   .
   2801  f615							;
   2802  f615
   2803  f615				   .__Skip_Counters
   2804  f615							; __Skip_Counters
   2805  f615
   2806  f615				   .
   2807  f615							;
   2808  f615
   2809  f615				   .
   2810  f615							;
   2811  f615
   2812  f615				   .
   2813  f615							;
   2814  f615
   2815  f615				   .
   2816  f615							;
   2817  f615
   2818  f615				   .
   2819  f615							;
   2820  f615
   2821  f615				   .
   2822  f615							;
   2823  f615
   2824  f615				   .
   2825  f615							;
   2826  f615
   2827  f615				   .
   2828  f615							;
   2829  f615
   2830  f615				   .
   2831  f615							;
   2832  f615
   2833  f615				   .L0100		;  player0:
   2834  f615
   2835  f615		       a2 eb		      LDX	#<playerL0100_0
   2836  f617		       86 8a		      STX	player0pointerlo
   2837  f619		       a9 fd		      LDA	#>playerL0100_0
   2838  f61b		       85 8b		      STA	player0pointerhi
   2839  f61d		       a9 07		      LDA	#7
   2840  f61f		       85 8e		      STA	player0height
   2841  f621				   .L0101		;  if !_Bit2_Player_Moving{2} goto __Pl_Frame_Done
   2842  f621
   2843  f621		       a5 eb		      LDA	_Bit2_Player_Moving
   2844  f623		       29 04		      AND	#4
   2845  f625					      if	((* - .__Pl_Frame_Done) < 127) && ((* - .__Pl_Frame_Done) > -128)
   2846  f625		       f0 13		      BEQ	.__Pl_Frame_Done
   2847  f627				  -	      else
   2848  f627				  -	      bne	.1skip__Pl_Frame_Done
   2849  f627				  -	      jmp	.__Pl_Frame_Done
   2850  f627				  -.1skip__Pl_Frame_Done
   2851  f627					      endif
   2852  f627				   .L0102		;  on _Frame_Counter goto __Pl00 __Pl01 __Pl00 __Pl02
   2853  f627
   2854  f627		       a6 d5		      LDX	_Frame_Counter
   2855  f629		       bd 32 f6 	      LDA	.L0102jumptablehi,x
   2856  f62c		       48		      PHA
   2857  f62d		       bd 36 f6 	      LDA	.L0102jumptablelo,x
   2858  f630		       48		      PHA
   2859  f631		       60		      RTS
   2860  f632				   .L0102jumptablehi
   2861  f632		       fd		      .byte.b	>(.__Pl00-1)
   2862  f633		       fd		      .byte.b	>(.__Pl01-1)
   2863  f634		       fd		      .byte.b	>(.__Pl00-1)
   2864  f635		       fd		      .byte.b	>(.__Pl02-1)
   2865  f636				   .L0102jumptablelo
   2866  f636		       4c		      .byte.b	<(.__Pl00-1)
   2867  f637		       5b		      .byte.b	<(.__Pl01-1)
   2868  f638		       4c		      .byte.b	<(.__Pl00-1)
   2869  f639		       6a		      .byte.b	<(.__Pl02-1)
   2870  f63a				   .
   2871  f63a							;
   2872  f63a
   2873  f63a				   .__Pl_Frame_Done
   2874  f63a							; __Pl_Frame_Done
   2875  f63a
   2876  f63a				   .
   2877  f63a							;
   2878  f63a
   2879  f63a				   .
   2880  f63a							;
   2881  f63a
   2882  f63a				   .
   2883  f63a							;
   2884  f63a
   2885  f63a				   .
   2886  f63a							;
   2887  f63a
   2888  f63a				   .
   2889  f63a							;
   2890  f63a
   2891  f63a				   .
   2892  f63a							;
   2893  f63a
   2894  f63a				   .
   2895  f63a							;
   2896  f63a
   2897  f63a				   .L0103		;  player1:
   2898  f63a
   2899  f63a		       a2 f3		      LDX	#<playerL0103_1
   2900  f63c		       86 8c		      STX	player1pointerlo
   2901  f63e		       a9 fd		      LDA	#>playerL0103_1
   2902  f640		       85 8d		      STA	player1pointerhi
   2903  f642		       a9 07		      LDA	#7
   2904  f644		       85 8f		      STA	player1height
   2905  f646				   .L0104		;  if !_Bit3_Mino_Moving{3} goto __Mn_Frame_Done
   2906  f646
   2907  f646		       a5 eb		      LDA	_Bit3_Mino_Moving
   2908  f648		       29 08		      AND	#8
   2909  f64a					      if	((* - .__Mn_Frame_Done) < 127) && ((* - .__Mn_Frame_Done) > -128)
   2910  f64a		       f0 13		      BEQ	.__Mn_Frame_Done
   2911  f64c				  -	      else
   2912  f64c				  -	      bne	.2skip__Mn_Frame_Done
   2913  f64c				  -	      jmp	.__Mn_Frame_Done
   2914  f64c				  -.2skip__Mn_Frame_Done
   2915  f64c					      endif
   2916  f64c				   .L0105		;  on _Frame_Counter goto __Mn00 __Mn01 __Mn00 __Mn02
   2917  f64c
   2918  f64c		       a6 d5		      LDX	_Frame_Counter
   2919  f64e		       bd 57 f6 	      LDA	.L0105jumptablehi,x
   2920  f651		       48		      PHA
   2921  f652		       bd 5b f6 	      LDA	.L0105jumptablelo,x
   2922  f655		       48		      PHA
   2923  f656		       60		      RTS
   2924  f657				   .L0105jumptablehi
   2925  f657		       fd		      .byte.b	>(.__Mn00-1)
   2926  f658		       fd		      .byte.b	>(.__Mn01-1)
   2927  f659		       fd		      .byte.b	>(.__Mn00-1)
   2928  f65a		       fd		      .byte.b	>(.__Mn02-1)
   2929  f65b				   .L0105jumptablelo
   2930  f65b		       79		      .byte.b	<(.__Mn00-1)
   2931  f65c		       88		      .byte.b	<(.__Mn01-1)
   2932  f65d		       79		      .byte.b	<(.__Mn00-1)
   2933  f65e		       97		      .byte.b	<(.__Mn02-1)
   2934  f65f				   .
   2935  f65f							;
   2936  f65f
   2937  f65f				   .__Mn_Frame_Done
   2938  f65f							; __Mn_Frame_Done
   2939  f65f
   2940  f65f				   .
   2941  f65f							;
   2942  f65f
   2943  f65f				   .
   2944  f65f							;
   2945  f65f
   2946  f65f				   .
   2947  f65f							;
   2948  f65f
   2949  f65f				   .
   2950  f65f							;
   2951  f65f
   2952  f65f				   .L0106		;  if !_Ch0_Sound then goto __Skip_Ch_0
   2953  f65f
   2954  f65f		       a5 e4		      LDA	_Ch0_Sound
   2955  f661		       d0 03		      BNE	.skipL0106
   2956  f663				   .condpart9
   2957  f663		       4c 47 f7 	      jmp	.__Skip_Ch_0
   2958  f666
   2959  f666				   .skipL0106
   2960  f666				   .
   2961  f666							;
   2962  f666
   2963  f666				   .
   2964  f666							;
   2965  f666
   2966  f666				   .
   2967  f666							;
   2968  f666
   2969  f666				   .
   2970  f666							;
   2971  f666
   2972  f666				   .L0107		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   2973  f666
   2974  f666		       c6 e5		      DEC	_Ch0_Duration
   2975  f668				   .
   2976  f668							;
   2977  f668
   2978  f668				   .
   2979  f668							;
   2980  f668
   2981  f668				   .
   2982  f668							;
   2983  f668
   2984  f668				   .
   2985  f668							;
   2986  f668
   2987  f668				   .
   2988  f668							;
   2989  f668
   2990  f668				   .L0108		;  if _Ch0_Duration then goto __Skip_Ch_0
   2991  f668
   2992  f668		       a5 e5		      LDA	_Ch0_Duration
   2993  f66a		       f0 03		      BEQ	.skipL0108
   2994  f66c				   .condpart10
   2995  f66c		       4c 47 f7 	      jmp	.__Skip_Ch_0
   2996  f66f
   2997  f66f				   .skipL0108
   2998  f66f				   .
   2999  f66f							;
   3000  f66f
   3001  f66f				   .L0109		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3002  f66f
   3003  f66f		       a5 e4		      LDA	_Ch0_Sound
   3004  f671		       c9 01		      CMP	#1
   3005  f673		       f0 03		      BEQ	.skipL0109
   3006  f675				   .condpart11
   3007  f675		       4c b4 f6 	      jmp	.__Skip_Ch0_Sound_001
   3008  f678
   3009  f678				   .skipL0109
   3010  f678				   .
   3011  f678							;
   3012  f678
   3013  f678				   .
   3014  f678							;
   3015  f678
   3016  f678				   .
   3017  f678							;
   3018  f678
   3019  f678				   .
   3020  f678							;
   3021  f678
   3022  f678				   .L0110		;  temp4  =  _SD_Gem_Coll[_Ch0_Counter]
   3023  f678
   3024  f678		       a6 e6		      LDX	_Ch0_Counter
   3025  f67a		       bd aa fd 	      LDA	_SD_Gem_Coll,x
   3026  f67d		       85 9f		      STA	temp4
   3027  f67f				   .
   3028  f67f							;
   3029  f67f
   3030  f67f				   .
   3031  f67f							;
   3032  f67f
   3033  f67f				   .
   3034  f67f							;
   3035  f67f
   3036  f67f				   .
   3037  f67f							;
   3038  f67f
   3039  f67f				   .L0111		;  if temp4  =  255 then goto __Clear_Ch_0
   3040  f67f
   3041  f67f		       a5 9f		      LDA	temp4
   3042  f681		       c9 ff		      CMP	#255
   3043  f683		       d0 03		      BNE	.skipL0111
   3044  f685				   .condpart12
   3045  f685		       4c 41 f7 	      jmp	.__Clear_Ch_0
   3046  f688
   3047  f688				   .skipL0111
   3048  f688				   .
   3049  f688							;
   3050  f688
   3051  f688				   .
   3052  f688							;
   3053  f688
   3054  f688				   .
   3055  f688							;
   3056  f688
   3057  f688				   .
   3058  f688							;
   3059  f688
   3060  f688				   .L0112		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3061  f688
   3062  f688		       e6 e6		      INC	_Ch0_Counter
   3063  f68a				   .L0113		;  temp5  =  _SD_Gem_Coll[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3064  f68a
   3065  f68a		       a6 e6		      LDX	_Ch0_Counter
   3066  f68c		       bd aa fd 	      LDA	_SD_Gem_Coll,x
   3067  f68f		       85 a0		      STA	temp5
   3068  f691		       e6 e6		      INC	_Ch0_Counter
   3069  f693				   .L0114		;  temp6  =  _SD_Gem_Coll[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3070  f693
   3071  f693		       a6 e6		      LDX	_Ch0_Counter
   3072  f695		       bd aa fd 	      LDA	_SD_Gem_Coll,x
   3073  f698		       85 a1		      STA	temp6
   3074  f69a		       e6 e6		      INC	_Ch0_Counter
   3075  f69c				   .
   3076  f69c							;
   3077  f69c
   3078  f69c				   .
   3079  f69c							;
   3080  f69c
   3081  f69c				   .
   3082  f69c							;
   3083  f69c
   3084  f69c				   .
   3085  f69c							;
   3086  f69c
   3087  f69c				   .L0115		;  AUDV0  =  temp4
   3088  f69c
   3089  f69c		       a5 9f		      LDA	temp4
   3090  f69e		       85 19		      STA	AUDV0
   3091  f6a0				   .L0116		;  AUDC0  =  temp5
   3092  f6a0
   3093  f6a0		       a5 a0		      LDA	temp5
   3094  f6a2		       85 15		      STA	AUDC0
   3095  f6a4				   .L0117		;  AUDF0  =  temp6
   3096  f6a4
   3097  f6a4		       a5 a1		      LDA	temp6
   3098  f6a6		       85 17		      STA	AUDF0
   3099  f6a8				   .
   3100  f6a8							;
   3101  f6a8
   3102  f6a8				   .
   3103  f6a8							;
   3104  f6a8
   3105  f6a8				   .
   3106  f6a8							;
   3107  f6a8
   3108  f6a8				   .
   3109  f6a8							;
   3110  f6a8
   3111  f6a8				   .L0118		;  _Ch0_Duration  =  _SD_Gem_Coll[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3112  f6a8
   3113  f6a8		       a6 e6		      LDX	_Ch0_Counter
   3114  f6aa		       bd aa fd 	      LDA	_SD_Gem_Coll,x
   3115  f6ad		       85 e5		      STA	_Ch0_Duration
   3116  f6af		       e6 e6		      INC	_Ch0_Counter
   3117  f6b1				   .
   3118  f6b1							;
   3119  f6b1
   3120  f6b1				   .
   3121  f6b1							;
   3122  f6b1
   3123  f6b1				   .
   3124  f6b1							;
   3125  f6b1
   3126  f6b1				   .
   3127  f6b1							;
   3128  f6b1
   3129  f6b1				   .L0119		;  goto __Skip_Ch_0
   3130  f6b1
   3131  f6b1		       4c 47 f7 	      jmp	.__Skip_Ch_0
   3132  f6b4
   3133  f6b4				   .
   3134  f6b4							;
   3135  f6b4
   3136  f6b4				   .__Skip_Ch0_Sound_001
   3137  f6b4							; __Skip_Ch0_Sound_001
   3138  f6b4
   3139  f6b4				   .
   3140  f6b4							;
   3141  f6b4
   3142  f6b4				   .L0120		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3143  f6b4
   3144  f6b4		       a5 e4		      LDA	_Ch0_Sound
   3145  f6b6		       c9 02		      CMP	#2
   3146  f6b8		       f0 03		      BEQ	.skipL0120
   3147  f6ba				   .condpart13
   3148  f6ba		       4c f9 f6 	      jmp	.__Skip_Ch0_Sound_002
   3149  f6bd
   3150  f6bd				   .skipL0120
   3151  f6bd				   .
   3152  f6bd							;
   3153  f6bd
   3154  f6bd				   .
   3155  f6bd							;
   3156  f6bd
   3157  f6bd				   .
   3158  f6bd							;
   3159  f6bd
   3160  f6bd				   .L0121		;  temp4  =  _SD_Gem_Drop[_Ch0_Counter]
   3161  f6bd
   3162  f6bd		       a6 e6		      LDX	_Ch0_Counter
   3163  f6bf		       bd b6 fd 	      LDA	_SD_Gem_Drop,x
   3164  f6c2		       85 9f		      STA	temp4
   3165  f6c4				   .
   3166  f6c4							;
   3167  f6c4
   3168  f6c4				   .
   3169  f6c4							;
   3170  f6c4
   3171  f6c4				   .
   3172  f6c4							;
   3173  f6c4
   3174  f6c4				   .
   3175  f6c4							;
   3176  f6c4
   3177  f6c4				   .L0122		;  if temp4  =  255 then goto __Clear_Ch_0
   3178  f6c4
   3179  f6c4		       a5 9f		      LDA	temp4
   3180  f6c6		       c9 ff		      CMP	#255
   3181  f6c8		       d0 03		      BNE	.skipL0122
   3182  f6ca				   .condpart14
   3183  f6ca		       4c 41 f7 	      jmp	.__Clear_Ch_0
   3184  f6cd
   3185  f6cd				   .skipL0122
   3186  f6cd				   .
   3187  f6cd							;
   3188  f6cd
   3189  f6cd				   .
   3190  f6cd							;
   3191  f6cd
   3192  f6cd				   .
   3193  f6cd							;
   3194  f6cd
   3195  f6cd				   .
   3196  f6cd							;
   3197  f6cd
   3198  f6cd				   .L0123		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3199  f6cd
   3200  f6cd		       e6 e6		      INC	_Ch0_Counter
   3201  f6cf				   .L0124		;  temp5  =  _SD_Gem_Drop[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3202  f6cf
   3203  f6cf		       a6 e6		      LDX	_Ch0_Counter
   3204  f6d1		       bd b6 fd 	      LDA	_SD_Gem_Drop,x
   3205  f6d4		       85 a0		      STA	temp5
   3206  f6d6		       e6 e6		      INC	_Ch0_Counter
   3207  f6d8				   .L0125		;  temp6  =  _SD_Gem_Drop[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3208  f6d8
   3209  f6d8		       a6 e6		      LDX	_Ch0_Counter
   3210  f6da		       bd b6 fd 	      LDA	_SD_Gem_Drop,x
   3211  f6dd		       85 a1		      STA	temp6
   3212  f6df		       e6 e6		      INC	_Ch0_Counter
   3213  f6e1				   .
   3214  f6e1							;
   3215  f6e1
   3216  f6e1				   .
   3217  f6e1							;
   3218  f6e1
   3219  f6e1				   .
   3220  f6e1							;
   3221  f6e1
   3222  f6e1				   .
   3223  f6e1							;
   3224  f6e1
   3225  f6e1				   .L0126		;  AUDV0  =  temp4
   3226  f6e1
   3227  f6e1		       a5 9f		      LDA	temp4
   3228  f6e3		       85 19		      STA	AUDV0
   3229  f6e5				   .L0127		;  AUDC0  =  temp5
   3230  f6e5
   3231  f6e5		       a5 a0		      LDA	temp5
   3232  f6e7		       85 15		      STA	AUDC0
   3233  f6e9				   .L0128		;  AUDF0  =  temp6
   3234  f6e9
   3235  f6e9		       a5 a1		      LDA	temp6
   3236  f6eb		       85 17		      STA	AUDF0
   3237  f6ed				   .
   3238  f6ed							;
   3239  f6ed
   3240  f6ed				   .
   3241  f6ed							;
   3242  f6ed
   3243  f6ed				   .
   3244  f6ed							;
   3245  f6ed
   3246  f6ed				   .
   3247  f6ed							;
   3248  f6ed
   3249  f6ed				   .L0129		;  _Ch0_Duration  =  _SD_Gem_Drop[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3250  f6ed
   3251  f6ed		       a6 e6		      LDX	_Ch0_Counter
   3252  f6ef		       bd b6 fd 	      LDA	_SD_Gem_Drop,x
   3253  f6f2		       85 e5		      STA	_Ch0_Duration
   3254  f6f4		       e6 e6		      INC	_Ch0_Counter
   3255  f6f6				   .
   3256  f6f6							;
   3257  f6f6
   3258  f6f6				   .
   3259  f6f6							;
   3260  f6f6
   3261  f6f6				   .
   3262  f6f6							;
   3263  f6f6
   3264  f6f6				   .
   3265  f6f6							;
   3266  f6f6
   3267  f6f6				   .L0130		;  goto __Skip_Ch_0
   3268  f6f6
   3269  f6f6		       4c 47 f7 	      jmp	.__Skip_Ch_0
   3270  f6f9
   3271  f6f9				   .
   3272  f6f9							;
   3273  f6f9
   3274  f6f9				   .__Skip_Ch0_Sound_002
   3275  f6f9							; __Skip_Ch0_Sound_002
   3276  f6f9
   3277  f6f9				   .
   3278  f6f9							;
   3279  f6f9
   3280  f6f9				   .L0131		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3281  f6f9
   3282  f6f9		       a5 e4		      LDA	_Ch0_Sound
   3283  f6fb		       c9 03		      CMP	#3
   3284  f6fd		       f0 03		      BEQ	.skipL0131
   3285  f6ff				   .condpart15
   3286  f6ff		       4c 3e f7 	      jmp	.__Skip_Ch0_Sound_003
   3287  f702
   3288  f702				   .skipL0131
   3289  f702				   .
   3290  f702							;
   3291  f702
   3292  f702				   .
   3293  f702							;
   3294  f702
   3295  f702				   .
   3296  f702							;
   3297  f702
   3298  f702				   .
   3299  f702							;
   3300  f702
   3301  f702				   .L0132		;  temp4  =  _SD_Mino_Roar[_Ch0_Counter]
   3302  f702
   3303  f702		       a6 e6		      LDX	_Ch0_Counter
   3304  f704		       bd c6 fd 	      LDA	_SD_Mino_Roar,x
   3305  f707		       85 9f		      STA	temp4
   3306  f709				   .
   3307  f709							;
   3308  f709
   3309  f709				   .
   3310  f709							;
   3311  f709
   3312  f709				   .
   3313  f709							;
   3314  f709
   3315  f709				   .
   3316  f709							;
   3317  f709
   3318  f709				   .L0133		;  if temp4  =  255 then goto __Clear_Ch_0
   3319  f709
   3320  f709		       a5 9f		      LDA	temp4
   3321  f70b		       c9 ff		      CMP	#255
   3322  f70d		       d0 03		      BNE	.skipL0133
   3323  f70f				   .condpart16
   3324  f70f		       4c 41 f7 	      jmp	.__Clear_Ch_0
   3325  f712
   3326  f712				   .skipL0133
   3327  f712				   .
   3328  f712							;
   3329  f712
   3330  f712				   .
   3331  f712							;
   3332  f712
   3333  f712				   .
   3334  f712							;
   3335  f712
   3336  f712				   .
   3337  f712							;
   3338  f712
   3339  f712				   .L0134		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3340  f712
   3341  f712		       e6 e6		      INC	_Ch0_Counter
   3342  f714				   .L0135		;  temp5  =  _SD_Mino_Roar[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3343  f714
   3344  f714		       a6 e6		      LDX	_Ch0_Counter
   3345  f716		       bd c6 fd 	      LDA	_SD_Mino_Roar,x
   3346  f719		       85 a0		      STA	temp5
   3347  f71b		       e6 e6		      INC	_Ch0_Counter
   3348  f71d				   .L0136		;  temp6  =  _SD_Mino_Roar[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3349  f71d
   3350  f71d		       a6 e6		      LDX	_Ch0_Counter
   3351  f71f		       bd c6 fd 	      LDA	_SD_Mino_Roar,x
   3352  f722		       85 a1		      STA	temp6
   3353  f724		       e6 e6		      INC	_Ch0_Counter
   3354  f726				   .
   3355  f726							;
   3356  f726
   3357  f726				   .
   3358  f726							;
   3359  f726
   3360  f726				   .
   3361  f726							;
   3362  f726
   3363  f726				   .
   3364  f726							;
   3365  f726
   3366  f726				   .L0137		;  AUDV0  =  temp4
   3367  f726
   3368  f726		       a5 9f		      LDA	temp4
   3369  f728		       85 19		      STA	AUDV0
   3370  f72a				   .L0138		;  AUDC0  =  temp5
   3371  f72a
   3372  f72a		       a5 a0		      LDA	temp5
   3373  f72c		       85 15		      STA	AUDC0
   3374  f72e				   .L0139		;  AUDF0  =  temp6
   3375  f72e
   3376  f72e		       a5 a1		      LDA	temp6
   3377  f730		       85 17		      STA	AUDF0
   3378  f732				   .
   3379  f732							;
   3380  f732
   3381  f732				   .
   3382  f732							;
   3383  f732
   3384  f732				   .
   3385  f732							;
   3386  f732
   3387  f732				   .
   3388  f732							;
   3389  f732
   3390  f732				   .L0140		;  _Ch0_Duration  =  _SD_Mino_Roar[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3391  f732
   3392  f732		       a6 e6		      LDX	_Ch0_Counter
   3393  f734		       bd c6 fd 	      LDA	_SD_Mino_Roar,x
   3394  f737		       85 e5		      STA	_Ch0_Duration
   3395  f739		       e6 e6		      INC	_Ch0_Counter
   3396  f73b				   .
   3397  f73b							;
   3398  f73b
   3399  f73b				   .
   3400  f73b							;
   3401  f73b
   3402  f73b				   .
   3403  f73b							;
   3404  f73b
   3405  f73b				   .
   3406  f73b							;
   3407  f73b
   3408  f73b				   .L0141		;  goto __Skip_Ch_0
   3409  f73b
   3410  f73b		       4c 47 f7 	      jmp	.__Skip_Ch_0
   3411  f73e
   3412  f73e				   .
   3413  f73e							;
   3414  f73e
   3415  f73e				   .__Skip_Ch0_Sound_003
   3416  f73e							; __Skip_Ch0_Sound_003
   3417  f73e
   3418  f73e				   .
   3419  f73e							;
   3420  f73e
   3421  f73e				   .
   3422  f73e							;
   3423  f73e
   3424  f73e				   .
   3425  f73e							;
   3426  f73e
   3427  f73e				   .
   3428  f73e							;
   3429  f73e
   3430  f73e				   .L0142		;  goto __Skip_Ch_0
   3431  f73e
   3432  f73e		       4c 47 f7 	      jmp	.__Skip_Ch_0
   3433  f741
   3434  f741				   .
   3435  f741							;
   3436  f741
   3437  f741				   .
   3438  f741							;
   3439  f741
   3440  f741				   .
   3441  f741							;
   3442  f741
   3443  f741				   .
   3444  f741							;
   3445  f741
   3446  f741				   .
   3447  f741							;
   3448  f741
   3449  f741				   .
   3450  f741							;
   3451  f741
   3452  f741				   .
   3453  f741							;
   3454  f741
   3455  f741				   .__Clear_Ch_0
   3456  f741							; __Clear_Ch_0
   3457  f741
   3458  f741				   .
   3459  f741							;
   3460  f741
   3461  f741				   .L0143		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3462  f741
   3463  f741		       a9 00		      LDA	#0
   3464  f743		       85 e4		      STA	_Ch0_Sound
   3465  f745		       85 19		      STA	AUDV0
   3466  f747				   .
   3467  f747							;
   3468  f747
   3469  f747				   .
   3470  f747							;
   3471  f747
   3472  f747				   .
   3473  f747							;
   3474  f747
   3475  f747				   .
   3476  f747							;
   3477  f747
   3478  f747				   .
   3479  f747							;
   3480  f747
   3481  f747				   .
   3482  f747							;
   3483  f747
   3484  f747				   .
   3485  f747							;
   3486  f747
   3487  f747				   .__Skip_Ch_0
   3488  f747							; __Skip_Ch_0
   3489  f747
   3490  f747				   .
   3491  f747							;
   3492  f747
   3493  f747				   .
   3494  f747							;
   3495  f747
   3496  f747				   .
   3497  f747							;
   3498  f747
   3499  f747				   .
   3500  f747							;
   3501  f747
   3502  f747				   .
   3503  f747							;
   3504  f747
   3505  f747				   .
   3506  f747							;
   3507  f747
   3508  f747				   .
   3509  f747							;
   3510  f747
   3511  f747				   .
   3512  f747							;
   3513  f747
   3514  f747				   .
   3515  f747							;
   3516  f747
   3517  f747				   .
   3518  f747							;
   3519  f747
   3520  f747				   .
   3521  f747							;
   3522  f747
   3523  f747				   .L0144		;  if !collision(player0,player1) then __Skip_Player_Caught
   3524  f747
   3525  f747		       24 07		      bit	CXPPMM
   3526  f749					      if	((* - .__Skip_Player_Caught) < 127) && ((* - .__Skip_Player_Caught) > -128)
   3527  f749		       10 09		      bpl	.__Skip_Player_Caught
   3528  f74b				  -	      else
   3529  f74b				  -	      bmi	.3skip__Skip_Player_Caught
   3530  f74b				  -	      jmp	.__Skip_Player_Caught
   3531  f74b				  -.3skip__Skip_Player_Caught
   3532  f74b					      endif
   3533  f74b				   .L0145		;  _Bit1_Game_Over{1}	=  1
   3534  f74b
   3535  f74b		       a5 eb		      LDA	_Bit1_Game_Over
   3536  f74d		       09 02		      ORA	#2
   3537  f74f		       85 eb		      STA	_Bit1_Game_Over
   3538  f751				   .L0146		;  goto __Game_Over
   3539  f751
   3540  f751		       4c a5 fc 	      jmp	.__Game_Over
   3541  f754
   3542  f754				   .__Skip_Player_Caught
   3543  f754							; __Skip_Player_Caught
   3544  f754
   3545  f754				   .
   3546  f754							;
   3547  f754
   3548  f754				   .
   3549  f754							;
   3550  f754
   3551  f754				   .
   3552  f754							;
   3553  f754
   3554  f754				   .
   3555  f754							;
   3556  f754
   3557  f754				   .
   3558  f754							;
   3559  f754
   3560  f754				   .L0147		;  NUSIZ0  =  $20  :  missile0height  =  2
   3561  f754
   3562  f754		       a9 20		      LDA	#$20
   3563  f756		       85 04		      STA	NUSIZ0
   3564  f758		       a9 02		      LDA	#2
   3565  f75a		       85 90		      STA	missile0height
   3566  f75c				   .L0148		;  NUSIZ1  =  $30  :  missile1height  =  7
   3567  f75c
   3568  f75c		       a9 30		      LDA	#$30
   3569  f75e		       85 05		      STA	NUSIZ1
   3570  f760		       a9 07		      LDA	#7
   3571  f762		       85 87		      STA	missile1height
   3572  f764				   .
   3573  f764							;
   3574  f764
   3575  f764				   .L0149		;  missile1x  =  78  :  missile1y  =  48
   3576  f764
   3577  f764		       a9 4e		      LDA	#78
   3578  f766		       85 83		      STA	missile1x
   3579  f768		       a9 30		      LDA	#48
   3580  f76a		       85 88		      STA	missile1y
   3581  f76c				   .
   3582  f76c							;
   3583  f76c
   3584  f76c				   .
   3585  f76c							;
   3586  f76c
   3587  f76c				   .
   3588  f76c							;
   3589  f76c
   3590  f76c				   .
   3591  f76c							;
   3592  f76c
   3593  f76c				   .
   3594  f76c							;
   3595  f76c
   3596  f76c				   .
   3597  f76c							;
   3598  f76c
   3599  f76c				   .L0150		;  COLUP0  =  $9C
   3600  f76c
   3601  f76c		       a9 9c		      LDA	#$9C
   3602  f76e		       85 06		      STA	COLUP0
   3603  f770				   .L0151		;  if _Chase_Speed  >	$1 then COLUP1	=  $36
   3604  f770
   3605  f770		       a9 01		      LDA	#$1
   3606  f772		       c5 e7		      CMP	_Chase_Speed
   3607  f774		       b0 04		      BCS	.skipL0151
   3608  f776				   .condpart17
   3609  f776		       a9 36		      LDA	#$36
   3610  f778		       85 07		      STA	COLUP1
   3611  f77a				   .skipL0151
   3612  f77a				   .L0152		;  if _Chase_Speed  =	$1 then COLUP1	=  $35
   3613  f77a
   3614  f77a		       a5 e7		      LDA	_Chase_Speed
   3615  f77c		       c9 01		      CMP	#$1
   3616  f77e		       d0 04		      BNE	.skipL0152
   3617  f780				   .condpart18
   3618  f780		       a9 35		      LDA	#$35
   3619  f782		       85 07		      STA	COLUP1
   3620  f784				   .skipL0152
   3621  f784				   .L0153		;  if _Chase_Speed  =	$0 then COLUP1	=  $33
   3622  f784
   3623  f784		       a5 e7		      LDA	_Chase_Speed
   3624  f786		       c9 00		      CMP	#$0
   3625  f788		       d0 04		      BNE	.skipL0153
   3626  f78a				   .condpart19
   3627  f78a		       a9 33		      LDA	#$33
   3628  f78c		       85 07		      STA	COLUP1
   3629  f78e				   .skipL0153
   3630  f78e				   .L0154		;  scorecolor	=  $9C
   3631  f78e
   3632  f78e		       a9 9c		      LDA	#$9C
   3633  f790		       85 a3		      STA	scorecolor
   3634  f792				   .
   3635  f792							;
   3636  f792
   3637  f792				   .L0155		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  =	$30 then _Chase_Speed  =  $0 else goto __Skip_Speed_Check1
   3638  f792
   3639  f792		       a5 93		      LDA	_sc1
   3640  f794		       c9 00		      CMP	#%00
   3641  f796		       d0 13		      BNE	.skipL0155
   3642  f798				   .condpart20
   3643  f798		       a5 94		      LDA	_sc2
   3644  f79a		       c9 00		      CMP	#%00
   3645  f79c		       d0 0d		      BNE	.skip20then
   3646  f79e				   .condpart21
   3647  f79e		       a5 95		      LDA	_sc3
   3648  f7a0		       c9 30		      CMP	#$30
   3649  f7a2		       d0 07		      BNE	.skip21then
   3650  f7a4				   .condpart22
   3651  f7a4		       a9 00		      LDA	#$0
   3652  f7a6		       85 e7		      STA	_Chase_Speed
   3653  f7a8		       4c ae f7 	      jmp	.skipelse0
   3654  f7ab				   .skip21then
   3655  f7ab				   .skip20then
   3656  f7ab				   .skipL0155
   3657  f7ab		       4c cf f7 	      jmp	.__Skip_Speed_Check1
   3658  f7ae
   3659  f7ae				   .skipelse0
   3660  f7ae				   .L0156		;  if _Ch0_Sound  <>  3  &&  !_Bit4_New_Chase_Start{4} then _Bit4_New_Chase_Start{4}  =  1  :	_Ch0_Sound  =  3  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   3661  f7ae
   3662  f7ae		       a5 e4		      LDA	_Ch0_Sound
   3663  f7b0		       c9 03		      CMP	#3
   3664  f7b2		       f0 18		      BEQ	.skipL0156
   3665  f7b4				   .condpart23
   3666  f7b4		       a5 eb		      LDA	_Bit4_New_Chase_Start
   3667  f7b6		       29 10		      AND	#16
   3668  f7b8		       d0 12		      BNE	.skip23then
   3669  f7ba				   .condpart24
   3670  f7ba		       a5 eb		      LDA	_Bit4_New_Chase_Start
   3671  f7bc		       09 10		      ORA	#16
   3672  f7be		       85 eb		      STA	_Bit4_New_Chase_Start
   3673  f7c0		       a9 03		      LDA	#3
   3674  f7c2		       85 e4		      STA	_Ch0_Sound
   3675  f7c4		       a9 01		      LDA	#1
   3676  f7c6		       85 e5		      STA	_Ch0_Duration
   3677  f7c8		       a9 00		      LDA	#0
   3678  f7ca		       85 e6		      STA	_Ch0_Counter
   3679  f7cc				   .skip23then
   3680  f7cc				   .skipL0156
   3681  f7cc				   .L0157		;  goto __Skip_Speed_Check2
   3682  f7cc
   3683  f7cc		       4c 09 f8 	      jmp	.__Skip_Speed_Check2
   3684  f7cf
   3685  f7cf				   .__Skip_Speed_Check1
   3686  f7cf							; __Skip_Speed_Check1
   3687  f7cf
   3688  f7cf				   .L0158		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  =	$15 then _Chase_Speed  =  $1 else goto __Skip_Speed_Check2
   3689  f7cf
   3690  f7cf		       a5 93		      LDA	_sc1
   3691  f7d1		       c9 00		      CMP	#%00
   3692  f7d3		       d0 13		      BNE	.skipL0158
   3693  f7d5				   .condpart25
   3694  f7d5		       a5 94		      LDA	_sc2
   3695  f7d7		       c9 00		      CMP	#%00
   3696  f7d9		       d0 0d		      BNE	.skip25then
   3697  f7db				   .condpart26
   3698  f7db		       a5 95		      LDA	_sc3
   3699  f7dd		       c9 15		      CMP	#$15
   3700  f7df		       d0 07		      BNE	.skip26then
   3701  f7e1				   .condpart27
   3702  f7e1		       a9 01		      LDA	#$1
   3703  f7e3		       85 e7		      STA	_Chase_Speed
   3704  f7e5		       4c eb f7 	      jmp	.skipelse1
   3705  f7e8				   .skip26then
   3706  f7e8				   .skip25then
   3707  f7e8				   .skipL0158
   3708  f7e8		       4c 09 f8 	      jmp	.__Skip_Speed_Check2
   3709  f7eb
   3710  f7eb				   .skipelse1
   3711  f7eb				   .L0159		;  if _Ch0_Sound  <>  3  &&  !_Bit4_New_Chase_Start{4} then _Bit4_New_Chase_Start{4}  =  1  :	_Ch0_Sound  =  3  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   3712  f7eb
   3713  f7eb		       a5 e4		      LDA	_Ch0_Sound
   3714  f7ed		       c9 03		      CMP	#3
   3715  f7ef		       f0 18		      BEQ	.skipL0159
   3716  f7f1				   .condpart28
   3717  f7f1		       a5 eb		      LDA	_Bit4_New_Chase_Start
   3718  f7f3		       29 10		      AND	#16
   3719  f7f5		       d0 12		      BNE	.skip28then
   3720  f7f7				   .condpart29
   3721  f7f7		       a5 eb		      LDA	_Bit4_New_Chase_Start
   3722  f7f9		       09 10		      ORA	#16
   3723  f7fb		       85 eb		      STA	_Bit4_New_Chase_Start
   3724  f7fd		       a9 03		      LDA	#3
   3725  f7ff		       85 e4		      STA	_Ch0_Sound
   3726  f801		       a9 01		      LDA	#1
   3727  f803		       85 e5		      STA	_Ch0_Duration
   3728  f805		       a9 00		      LDA	#0
   3729  f807		       85 e6		      STA	_Ch0_Counter
   3730  f809				   .skip28then
   3731  f809				   .skipL0159
   3732  f809				   .__Skip_Speed_Check2
   3733  f809							; __Skip_Speed_Check2
   3734  f809
   3735  f809				   .
   3736  f809							;
   3737  f809
   3738  f809				   .
   3739  f809							;
   3740  f809
   3741  f809				   .
   3742  f809							;
   3743  f809
   3744  f809				   .
   3745  f809							;
   3746  f809
   3747  f809				   .
   3748  f809							;
   3749  f809
   3750  f809				   .
   3751  f809							;
   3752  f809
   3753  f809				   .
   3754  f809							;
   3755  f809
   3756  f809				   .
   3757  f809							;
   3758  f809
   3759  f809				   .L0160		;  _Bit2_Player_Moving{2}  =  0
   3760  f809
   3761  f809		       a5 eb		      LDA	_Bit2_Player_Moving
   3762  f80b		       29 fb		      AND	#251
   3763  f80d		       85 eb		      STA	_Bit2_Player_Moving
   3764  f80f				   .L0161		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   3765  f80f
   3766  f80f		       a9 10		      lda	#$10
   3767  f811		       2c 80 02 	      bit	SWCHA
   3768  f814		       f0 14		      BEQ	.skipL0161
   3769  f816				   .condpart30
   3770  f816		       a9 20		      lda	#$20
   3771  f818		       2c 80 02 	      bit	SWCHA
   3772  f81b		       f0 0d		      BEQ	.skip30then
   3773  f81d				   .condpart31
   3774  f81d		       2c 80 02 	      bit	SWCHA
   3775  f820		       50 08		      BVC	.skip31then
   3776  f822				   .condpart32
   3777  f822		       2c 80 02 	      bit	SWCHA
   3778  f825		       10 03		      BPL	.skip32then
   3779  f827				   .condpart33
   3780  f827		       4c 30 f8 	      jmp	.__Skip_Joystick_Precheck
   3781  f82a
   3782  f82a				   .skip32then
   3783  f82a				   .skip31then
   3784  f82a				   .skip30then
   3785  f82a				   .skipL0161
   3786  f82a				   .
   3787  f82a							;
   3788  f82a
   3789  f82a				   .
   3790  f82a							;
   3791  f82a
   3792  f82a				   .
   3793  f82a							;
   3794  f82a
   3795  f82a				   .L0162		;  _BitOp_P0_M0_Dir  =  _BitOp_P0_M0_Dir  &  %11110000
   3796  f82a
   3797  f82a		       a5 da		      LDA	_BitOp_P0_M0_Dir
   3798  f82c		       29 f0		      AND	#%11110000
   3799  f82e		       85 da		      STA	_BitOp_P0_M0_Dir
   3800  f830				   .
   3801  f830							;
   3802  f830
   3803  f830				   .__Skip_Joystick_Precheck
   3804  f830							; __Skip_Joystick_Precheck
   3805  f830
   3806  f830				   .
   3807  f830							;
   3808  f830
   3809  f830				   .
   3810  f830							;
   3811  f830
   3812  f830				   .
   3813  f830							;
   3814  f830
   3815  f830				   .
   3816  f830							;
   3817  f830
   3818  f830				   .
   3819  f830							;
   3820  f830
   3821  f830				   .
   3822  f830							;
   3823  f830
   3824  f830				   .
   3825  f830							;
   3826  f830
   3827  f830				   .
   3828  f830							;
   3829  f830
   3830  f830				   .L0163		;  if !joy0up then goto __Skip_Joy0_Up
   3831  f830
   3832  f830		       a9 10		      lda	#$10
   3833  f832		       2c 80 02 	      bit	SWCHA
   3834  f835		       f0 03		      BEQ	.skipL0163
   3835  f837				   .condpart34
   3836  f837		       4c aa f8 	      jmp	.__Skip_Joy0_Up
   3837  f83a
   3838  f83a				   .skipL0163
   3839  f83a				   .
   3840  f83a							;
   3841  f83a
   3842  f83a				   .
   3843  f83a							;
   3844  f83a
   3845  f83a				   .
   3846  f83a							;
   3847  f83a
   3848  f83a				   .
   3849  f83a							;
   3850  f83a
   3851  f83a				   .L0164		;  _Bit0_P0_Dir_Up{0}	=  1
   3852  f83a
   3853  f83a		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3854  f83c		       09 01		      ORA	#1
   3855  f83e		       85 da		      STA	_Bit0_P0_Dir_Up
   3856  f840				   .
   3857  f840							;
   3858  f840
   3859  f840				   .
   3860  f840							;
   3861  f840
   3862  f840				   .
   3863  f840							;
   3864  f840
   3865  f840				   .
   3866  f840							;
   3867  f840
   3868  f840				   .L0165		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   3869  f840
   3870  f840		       a9 09		      LDA	#_P_Edge_Top
   3871  f842		       c5 85		      CMP	player0y
   3872  f844		       90 03		      BCC	.skipL0165
   3873  f846				   .condpart35
   3874  f846		       4c aa f8 	      jmp	.__Skip_Joy0_Up
   3875  f849
   3876  f849				   .skipL0165
   3877  f849				   .
   3878  f849							;
   3879  f849
   3880  f849				   .
   3881  f849							;
   3882  f849
   3883  f849				   .
   3884  f849							;
   3885  f849
   3886  f849				   .
   3887  f849							;
   3888  f849
   3889  f849				   .L0166		;  temp5  =   ( player0x - 11 )  / 4
   3890  f849
   3891  f849							; complex statement detected
   3892  f849		       a5 80		      LDA	player0x
   3893  f84b		       38		      SEC
   3894  f84c		       e9 0b		      SBC	#11
   3895  f84e		       4a		      lsr
   3896  f84f		       4a		      lsr
   3897  f850		       85 a0		      STA	temp5
   3898  f852				   .
   3899  f852							;
   3900  f852
   3901  f852				   .L0167		;  temp6  =   ( player0y - 8 )  / 8
   3902  f852
   3903  f852							; complex statement detected
   3904  f852		       a5 85		      LDA	player0y
   3905  f854		       38		      SEC
   3906  f855		       e9 08		      SBC	#8
   3907  f857		       4a		      lsr
   3908  f858		       4a		      lsr
   3909  f859		       4a		      lsr
   3910  f85a		       85 a1		      STA	temp6
   3911  f85c				   .
   3912  f85c							;
   3913  f85c
   3914  f85c				   .L0168		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   3915  f85c
   3916  f85c		       a5 a0		      LDA	temp5
   3917  f85e		       c9 22		      CMP	#34
   3918  f860		       b0 0c		      BCS	.skipL0168
   3919  f862				   .condpart36
   3920  f862		       a5 a0		      LDA	temp5
   3921  f864		       a4 a1		      LDY	temp6
   3922  f866		       20 6b f2 	      jsr	pfread
   3923  f869		       d0 03		      BNE	.skip36then
   3924  f86b				   .condpart37
   3925  f86b		       4c aa f8 	      jmp	.__Skip_Joy0_Up
   3926  f86e
   3927  f86e				   .skip36then
   3928  f86e				   .skipL0168
   3929  f86e				   .
   3930  f86e							;
   3931  f86e
   3932  f86e				   .L0169		;  temp4  =   ( player0x - 16 )  / 4
   3933  f86e
   3934  f86e							; complex statement detected
   3935  f86e		       a5 80		      LDA	player0x
   3936  f870		       38		      SEC
   3937  f871		       e9 10		      SBC	#16
   3938  f873		       4a		      lsr
   3939  f874		       4a		      lsr
   3940  f875		       85 9f		      STA	temp4
   3941  f877				   .
   3942  f877							;
   3943  f877
   3944  f877				   .L0170		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   3945  f877
   3946  f877		       a5 9f		      LDA	temp4
   3947  f879		       c9 22		      CMP	#34
   3948  f87b		       b0 0c		      BCS	.skipL0170
   3949  f87d				   .condpart38
   3950  f87d		       a5 9f		      LDA	temp4
   3951  f87f		       a4 a1		      LDY	temp6
   3952  f881		       20 6b f2 	      jsr	pfread
   3953  f884		       d0 03		      BNE	.skip38then
   3954  f886				   .condpart39
   3955  f886		       4c aa f8 	      jmp	.__Skip_Joy0_Up
   3956  f889
   3957  f889				   .skip38then
   3958  f889				   .skipL0170
   3959  f889				   .
   3960  f889							;
   3961  f889
   3962  f889				   .L0171		;  temp3  =  temp5  -	1
   3963  f889
   3964  f889		       a5 a0		      LDA	temp5
   3965  f88b		       38		      SEC
   3966  f88c		       e9 01		      SBC	#1
   3967  f88e		       85 9e		      STA	temp3
   3968  f890				   .
   3969  f890							;
   3970  f890
   3971  f890				   .L0172		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   3972  f890
   3973  f890		       a5 9e		      LDA	temp3
   3974  f892		       c9 22		      CMP	#34
   3975  f894		       b0 0c		      BCS	.skipL0172
   3976  f896				   .condpart40
   3977  f896		       a5 9e		      LDA	temp3
   3978  f898		       a4 a1		      LDY	temp6
   3979  f89a		       20 6b f2 	      jsr	pfread
   3980  f89d		       d0 03		      BNE	.skip40then
   3981  f89f				   .condpart41
   3982  f89f		       4c aa f8 	      jmp	.__Skip_Joy0_Up
   3983  f8a2
   3984  f8a2				   .skip40then
   3985  f8a2				   .skipL0172
   3986  f8a2				   .
   3987  f8a2							;
   3988  f8a2
   3989  f8a2				   .
   3990  f8a2							;
   3991  f8a2
   3992  f8a2				   .
   3993  f8a2							;
   3994  f8a2
   3995  f8a2				   .
   3996  f8a2							;
   3997  f8a2
   3998  f8a2				   .L0173		;  _Bit2_Player_Moving{2}  =  1
   3999  f8a2
   4000  f8a2		       a5 eb		      LDA	_Bit2_Player_Moving
   4001  f8a4		       09 04		      ORA	#4
   4002  f8a6		       85 eb		      STA	_Bit2_Player_Moving
   4003  f8a8				   .L0174		;  player0y  =  player0y  -  1
   4004  f8a8
   4005  f8a8		       c6 85		      DEC	player0y
   4006  f8aa				   .
   4007  f8aa							;
   4008  f8aa
   4009  f8aa				   .__Skip_Joy0_Up
   4010  f8aa							; __Skip_Joy0_Up
   4011  f8aa
   4012  f8aa				   .
   4013  f8aa							;
   4014  f8aa
   4015  f8aa				   .
   4016  f8aa							;
   4017  f8aa
   4018  f8aa				   .
   4019  f8aa							;
   4020  f8aa
   4021  f8aa				   .
   4022  f8aa							;
   4023  f8aa
   4024  f8aa				   .
   4025  f8aa							;
   4026  f8aa
   4027  f8aa				   .
   4028  f8aa							;
   4029  f8aa
   4030  f8aa				   .
   4031  f8aa							;
   4032  f8aa
   4033  f8aa				   .
   4034  f8aa							;
   4035  f8aa
   4036  f8aa				   .
   4037  f8aa							;
   4038  f8aa
   4039  f8aa				   .
   4040  f8aa							;
   4041  f8aa
   4042  f8aa				   .L0175		;  if !joy0down then goto __Skip_Joy0_Down
   4043  f8aa
   4044  f8aa		       a9 20		      lda	#$20
   4045  f8ac		       2c 80 02 	      bit	SWCHA
   4046  f8af		       f0 03		      BEQ	.skipL0175
   4047  f8b1				   .condpart42
   4048  f8b1		       4c 21 f9 	      jmp	.__Skip_Joy0_Down
   4049  f8b4
   4050  f8b4				   .skipL0175
   4051  f8b4				   .
   4052  f8b4							;
   4053  f8b4
   4054  f8b4				   .
   4055  f8b4							;
   4056  f8b4
   4057  f8b4				   .
   4058  f8b4							;
   4059  f8b4
   4060  f8b4				   .
   4061  f8b4							;
   4062  f8b4
   4063  f8b4				   .L0176		;  _Bit1_P0_Dir_Down{1}  =  1
   4064  f8b4
   4065  f8b4		       a5 da		      LDA	_Bit1_P0_Dir_Down
   4066  f8b6		       09 02		      ORA	#2
   4067  f8b8		       85 da		      STA	_Bit1_P0_Dir_Down
   4068  f8ba				   .
   4069  f8ba							;
   4070  f8ba
   4071  f8ba				   .
   4072  f8ba							;
   4073  f8ba
   4074  f8ba				   .
   4075  f8ba							;
   4076  f8ba
   4077  f8ba				   .
   4078  f8ba							;
   4079  f8ba
   4080  f8ba				   .L0177		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   4081  f8ba
   4082  f8ba		       a5 85		      LDA	player0y
   4083  f8bc		       c9 58		      CMP	#_P_Edge_Bottom
   4084  f8be		       90 03		      BCC	.skipL0177
   4085  f8c0				   .condpart43
   4086  f8c0		       4c 21 f9 	      jmp	.__Skip_Joy0_Down
   4087  f8c3
   4088  f8c3				   .skipL0177
   4089  f8c3				   .
   4090  f8c3							;
   4091  f8c3
   4092  f8c3				   .
   4093  f8c3							;
   4094  f8c3
   4095  f8c3				   .
   4096  f8c3							;
   4097  f8c3
   4098  f8c3				   .
   4099  f8c3							;
   4100  f8c3
   4101  f8c3				   .L0178		;  temp5  =   ( player0x - 11 )  / 4
   4102  f8c3
   4103  f8c3							; complex statement detected
   4104  f8c3		       a5 80		      LDA	player0x
   4105  f8c5		       38		      SEC
   4106  f8c6		       e9 0b		      SBC	#11
   4107  f8c8		       4a		      lsr
   4108  f8c9		       4a		      lsr
   4109  f8ca		       85 a0		      STA	temp5
   4110  f8cc				   .
   4111  f8cc							;
   4112  f8cc
   4113  f8cc				   .L0179		;  temp6  =   ( player0y )  / 8
   4114  f8cc
   4115  f8cc							; complex statement detected
   4116  f8cc		       a5 85		      LDA	player0y
   4117  f8ce		       4a		      lsr
   4118  f8cf		       4a		      lsr
   4119  f8d0		       4a		      lsr
   4120  f8d1		       85 a1		      STA	temp6
   4121  f8d3				   .
   4122  f8d3							;
   4123  f8d3
   4124  f8d3				   .L0180		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   4125  f8d3
   4126  f8d3		       a5 a0		      LDA	temp5
   4127  f8d5		       c9 22		      CMP	#34
   4128  f8d7		       b0 0c		      BCS	.skipL0180
   4129  f8d9				   .condpart44
   4130  f8d9		       a5 a0		      LDA	temp5
   4131  f8db		       a4 a1		      LDY	temp6
   4132  f8dd		       20 6b f2 	      jsr	pfread
   4133  f8e0		       d0 03		      BNE	.skip44then
   4134  f8e2				   .condpart45
   4135  f8e2		       4c 21 f9 	      jmp	.__Skip_Joy0_Down
   4136  f8e5
   4137  f8e5				   .skip44then
   4138  f8e5				   .skipL0180
   4139  f8e5				   .
   4140  f8e5							;
   4141  f8e5
   4142  f8e5				   .L0181		;  temp4  =   ( player0x - 16 )  / 4
   4143  f8e5
   4144  f8e5							; complex statement detected
   4145  f8e5		       a5 80		      LDA	player0x
   4146  f8e7		       38		      SEC
   4147  f8e8		       e9 10		      SBC	#16
   4148  f8ea		       4a		      lsr
   4149  f8eb		       4a		      lsr
   4150  f8ec		       85 9f		      STA	temp4
   4151  f8ee				   .
   4152  f8ee							;
   4153  f8ee
   4154  f8ee				   .L0182		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   4155  f8ee
   4156  f8ee		       a5 9f		      LDA	temp4
   4157  f8f0		       c9 22		      CMP	#34
   4158  f8f2		       b0 0c		      BCS	.skipL0182
   4159  f8f4				   .condpart46
   4160  f8f4		       a5 9f		      LDA	temp4
   4161  f8f6		       a4 a1		      LDY	temp6
   4162  f8f8		       20 6b f2 	      jsr	pfread
   4163  f8fb		       d0 03		      BNE	.skip46then
   4164  f8fd				   .condpart47
   4165  f8fd		       4c 21 f9 	      jmp	.__Skip_Joy0_Down
   4166  f900
   4167  f900				   .skip46then
   4168  f900				   .skipL0182
   4169  f900				   .
   4170  f900							;
   4171  f900
   4172  f900				   .L0183		;  temp3  =  temp5  -	1
   4173  f900
   4174  f900		       a5 a0		      LDA	temp5
   4175  f902		       38		      SEC
   4176  f903		       e9 01		      SBC	#1
   4177  f905		       85 9e		      STA	temp3
   4178  f907				   .
   4179  f907							;
   4180  f907
   4181  f907				   .L0184		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   4182  f907
   4183  f907		       a5 9e		      LDA	temp3
   4184  f909		       c9 22		      CMP	#34
   4185  f90b		       b0 0c		      BCS	.skipL0184
   4186  f90d				   .condpart48
   4187  f90d		       a5 9e		      LDA	temp3
   4188  f90f		       a4 a1		      LDY	temp6
   4189  f911		       20 6b f2 	      jsr	pfread
   4190  f914		       d0 03		      BNE	.skip48then
   4191  f916				   .condpart49
   4192  f916		       4c 21 f9 	      jmp	.__Skip_Joy0_Down
   4193  f919
   4194  f919				   .skip48then
   4195  f919				   .skipL0184
   4196  f919				   .
   4197  f919							;
   4198  f919
   4199  f919				   .
   4200  f919							;
   4201  f919
   4202  f919				   .
   4203  f919							;
   4204  f919
   4205  f919				   .
   4206  f919							;
   4207  f919
   4208  f919				   .L0185		;  _Bit2_Player_Moving{2}  =  1
   4209  f919
   4210  f919		       a5 eb		      LDA	_Bit2_Player_Moving
   4211  f91b		       09 04		      ORA	#4
   4212  f91d		       85 eb		      STA	_Bit2_Player_Moving
   4213  f91f				   .L0186		;  player0y  =  player0y  +  1
   4214  f91f
   4215  f91f		       e6 85		      INC	player0y
   4216  f921				   .
   4217  f921							;
   4218  f921
   4219  f921				   .__Skip_Joy0_Down
   4220  f921							; __Skip_Joy0_Down
   4221  f921
   4222  f921				   .
   4223  f921							;
   4224  f921
   4225  f921				   .
   4226  f921							;
   4227  f921
   4228  f921				   .
   4229  f921							;
   4230  f921
   4231  f921				   .
   4232  f921							;
   4233  f921
   4234  f921				   .
   4235  f921							;
   4236  f921
   4237  f921				   .
   4238  f921							;
   4239  f921
   4240  f921				   .
   4241  f921							;
   4242  f921
   4243  f921				   .
   4244  f921							;
   4245  f921
   4246  f921				   .
   4247  f921							;
   4248  f921
   4249  f921				   .
   4250  f921							;
   4251  f921
   4252  f921				   .L0187		;  if !joy0left then goto __Skip_Joy0_Left
   4253  f921
   4254  f921		       2c 80 02 	      bit	SWCHA
   4255  f924		       50 03		      BVC	.skipL0187
   4256  f926				   .condpart50
   4257  f926		       4c 85 f9 	      jmp	.__Skip_Joy0_Left
   4258  f929
   4259  f929				   .skipL0187
   4260  f929				   .
   4261  f929							;
   4262  f929
   4263  f929				   .
   4264  f929							;
   4265  f929
   4266  f929				   .
   4267  f929							;
   4268  f929
   4269  f929				   .
   4270  f929							;
   4271  f929
   4272  f929				   .L0188		;  _Bit2_P0_Dir_Left{2}  =  1
   4273  f929
   4274  f929		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4275  f92b		       09 04		      ORA	#4
   4276  f92d		       85 da		      STA	_Bit2_P0_Dir_Left
   4277  f92f				   .
   4278  f92f							;
   4279  f92f
   4280  f92f				   .
   4281  f92f							;
   4282  f92f
   4283  f92f				   .
   4284  f92f							;
   4285  f92f
   4286  f92f				   .
   4287  f92f							;
   4288  f92f
   4289  f92f				   .L0189		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   4290  f92f
   4291  f92f		       a9 01		      LDA	#_P_Edge_Left
   4292  f931		       c5 80		      CMP	player0x
   4293  f933		       90 03		      BCC	.skipL0189
   4294  f935				   .condpart51
   4295  f935		       4c 85 f9 	      jmp	.__Skip_Joy0_Left
   4296  f938
   4297  f938				   .skipL0189
   4298  f938				   .
   4299  f938							;
   4300  f938
   4301  f938				   .
   4302  f938							;
   4303  f938
   4304  f938				   .
   4305  f938							;
   4306  f938
   4307  f938				   .
   4308  f938							;
   4309  f938
   4310  f938				   .L0190		;  temp5  =   ( player0y - 1 )  / 8
   4311  f938
   4312  f938							; complex statement detected
   4313  f938		       a5 85		      LDA	player0y
   4314  f93a		       38		      SEC
   4315  f93b		       e9 01		      SBC	#1
   4316  f93d		       4a		      lsr
   4317  f93e		       4a		      lsr
   4318  f93f		       4a		      lsr
   4319  f940		       85 a0		      STA	temp5
   4320  f942				   .
   4321  f942							;
   4322  f942
   4323  f942				   .L0191		;  temp6  =   ( player0x - 17 )  / 4
   4324  f942
   4325  f942							; complex statement detected
   4326  f942		       a5 80		      LDA	player0x
   4327  f944		       38		      SEC
   4328  f945		       e9 11		      SBC	#17
   4329  f947		       4a		      lsr
   4330  f948		       4a		      lsr
   4331  f949		       85 a1		      STA	temp6
   4332  f94b				   .
   4333  f94b							;
   4334  f94b
   4335  f94b				   .L0192		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   4336  f94b
   4337  f94b		       a5 a1		      LDA	temp6
   4338  f94d		       c9 22		      CMP	#34
   4339  f94f		       b0 0c		      BCS	.skipL0192
   4340  f951				   .condpart52
   4341  f951		       a5 a1		      LDA	temp6
   4342  f953		       a4 a0		      LDY	temp5
   4343  f955		       20 6b f2 	      jsr	pfread
   4344  f958		       d0 03		      BNE	.skip52then
   4345  f95a				   .condpart53
   4346  f95a		       4c 85 f9 	      jmp	.__Skip_Joy0_Left
   4347  f95d
   4348  f95d				   .skip52then
   4349  f95d				   .skipL0192
   4350  f95d				   .
   4351  f95d							;
   4352  f95d
   4353  f95d				   .L0193		;  temp3  =   ( player0y - 7 )  / 8
   4354  f95d
   4355  f95d							; complex statement detected
   4356  f95d		       a5 85		      LDA	player0y
   4357  f95f		       38		      SEC
   4358  f960		       e9 07		      SBC	#7
   4359  f962		       4a		      lsr
   4360  f963		       4a		      lsr
   4361  f964		       4a		      lsr
   4362  f965		       85 9e		      STA	temp3
   4363  f967				   .
   4364  f967							;
   4365  f967
   4366  f967				   .L0194		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   4367  f967
   4368  f967		       a5 a1		      LDA	temp6
   4369  f969		       c9 22		      CMP	#34
   4370  f96b		       b0 0c		      BCS	.skipL0194
   4371  f96d				   .condpart54
   4372  f96d		       a5 a1		      LDA	temp6
   4373  f96f		       a4 9e		      LDY	temp3
   4374  f971		       20 6b f2 	      jsr	pfread
   4375  f974		       d0 03		      BNE	.skip54then
   4376  f976				   .condpart55
   4377  f976		       4c 85 f9 	      jmp	.__Skip_Joy0_Left
   4378  f979
   4379  f979				   .skip54then
   4380  f979				   .skipL0194
   4381  f979				   .
   4382  f979							;
   4383  f979
   4384  f979				   .
   4385  f979							;
   4386  f979
   4387  f979				   .
   4388  f979							;
   4389  f979
   4390  f979				   .
   4391  f979							;
   4392  f979
   4393  f979				   .L0195		;  _Bit2_Player_Moving{2}  =  1
   4394  f979
   4395  f979		       a5 eb		      LDA	_Bit2_Player_Moving
   4396  f97b		       09 04		      ORA	#4
   4397  f97d		       85 eb		      STA	_Bit2_Player_Moving
   4398  f97f				   .L0196		;  REFP0  =  8
   4399  f97f
   4400  f97f		       a9 08		      LDA	#8
   4401  f981		       85 0b		      STA	REFP0
   4402  f983				   .L0197		;  player0x  =  player0x  -  1
   4403  f983
   4404  f983		       c6 80		      DEC	player0x
   4405  f985				   .
   4406  f985							;
   4407  f985
   4408  f985				   .__Skip_Joy0_Left
   4409  f985							; __Skip_Joy0_Left
   4410  f985
   4411  f985				   .
   4412  f985							;
   4413  f985
   4414  f985				   .
   4415  f985							;
   4416  f985
   4417  f985				   .
   4418  f985							;
   4419  f985
   4420  f985				   .
   4421  f985							;
   4422  f985
   4423  f985				   .
   4424  f985							;
   4425  f985
   4426  f985				   .
   4427  f985							;
   4428  f985
   4429  f985				   .
   4430  f985							;
   4431  f985
   4432  f985				   .
   4433  f985							;
   4434  f985
   4435  f985				   .
   4436  f985							;
   4437  f985
   4438  f985				   .
   4439  f985							;
   4440  f985
   4441  f985				   .L0198		;  if !joy0right then goto __Skip_Joy0_Right
   4442  f985
   4443  f985		       2c 80 02 	      bit	SWCHA
   4444  f988		       10 03		      BPL	.skipL0198
   4445  f98a				   .condpart56
   4446  f98a		       4c e5 f9 	      jmp	.__Skip_Joy0_Right
   4447  f98d
   4448  f98d				   .skipL0198
   4449  f98d				   .
   4450  f98d							;
   4451  f98d
   4452  f98d				   .
   4453  f98d							;
   4454  f98d
   4455  f98d				   .
   4456  f98d							;
   4457  f98d
   4458  f98d				   .
   4459  f98d							;
   4460  f98d
   4461  f98d				   .L0199		;  _Bit3_P0_Dir_Right{3}  =  1
   4462  f98d
   4463  f98d		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4464  f98f		       09 08		      ORA	#8
   4465  f991		       85 da		      STA	_Bit3_P0_Dir_Right
   4466  f993				   .
   4467  f993							;
   4468  f993
   4469  f993				   .
   4470  f993							;
   4471  f993
   4472  f993				   .
   4473  f993							;
   4474  f993
   4475  f993				   .
   4476  f993							;
   4477  f993
   4478  f993				   .L0200		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   4479  f993
   4480  f993		       a5 80		      LDA	player0x
   4481  f995		       c9 99		      CMP	#_P_Edge_Right
   4482  f997		       90 03		      BCC	.skipL0200
   4483  f999				   .condpart57
   4484  f999		       4c e5 f9 	      jmp	.__Skip_Joy0_Right
   4485  f99c
   4486  f99c				   .skipL0200
   4487  f99c				   .
   4488  f99c							;
   4489  f99c
   4490  f99c				   .
   4491  f99c							;
   4492  f99c
   4493  f99c				   .
   4494  f99c							;
   4495  f99c
   4496  f99c				   .
   4497  f99c							;
   4498  f99c
   4499  f99c				   .L0201		;  temp5  =   ( player0y - 1 )  / 8
   4500  f99c
   4501  f99c							; complex statement detected
   4502  f99c		       a5 85		      LDA	player0y
   4503  f99e		       38		      SEC
   4504  f99f		       e9 01		      SBC	#1
   4505  f9a1		       4a		      lsr
   4506  f9a2		       4a		      lsr
   4507  f9a3		       4a		      lsr
   4508  f9a4		       85 a0		      STA	temp5
   4509  f9a6				   .
   4510  f9a6							;
   4511  f9a6
   4512  f9a6				   .L0202		;  temp6  =   ( player0x - 10 )  / 4
   4513  f9a6
   4514  f9a6							; complex statement detected
   4515  f9a6		       a5 80		      LDA	player0x
   4516  f9a8		       38		      SEC
   4517  f9a9		       e9 0a		      SBC	#10
   4518  f9ab		       4a		      lsr
   4519  f9ac		       4a		      lsr
   4520  f9ad		       85 a1		      STA	temp6
   4521  f9af				   .
   4522  f9af							;
   4523  f9af
   4524  f9af				   .L0203		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   4525  f9af
   4526  f9af		       a5 a1		      LDA	temp6
   4527  f9b1		       c9 22		      CMP	#34
   4528  f9b3		       b0 0c		      BCS	.skipL0203
   4529  f9b5				   .condpart58
   4530  f9b5		       a5 a1		      LDA	temp6
   4531  f9b7		       a4 a0		      LDY	temp5
   4532  f9b9		       20 6b f2 	      jsr	pfread
   4533  f9bc		       d0 03		      BNE	.skip58then
   4534  f9be				   .condpart59
   4535  f9be		       4c e5 f9 	      jmp	.__Skip_Joy0_Right
   4536  f9c1
   4537  f9c1				   .skip58then
   4538  f9c1				   .skipL0203
   4539  f9c1				   .
   4540  f9c1							;
   4541  f9c1
   4542  f9c1				   .L0204		;  temp3  =   ( player0y - 7 )  / 8
   4543  f9c1
   4544  f9c1							; complex statement detected
   4545  f9c1		       a5 85		      LDA	player0y
   4546  f9c3		       38		      SEC
   4547  f9c4		       e9 07		      SBC	#7
   4548  f9c6		       4a		      lsr
   4549  f9c7		       4a		      lsr
   4550  f9c8		       4a		      lsr
   4551  f9c9		       85 9e		      STA	temp3
   4552  f9cb				   .
   4553  f9cb							;
   4554  f9cb
   4555  f9cb				   .L0205		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   4556  f9cb
   4557  f9cb		       a5 a1		      LDA	temp6
   4558  f9cd		       c9 22		      CMP	#34
   4559  f9cf		       b0 0c		      BCS	.skipL0205
   4560  f9d1				   .condpart60
   4561  f9d1		       a5 a1		      LDA	temp6
   4562  f9d3		       a4 9e		      LDY	temp3
   4563  f9d5		       20 6b f2 	      jsr	pfread
   4564  f9d8		       d0 03		      BNE	.skip60then
   4565  f9da				   .condpart61
   4566  f9da		       4c e5 f9 	      jmp	.__Skip_Joy0_Right
   4567  f9dd
   4568  f9dd				   .skip60then
   4569  f9dd				   .skipL0205
   4570  f9dd				   .
   4571  f9dd							;
   4572  f9dd
   4573  f9dd				   .
   4574  f9dd							;
   4575  f9dd
   4576  f9dd				   .
   4577  f9dd							;
   4578  f9dd
   4579  f9dd				   .
   4580  f9dd							;
   4581  f9dd
   4582  f9dd				   .L0206		;  _Bit2_Player_Moving{2}  =  1
   4583  f9dd
   4584  f9dd		       a5 eb		      LDA	_Bit2_Player_Moving
   4585  f9df		       09 04		      ORA	#4
   4586  f9e1		       85 eb		      STA	_Bit2_Player_Moving
   4587  f9e3				   .L0207		;  player0x  =  player0x  +  1
   4588  f9e3
   4589  f9e3		       e6 80		      INC	player0x
   4590  f9e5				   .
   4591  f9e5							;
   4592  f9e5
   4593  f9e5				   .__Skip_Joy0_Right
   4594  f9e5							; __Skip_Joy0_Right
   4595  f9e5
   4596  f9e5				   .
   4597  f9e5							;
   4598  f9e5
   4599  f9e5				   .
   4600  f9e5							;
   4601  f9e5
   4602  f9e5				   .
   4603  f9e5							;
   4604  f9e5
   4605  f9e5				   .
   4606  f9e5							;
   4607  f9e5
   4608  f9e5				   .
   4609  f9e5							;
   4610  f9e5
   4611  f9e5				   .
   4612  f9e5							;
   4613  f9e5
   4614  f9e5				   .
   4615  f9e5							;
   4616  f9e5
   4617  f9e5				   .L0208		;  temp1  =  player0x	+  8
   4618  f9e5
   4619  f9e5		       a5 80		      LDA	player0x
   4620  f9e7		       18		      CLC
   4621  f9e8		       69 08		      ADC	#8
   4622  f9ea		       85 9c		      STA	temp1
   4623  f9ec				   .L0209		;  temp2  =  player0y	+  8
   4624  f9ec
   4625  f9ec		       a5 85		      LDA	player0y
   4626  f9ee		       18		      CLC
   4627  f9ef		       69 08		      ADC	#8
   4628  f9f1		       85 9d		      STA	temp2
   4629  f9f3				   .
   4630  f9f3							;
   4631  f9f3
   4632  f9f3				   .L0210		;  temp3  =  player1x	+  4
   4633  f9f3
   4634  f9f3		       a5 81		      LDA	player1x
   4635  f9f5		       18		      CLC
   4636  f9f6		       69 04		      ADC	#4
   4637  f9f8		       85 9e		      STA	temp3
   4638  f9fa				   .L0211		;  temp4  =  player1y	+  4
   4639  f9fa
   4640  f9fa		       a5 86		      LDA	player1y
   4641  f9fc		       18		      CLC
   4642  f9fd		       69 04		      ADC	#4
   4643  f9ff		       85 9f		      STA	temp4
   4644  fa01				   .
   4645  fa01							;
   4646  fa01
   4647  fa01				   .L0212		;  temp5  =  _Minotaur_Awareness_Size
   4648  fa01
   4649  fa01		       a9 64		      LDA	#_Minotaur_Awareness_Size
   4650  fa03		       85 a0		      STA	temp5
   4651  fa05				   .
   4652  fa05							;
   4653  fa05
   4654  fa05				   .L0213		;  if _Master_Counter & _Chase_Speed then goto __Skip_AI_Right
   4655  fa05
   4656  fa05		       a5 d4		      LDA	_Master_Counter
   4657  fa07		       25 e7		      AND	_Chase_Speed
   4658  fa09		       f0 03		      BEQ	.skipL0213
   4659  fa0b				   .condpart62
   4660  fa0b		       4c 2b fc 	      jmp	.__Skip_AI_Right
   4661  fa0e
   4662  fa0e				   .skipL0213
   4663  fa0e				   .L0214		;  _Bit3_Mino_Moving{3}  =  0
   4664  fa0e
   4665  fa0e		       a5 eb		      LDA	_Bit3_Mino_Moving
   4666  fa10		       29 f7		      AND	#247
   4667  fa12		       85 eb		      STA	_Bit3_Mino_Moving
   4668  fa14				   .
   4669  fa14							;
   4670  fa14
   4671  fa14				   .
   4672  fa14							;
   4673  fa14
   4674  fa14				   .L0215		;  if player0y  >=  temp4  +  temp5 then goto __Skip_AI_Right
   4675  fa14
   4676  fa14							; complex condition detected
   4677  fa14		       a5 9f		      LDA	temp4
   4678  fa16		       18		      CLC
   4679  fa17		       65 a0		      ADC	temp5
   4680  fa19		       48		      PHA
   4681  fa1a		       ba		      TSX
   4682  fa1b		       68		      PLA
   4683  fa1c		       a5 85		      LDA	player0y
   4684  fa1e		       d5 01		      CMP	1,x
   4685  fa20		       90 03		      BCC	.skipL0215
   4686  fa22				   .condpart63
   4687  fa22		       4c 2b fc 	      jmp	.__Skip_AI_Right
   4688  fa25
   4689  fa25				   .skipL0215
   4690  fa25				   .
   4691  fa25							;
   4692  fa25
   4693  fa25				   .
   4694  fa25							;
   4695  fa25
   4696  fa25				   .L0216		;  if temp4  <  temp5 then temp4  =  temp5
   4697  fa25
   4698  fa25		       a5 9f		      LDA	temp4
   4699  fa27		       c5 a0		      CMP	temp5
   4700  fa29		       b0 04		      BCS	.skipL0216
   4701  fa2b				   .condpart64
   4702  fa2b		       a5 a0		      LDA	temp5
   4703  fa2d		       85 9f		      STA	temp4
   4704  fa2f				   .skipL0216
   4705  fa2f				   .L0217		;  if temp2  <=  temp4  -  temp5 then goto __Skip_AI_Right
   4706  fa2f
   4707  fa2f							; complex condition detected
   4708  fa2f		       a5 9f		      LDA	temp4
   4709  fa31		       38		      SEC
   4710  fa32		       e5 a0		      SBC	temp5
   4711  fa34		       c5 9d		      CMP	temp2
   4712  fa36		       90 03		      BCC	.skipL0217
   4713  fa38				   .condpart65
   4714  fa38		       4c 2b fc 	      jmp	.__Skip_AI_Right
   4715  fa3b
   4716  fa3b				   .skipL0217
   4717  fa3b				   .
   4718  fa3b							;
   4719  fa3b
   4720  fa3b				   .
   4721  fa3b							;
   4722  fa3b
   4723  fa3b				   .L0218		;  if temp3  <  temp5 then temp3  =  temp5
   4724  fa3b
   4725  fa3b		       a5 9e		      LDA	temp3
   4726  fa3d		       c5 a0		      CMP	temp5
   4727  fa3f		       b0 04		      BCS	.skipL0218
   4728  fa41				   .condpart66
   4729  fa41		       a5 a0		      LDA	temp5
   4730  fa43		       85 9e		      STA	temp3
   4731  fa45				   .skipL0218
   4732  fa45				   .L0219		;  if temp1  <=  temp3  -  temp5 then goto __Skip_AI_Right
   4733  fa45
   4734  fa45							; complex condition detected
   4735  fa45		       a5 9e		      LDA	temp3
   4736  fa47		       38		      SEC
   4737  fa48		       e5 a0		      SBC	temp5
   4738  fa4a		       c5 9c		      CMP	temp1
   4739  fa4c		       90 03		      BCC	.skipL0219
   4740  fa4e				   .condpart67
   4741  fa4e		       4c 2b fc 	      jmp	.__Skip_AI_Right
   4742  fa51
   4743  fa51				   .skipL0219
   4744  fa51				   .
   4745  fa51							;
   4746  fa51
   4747  fa51				   .
   4748  fa51							;
   4749  fa51
   4750  fa51				   .L0220		;  if player0x  >=  temp3  +  temp5 then goto __Skip_AI_Right
   4751  fa51
   4752  fa51							; complex condition detected
   4753  fa51		       a5 9e		      LDA	temp3
   4754  fa53		       18		      CLC
   4755  fa54		       65 a0		      ADC	temp5
   4756  fa56		       48		      PHA
   4757  fa57		       ba		      TSX
   4758  fa58		       68		      PLA
   4759  fa59		       a5 80		      LDA	player0x
   4760  fa5b		       d5 01		      CMP	1,x
   4761  fa5d		       90 03		      BCC	.skipL0220
   4762  fa5f				   .condpart68
   4763  fa5f		       4c 2b fc 	      jmp	.__Skip_AI_Right
   4764  fa62
   4765  fa62				   .skipL0220
   4766  fa62				   .
   4767  fa62							;
   4768  fa62
   4769  fa62				   .
   4770  fa62							;
   4771  fa62
   4772  fa62				   .
   4773  fa62							;
   4774  fa62
   4775  fa62				   .
   4776  fa62							;
   4777  fa62
   4778  fa62				   .
   4779  fa62							;
   4780  fa62
   4781  fa62				   .
   4782  fa62							;
   4783  fa62
   4784  fa62				   .
   4785  fa62							;
   4786  fa62
   4787  fa62				   .
   4788  fa62							;
   4789  fa62
   4790  fa62				   .
   4791  fa62							;
   4792  fa62
   4793  fa62				   .
   4794  fa62							;
   4795  fa62
   4796  fa62				   .
   4797  fa62							;
   4798  fa62
   4799  fa62				   .L0221		;  if player1y  <=  player0y then goto __Skip_AI_Up
   4800  fa62
   4801  fa62		       a5 85		      LDA	player0y
   4802  fa64		       c5 86		      CMP	player1y
   4803  fa66		       90 03		      BCC	.skipL0221
   4804  fa68				   .condpart69
   4805  fa68		       4c e1 fa 	      jmp	.__Skip_AI_Up
   4806  fa6b
   4807  fa6b				   .skipL0221
   4808  fa6b				   .
   4809  fa6b							;
   4810  fa6b
   4811  fa6b				   .
   4812  fa6b							;
   4813  fa6b
   4814  fa6b				   .
   4815  fa6b							;
   4816  fa6b
   4817  fa6b				   .
   4818  fa6b							;
   4819  fa6b
   4820  fa6b				   .L0222		;  _Bit0_P1_Dir_Up{0}	=  1
   4821  fa6b
   4822  fa6b		       a5 de		      LDA	_Bit0_P1_Dir_Up
   4823  fa6d		       09 01		      ORA	#1
   4824  fa6f		       85 de		      STA	_Bit0_P1_Dir_Up
   4825  fa71				   .L0223		;  _Bit1_P1_Dir_Down{1}  =  0
   4826  fa71
   4827  fa71		       a5 de		      LDA	_Bit1_P1_Dir_Down
   4828  fa73		       29 fd		      AND	#253
   4829  fa75		       85 de		      STA	_Bit1_P1_Dir_Down
   4830  fa77				   .
   4831  fa77							;
   4832  fa77
   4833  fa77				   .
   4834  fa77							;
   4835  fa77
   4836  fa77				   .
   4837  fa77							;
   4838  fa77
   4839  fa77				   .
   4840  fa77							;
   4841  fa77
   4842  fa77				   .L0224		;  if player1y  <=  _P_Edge_Top then goto __Skip_AI_Up
   4843  fa77
   4844  fa77		       a9 09		      LDA	#_P_Edge_Top
   4845  fa79		       c5 86		      CMP	player1y
   4846  fa7b		       90 03		      BCC	.skipL0224
   4847  fa7d				   .condpart70
   4848  fa7d		       4c e1 fa 	      jmp	.__Skip_AI_Up
   4849  fa80
   4850  fa80				   .skipL0224
   4851  fa80				   .
   4852  fa80							;
   4853  fa80
   4854  fa80				   .
   4855  fa80							;
   4856  fa80
   4857  fa80				   .
   4858  fa80							;
   4859  fa80
   4860  fa80				   .
   4861  fa80							;
   4862  fa80
   4863  fa80				   .L0225		;  temp5  =   ( player1x - 10 )  / 4
   4864  fa80
   4865  fa80							; complex statement detected
   4866  fa80		       a5 81		      LDA	player1x
   4867  fa82		       38		      SEC
   4868  fa83		       e9 0a		      SBC	#10
   4869  fa85		       4a		      lsr
   4870  fa86		       4a		      lsr
   4871  fa87		       85 a0		      STA	temp5
   4872  fa89				   .
   4873  fa89							;
   4874  fa89
   4875  fa89				   .L0226		;  temp6  =   ( player1y - 9 )  / 8
   4876  fa89
   4877  fa89							; complex statement detected
   4878  fa89		       a5 86		      LDA	player1y
   4879  fa8b		       38		      SEC
   4880  fa8c		       e9 09		      SBC	#9
   4881  fa8e		       4a		      lsr
   4882  fa8f		       4a		      lsr
   4883  fa90		       4a		      lsr
   4884  fa91		       85 a1		      STA	temp6
   4885  fa93				   .
   4886  fa93							;
   4887  fa93
   4888  fa93				   .L0227		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Up
   4889  fa93
   4890  fa93		       a5 a0		      LDA	temp5
   4891  fa95		       c9 22		      CMP	#34
   4892  fa97		       b0 0c		      BCS	.skipL0227
   4893  fa99				   .condpart71
   4894  fa99		       a5 a0		      LDA	temp5
   4895  fa9b		       a4 a1		      LDY	temp6
   4896  fa9d		       20 6b f2 	      jsr	pfread
   4897  faa0		       d0 03		      BNE	.skip71then
   4898  faa2				   .condpart72
   4899  faa2		       4c e1 fa 	      jmp	.__Skip_AI_Up
   4900  faa5
   4901  faa5				   .skip71then
   4902  faa5				   .skipL0227
   4903  faa5				   .
   4904  faa5							;
   4905  faa5
   4906  faa5				   .L0228		;  temp4  =   ( player1x - 17 )  / 4
   4907  faa5
   4908  faa5							; complex statement detected
   4909  faa5		       a5 81		      LDA	player1x
   4910  faa7		       38		      SEC
   4911  faa8		       e9 11		      SBC	#17
   4912  faaa		       4a		      lsr
   4913  faab		       4a		      lsr
   4914  faac		       85 9f		      STA	temp4
   4915  faae				   .
   4916  faae							;
   4917  faae
   4918  faae				   .L0229		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Up
   4919  faae
   4920  faae		       a5 9f		      LDA	temp4
   4921  fab0		       c9 22		      CMP	#34
   4922  fab2		       b0 0c		      BCS	.skipL0229
   4923  fab4				   .condpart73
   4924  fab4		       a5 9f		      LDA	temp4
   4925  fab6		       a4 a1		      LDY	temp6
   4926  fab8		       20 6b f2 	      jsr	pfread
   4927  fabb		       d0 03		      BNE	.skip73then
   4928  fabd				   .condpart74
   4929  fabd		       4c e1 fa 	      jmp	.__Skip_AI_Up
   4930  fac0
   4931  fac0				   .skip73then
   4932  fac0				   .skipL0229
   4933  fac0				   .
   4934  fac0							;
   4935  fac0
   4936  fac0				   .L0230		;  temp3  =  temp5  -	1
   4937  fac0
   4938  fac0		       a5 a0		      LDA	temp5
   4939  fac2		       38		      SEC
   4940  fac3		       e9 01		      SBC	#1
   4941  fac5		       85 9e		      STA	temp3
   4942  fac7				   .
   4943  fac7							;
   4944  fac7
   4945  fac7				   .L0231		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Up
   4946  fac7
   4947  fac7		       a5 9e		      LDA	temp3
   4948  fac9		       c9 22		      CMP	#34
   4949  facb		       b0 0c		      BCS	.skipL0231
   4950  facd				   .condpart75
   4951  facd		       a5 9e		      LDA	temp3
   4952  facf		       a4 a1		      LDY	temp6
   4953  fad1		       20 6b f2 	      jsr	pfread
   4954  fad4		       d0 03		      BNE	.skip75then
   4955  fad6				   .condpart76
   4956  fad6		       4c e1 fa 	      jmp	.__Skip_AI_Up
   4957  fad9
   4958  fad9				   .skip75then
   4959  fad9				   .skipL0231
   4960  fad9				   .
   4961  fad9							;
   4962  fad9
   4963  fad9				   .
   4964  fad9							;
   4965  fad9
   4966  fad9				   .
   4967  fad9							;
   4968  fad9
   4969  fad9				   .
   4970  fad9							;
   4971  fad9
   4972  fad9				   .L0232		;  _Bit3_Mino_Moving{3}  =  1
   4973  fad9
   4974  fad9		       a5 eb		      LDA	_Bit3_Mino_Moving
   4975  fadb		       09 08		      ORA	#8
   4976  fadd		       85 eb		      STA	_Bit3_Mino_Moving
   4977  fadf				   .L0233		;  player1y  =  player1y  -  1
   4978  fadf
   4979  fadf		       c6 86		      DEC	player1y
   4980  fae1				   .
   4981  fae1							;
   4982  fae1
   4983  fae1				   .__Skip_AI_Up
   4984  fae1							; __Skip_AI_Up
   4985  fae1
   4986  fae1				   .
   4987  fae1							;
   4988  fae1
   4989  fae1				   .
   4990  fae1							;
   4991  fae1
   4992  fae1				   .
   4993  fae1							;
   4994  fae1
   4995  fae1				   .
   4996  fae1							;
   4997  fae1
   4998  fae1				   .
   4999  fae1							;
   5000  fae1
   5001  fae1				   .
   5002  fae1							;
   5003  fae1
   5004  fae1				   .
   5005  fae1							;
   5006  fae1
   5007  fae1				   .
   5008  fae1							;
   5009  fae1
   5010  fae1				   .L0234		;  if player1y  >=  player0y then goto __Skip_AI_Down
   5011  fae1
   5012  fae1		       a5 86		      LDA	player1y
   5013  fae3		       c5 85		      CMP	player0y
   5014  fae5		       90 03		      BCC	.skipL0234
   5015  fae7				   .condpart77
   5016  fae7		       4c 5d fb 	      jmp	.__Skip_AI_Down
   5017  faea
   5018  faea				   .skipL0234
   5019  faea				   .
   5020  faea							;
   5021  faea
   5022  faea				   .
   5023  faea							;
   5024  faea
   5025  faea				   .
   5026  faea							;
   5027  faea
   5028  faea				   .
   5029  faea							;
   5030  faea
   5031  faea				   .L0235		;  _Bit1_P1_Dir_Down{1}  =  1
   5032  faea
   5033  faea		       a5 de		      LDA	_Bit1_P1_Dir_Down
   5034  faec		       09 02		      ORA	#2
   5035  faee		       85 de		      STA	_Bit1_P1_Dir_Down
   5036  faf0				   .L0236		;  _Bit0_P1_Dir_Up{0}	=  0
   5037  faf0
   5038  faf0		       a5 de		      LDA	_Bit0_P1_Dir_Up
   5039  faf2		       29 fe		      AND	#254
   5040  faf4		       85 de		      STA	_Bit0_P1_Dir_Up
   5041  faf6				   .
   5042  faf6							;
   5043  faf6
   5044  faf6				   .
   5045  faf6							;
   5046  faf6
   5047  faf6				   .
   5048  faf6							;
   5049  faf6
   5050  faf6				   .L0237		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_AI_Down
   5051  faf6
   5052  faf6		       a5 86		      LDA	player1y
   5053  faf8		       c9 58		      CMP	#_P_Edge_Bottom
   5054  fafa		       90 03		      BCC	.skipL0237
   5055  fafc				   .condpart78
   5056  fafc		       4c 5d fb 	      jmp	.__Skip_AI_Down
   5057  faff
   5058  faff				   .skipL0237
   5059  faff				   .
   5060  faff							;
   5061  faff
   5062  faff				   .
   5063  faff							;
   5064  faff
   5065  faff				   .
   5066  faff							;
   5067  faff
   5068  faff				   .
   5069  faff							;
   5070  faff
   5071  faff				   .L0238		;  temp5  =   ( player1x - 10 )  / 4
   5072  faff
   5073  faff							; complex statement detected
   5074  faff		       a5 81		      LDA	player1x
   5075  fb01		       38		      SEC
   5076  fb02		       e9 0a		      SBC	#10
   5077  fb04		       4a		      lsr
   5078  fb05		       4a		      lsr
   5079  fb06		       85 a0		      STA	temp5
   5080  fb08				   .
   5081  fb08							;
   5082  fb08
   5083  fb08				   .L0239		;  temp6  =   ( player1y )  / 8
   5084  fb08
   5085  fb08							; complex statement detected
   5086  fb08		       a5 86		      LDA	player1y
   5087  fb0a		       4a		      lsr
   5088  fb0b		       4a		      lsr
   5089  fb0c		       4a		      lsr
   5090  fb0d		       85 a1		      STA	temp6
   5091  fb0f				   .
   5092  fb0f							;
   5093  fb0f
   5094  fb0f				   .L0240		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Down
   5095  fb0f
   5096  fb0f		       a5 a0		      LDA	temp5
   5097  fb11		       c9 22		      CMP	#34
   5098  fb13		       b0 0c		      BCS	.skipL0240
   5099  fb15				   .condpart79
   5100  fb15		       a5 a0		      LDA	temp5
   5101  fb17		       a4 a1		      LDY	temp6
   5102  fb19		       20 6b f2 	      jsr	pfread
   5103  fb1c		       d0 03		      BNE	.skip79then
   5104  fb1e				   .condpart80
   5105  fb1e		       4c 5d fb 	      jmp	.__Skip_AI_Down
   5106  fb21
   5107  fb21				   .skip79then
   5108  fb21				   .skipL0240
   5109  fb21				   .
   5110  fb21							;
   5111  fb21
   5112  fb21				   .L0241		;  temp4  =   ( player1x - 17 )  / 4
   5113  fb21
   5114  fb21							; complex statement detected
   5115  fb21		       a5 81		      LDA	player1x
   5116  fb23		       38		      SEC
   5117  fb24		       e9 11		      SBC	#17
   5118  fb26		       4a		      lsr
   5119  fb27		       4a		      lsr
   5120  fb28		       85 9f		      STA	temp4
   5121  fb2a				   .
   5122  fb2a							;
   5123  fb2a
   5124  fb2a				   .L0242		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Down
   5125  fb2a
   5126  fb2a		       a5 9f		      LDA	temp4
   5127  fb2c		       c9 22		      CMP	#34
   5128  fb2e		       b0 0c		      BCS	.skipL0242
   5129  fb30				   .condpart81
   5130  fb30		       a5 9f		      LDA	temp4
   5131  fb32		       a4 a1		      LDY	temp6
   5132  fb34		       20 6b f2 	      jsr	pfread
   5133  fb37		       d0 03		      BNE	.skip81then
   5134  fb39				   .condpart82
   5135  fb39		       4c 5d fb 	      jmp	.__Skip_AI_Down
   5136  fb3c
   5137  fb3c				   .skip81then
   5138  fb3c				   .skipL0242
   5139  fb3c				   .
   5140  fb3c							;
   5141  fb3c
   5142  fb3c				   .L0243		;  temp3  =  temp5  -	1
   5143  fb3c
   5144  fb3c		       a5 a0		      LDA	temp5
   5145  fb3e		       38		      SEC
   5146  fb3f		       e9 01		      SBC	#1
   5147  fb41		       85 9e		      STA	temp3
   5148  fb43				   .
   5149  fb43							;
   5150  fb43
   5151  fb43				   .L0244		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Down
   5152  fb43
   5153  fb43		       a5 9e		      LDA	temp3
   5154  fb45		       c9 22		      CMP	#34
   5155  fb47		       b0 0c		      BCS	.skipL0244
   5156  fb49				   .condpart83
   5157  fb49		       a5 9e		      LDA	temp3
   5158  fb4b		       a4 a1		      LDY	temp6
   5159  fb4d		       20 6b f2 	      jsr	pfread
   5160  fb50		       d0 03		      BNE	.skip83then
   5161  fb52				   .condpart84
   5162  fb52		       4c 5d fb 	      jmp	.__Skip_AI_Down
   5163  fb55
   5164  fb55				   .skip83then
   5165  fb55				   .skipL0244
   5166  fb55				   .
   5167  fb55							;
   5168  fb55
   5169  fb55				   .
   5170  fb55							;
   5171  fb55
   5172  fb55				   .
   5173  fb55							;
   5174  fb55
   5175  fb55				   .
   5176  fb55							;
   5177  fb55
   5178  fb55				   .L0245		;  _Bit3_Mino_Moving{3}  =  1
   5179  fb55
   5180  fb55		       a5 eb		      LDA	_Bit3_Mino_Moving
   5181  fb57		       09 08		      ORA	#8
   5182  fb59		       85 eb		      STA	_Bit3_Mino_Moving
   5183  fb5b				   .L0246		;  player1y  =  player1y  +  1
   5184  fb5b
   5185  fb5b		       e6 86		      INC	player1y
   5186  fb5d				   .
   5187  fb5d							;
   5188  fb5d
   5189  fb5d				   .__Skip_AI_Down
   5190  fb5d							; __Skip_AI_Down
   5191  fb5d
   5192  fb5d				   .
   5193  fb5d							;
   5194  fb5d
   5195  fb5d				   .
   5196  fb5d							;
   5197  fb5d
   5198  fb5d				   .
   5199  fb5d							;
   5200  fb5d
   5201  fb5d				   .
   5202  fb5d							;
   5203  fb5d
   5204  fb5d				   .
   5205  fb5d							;
   5206  fb5d
   5207  fb5d				   .
   5208  fb5d							;
   5209  fb5d
   5210  fb5d				   .
   5211  fb5d							;
   5212  fb5d
   5213  fb5d				   .
   5214  fb5d							;
   5215  fb5d
   5216  fb5d				   .
   5217  fb5d							;
   5218  fb5d
   5219  fb5d				   .L0247		;  if player1x  <=  player0x then goto __Skip_AI_Left
   5220  fb5d
   5221  fb5d		       a5 80		      LDA	player0x
   5222  fb5f		       c5 81		      CMP	player1x
   5223  fb61		       90 03		      BCC	.skipL0247
   5224  fb63				   .condpart85
   5225  fb63		       4c c4 fb 	      jmp	.__Skip_AI_Left
   5226  fb66
   5227  fb66				   .skipL0247
   5228  fb66				   .
   5229  fb66							;
   5230  fb66
   5231  fb66				   .
   5232  fb66							;
   5233  fb66
   5234  fb66				   .
   5235  fb66							;
   5236  fb66
   5237  fb66				   .
   5238  fb66							;
   5239  fb66
   5240  fb66				   .L0248		;  _Bit2_P1_Dir_Left{2}  =  1
   5241  fb66
   5242  fb66		       a5 de		      LDA	_Bit2_P1_Dir_Left
   5243  fb68		       09 04		      ORA	#4
   5244  fb6a		       85 de		      STA	_Bit2_P1_Dir_Left
   5245  fb6c				   .L0249		;  _Bit3_P1_Dir_Right{3}  =  0
   5246  fb6c
   5247  fb6c		       a5 de		      LDA	_Bit3_P1_Dir_Right
   5248  fb6e		       29 f7		      AND	#247
   5249  fb70		       85 de		      STA	_Bit3_P1_Dir_Right
   5250  fb72				   .
   5251  fb72							;
   5252  fb72
   5253  fb72				   .
   5254  fb72							;
   5255  fb72
   5256  fb72				   .
   5257  fb72							;
   5258  fb72
   5259  fb72				   .
   5260  fb72							;
   5261  fb72
   5262  fb72				   .L0250		;  if player1x  <=  _P_Edge_Left then goto __Skip_AI_Left
   5263  fb72
   5264  fb72		       a9 01		      LDA	#_P_Edge_Left
   5265  fb74		       c5 81		      CMP	player1x
   5266  fb76		       90 03		      BCC	.skipL0250
   5267  fb78				   .condpart86
   5268  fb78		       4c c4 fb 	      jmp	.__Skip_AI_Left
   5269  fb7b
   5270  fb7b				   .skipL0250
   5271  fb7b				   .
   5272  fb7b							;
   5273  fb7b
   5274  fb7b				   .
   5275  fb7b							;
   5276  fb7b
   5277  fb7b				   .
   5278  fb7b							;
   5279  fb7b
   5280  fb7b				   .
   5281  fb7b							;
   5282  fb7b
   5283  fb7b				   .L0251		;  temp5  =   ( player1y - 1 )  / 8
   5284  fb7b
   5285  fb7b							; complex statement detected
   5286  fb7b		       a5 86		      LDA	player1y
   5287  fb7d		       38		      SEC
   5288  fb7e		       e9 01		      SBC	#1
   5289  fb80		       4a		      lsr
   5290  fb81		       4a		      lsr
   5291  fb82		       4a		      lsr
   5292  fb83		       85 a0		      STA	temp5
   5293  fb85				   .
   5294  fb85							;
   5295  fb85
   5296  fb85				   .L0252		;  temp6  =   ( player1x - 18 )  / 4
   5297  fb85
   5298  fb85							; complex statement detected
   5299  fb85		       a5 81		      LDA	player1x
   5300  fb87		       38		      SEC
   5301  fb88		       e9 12		      SBC	#18
   5302  fb8a		       4a		      lsr
   5303  fb8b		       4a		      lsr
   5304  fb8c		       85 a1		      STA	temp6
   5305  fb8e				   .
   5306  fb8e							;
   5307  fb8e
   5308  fb8e				   .L0253		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Left
   5309  fb8e
   5310  fb8e		       a5 a1		      LDA	temp6
   5311  fb90		       c9 22		      CMP	#34
   5312  fb92		       b0 0c		      BCS	.skipL0253
   5313  fb94				   .condpart87
   5314  fb94		       a5 a1		      LDA	temp6
   5315  fb96		       a4 a0		      LDY	temp5
   5316  fb98		       20 6b f2 	      jsr	pfread
   5317  fb9b		       d0 03		      BNE	.skip87then
   5318  fb9d				   .condpart88
   5319  fb9d		       4c c4 fb 	      jmp	.__Skip_AI_Left
   5320  fba0
   5321  fba0				   .skip87then
   5322  fba0				   .skipL0253
   5323  fba0				   .
   5324  fba0							;
   5325  fba0
   5326  fba0				   .L0254		;  temp3  =   ( player1y - 8 )  / 8
   5327  fba0
   5328  fba0							; complex statement detected
   5329  fba0		       a5 86		      LDA	player1y
   5330  fba2		       38		      SEC
   5331  fba3		       e9 08		      SBC	#8
   5332  fba5		       4a		      lsr
   5333  fba6		       4a		      lsr
   5334  fba7		       4a		      lsr
   5335  fba8		       85 9e		      STA	temp3
   5336  fbaa				   .
   5337  fbaa							;
   5338  fbaa
   5339  fbaa				   .L0255		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Left
   5340  fbaa
   5341  fbaa		       a5 a1		      LDA	temp6
   5342  fbac		       c9 22		      CMP	#34
   5343  fbae		       b0 0c		      BCS	.skipL0255
   5344  fbb0				   .condpart89
   5345  fbb0		       a5 a1		      LDA	temp6
   5346  fbb2		       a4 9e		      LDY	temp3
   5347  fbb4		       20 6b f2 	      jsr	pfread
   5348  fbb7		       d0 03		      BNE	.skip89then
   5349  fbb9				   .condpart90
   5350  fbb9		       4c c4 fb 	      jmp	.__Skip_AI_Left
   5351  fbbc
   5352  fbbc				   .skip89then
   5353  fbbc				   .skipL0255
   5354  fbbc				   .
   5355  fbbc							;
   5356  fbbc
   5357  fbbc				   .
   5358  fbbc							;
   5359  fbbc
   5360  fbbc				   .
   5361  fbbc							;
   5362  fbbc
   5363  fbbc				   .
   5364  fbbc							;
   5365  fbbc
   5366  fbbc				   .L0256		;  _Bit3_Mino_Moving{3}  =  1
   5367  fbbc
   5368  fbbc		       a5 eb		      LDA	_Bit3_Mino_Moving
   5369  fbbe		       09 08		      ORA	#8
   5370  fbc0		       85 eb		      STA	_Bit3_Mino_Moving
   5371  fbc2				   .L0257		;  player1x  =  player1x  -  1
   5372  fbc2
   5373  fbc2		       c6 81		      DEC	player1x
   5374  fbc4				   .
   5375  fbc4							;
   5376  fbc4
   5377  fbc4				   .__Skip_AI_Left
   5378  fbc4							; __Skip_AI_Left
   5379  fbc4
   5380  fbc4				   .
   5381  fbc4							;
   5382  fbc4
   5383  fbc4				   .
   5384  fbc4							;
   5385  fbc4
   5386  fbc4				   .
   5387  fbc4							;
   5388  fbc4
   5389  fbc4				   .
   5390  fbc4							;
   5391  fbc4
   5392  fbc4				   .
   5393  fbc4							;
   5394  fbc4
   5395  fbc4				   .
   5396  fbc4							;
   5397  fbc4
   5398  fbc4				   .
   5399  fbc4							;
   5400  fbc4
   5401  fbc4				   .L0258		;  if player1x  >=  player0x then goto __Skip_AI_Right
   5402  fbc4
   5403  fbc4		       a5 81		      LDA	player1x
   5404  fbc6		       c5 80		      CMP	player0x
   5405  fbc8		       90 03		      BCC	.skipL0258
   5406  fbca				   .condpart91
   5407  fbca		       4c 2b fc 	      jmp	.__Skip_AI_Right
   5408  fbcd
   5409  fbcd				   .skipL0258
   5410  fbcd				   .
   5411  fbcd							;
   5412  fbcd
   5413  fbcd				   .
   5414  fbcd							;
   5415  fbcd
   5416  fbcd				   .
   5417  fbcd							;
   5418  fbcd
   5419  fbcd				   .
   5420  fbcd							;
   5421  fbcd
   5422  fbcd				   .L0259		;  _Bit2_P1_Dir_Left{2}  =  0
   5423  fbcd
   5424  fbcd		       a5 de		      LDA	_Bit2_P1_Dir_Left
   5425  fbcf		       29 fb		      AND	#251
   5426  fbd1		       85 de		      STA	_Bit2_P1_Dir_Left
   5427  fbd3				   .L0260		;  _Bit3_P1_Dir_Right{3}  =  1
   5428  fbd3
   5429  fbd3		       a5 de		      LDA	_Bit3_P1_Dir_Right
   5430  fbd5		       09 08		      ORA	#8
   5431  fbd7		       85 de		      STA	_Bit3_P1_Dir_Right
   5432  fbd9				   .
   5433  fbd9							;
   5434  fbd9
   5435  fbd9				   .
   5436  fbd9							;
   5437  fbd9
   5438  fbd9				   .
   5439  fbd9							;
   5440  fbd9
   5441  fbd9				   .L0261		;  if player1x  >=  _P_Edge_Right then goto __Skip_AI_Right
   5442  fbd9
   5443  fbd9		       a5 81		      LDA	player1x
   5444  fbdb		       c9 99		      CMP	#_P_Edge_Right
   5445  fbdd		       90 03		      BCC	.skipL0261
   5446  fbdf				   .condpart92
   5447  fbdf		       4c 2b fc 	      jmp	.__Skip_AI_Right
   5448  fbe2
   5449  fbe2				   .skipL0261
   5450  fbe2				   .
   5451  fbe2							;
   5452  fbe2
   5453  fbe2				   .
   5454  fbe2							;
   5455  fbe2
   5456  fbe2				   .
   5457  fbe2							;
   5458  fbe2
   5459  fbe2				   .
   5460  fbe2							;
   5461  fbe2
   5462  fbe2				   .L0262		;  temp5  =   ( player1y - 1 )  / 8
   5463  fbe2
   5464  fbe2							; complex statement detected
   5465  fbe2		       a5 86		      LDA	player1y
   5466  fbe4		       38		      SEC
   5467  fbe5		       e9 01		      SBC	#1
   5468  fbe7		       4a		      lsr
   5469  fbe8		       4a		      lsr
   5470  fbe9		       4a		      lsr
   5471  fbea		       85 a0		      STA	temp5
   5472  fbec				   .
   5473  fbec							;
   5474  fbec
   5475  fbec				   .L0263		;  temp6  =   ( player1x - 9 )  / 4
   5476  fbec
   5477  fbec							; complex statement detected
   5478  fbec		       a5 81		      LDA	player1x
   5479  fbee		       38		      SEC
   5480  fbef		       e9 09		      SBC	#9
   5481  fbf1		       4a		      lsr
   5482  fbf2		       4a		      lsr
   5483  fbf3		       85 a1		      STA	temp6
   5484  fbf5				   .
   5485  fbf5							;
   5486  fbf5
   5487  fbf5				   .L0264		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Right
   5488  fbf5
   5489  fbf5		       a5 a1		      LDA	temp6
   5490  fbf7		       c9 22		      CMP	#34
   5491  fbf9		       b0 0c		      BCS	.skipL0264
   5492  fbfb				   .condpart93
   5493  fbfb		       a5 a1		      LDA	temp6
   5494  fbfd		       a4 a0		      LDY	temp5
   5495  fbff		       20 6b f2 	      jsr	pfread
   5496  fc02		       d0 03		      BNE	.skip93then
   5497  fc04				   .condpart94
   5498  fc04		       4c 2b fc 	      jmp	.__Skip_AI_Right
   5499  fc07
   5500  fc07				   .skip93then
   5501  fc07				   .skipL0264
   5502  fc07				   .
   5503  fc07							;
   5504  fc07
   5505  fc07				   .L0265		;  temp3  =   ( player1y - 8 )  / 8
   5506  fc07
   5507  fc07							; complex statement detected
   5508  fc07		       a5 86		      LDA	player1y
   5509  fc09		       38		      SEC
   5510  fc0a		       e9 08		      SBC	#8
   5511  fc0c		       4a		      lsr
   5512  fc0d		       4a		      lsr
   5513  fc0e		       4a		      lsr
   5514  fc0f		       85 9e		      STA	temp3
   5515  fc11				   .
   5516  fc11							;
   5517  fc11
   5518  fc11				   .L0266		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Right
   5519  fc11
   5520  fc11		       a5 a1		      LDA	temp6
   5521  fc13		       c9 22		      CMP	#34
   5522  fc15		       b0 0c		      BCS	.skipL0266
   5523  fc17				   .condpart95
   5524  fc17		       a5 a1		      LDA	temp6
   5525  fc19		       a4 9e		      LDY	temp3
   5526  fc1b		       20 6b f2 	      jsr	pfread
   5527  fc1e		       d0 03		      BNE	.skip95then
   5528  fc20				   .condpart96
   5529  fc20		       4c 2b fc 	      jmp	.__Skip_AI_Right
   5530  fc23
   5531  fc23				   .skip95then
   5532  fc23				   .skipL0266
   5533  fc23				   .
   5534  fc23							;
   5535  fc23
   5536  fc23				   .
   5537  fc23							;
   5538  fc23
   5539  fc23				   .
   5540  fc23							;
   5541  fc23
   5542  fc23				   .
   5543  fc23							;
   5544  fc23
   5545  fc23				   .L0267		;  _Bit3_Mino_Moving{3}  =  1
   5546  fc23
   5547  fc23		       a5 eb		      LDA	_Bit3_Mino_Moving
   5548  fc25		       09 08		      ORA	#8
   5549  fc27		       85 eb		      STA	_Bit3_Mino_Moving
   5550  fc29				   .L0268		;  player1x  =  player1x  +  1
   5551  fc29
   5552  fc29		       e6 81		      INC	player1x
   5553  fc2b				   .
   5554  fc2b							;
   5555  fc2b
   5556  fc2b				   .__Skip_AI_Right
   5557  fc2b							; __Skip_AI_Right
   5558  fc2b
   5559  fc2b				   .
   5560  fc2b							;
   5561  fc2b
   5562  fc2b				   .L0269		;  if _Bit2_P1_Dir_Left{2} then REFP1	=  8
   5563  fc2b
   5564  fc2b		       a5 de		      LDA	_Bit2_P1_Dir_Left
   5565  fc2d		       29 04		      AND	#4
   5566  fc2f		       f0 04		      BEQ	.skipL0269
   5567  fc31				   .condpart97
   5568  fc31		       a9 08		      LDA	#8
   5569  fc33		       85 0c		      STA	REFP1
   5570  fc35				   .skipL0269
   5571  fc35				   .
   5572  fc35							;
   5573  fc35
   5574  fc35				   .
   5575  fc35							;
   5576  fc35
   5577  fc35				   .
   5578  fc35							;
   5579  fc35
   5580  fc35				   .
   5581  fc35							;
   5582  fc35
   5583  fc35				   .
   5584  fc35							;
   5585  fc35
   5586  fc35				   .L0270		;  if !collision(missile0,player0) then __Skip_Gem_Collection
   5587  fc35
   5588  fc35		       24 00		      bit	CXM0P
   5589  fc37					      if	((* - .__Skip_Gem_Collection) < 127) && ((* - .__Skip_Gem_Collection) > -128)
   5590  fc37		       50 1c		      bvc	.__Skip_Gem_Collection
   5591  fc39				  -	      else
   5592  fc39				  -	      bvs	.4skip__Skip_Gem_Collection
   5593  fc39				  -	      jmp	.__Skip_Gem_Collection
   5594  fc39				  -.4skip__Skip_Gem_Collection
   5595  fc39					      endif
   5596  fc39				   .L0271		;  _Bit0_Carrying_Gem{0}  =  1
   5597  fc39
   5598  fc39		       a5 eb		      LDA	_Bit0_Carrying_Gem
   5599  fc3b		       09 01		      ORA	#1
   5600  fc3d		       85 eb		      STA	_Bit0_Carrying_Gem
   5601  fc3f				   .L0272		;  missile0x  =  200  :  missile0y  =	200
   5602  fc3f
   5603  fc3f		       a9 c8		      LDA	#200
   5604  fc41		       85 82		      STA	missile0x
   5605  fc43		       85 91		      STA	missile0y
   5606  fc45				   .
   5607  fc45							;
   5608  fc45
   5609  fc45				   .
   5610  fc45							;
   5611  fc45
   5612  fc45				   .
   5613  fc45							;
   5614  fc45
   5615  fc45				   .L0273		;  if _Ch0_Sound  <>  1 then _Ch0_Sound  =  1	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   5616  fc45
   5617  fc45		       a5 e4		      LDA	_Ch0_Sound
   5618  fc47		       c9 01		      CMP	#1
   5619  fc49		       f0 0a		      BEQ	.skipL0273
   5620  fc4b				   .condpart98
   5621  fc4b		       a9 01		      LDA	#1
   5622  fc4d		       85 e4		      STA	_Ch0_Sound
   5623  fc4f		       85 e5		      STA	_Ch0_Duration
   5624  fc51		       a9 00		      LDA	#0
   5625  fc53		       85 e6		      STA	_Ch0_Counter
   5626  fc55				   .skipL0273
   5627  fc55				   .__Skip_Gem_Collection
   5628  fc55							; __Skip_Gem_Collection
   5629  fc55
   5630  fc55				   .
   5631  fc55							;
   5632  fc55
   5633  fc55				   .
   5634  fc55							;
   5635  fc55
   5636  fc55				   .
   5637  fc55							;
   5638  fc55
   5639  fc55				   .
   5640  fc55							;
   5641  fc55
   5642  fc55				   .L0274		;  if !collision(missile1,player0) then __Skip_Gem_Deposit
   5643  fc55
   5644  fc55		       24 01		      bit	CXM1P
   5645  fc57					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   5646  fc57		       10 4c		      bpl	.__Skip_Gem_Deposit
   5647  fc59				  -	      else
   5648  fc59				  -	      bmi	.5skip__Skip_Gem_Deposit
   5649  fc59				  -	      jmp	.__Skip_Gem_Deposit
   5650  fc59				  -.5skip__Skip_Gem_Deposit
   5651  fc59					      endif
   5652  fc59				   .L0275		;  if !_Bit0_Carrying_Gem{0} then __Skip_Gem_Deposit
   5653  fc59
   5654  fc59		       a5 eb		      LDA	_Bit0_Carrying_Gem
   5655  fc5b		       4a		      LSR
   5656  fc5c					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   5657  fc5c		       90 47		      bcc	.__Skip_Gem_Deposit
   5658  fc5e				  -	      else
   5659  fc5e				  -	      bcs	.6skip__Skip_Gem_Deposit
   5660  fc5e				  -	      jmp	.__Skip_Gem_Deposit
   5661  fc5e				  -.6skip__Skip_Gem_Deposit
   5662  fc5e					      endif
   5663  fc5e				   .L0276		;  _Bit0_Carrying_Gem{0}  =  0
   5664  fc5e
   5665  fc5e		       a5 eb		      LDA	_Bit0_Carrying_Gem
   5666  fc60		       29 fe		      AND	#254
   5667  fc62		       85 eb		      STA	_Bit0_Carrying_Gem
   5668  fc64				   .L0277		;  score  =  score  +	1
   5669  fc64
   5670  fc64		       f8		      SED
   5671  fc65		       18		      CLC
   5672  fc66		       a5 95		      LDA	score+2
   5673  fc68		       69 01		      ADC	#$01
   5674  fc6a		       85 95		      STA	score+2
   5675  fc6c		       a5 94		      LDA	score+1
   5676  fc6e		       69 00		      ADC	#$00
   5677  fc70		       85 94		      STA	score+1
   5678  fc72		       a5 93		      LDA	score
   5679  fc74		       69 00		      ADC	#$00
   5680  fc76		       85 93		      STA	score
   5681  fc78		       d8		      CLD
   5682  fc79				   .L0278		;  _Bit4_New_Chase_Start{4}  =  0
   5683  fc79
   5684  fc79		       a5 eb		      LDA	_Bit4_New_Chase_Start
   5685  fc7b		       29 ef		      AND	#239
   5686  fc7d		       85 eb		      STA	_Bit4_New_Chase_Start
   5687  fc7f				   .L0279		;  if _Ch0_Sound  <>  2 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   5688  fc7f
   5689  fc7f		       a5 e4		      LDA	_Ch0_Sound
   5690  fc81		       c9 02		      CMP	#2
   5691  fc83		       f0 0c		      BEQ	.skipL0279
   5692  fc85				   .condpart99
   5693  fc85		       a9 02		      LDA	#2
   5694  fc87		       85 e4		      STA	_Ch0_Sound
   5695  fc89		       a9 01		      LDA	#1
   5696  fc8b		       85 e5		      STA	_Ch0_Duration
   5697  fc8d		       a9 00		      LDA	#0
   5698  fc8f		       85 e6		      STA	_Ch0_Counter
   5699  fc91				   .skipL0279
   5700  fc91				   .L0280		;  missile0x  =   ( rand  &  118 )   +  23  :	missile0y  =   ( rand  &  70 )	 +  9
   5701  fc91
   5702  fc91							; complex statement detected
   5703  fc91		       20 b3 f3 	      jsr	randomize
   5704  fc94		       29 76		      AND	#118
   5705  fc96		       18		      CLC
   5706  fc97		       69 17		      ADC	#23
   5707  fc99		       85 82		      STA	missile0x
   5708  fc9b							; complex statement detected
   5709  fc9b		       20 b3 f3 	      jsr	randomize
   5710  fc9e		       29 46		      AND	#70
   5711  fca0		       18		      CLC
   5712  fca1		       69 09		      ADC	#9
   5713  fca3		       85 91		      STA	missile0y
   5714  fca5				   .__Skip_Gem_Deposit
   5715  fca5							; __Skip_Gem_Deposit
   5716  fca5
   5717  fca5				   .
   5718  fca5							;
   5719  fca5
   5720  fca5				   .__Game_Over
   5721  fca5							; __Game_Over
   5722  fca5
   5723  fca5				   .L0281		;  if !_Bit1_Game_Over{1} then goto __Skip_Game_Over
   5724  fca5
   5725  fca5		       a5 eb		      LDA	_Bit1_Game_Over
   5726  fca7		       29 02		      AND	#2
   5727  fca9		       d0 03		      BNE	.skipL0281
   5728  fcab				   .condpart100
   5729  fcab		       4c 2f fd 	      jmp	.__Skip_Game_Over
   5730  fcae
   5731  fcae				   .skipL0281
   5732  fcae				   .L0282		;  if _Ch0_Sound  =  3  ||  _Bit5_Game_Over_Music_Played{5} then goto __Skip_Game_Over_Music
   5733  fcae
   5734  fcae		       a5 e4		      LDA	_Ch0_Sound
   5735  fcb0		       c9 03		      CMP	#3
   5736  fcb2		       d0 03		      BNE	.skipL0282
   5737  fcb4				   .condpart101
   5738  fcb4		       4c bd fc 	      jmp	.condpart102
   5739  fcb7				   .skipL0282
   5740  fcb7		       a5 eb		      LDA	_Bit5_Game_Over_Music_Played
   5741  fcb9		       29 20		      AND	#32
   5742  fcbb		       f0 03		      BEQ	.skip9OR
   5743  fcbd				   .condpart102
   5744  fcbd		       4c d2 fc 	      jmp	.__Skip_Game_Over_Music
   5745  fcc0
   5746  fcc0				   .skip9OR
   5747  fcc0				   .L0283		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   5748  fcc0
   5749  fcc0		       a9 03		      LDA	#3
   5750  fcc2		       85 e4		      STA	_Ch0_Sound
   5751  fcc4		       a9 01		      LDA	#1
   5752  fcc6		       85 e5		      STA	_Ch0_Duration
   5753  fcc8		       a9 00		      LDA	#0
   5754  fcca		       85 e6		      STA	_Ch0_Counter
   5755  fccc				   .L0284		;  _Bit5_Game_Over_Music_Played{5}  =	1
   5756  fccc
   5757  fccc		       a5 eb		      LDA	_Bit5_Game_Over_Music_Played
   5758  fcce		       09 20		      ORA	#32
   5759  fcd0		       85 eb		      STA	_Bit5_Game_Over_Music_Played
   5760  fcd2				   .__Skip_Game_Over_Music
   5761  fcd2							; __Skip_Game_Over_Music
   5762  fcd2
   5763  fcd2				   .L0285		;  COLUPF  =  14
   5764  fcd2
   5765  fcd2		       a9 0e		      LDA	#14
   5766  fcd4		       85 08		      STA	COLUPF
   5767  fcd6				   .L0286		;  scorecolor	=  14
   5768  fcd6
   5769  fcd6		       a9 0e		      LDA	#14
   5770  fcd8		       85 a3		      STA	scorecolor
   5771  fcda				   .L0287		;  COLUBK  =  $36
   5772  fcda
   5773  fcda		       a9 36		      LDA	#$36
   5774  fcdc		       85 09		      STA	COLUBK
   5775  fcde				   .L0288		;  playfield:
   5776  fcde
   5777  fcde				  -	      ifconst	pfres
   5778  fcde				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5779  fcde					      else
   5780  fcde		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5781  fce0					      endif
   5782  fce0		       4c 0f fd 	      jmp	pflabel2
   5783  fce3				   PF_data2
   5784  fce3		       0f 79		      .byte.b	%00001111, %01111001
   5785  fce5					      if	(pfwidth>2)
   5786  fce5		       6c 0f		      .byte.b	%01101100, %00001111
   5787  fce7					      endif
   5788  fce7		       08 48		      .byte.b	%00001000, %01001000
   5789  fce9					      if	(pfwidth>2)
   5790  fce9		       54 01		      .byte.b	%01010100, %00000001
   5791  fceb					      endif
   5792  fceb		       09 79		      .byte.b	%00001001, %01111001
   5793  fced					      if	(pfwidth>2)
   5794  fced		       54 07		      .byte.b	%01010100, %00000111
   5795  fcef					      endif
   5796  fcef		       08 49		      .byte.b	%00001000, %01001001
   5797  fcf1					      if	(pfwidth>2)
   5798  fcf1		       54 01		      .byte.b	%01010100, %00000001
   5799  fcf3					      endif
   5800  fcf3		       0b 49		      .byte.b	%00001011, %01001001
   5801  fcf5					      if	(pfwidth>2)
   5802  fcf5		       54 0f		      .byte.b	%01010100, %00001111
   5803  fcf7					      endif
   5804  fcf7		       00 00		      .byte.b	%00000000, %00000000
   5805  fcf9					      if	(pfwidth>2)
   5806  fcf9		       00 00		      .byte.b	%00000000, %00000000
   5807  fcfb					      endif
   5808  fcfb		       0f 89		      .byte.b	%00001111, %10001001
   5809  fcfd					      if	(pfwidth>2)
   5810  fcfd		       3c 07		      .byte.b	%00111100, %00000111
   5811  fcff					      endif
   5812  fcff		       08 89		      .byte.b	%00001000, %10001001
   5813  fd01					      if	(pfwidth>2)
   5814  fd01		       20 09		      .byte.b	%00100000, %00001001
   5815  fd03					      endif
   5816  fd03		       08 89		      .byte.b	%00001000, %10001001
   5817  fd05					      if	(pfwidth>2)
   5818  fd05		       38 07		      .byte.b	%00111000, %00000111
   5819  fd07					      endif
   5820  fd07		       08 51		      .byte.b	%00001000, %01010001
   5821  fd09					      if	(pfwidth>2)
   5822  fd09		       20 09		      .byte.b	%00100000, %00001001
   5823  fd0b					      endif
   5824  fd0b		       0f 21		      .byte.b	%00001111, %00100001
   5825  fd0d					      if	(pfwidth>2)
   5826  fd0d		       3c 09		      .byte.b	%00111100, %00001001
   5827  fd0f					      endif
   5828  fd0f				   pflabel2
   5829  fd0f		       bd e3 fc 	      lda	PF_data2,x
   5830  fd12		       95 a4		      sta	playfield,x
   5831  fd14		       ca		      dex
   5832  fd15		       10 f8		      bpl	pflabel2
   5833  fd17				   .
   5834  fd17							;
   5835  fd17
   5836  fd17				   .L0289		;  player0x  =  200  :  player0y  =  200
   5837  fd17
   5838  fd17		       a9 c8		      LDA	#200
   5839  fd19		       85 80		      STA	player0x
   5840  fd1b		       85 85		      STA	player0y
   5841  fd1d				   .L0290		;  player1x  =  200  :  player1y  =  200
   5842  fd1d
   5843  fd1d		       a9 c8		      LDA	#200
   5844  fd1f		       85 81		      STA	player1x
   5845  fd21		       85 86		      STA	player1y
   5846  fd23				   .L0291		;  missile0x  =  200  :  missile0y  =	200
   5847  fd23
   5848  fd23		       a9 c8		      LDA	#200
   5849  fd25		       85 82		      STA	missile0x
   5850  fd27		       85 91		      STA	missile0y
   5851  fd29				   .L0292		;  missile1x  =  200  :  missile1y  =	200
   5852  fd29
   5853  fd29		       a9 c8		      LDA	#200
   5854  fd2b		       85 83		      STA	missile1x
   5855  fd2d		       85 88		      STA	missile1y
   5856  fd2f				   .__Skip_Game_Over
   5857  fd2f							; __Skip_Game_Over
   5858  fd2f
   5859  fd2f				   .
   5860  fd2f							;
   5861  fd2f
   5862  fd2f				   .
   5863  fd2f							;
   5864  fd2f
   5865  fd2f				   .
   5866  fd2f							;
   5867  fd2f
   5868  fd2f				   .
   5869  fd2f							;
   5870  fd2f
   5871  fd2f				   .
   5872  fd2f							;
   5873  fd2f
   5874  fd2f				   .L0293		;  drawscreen
   5875  fd2f
   5876  fd2f		       20 c1 f3 	      jsr	drawscreen
   5877  fd32				   .
   5878  fd32							;
   5879  fd32
   5880  fd32				   .
   5881  fd32							;
   5882  fd32
   5883  fd32				   .
   5884  fd32							;
   5885  fd32
   5886  fd32				   .
   5887  fd32							;
   5888  fd32
   5889  fd32				   .
   5890  fd32							;
   5891  fd32
   5892  fd32				   .
   5893  fd32							;
   5894  fd32
   5895  fd32				   .
   5896  fd32							;
   5897  fd32
   5898  fd32				   .
   5899  fd32							;
   5900  fd32
   5901  fd32				   .
   5902  fd32							;
   5903  fd32
   5904  fd32				   .
   5905  fd32							;
   5906  fd32
   5907  fd32				   .
   5908  fd32							;
   5909  fd32
   5910  fd32				   .
   5911  fd32							;
   5912  fd32
   5913  fd32				   .
   5914  fd32							;
   5915  fd32
   5916  fd32				   .
   5917  fd32							;
   5918  fd32
   5919  fd32				   .
   5920  fd32							;
   5921  fd32
   5922  fd32				   .L0294		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5923  fd32
   5924  fd32		       a9 01		      lda	#1
   5925  fd34		       2c 82 02 	      bit	SWCHB
   5926  fd37		       f0 09		      BEQ	.skipL0294
   5927  fd39				   .condpart103
   5928  fd39		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5929  fd3b		       29 fe		      AND	#254
   5930  fd3d		       85 ec		      STA	_Bit0_Reset_Restrainer
   5931  fd3f		       4c ed f5 	      jmp	.__Main_Loop
   5932  fd42
   5933  fd42				   .skipL0294
   5934  fd42				   .
   5935  fd42							;
   5936  fd42
   5937  fd42				   .
   5938  fd42							;
   5939  fd42
   5940  fd42				   .
   5941  fd42							;
   5942  fd42
   5943  fd42				   .
   5944  fd42							;
   5945  fd42
   5946  fd42				   .
   5947  fd42							;
   5948  fd42
   5949  fd42				   .L0295		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5950  fd42
   5951  fd42		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5952  fd44		       4a		      LSR
   5953  fd45		       90 03		      BCC	.skipL0295
   5954  fd47				   .condpart104
   5955  fd47		       4c ed f5 	      jmp	.__Main_Loop
   5956  fd4a
   5957  fd4a				   .skipL0295
   5958  fd4a				   .
   5959  fd4a							;
   5960  fd4a
   5961  fd4a				   .
   5962  fd4a							;
   5963  fd4a
   5964  fd4a				   .
   5965  fd4a							;
   5966  fd4a
   5967  fd4a				   .
   5968  fd4a							;
   5969  fd4a
   5970  fd4a				   .L0296		;  goto __Start_Restart
   5971  fd4a
   5972  fd4a		       4c 69 f4 	      jmp	.__Start_Restart
   5973  fd4d
   5974  fd4d				   .
   5975  fd4d							;
   5976  fd4d
   5977  fd4d				   .__Pl00
   5978  fd4d							; __Pl00
   5979  fd4d
   5980  fd4d				   .L0297		;  player0:
   5981  fd4d
   5982  fd4d		       a2 00		      LDX	#<playerL0297_0
   5983  fd4f		       86 8a		      STX	player0pointerlo
   5984  fd51		       a9 fe		      LDA	#>playerL0297_0
   5985  fd53		       85 8b		      STA	player0pointerhi
   5986  fd55		       a9 07		      LDA	#7
   5987  fd57		       85 8e		      STA	player0height
   5988  fd59				   .L0298		;  goto __Pl_Frame_Done
   5989  fd59
   5990  fd59		       4c 3a f6 	      jmp	.__Pl_Frame_Done
   5991  fd5c
   5992  fd5c				   .__Pl01
   5993  fd5c							; __Pl01
   5994  fd5c
   5995  fd5c				   .L0299		;  player0:
   5996  fd5c
   5997  fd5c		       a2 08		      LDX	#<playerL0299_0
   5998  fd5e		       86 8a		      STX	player0pointerlo
   5999  fd60		       a9 fe		      LDA	#>playerL0299_0
   6000  fd62		       85 8b		      STA	player0pointerhi
   6001  fd64		       a9 07		      LDA	#7
   6002  fd66		       85 8e		      STA	player0height
   6003  fd68				   .L0300		;  goto __Pl_Frame_Done
   6004  fd68
   6005  fd68		       4c 3a f6 	      jmp	.__Pl_Frame_Done
   6006  fd6b
   6007  fd6b				   .__Pl02
   6008  fd6b							; __Pl02
   6009  fd6b
   6010  fd6b				   .L0301		;  player0:
   6011  fd6b
   6012  fd6b		       a2 10		      LDX	#<playerL0301_0
   6013  fd6d		       86 8a		      STX	player0pointerlo
   6014  fd6f		       a9 fe		      LDA	#>playerL0301_0
   6015  fd71		       85 8b		      STA	player0pointerhi
   6016  fd73		       a9 07		      LDA	#7
   6017  fd75		       85 8e		      STA	player0height
   6018  fd77				   .L0302		;  goto __Pl_Frame_Done
   6019  fd77
   6020  fd77		       4c 3a f6 	      jmp	.__Pl_Frame_Done
   6021  fd7a
   6022  fd7a				   .
   6023  fd7a							;
   6024  fd7a
   6025  fd7a				   .__Mn00
   6026  fd7a							; __Mn00
   6027  fd7a
   6028  fd7a				   .L0303		;  player1:
   6029  fd7a
   6030  fd7a		       a2 18		      LDX	#<playerL0303_1
   6031  fd7c		       86 8c		      STX	player1pointerlo
   6032  fd7e		       a9 fe		      LDA	#>playerL0303_1
   6033  fd80		       85 8d		      STA	player1pointerhi
   6034  fd82		       a9 07		      LDA	#7
   6035  fd84		       85 8f		      STA	player1height
   6036  fd86				   .L0304		;  goto __Mn_Frame_Done
   6037  fd86
   6038  fd86		       4c 5f f6 	      jmp	.__Mn_Frame_Done
   6039  fd89
   6040  fd89				   .__Mn01
   6041  fd89							; __Mn01
   6042  fd89
   6043  fd89				   .L0305		;  player1:
   6044  fd89
   6045  fd89		       a2 20		      LDX	#<playerL0305_1
   6046  fd8b		       86 8c		      STX	player1pointerlo
   6047  fd8d		       a9 fe		      LDA	#>playerL0305_1
   6048  fd8f		       85 8d		      STA	player1pointerhi
   6049  fd91		       a9 07		      LDA	#7
   6050  fd93		       85 8f		      STA	player1height
   6051  fd95				   .L0306		;  goto __Mn_Frame_Done
   6052  fd95
   6053  fd95		       4c 5f f6 	      jmp	.__Mn_Frame_Done
   6054  fd98
   6055  fd98				   .__Mn02
   6056  fd98							; __Mn02
   6057  fd98
   6058  fd98				   .L0307		;  player1:
   6059  fd98
   6060  fd98		       a2 28		      LDX	#<playerL0307_1
   6061  fd9a		       86 8c		      STX	player1pointerlo
   6062  fd9c		       a9 fe		      LDA	#>playerL0307_1
   6063  fd9e		       85 8d		      STA	player1pointerhi
   6064  fda0		       a9 07		      LDA	#7
   6065  fda2		       85 8f		      STA	player1height
   6066  fda4				   .L0308		;  goto __Mn_Frame_Done
   6067  fda4
   6068  fda4		       4c 5f f6 	      jmp	.__Mn_Frame_Done
   6069  fda7
   6070  fda7				   .
   6071  fda7							;
   6072  fda7
   6073  fda7				   .L0309		;  data _SD_Gem_Coll
   6074  fda7
   6075  fda7		       4c b3 fd 	      JMP	.skipL0309
   6076  fdaa				   _SD_Gem_Coll
   6077  fdaa		       08 04 07 	      .byte.b	8,4,7
   6078  fdad
   6079  fdad		       04		      .byte.b	4
   6080  fdae
   6081  fdae		       08 04 06 	      .byte.b	8,4,6
   6082  fdb1
   6083  fdb1		       08		      .byte.b	8
   6084  fdb2
   6085  fdb2		       ff		      .byte.b	255
   6086  fdb3
   6087  fdb3				   .skipL0309
   6088  fdb3				   .L0310		;  data _SD_Gem_Drop
   6089  fdb3
   6090  fdb3		       4c c3 fd 	      JMP	.skipL0310
   6091  fdb6				   _SD_Gem_Drop
   6092  fdb6		       08 04 06 	      .byte.b	8,4,6
   6093  fdb9
   6094  fdb9		       04		      .byte.b	4
   6095  fdba
   6096  fdba		       08 04 07 	      .byte.b	8,4,7
   6097  fdbd
   6098  fdbd		       08		      .byte.b	8
   6099  fdbe
   6100  fdbe		       08 04 04 	      .byte.b	8,4,4
   6101  fdc1
   6102  fdc1		       04		      .byte.b	4
   6103  fdc2
   6104  fdc2		       ff		      .byte.b	255
   6105  fdc3
   6106  fdc3				   .skipL0310
   6107  fdc3				   .L0311		;  data _SD_Mino_Roar
   6108  fdc3
   6109  fdc3		       4c db fd 	      JMP	.skipL0311
   6110  fdc6				   _SD_Mino_Roar
   6111  fdc6		       08 0e 05 	      .byte.b	8,14,5
   6112  fdc9
   6113  fdc9		       0c		      .byte.b	12
   6114  fdca
   6115  fdca		       08 0e 04 	      .byte.b	8,14,4
   6116  fdcd
   6117  fdcd		       08		      .byte.b	8
   6118  fdce
   6119  fdce		       08 0e 06 	      .byte.b	8,14,6
   6120  fdd1
   6121  fdd1		       04		      .byte.b	4
   6122  fdd2
   6123  fdd2		       08 0e 03 	      .byte.b	8,14,3
   6124  fdd5
   6125  fdd5		       0c		      .byte.b	12
   6126  fdd6
   6127  fdd6		       08 0e 04 	      .byte.b	8,14,4
   6128  fdd9
   6129  fdd9		       08		      .byte.b	8
   6130  fdda
   6131  fdda		       ff		      .byte.b	255
   6132  fddb
   6133  fddb				   .skipL0311
   6134  fddb				  -	      if	(<*) > (<(*+7))
   6135  fddb				  -	      repeat	($100-<*)
   6136  fddb				  -	      .byte	0
   6137  fddb				  -	      repend
   6138  fddb					      endif
   6139  fddb				   playerL057_0
   6140  fddb		       66		      .byte.b	%01100110
   6141  fddc		       24		      .byte.b	%00100100
   6142  fddd		       99		      .byte.b	%10011001
   6143  fdde		       bd		      .byte.b	%10111101
   6144  fddf		       7e		      .byte.b	%01111110
   6145  fde0		       18		      .byte.b	%00011000
   6146  fde1		       3c		      .byte.b	%00111100
   6147  fde2		       24		      .byte.b	%00100100
   6148  fde3				  -	      if	(<*) > (<(*+7))
   6149  fde3				  -	      repeat	($100-<*)
   6150  fde3				  -	      .byte	0
   6151  fde3				  -	      repend
   6152  fde3					      endif
   6153  fde3				   playerL058_1
   6154  fde3		       ff		      .byte.b	%11111111
   6155  fde4		       00		      .byte.b	%00000000
   6156  fde5		       ff		      .byte.b	%11111111
   6157  fde6		       81		      .byte.b	%10000001
   6158  fde7		       7e		      .byte.b	%01111110
   6159  fde8		       c3		      .byte.b	%11000011
   6160  fde9		       3c		      .byte.b	%00111100
   6161  fdea		       e7		      .byte.b	%11100111
   6162  fdeb				  -	      if	(<*) > (<(*+7))
   6163  fdeb				  -	      repeat	($100-<*)
   6164  fdeb				  -	      .byte	0
   6165  fdeb				  -	      repend
   6166  fdeb					      endif
   6167  fdeb				   playerL0100_0
   6168  fdeb		       66		      .byte.b	%01100110
   6169  fdec		       24		      .byte.b	%00100100
   6170  fded		       24		      .byte.b	%00100100
   6171  fdee		       5a		      .byte.b	%01011010
   6172  fdef		       5a		      .byte.b	%01011010
   6173  fdf0		       3c		      .byte.b	%00111100
   6174  fdf1		       18		      .byte.b	%00011000
   6175  fdf2		       18		      .byte.b	%00011000
   6176  fdf3				  -	      if	(<*) > (<(*+7))
   6177  fdf3				  -	      repeat	($100-<*)
   6178  fdf3				  -	      .byte	0
   6179  fdf3				  -	      repend
   6180  fdf3					      endif
   6181  fdf3				   playerL0103_1
   6182  fdf3		       66		      .byte.b	%01100110
   6183  fdf4		       24		      .byte.b	%00100100
   6184  fdf5		       99		      .byte.b	%10011001
   6185  fdf6		       bd		      .byte.b	%10111101
   6186  fdf7		       7e		      .byte.b	%01111110
   6187  fdf8		       18		      .byte.b	%00011000
   6188  fdf9		       3c		      .byte.b	%00111100
   6189  fdfa		       24		      .byte.b	%00100100
   6190  fdfb					      if	(<*) > (<(*+7))
   6191  fdfb					      repeat	($100-<*)
   6192  fdfb		       00		      .byte.b	0
   6191  fdfb					      repend
   6192  fdfc		       00		      .byte.b	0
   6191  fdfc					      repend
   6192  fdfd		       00		      .byte.b	0
   6191  fdfd					      repend
   6192  fdfe		       00		      .byte.b	0
   6191  fdfe					      repend
   6192  fdff		       00		      .byte.b	0
   6193  fe00					      repend
   6194  fe00					      endif
   6195  fe00				   playerL0297_0
   6196  fe00		       36		      .byte.b	%00110110
   6197  fe01		       24		      .byte.b	%00100100
   6198  fe02		       24		      .byte.b	%00100100
   6199  fe03		       5a		      .byte.b	%01011010
   6200  fe04		       5a		      .byte.b	%01011010
   6201  fe05		       3c		      .byte.b	%00111100
   6202  fe06		       18		      .byte.b	%00011000
   6203  fe07		       18		      .byte.b	%00011000
   6204  fe08				  -	      if	(<*) > (<(*+7))
   6205  fe08				  -	      repeat	($100-<*)
   6206  fe08				  -	      .byte	0
   6207  fe08				  -	      repend
   6208  fe08					      endif
   6209  fe08				   playerL0299_0
   6210  fe08		       30		      .byte.b	%00110000
   6211  fe09		       26		      .byte.b	%00100110
   6212  fe0a		       24		      .byte.b	%00100100
   6213  fe0b		       1a		      .byte.b	%00011010
   6214  fe0c		       5a		      .byte.b	%01011010
   6215  fe0d		       3c		      .byte.b	%00111100
   6216  fe0e		       18		      .byte.b	%00011000
   6217  fe0f		       18		      .byte.b	%00011000
   6218  fe10				  -	      if	(<*) > (<(*+7))
   6219  fe10				  -	      repeat	($100-<*)
   6220  fe10				  -	      .byte	0
   6221  fe10				  -	      repend
   6222  fe10					      endif
   6223  fe10				   playerL0301_0
   6224  fe10		       06		      .byte.b	%00000110
   6225  fe11		       34		      .byte.b	%00110100
   6226  fe12		       24		      .byte.b	%00100100
   6227  fe13		       58		      .byte.b	%01011000
   6228  fe14		       5a		      .byte.b	%01011010
   6229  fe15		       3c		      .byte.b	%00111100
   6230  fe16		       18		      .byte.b	%00011000
   6231  fe17		       18		      .byte.b	%00011000
   6232  fe18				  -	      if	(<*) > (<(*+7))
   6233  fe18				  -	      repeat	($100-<*)
   6234  fe18				  -	      .byte	0
   6235  fe18				  -	      repend
   6236  fe18					      endif
   6237  fe18				   playerL0303_1
   6238  fe18		       36		      .byte.b	%00110110
   6239  fe19		       24		      .byte.b	%00100100
   6240  fe1a		       99		      .byte.b	%10011001
   6241  fe1b		       bd		      .byte.b	%10111101
   6242  fe1c		       7e		      .byte.b	%01111110
   6243  fe1d		       18		      .byte.b	%00011000
   6244  fe1e		       3c		      .byte.b	%00111100
   6245  fe1f		       24		      .byte.b	%00100100
   6246  fe20				  -	      if	(<*) > (<(*+7))
   6247  fe20				  -	      repeat	($100-<*)
   6248  fe20				  -	      .byte	0
   6249  fe20				  -	      repend
   6250  fe20					      endif
   6251  fe20				   playerL0305_1
   6252  fe20		       06		      .byte.b	%00000110
   6253  fe21		       34		      .byte.b	%00110100
   6254  fe22		       19		      .byte.b	%00011001
   6255  fe23		       bd		      .byte.b	%10111101
   6256  fe24		       7e		      .byte.b	%01111110
   6257  fe25		       18		      .byte.b	%00011000
   6258  fe26		       3c		      .byte.b	%00111100
   6259  fe27		       24		      .byte.b	%00100100
   6260  fe28				  -	      if	(<*) > (<(*+7))
   6261  fe28				  -	      repeat	($100-<*)
   6262  fe28				  -	      .byte	0
   6263  fe28				  -	      repend
   6264  fe28					      endif
   6265  fe28				   playerL0307_1
   6266  fe28		       30		      .byte.b	%00110000
   6267  fe29		       26		      .byte.b	%00100110
   6268  fe2a		       98		      .byte.b	%10011000
   6269  fe2b		       bd		      .byte.b	%10111101
   6270  fe2c		       7e		      .byte.b	%01111110
   6271  fe2d		       18		      .byte.b	%00011000
   6272  fe2e		       3c		      .byte.b	%00111100
   6273  fe2f		       24		      .byte.b	%00100100
   6274  fe30					      if	ECHOFIRST
      364 bytes of ROM space left
   6275  fe30					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   6276  fe30					      endif
   6277  fe30		       00 01	   ECHOFIRST  =	1
   6278  fe30
   6279  fe30
   6280  fe30
   6281  fe30							; feel free to modify the score graphics - just keep each digit 8 high
   6282  fe30							; and keep the conditional compilation stuff intact
   6283  fe30				  -	      ifconst	ROM2k
   6284  fe30				  -	      ORG	$F7AC-8
   6285  fe30					      else
   6286  fe30				  -	      ifconst	bankswitch
   6287  fe30				  -	      if	bankswitch == 8
   6288  fe30				  -	      ORG	$2F94-bscode_length
   6289  fe30				  -	      RORG	$FF94-bscode_length
   6290  fe30				  -	      endif
   6291  fe30				  -	      if	bankswitch == 16
   6292  fe30				  -	      ORG	$4F94-bscode_length
   6293  fe30				  -	      RORG	$FF94-bscode_length
   6294  fe30				  -	      endif
   6295  fe30				  -	      if	bankswitch == 32
   6296  fe30				  -	      ORG	$8F94-bscode_length
   6297  fe30				  -	      RORG	$FF94-bscode_length
   6298  fe30				  -	      endif
   6299  fe30				  -	      if	bankswitch == 64
   6300  fe30				  -	      ORG	$10F80-bscode_length
   6301  fe30				  -	      RORG	$1FF80-bscode_length
   6302  fe30				  -	      endif
   6303  fe30					      else
   6304  ff9c					      ORG	$FF9C
   6305  ff9c					      endif
   6306  ff9c					      endif
   6307  ff9c
   6308  ff9c							; font equates
   6309  ff9c		       00 01	   .21stcentury =	1
   6310  ff9c		       00 02	   alarmclock =	2
   6311  ff9c		       00 03	   handwritten =	3
   6312  ff9c		       00 04	   interrupted =	4
   6313  ff9c		       00 05	   retroputer =	5
   6314  ff9c		       00 06	   whimsey    =	6
   6315  ff9c		       00 07	   tiny       =	7
   6316  ff9c
   6317  ff9c				   scoretable
   6318  ff9c
   6319  ff9c				  -	      ifconst	font
   6320  ff9c				  -	      if	font == .21stcentury
   6321  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   6322  ff9c				  -	      endif
   6323  ff9c				  -	      if	font == alarmclock
   6324  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   6325  ff9c				  -	      endif
   6326  ff9c				  -	      if	font == handwritten
   6327  ff9c				  -	      include	"score_graphics.asm.handwritten"
   6328  ff9c				  -	      endif
   6329  ff9c				  -	      if	font == interrupted
   6330  ff9c				  -	      include	"score_graphics.asm.interrupted"
   6331  ff9c				  -	      endif
   6332  ff9c				  -	      if	font == retroputer
   6333  ff9c				  -	      include	"score_graphics.asm.retroputer"
   6334  ff9c				  -	      endif
   6335  ff9c				  -	      if	font == whimsey
   6336  ff9c				  -	      include	"score_graphics.asm.whimsey"
   6337  ff9c				  -	      endif
   6338  ff9c				  -	      if	font == tiny
   6339  ff9c				  -	      include	"score_graphics.asm.tiny"
   6340  ff9c				  -	      endif
   6341  ff9c					      else		; default font
   6342  ff9c
   6343  ff9c		       3c		      .byte.b	%00111100
   6344  ff9d		       66		      .byte.b	%01100110
   6345  ff9e		       66		      .byte.b	%01100110
   6346  ff9f		       66		      .byte.b	%01100110
   6347  ffa0		       66		      .byte.b	%01100110
   6348  ffa1		       66		      .byte.b	%01100110
   6349  ffa2		       66		      .byte.b	%01100110
   6350  ffa3		       3c		      .byte.b	%00111100
   6351  ffa4
   6352  ffa4		       7e		      .byte.b	%01111110
   6353  ffa5		       18		      .byte.b	%00011000
   6354  ffa6		       18		      .byte.b	%00011000
   6355  ffa7		       18		      .byte.b	%00011000
   6356  ffa8		       18		      .byte.b	%00011000
   6357  ffa9		       38		      .byte.b	%00111000
   6358  ffaa		       18		      .byte.b	%00011000
   6359  ffab		       08		      .byte.b	%00001000
   6360  ffac
   6361  ffac		       7e		      .byte.b	%01111110
   6362  ffad		       60		      .byte.b	%01100000
   6363  ffae		       60		      .byte.b	%01100000
   6364  ffaf		       3c		      .byte.b	%00111100
   6365  ffb0		       06		      .byte.b	%00000110
   6366  ffb1		       06		      .byte.b	%00000110
   6367  ffb2		       46		      .byte.b	%01000110
   6368  ffb3		       3c		      .byte.b	%00111100
   6369  ffb4
   6370  ffb4		       3c		      .byte.b	%00111100
   6371  ffb5		       46		      .byte.b	%01000110
   6372  ffb6		       06		      .byte.b	%00000110
   6373  ffb7		       06		      .byte.b	%00000110
   6374  ffb8		       1c		      .byte.b	%00011100
   6375  ffb9		       06		      .byte.b	%00000110
   6376  ffba		       46		      .byte.b	%01000110
   6377  ffbb		       3c		      .byte.b	%00111100
   6378  ffbc
   6379  ffbc		       0c		      .byte.b	%00001100
   6380  ffbd		       0c		      .byte.b	%00001100
   6381  ffbe		       7e		      .byte.b	%01111110
   6382  ffbf		       4c		      .byte.b	%01001100
   6383  ffc0		       4c		      .byte.b	%01001100
   6384  ffc1		       2c		      .byte.b	%00101100
   6385  ffc2		       1c		      .byte.b	%00011100
   6386  ffc3		       0c		      .byte.b	%00001100
   6387  ffc4
   6388  ffc4		       3c		      .byte.b	%00111100
   6389  ffc5		       46		      .byte.b	%01000110
   6390  ffc6		       06		      .byte.b	%00000110
   6391  ffc7		       06		      .byte.b	%00000110
   6392  ffc8		       3c		      .byte.b	%00111100
   6393  ffc9		       60		      .byte.b	%01100000
   6394  ffca		       60		      .byte.b	%01100000
   6395  ffcb		       7e		      .byte.b	%01111110
   6396  ffcc
   6397  ffcc		       3c		      .byte.b	%00111100
   6398  ffcd		       66		      .byte.b	%01100110
   6399  ffce		       66		      .byte.b	%01100110
   6400  ffcf		       66		      .byte.b	%01100110
   6401  ffd0		       7c		      .byte.b	%01111100
   6402  ffd1		       60		      .byte.b	%01100000
   6403  ffd2		       62		      .byte.b	%01100010
   6404  ffd3		       3c		      .byte.b	%00111100
   6405  ffd4
   6406  ffd4		       30		      .byte.b	%00110000
   6407  ffd5		       30		      .byte.b	%00110000
   6408  ffd6		       30		      .byte.b	%00110000
   6409  ffd7		       18		      .byte.b	%00011000
   6410  ffd8		       0c		      .byte.b	%00001100
   6411  ffd9		       06		      .byte.b	%00000110
   6412  ffda		       42		      .byte.b	%01000010
   6413  ffdb		       3e		      .byte.b	%00111110
   6414  ffdc
   6415  ffdc		       3c		      .byte.b	%00111100
   6416  ffdd		       66		      .byte.b	%01100110
   6417  ffde		       66		      .byte.b	%01100110
   6418  ffdf		       66		      .byte.b	%01100110
   6419  ffe0		       3c		      .byte.b	%00111100
   6420  ffe1		       66		      .byte.b	%01100110
   6421  ffe2		       66		      .byte.b	%01100110
   6422  ffe3		       3c		      .byte.b	%00111100
   6423  ffe4
   6424  ffe4		       3c		      .byte.b	%00111100
   6425  ffe5		       46		      .byte.b	%01000110
   6426  ffe6		       06		      .byte.b	%00000110
   6427  ffe7		       3e		      .byte.b	%00111110
   6428  ffe8		       66		      .byte.b	%01100110
   6429  ffe9		       66		      .byte.b	%01100110
   6430  ffea		       66		      .byte.b	%01100110
   6431  ffeb		       3c		      .byte.b	%00111100
   6432  ffec
   6433  ffec					      ifnconst	DPC_kernel_options
   6434  ffec
   6435  ffec		       00		      .byte.b	%00000000
   6436  ffed		       00		      .byte.b	%00000000
   6437  ffee		       00		      .byte.b	%00000000
   6438  ffef		       00		      .byte.b	%00000000
   6439  fff0		       00		      .byte.b	%00000000
   6440  fff1		       00		      .byte.b	%00000000
   6441  fff2		       00		      .byte.b	%00000000
   6442  fff3		       00		      .byte.b	%00000000
   6443  fff4
   6444  fff4					      endif
   6445  fff4
   6446  fff4					      endif
   6447  fff4
   6448  fff4				  -	      ifconst	ROM2k
   6449  fff4				  -	      ORG	$F7FC
   6450  fff4					      else
   6451  fff4				  -	      ifconst	bankswitch
   6452  fff4				  -	      if	bankswitch == 8
   6453  fff4				  -	      ORG	$2FF4-bscode_length
   6454  fff4				  -	      RORG	$FFF4-bscode_length
   6455  fff4				  -	      endif
   6456  fff4				  -	      if	bankswitch == 16
   6457  fff4				  -	      ORG	$4FF4-bscode_length
   6458  fff4				  -	      RORG	$FFF4-bscode_length
   6459  fff4				  -	      endif
   6460  fff4				  -	      if	bankswitch == 32
   6461  fff4				  -	      ORG	$8FF4-bscode_length
   6462  fff4				  -	      RORG	$FFF4-bscode_length
   6463  fff4				  -	      endif
   6464  fff4				  -	      if	bankswitch == 64
   6465  fff4				  -	      ORG	$10FE0-bscode_length
   6466  fff4				  -	      RORG	$1FFE0-bscode_length
   6467  fff4				  -	      endif
   6468  fff4					      else
   6469  fffc					      ORG	$FFFC
   6470  fffc					      endif
   6471  fffc					      endif
   6472  fffc				  -	      ifconst	bankswitch
   6473  fffc				  -	      if	bankswitch == 8
   6474  fffc				  -	      ORG	$2FFC
   6475  fffc				  -	      RORG	$FFFC
   6476  fffc				  -	      endif
   6477  fffc				  -	      if	bankswitch == 16
   6478  fffc				  -	      ORG	$4FFC
   6479  fffc				  -	      RORG	$FFFC
   6480  fffc				  -	      endif
   6481  fffc				  -	      if	bankswitch == 32
   6482  fffc				  -	      ORG	$8FFC
   6483  fffc				  -	      RORG	$FFFC
   6484  fffc				  -	      endif
   6485  fffc				  -	      if	bankswitch == 64
   6486  fffc				  -	      ORG	$10FF0
   6487  fffc				  -	      RORG	$1FFF0
   6488  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6489  fffc				  -	      ORG	$10FF8
   6490  fffc				  -	      RORG	$1FFF8
   6491  fffc				  -	      ifconst	superchip
   6492  fffc				  -	      .byte	"E","F","S","C"
   6493  fffc				  -	      else
   6494  fffc				  -	      .byte	"E","F","E","F"
   6495  fffc				  -	      endif
   6496  fffc				  -	      ORG	$10FFC
   6497  fffc				  -	      RORG	$1FFFC
   6498  fffc				  -	      endif
   6499  fffc					      else
   6500  fffc				  -	      ifconst	ROM2k
   6501  fffc				  -	      ORG	$F7FC
   6502  fffc					      else
   6503  fffc					      ORG	$FFFC
   6504  fffc					      endif
   6505  fffc					      endif
   6506  fffc		       00 f0		      .word.w	start
   6507  fffe		       00 f0		      .word.w	start
