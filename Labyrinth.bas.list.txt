------- FILE Labyrinth.bas.asm LEVEL 1 PASS 3
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE Labyrinth.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE Labyrinth.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 15	    _SD_Mino_Roar_length =	.skipL0299-_SD_Mino_Roar
      4  10000 ????
      5  10000 ????		00 0d	    _SD_Gem_Drop_length =	.skipL0298-_SD_Gem_Drop
      6  10000 ????
      7  10000 ????		00 09	    _SD_Gem_Coll_length =	.skipL0297-_SD_Gem_Coll
      8  10000 ????
      9  10000 ????		00 e7	    _Chase_Speed =	t
     10  10000 ????
     11  10000 ????		00 95	    _sc3       =	score + 2
     12  10000 ????
     13  10000 ????		00 94	    _sc2       =	score + 1
     14  10000 ????
     15  10000 ????		00 93	    _sc1       =	score
     16  10000 ????
     17  10000 ????		00 99	    _P_Edge_Right =	153
     18  10000 ????
     19  10000 ????		00 01	    _P_Edge_Left =	1
     20  10000 ????
     21  10000 ????		00 58	    _P_Edge_Bottom =	88
     22  10000 ????
     23  10000 ????		00 09	    _P_Edge_Top =	9
     24  10000 ????
     25  10000 ????		00 ed	    rand16     =	z
     26  10000 ????
     27  10000 ????		00 e6	    _Ch0_Counter =	s
     28  10000 ????
     29  10000 ????		00 e5	    _Ch0_Duration =	r
     30  10000 ????
     31  10000 ????		00 e4	    _Ch0_Sound =	q
     32  10000 ????
     33  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     34  10000 ????
     35  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     36  10000 ????
     37  10000 ????		00 ec	    _BitOp_01  =	y
     38  10000 ????
     39  10000 ????		00 eb	    _Bit6_Game_Won =	x
     40  10000 ????
     41  10000 ????		00 eb	    _Bit5_Game_Over_Music_Played =	x
     42  10000 ????
     43  10000 ????		00 eb	    _Bit4_Game_Over =	x
     44  10000 ????
     45  10000 ????		00 eb	    _Bit3_New_Chase_Start =	x
     46  10000 ????
     47  10000 ????		00 eb	    _Bit2_Mino_Moving =	x
     48  10000 ????
     49  10000 ????		00 eb	    _Bit1_Player_Moving =	x
     50  10000 ????
     51  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     52  10000 ????
     53  10000 ????		00 e0	    _Level     =	m
     54  10000 ????
     55  10000 ????		00 d5	    _Frame_Counter =	b
     56  10000 ????
     57  10000 ????		00 d4	    _Master_Counter =	a
     58  10000 ????
     59  10000 ????		00 da	    _Bit7_P1_Dir_Right =	g
     60  10000 ????
     61  10000 ????		00 da	    _Bit6_P1_Dir_Left =	g
     62  10000 ????
     63  10000 ????		00 da	    _Bit5_P1_Dir_Down =	g
     64  10000 ????
     65  10000 ????		00 da	    _Bit4_P1_Dir_Up =	g
     66  10000 ????
     67  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     68  10000 ????
     69  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     74  10000 ????
     75  10000 ????		00 da	    _BitOp_P0_P1_Dir =	g
     76  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE Labyrinth.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 15	    _SD_Mino_Roar_length =	.skipL0299-_SD_Mino_Roar
      4  10000 ????
      5  10000 ????		00 0d	    _SD_Gem_Drop_length =	.skipL0298-_SD_Gem_Drop
      6  10000 ????
      7  10000 ????		00 09	    _SD_Gem_Coll_length =	.skipL0297-_SD_Gem_Coll
      8  10000 ????
      9  10000 ????		00 e7	    _Chase_Speed =	t
     10  10000 ????
     11  10000 ????		00 95	    _sc3       =	score + 2
     12  10000 ????
     13  10000 ????		00 94	    _sc2       =	score + 1
     14  10000 ????
     15  10000 ????		00 93	    _sc1       =	score
     16  10000 ????
     17  10000 ????		00 99	    _P_Edge_Right =	153
     18  10000 ????
     19  10000 ????		00 01	    _P_Edge_Left =	1
     20  10000 ????
     21  10000 ????		00 58	    _P_Edge_Bottom =	88
     22  10000 ????
     23  10000 ????		00 09	    _P_Edge_Top =	9
     24  10000 ????
     25  10000 ????		00 ed	    rand16     =	z
     26  10000 ????
     27  10000 ????		00 e6	    _Ch0_Counter =	s
     28  10000 ????
     29  10000 ????		00 e5	    _Ch0_Duration =	r
     30  10000 ????
     31  10000 ????		00 e4	    _Ch0_Sound =	q
     32  10000 ????
     33  10000 ????		00 ec	    _Bit1_Toggle_Screen =	y
     34  10000 ????
     35  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     36  10000 ????
     37  10000 ????		00 ec	    _BitOp_01  =	y
     38  10000 ????
     39  10000 ????		00 eb	    _Bit6_Game_Won =	x
     40  10000 ????
     41  10000 ????		00 eb	    _Bit5_Game_Over_Music_Played =	x
     42  10000 ????
     43  10000 ????		00 eb	    _Bit4_Game_Over =	x
     44  10000 ????
     45  10000 ????		00 eb	    _Bit3_New_Chase_Start =	x
     46  10000 ????
     47  10000 ????		00 eb	    _Bit2_Mino_Moving =	x
     48  10000 ????
     49  10000 ????		00 eb	    _Bit1_Player_Moving =	x
     50  10000 ????
     51  10000 ????		00 eb	    _Bit0_Carrying_Gem =	x
     52  10000 ????
     53  10000 ????		00 e0	    _Level     =	m
     54  10000 ????
     55  10000 ????		00 d5	    _Frame_Counter =	b
     56  10000 ????
     57  10000 ????		00 d4	    _Master_Counter =	a
     58  10000 ????
     59  10000 ????		00 da	    _Bit7_P1_Dir_Right =	g
     60  10000 ????
     61  10000 ????		00 da	    _Bit6_P1_Dir_Left =	g
     62  10000 ????
     63  10000 ????		00 da	    _Bit5_P1_Dir_Down =	g
     64  10000 ????
     65  10000 ????		00 da	    _Bit4_P1_Dir_Up =	g
     66  10000 ????
     67  10000 ????		00 da	    _Bit3_P0_Dir_Right =	g
     68  10000 ????
     69  10000 ????		00 da	    _Bit2_P0_Dir_Left =	g
     70  10000 ????
     71  10000 ????		00 da	    _Bit1_P0_Dir_Down =	g
     72  10000 ????
     73  10000 ????		00 da	    _Bit0_P0_Dir_Up =	g
     74  10000 ????
     75  10000 ????		00 da	    _BitOp_P0_P1_Dir =	g
     76  10000 ????
------- FILE Labyrinth.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 61 f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x 
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8 
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6					      ifconst	rand16
   1369  f3b6		       26 ed		      rol	rand16
   1370  f3b8					      endif
   1371  f3b8		       90 02		      bcc	noeor
   1372  f3ba		       49 b4		      eor	#$B4
   1373  f3bc				   noeor
   1374  f3bc		       85 a2		      sta	rand
   1375  f3be					      ifconst	rand16
   1376  f3be		       45 ed		      eor	rand16
   1377  f3c0					      endif
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1379  f3c1				   drawscreen
   1380  f3c1				  -	      ifconst	debugscore
   1381  f3c1				  -	      ldx	#14
   1382  f3c1				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3c1				  -
   1384  f3c1				  -	      ifconst	mincycles
   1385  f3c1				  -	      lda	mincycles
   1386  f3c1				  -	      cmp	INTIM
   1387  f3c1				  -	      lda	mincycles
   1388  f3c1				  -	      bcc	nochange
   1389  f3c1				  -	      lda	INTIM
   1390  f3c1				  -	      sta	mincycles
   1391  f3c1				  -nochange
   1392  f3c1				  -	      endif
   1393  f3c1				  -
   1394  f3c1				  -			; cmp #$2B
   1395  f3c1				  -			; bcs no_cycles_left
   1396  f3c1				  -	      bmi	cycles_left
   1397  f3c1				  -	      ldx	#64
   1398  f3c1				  -	      eor	#$ff	;make negative
   1399  f3c1				  -cycles_left
   1400  f3c1				  -	      stx	scorecolor
   1401  f3c1				  -	      and	#$7f	; clear sign bit
   1402  f3c1				  -	      tax
   1403  f3c1				  -	      lda	scorebcd,x
   1404  f3c1				  -	      sta	score+2
   1405  f3c1				  -	      lda	scorebcd1,x
   1406  f3c1				  -	      sta	score+1
   1407  f3c1				  -	      jmp	done_debugscore
   1408  f3c1				  -scorebcd
   1409  f3c1				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3c1				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3c1				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3c1				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3c1				  -scorebcd1
   1414  f3c1				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3c1				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3c1				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3c1				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3c1				  -done_debugscore
   1419  f3c1					      endif
   1420  f3c1
   1421  f3c1				  -	      ifconst	debugcycles
   1422  f3c1				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3c1				  -			; cmp #$2B
   1424  f3c1				  -			; BCC overscan
   1425  f3c1				  -	      bmi	overscan
   1426  f3c1				  -	      sta	COLUBK
   1427  f3c1				  -	      bcs	doneoverscan
   1428  f3c1					      endif
   1429  f3c1
   1430  f3c1				   overscan
   1431  f3c1				  -	      ifconst	interlaced
   1432  f3c1				  -	      PHP
   1433  f3c1				  -	      PLA
   1434  f3c1				  -	      EOR	#4	; flip interrupt bit
   1435  f3c1				  -	      PHA
   1436  f3c1				  -	      PLP
   1437  f3c1				  -	      AND	#4	; isolate the interrupt bit
   1438  f3c1				  -	      TAX		; save it for later
   1439  f3c1					      endif
   1440  f3c1
   1441  f3c1				   overscanloop
   1442  f3c1		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c4		       30 fb		      bmi	overscanloop
   1444  f3c6				   doneoverscan
   1445  f3c6
   1446  f3c6							;do VSYNC
   1447  f3c6
   1448  f3c6				  -	      ifconst	interlaced
   1449  f3c6				  -	      CPX	#4
   1450  f3c6				  -	      BNE	oddframevsync
   1451  f3c6					      endif
   1452  f3c6
   1453  f3c6		       a9 02		      lda	#2
   1454  f3c8		       85 02		      sta	WSYNC
   1455  f3ca		       85 00		      sta	VSYNC
   1456  f3cc		       85 02		      STA	WSYNC
   1457  f3ce		       85 02		      STA	WSYNC
   1458  f3d0		       4a		      lsr
   1459  f3d1		       85 02		      STA	WSYNC
   1460  f3d3		       85 00		      STA	VSYNC
   1461  f3d5		       85 01		      sta	VBLANK
   1462  f3d7					      ifnconst	overscan_time
   1463  f3d7		       a9 a5		      lda	#37+128
   1464  f3d9				  -	      else
   1465  f3d9				  -	      lda	#overscan_time+128
   1466  f3d9					      endif
   1467  f3d9		       8d 96 02 	      sta	TIM64T
   1468  f3dc
   1469  f3dc				  -	      ifconst	interlaced
   1470  f3dc				  -	      jmp	postsync
   1471  f3dc				  -
   1472  f3dc				  -oddframevsync
   1473  f3dc				  -	      sta	WSYNC
   1474  f3dc				  -
   1475  f3dc				  -	      LDA	($80,X)	; 11 waste
   1476  f3dc				  -	      LDA	($80,X)	; 11 waste
   1477  f3dc				  -	      LDA	($80,X)	; 11 waste
   1478  f3dc				  -
   1479  f3dc				  -	      lda	#2
   1480  f3dc				  -	      sta	VSYNC
   1481  f3dc				  -	      sta	WSYNC
   1482  f3dc				  -	      sta	WSYNC
   1483  f3dc				  -	      sta	WSYNC
   1484  f3dc				  -
   1485  f3dc				  -	      LDA	($80,X)	; 11 waste
   1486  f3dc				  -	      LDA	($80,X)	; 11 waste
   1487  f3dc				  -	      LDA	($80,X)	; 11 waste
   1488  f3dc				  -
   1489  f3dc				  -	      lda	#0
   1490  f3dc				  -	      sta	VSYNC
   1491  f3dc				  -	      sta	VBLANK
   1492  f3dc				  -	      ifnconst	overscan_time
   1493  f3dc				  -	      lda	#37+128
   1494  f3dc				  -	      else
   1495  f3dc				  -	      lda	#overscan_time+128
   1496  f3dc				  -	      endif
   1497  f3dc				  -	      sta	TIM64T
   1498  f3dc				  -
   1499  f3dc				  -postsync
   1500  f3dc					      endif
   1501  f3dc
   1502  f3dc				  -	      ifconst	legacy
   1503  f3dc				  -	      if	legacy < 100
   1504  f3dc				  -	      ldx	#4
   1505  f3dc				  -adjustloop
   1506  f3dc				  -	      lda	player0x,x
   1507  f3dc				  -	      sec
   1508  f3dc				  -	      sbc	#14	;?
   1509  f3dc				  -	      sta	player0x,x
   1510  f3dc				  -	      dex
   1511  f3dc				  -	      bpl	adjustloop
   1512  f3dc				  -	      endif
   1513  f3dc					      endif
   1514  f3dc				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3dc				  -	      repeat	($fa-(<*))
   1516  f3dc				  -	      nop
   1517  f3dc				  -	      repend
   1518  f3dc					      endif
   1519  f3dc		       85 02		      sta	WSYNC
   1520  f3de		       a2 04		      ldx	#4
      0  f3e0					      SLEEP	3
      1  f3e0				   .CYCLES    SET	3
      2  f3e0
      3  f3e0				  -	      IF	.CYCLES < 2
      4  f3e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e0				  -	      ERR
      6  f3e0					      ENDIF
      7  f3e0
      8  f3e0					      IF	.CYCLES & 1
      9  f3e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e0		       04 00		      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2					      ENDIF
     14  f3e2				   .CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2				  -	      REPEAT	.CYCLES / 2
     18  f3e2				  -	      nop
     19  f3e2					      REPEND
   1522  f3e2				   HorPosLoop		; 5
   1523  f3e2		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e4		       38		      sec		;+2 11
   1525  f3e5				   DivideLoop
   1526  f3e5		       e9 0f		      sbc	#15
   1527  f3e7		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e9		       95 9c		      sta	temp1,X	;+4 19
   1529  f3eb		       95 10		      sta	RESP0,X	;+4 23
   1530  f3ed		       85 02		      sta	WSYNC
   1531  f3ef		       ca		      dex
   1532  f3f0		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3f2							; 4
   1534  f3f2
   1535  f3f2		       a2 04		      ldx	#4
   1536  f3f4		       b4 9c		      ldy	temp1,X
   1537  f3f6		       b9 52 f3 	      lda	repostable-256,Y
   1538  f3f9		       95 20		      sta	HMP0,X	;+14 18
   1539  f3fb
   1540  f3fb		       ca		      dex
   1541  f3fc		       b4 9c		      ldy	temp1,X
   1542  f3fe		       b9 52 f3 	      lda	repostable-256,Y
   1543  f401		       95 20		      sta	HMP0,X	;+14 32
   1544  f403
   1545  f403		       ca		      dex
   1546  f404		       b4 9c		      ldy	temp1,X
   1547  f406		       b9 52 f3 	      lda	repostable-256,Y
   1548  f409		       95 20		      sta	HMP0,X	;+14 46
   1549  f40b
   1550  f40b		       ca		      dex
   1551  f40c		       b4 9c		      ldy	temp1,X
   1552  f40e		       b9 52 f3 	      lda	repostable-256,Y
   1553  f411		       95 20		      sta	HMP0,X	;+14 60
   1554  f413
   1555  f413		       ca		      dex
   1556  f414		       b4 9c		      ldy	temp1,X
   1557  f416		       b9 52 f3 	      lda	repostable-256,Y
   1558  f419		       95 20		      sta	HMP0,X	;+14 74
   1559  f41b
   1560  f41b		       85 02		      sta	WSYNC
   1561  f41d
   1562  f41d		       85 2a		      sta	HMOVE	;+3 3
   1563  f41f
   1564  f41f
   1565  f41f				  -	      ifconst	legacy
   1566  f41f				  -	      if	legacy < 100
   1567  f41f				  -	      ldx	#4
   1568  f41f				  -adjustloop2
   1569  f41f				  -	      lda	player0x,x
   1570  f41f				  -	      clc
   1571  f41f				  -	      adc	#14	;?
   1572  f41f				  -	      sta	player0x,x
   1573  f41f				  -	      dex
   1574  f41f				  -	      bpl	adjustloop2
   1575  f41f				  -	      endif
   1576  f41f					      endif
   1577  f41f
   1578  f41f
   1579  f41f
   1580  f41f
   1581  f41f							;set score pointers
   1582  f41f		       a7 95		      lax	score+2
   1583  f421		       20 52 f4 	      jsr	scorepointerset
   1584  f424		       84 9b		      sty	scorepointers+5
   1585  f426		       86 98		      stx	scorepointers+2
   1586  f428		       a7 94		      lax	score+1
   1587  f42a		       20 52 f4 	      jsr	scorepointerset
   1588  f42d		       84 9a		      sty	scorepointers+4
   1589  f42f		       86 97		      stx	scorepointers+1
   1590  f431		       a7 93		      lax	score
   1591  f433		       20 52 f4 	      jsr	scorepointerset
   1592  f436		       84 99		      sty	scorepointers+3
   1593  f438		       86 96		      stx	scorepointers
   1594  f43a
   1595  f43a				   vblk
   1596  f43a							; run possible vblank bB code
   1597  f43a				  -	      ifconst	vblank_bB_code
   1598  f43a				  -	      jsr	vblank_bB_code
   1599  f43a					      endif
   1600  f43a				   vblk2
   1601  f43a		       ad 84 02 	      LDA	INTIM
   1602  f43d		       30 fb		      bmi	vblk2
   1603  f43f		       4c 34 f0 	      jmp	kernel
   1604  f442
   1605  f442
   1606  f442		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f44b		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f452				   repostable
   1609  f452
   1610  f452				   scorepointerset
   1611  f452		       29 0f		      and	#$0F
   1612  f454		       0a		      asl
   1613  f455		       0a		      asl
   1614  f456		       0a		      asl
   1615  f457		       69 9c		      adc	#<scoretable
   1616  f459		       a8		      tay
   1617  f45a		       8a		      txa
   1618  f45b							; and #$F0
   1619  f45b							; lsr
   1620  f45b		       4b f0		      asr	#$F0
   1621  f45d		       69 9c		      adc	#<scoretable
   1622  f45f		       aa		      tax
   1623  f460		       60		      rts
   1624  f461				   game
   1625  f461				   .
   1626  f461							;
   1627  f461
   1628  f461				   .
   1629  f461							;
   1630  f461
   1631  f461				   .
   1632  f461							;
   1633  f461
   1634  f461				   .
   1635  f461							;
   1636  f461
   1637  f461				   .
   1638  f461							;
   1639  f461
   1640  f461				   .
   1641  f461							;
   1642  f461
   1643  f461				   .
   1644  f461							;
   1645  f461
   1646  f461				   .
   1647  f461							;
   1648  f461
   1649  f461				   .
   1650  f461							;
   1651  f461
   1652  f461				   .
   1653  f461							;
   1654  f461
   1655  f461				   .
   1656  f461							;
   1657  f461
   1658  f461				   .
   1659  f461							;
   1660  f461
   1661  f461				   .
   1662  f461							;
   1663  f461
   1664  f461				   .
   1665  f461							;
   1666  f461
   1667  f461				   .
   1668  f461							;
   1669  f461
   1670  f461				   .
   1671  f461							;
   1672  f461
   1673  f461				   .
   1674  f461							;
   1675  f461
   1676  f461				   .
   1677  f461							;
   1678  f461
   1679  f461				   .
   1680  f461							;
   1681  f461
   1682  f461				   .
   1683  f461							;
   1684  f461
   1685  f461				   .
   1686  f461							;
   1687  f461
   1688  f461				   .
   1689  f461							;
   1690  f461
   1691  f461				   .
   1692  f461							;
   1693  f461
   1694  f461				   .
   1695  f461							;
   1696  f461
   1697  f461				   .
   1698  f461							;
   1699  f461
   1700  f461				   .
   1701  f461							;
   1702  f461
   1703  f461				   .L00 		;  set smartbranching on
   1704  f461
   1705  f461				   .
   1706  f461							;
   1707  f461
   1708  f461				   .
   1709  f461							;
   1710  f461
   1711  f461				   .
   1712  f461							;
   1713  f461
   1714  f461				   .
   1715  f461							;
   1716  f461
   1717  f461				   .
   1718  f461							;
   1719  f461
   1720  f461				   .
   1721  f461							;
   1722  f461
   1723  f461				   .
   1724  f461							;
   1725  f461
   1726  f461				   .
   1727  f461							;
   1728  f461
   1729  f461				   .
   1730  f461							;
   1731  f461
   1732  f461				   .
   1733  f461							;
   1734  f461
   1735  f461				   .
   1736  f461							;
   1737  f461
   1738  f461				   .
   1739  f461							;
   1740  f461
   1741  f461				   .
   1742  f461							;
   1743  f461
   1744  f461				   .
   1745  f461							;
   1746  f461
   1747  f461				   .
   1748  f461							;
   1749  f461
   1750  f461				   .
   1751  f461							;
   1752  f461
   1753  f461				   .
   1754  f461							;
   1755  f461
   1756  f461				   .
   1757  f461							;
   1758  f461
   1759  f461				   .
   1760  f461							;
   1761  f461
   1762  f461				   .
   1763  f461							;
   1764  f461
   1765  f461				   .
   1766  f461							;
   1767  f461
   1768  f461				   .
   1769  f461							;
   1770  f461
   1771  f461				   .
   1772  f461							;
   1773  f461
   1774  f461				   .
   1775  f461							;
   1776  f461
   1777  f461				   .
   1778  f461							;
   1779  f461
   1780  f461				   .
   1781  f461							;
   1782  f461
   1783  f461				   .
   1784  f461							;
   1785  f461
   1786  f461				   .L01 		;  dim _BitOp_P0_P1_Dir  =  g
   1787  f461
   1788  f461				   .L02 		;  dim _Bit0_P0_Dir_Up  =  g
   1789  f461
   1790  f461				   .L03 		;  dim _Bit1_P0_Dir_Down  =  g
   1791  f461
   1792  f461				   .L04 		;  dim _Bit2_P0_Dir_Left  =  g
   1793  f461
   1794  f461				   .L05 		;  dim _Bit3_P0_Dir_Right  =  g
   1795  f461
   1796  f461				   .L06 		;  dim _Bit4_P1_Dir_Up  =  g
   1797  f461
   1798  f461				   .L07 		;  dim _Bit5_P1_Dir_Down  =  g
   1799  f461
   1800  f461				   .L08 		;  dim _Bit6_P1_Dir_Left  =  g
   1801  f461
   1802  f461				   .L09 		;  dim _Bit7_P1_Dir_Right  =  g
   1803  f461
   1804  f461				   .
   1805  f461							;
   1806  f461
   1807  f461				   .L010		;  dim _Master_Counter  =  a
   1808  f461
   1809  f461				   .L011		;  dim _Frame_Counter	=  b
   1810  f461
   1811  f461				   .
   1812  f461							;
   1813  f461
   1814  f461				   .L012		;  dim _Level	=  m
   1815  f461
   1816  f461				   .
   1817  f461							;
   1818  f461
   1819  f461				   .
   1820  f461							;
   1821  f461
   1822  f461				   .
   1823  f461							;
   1824  f461
   1825  f461				   .L013		;  dim _Bit0_Carrying_Gem  =  x
   1826  f461
   1827  f461				   .L014		;  dim _Bit1_Player_Moving  =	x
   1828  f461
   1829  f461				   .L015		;  dim _Bit2_Mino_Moving  =  x
   1830  f461
   1831  f461				   .L016		;  dim _Bit3_New_Chase_Start  =  x
   1832  f461
   1833  f461				   .L017		;  dim _Bit4_Game_Over  =  x
   1834  f461
   1835  f461				   .L018		;  dim _Bit5_Game_Over_Music_Played  =  x
   1836  f461
   1837  f461				   .L019		;  dim _Bit6_Game_Won	=  x
   1838  f461
   1839  f461				   .
   1840  f461							;
   1841  f461
   1842  f461				   .
   1843  f461							;
   1844  f461
   1845  f461				   .
   1846  f461							;
   1847  f461
   1848  f461				   .
   1849  f461							;
   1850  f461
   1851  f461				   .L020		;  dim _BitOp_01  =  y
   1852  f461
   1853  f461				   .L021		;  dim _Bit0_Reset_Restrainer	=  y
   1854  f461
   1855  f461				   .L022		;  dim _Bit1_Toggle_Screen  =	y
   1856  f461
   1857  f461				   .
   1858  f461							;
   1859  f461
   1860  f461				   .
   1861  f461							;
   1862  f461
   1863  f461				   .
   1864  f461							;
   1865  f461
   1866  f461				   .L023		;  dim _Ch0_Sound  =  q
   1867  f461
   1868  f461				   .L024		;  dim _Ch0_Duration  =  r
   1869  f461
   1870  f461				   .L025		;  dim _Ch0_Counter  =  s
   1871  f461
   1872  f461				   .
   1873  f461							;
   1874  f461
   1875  f461				   .
   1876  f461							;
   1877  f461
   1878  f461				   .
   1879  f461							;
   1880  f461
   1881  f461				   .
   1882  f461							;
   1883  f461
   1884  f461				   .L026		;  dim rand16	=  z
   1885  f461
   1886  f461				   .
   1887  f461							;
   1888  f461
   1889  f461				   .
   1890  f461							;
   1891  f461
   1892  f461				   .
   1893  f461							;
   1894  f461
   1895  f461				   .
   1896  f461							;
   1897  f461
   1898  f461				   .
   1899  f461							;
   1900  f461
   1901  f461				   .
   1902  f461							;
   1903  f461
   1904  f461				   .
   1905  f461							;
   1906  f461
   1907  f461				   .L027		;  const _P_Edge_Top  =  9
   1908  f461
   1909  f461				   .L028		;  const _P_Edge_Bottom  =  88
   1910  f461
   1911  f461				   .L029		;  const _P_Edge_Left	=  1
   1912  f461
   1913  f461				   .L030		;  const _P_Edge_Right  =  153
   1914  f461
   1915  f461				   .
   1916  f461							;
   1917  f461
   1918  f461				   .
   1919  f461							;
   1920  f461
   1921  f461				   .
   1922  f461							;
   1923  f461
   1924  f461				   .
   1925  f461							;
   1926  f461
   1927  f461				   .
   1928  f461							;
   1929  f461
   1930  f461				   .
   1931  f461							;
   1932  f461
   1933  f461				   .
   1934  f461							;
   1935  f461
   1936  f461				   .__Start_Restart
   1937  f461							; __Start_Restart
   1938  f461
   1939  f461				   .
   1940  f461							;
   1941  f461
   1942  f461				   .
   1943  f461							;
   1944  f461
   1945  f461				   .
   1946  f461							;
   1947  f461
   1948  f461				   .
   1949  f461							;
   1950  f461
   1951  f461				   .
   1952  f461							;
   1953  f461
   1954  f461				   .L031		;  AUDV0  =  0  :  AUDV1  =  0
   1955  f461
   1956  f461		       a9 00		      LDA	#0
   1957  f463		       85 19		      STA	AUDV0
   1958  f465		       85 1a		      STA	AUDV1
   1959  f467				   .
   1960  f467							;
   1961  f467
   1962  f467				   .
   1963  f467							;
   1964  f467
   1965  f467				   .
   1966  f467							;
   1967  f467
   1968  f467				   .
   1969  f467							;
   1970  f467
   1971  f467				   .
   1972  f467							;
   1973  f467
   1974  f467				   .
   1975  f467							;
   1976  f467
   1977  f467				   .
   1978  f467							;
   1979  f467
   1980  f467				   .
   1981  f467							;
   1982  f467
   1983  f467				   .
   1984  f467							;
   1985  f467
   1986  f467				   .L032		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1987  f467
   1988  f467		       a9 00		      LDA	#0
   1989  f469		       85 d4		      STA	a
   1990  f46b		       85 d5		      STA	b
   1991  f46d		       85 d6		      STA	c
   1992  f46f		       85 d7		      STA	d
   1993  f471		       85 d8		      STA	e
   1994  f473		       85 d9		      STA	f
   1995  f475		       85 da		      STA	g
   1996  f477		       85 db		      STA	h
   1997  f479		       85 dc		      STA	i
   1998  f47b				   .L033		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1999  f47b
   2000  f47b		       a9 00		      LDA	#0
   2001  f47d		       85 dd		      STA	j
   2002  f47f		       85 de		      STA	k
   2003  f481		       85 df		      STA	l
   2004  f483		       85 e0		      STA	m
   2005  f485		       85 e1		      STA	n
   2006  f487		       85 e2		      STA	o
   2007  f489		       85 e3		      STA	p
   2008  f48b		       85 e4		      STA	q
   2009  f48d		       85 e5		      STA	r
   2010  f48f				   .L034		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0
   2011  f48f
   2012  f48f		       a9 00		      LDA	#0
   2013  f491		       85 e6		      STA	s
   2014  f493		       85 e7		      STA	t
   2015  f495		       85 e8		      STA	u
   2016  f497		       85 e9		      STA	v
   2017  f499		       85 ea		      STA	w
   2018  f49b		       85 eb		      STA	x
   2019  f49d				   .
   2020  f49d							;
   2021  f49d
   2022  f49d				   .
   2023  f49d							;
   2024  f49d
   2025  f49d				   .
   2026  f49d							;
   2027  f49d
   2028  f49d				   .
   2029  f49d							;
   2030  f49d
   2031  f49d				   .
   2032  f49d							;
   2033  f49d
   2034  f49d				   .
   2035  f49d							;
   2036  f49d
   2037  f49d				   .
   2038  f49d							;
   2039  f49d
   2040  f49d				   .
   2041  f49d							;
   2042  f49d
   2043  f49d				   .L035		;  _BitOp_01  =  _BitOp_01  &	%00010000
   2044  f49d
   2045  f49d		       a5 ec		      LDA	_BitOp_01
   2046  f49f		       29 10		      AND	#%00010000
   2047  f4a1		       85 ec		      STA	_BitOp_01
   2048  f4a3				   .
   2049  f4a3							;
   2050  f4a3
   2051  f4a3				   .
   2052  f4a3							;
   2053  f4a3
   2054  f4a3				   .
   2055  f4a3							;
   2056  f4a3
   2057  f4a3				   .L036		;  _Level  =  0
   2058  f4a3
   2059  f4a3		       a9 00		      LDA	#0
   2060  f4a5		       85 e0		      STA	_Level
   2061  f4a7				   .
   2062  f4a7							;
   2063  f4a7
   2064  f4a7				   .__Title_Screen
   2065  f4a7							; __Title_Screen
   2066  f4a7
   2067  f4a7				   .L037		;  playfield:
   2068  f4a7
   2069  f4a7				  -	      ifconst	pfres
   2070  f4a7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2071  f4a7					      else
   2072  f4a7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2073  f4a9					      endif
   2074  f4a9		       4c d8 f4 	      jmp	pflabel0
   2075  f4ac				   PF_data0
   2076  f4ac		       00 00		      .byte.b	%00000000, %00000000
   2077  f4ae					      if	(pfwidth>2)
   2078  f4ae		       00 00		      .byte.b	%00000000, %00000000
   2079  f4b0					      endif
   2080  f4b0		       9d a9		      .byte.b	%10011101, %10101001
   2081  f4b2					      if	(pfwidth>2)
   2082  f4b2		       96 ae		      .byte.b	%10010110, %10101110
   2083  f4b4					      endif
   2084  f4b4		       95 aa		      .byte.b	%10010101, %10101010
   2085  f4b6					      if	(pfwidth>2)
   2086  f4b6		       55 a4		      .byte.b	%01010101, %10100100
   2087  f4b8					      endif
   2088  f4b8		       9d 91		      .byte.b	%10011101, %10010001
   2089  f4ba					      if	(pfwidth>2)
   2090  f4ba		       95 e4		      .byte.b	%10010101, %11100100
   2091  f4bc					      endif
   2092  f4bc		       95 92		      .byte.b	%10010101, %10010010
   2093  f4be					      if	(pfwidth>2)
   2094  f4be		       55 a4		      .byte.b	%01010101, %10100100
   2095  f4c0					      endif
   2096  f4c0		       d5 91		      .byte.b	%11010101, %10010001
   2097  f4c2					      if	(pfwidth>2)
   2098  f4c2		       55 a4		      .byte.b	%01010101, %10100100
   2099  f4c4					      endif
   2100  f4c4		       00 00		      .byte.b	%00000000, %00000000
   2101  f4c6					      if	(pfwidth>2)
   2102  f4c6		       00 00		      .byte.b	%00000000, %00000000
   2103  f4c8					      endif
   2104  f4c8		       1f ff		      .byte.b	%00011111, %11111111
   2105  f4ca					      if	(pfwidth>2)
   2106  f4ca		       ff 1f		      .byte.b	%11111111, %00011111
   2107  f4cc					      endif
   2108  f4cc		       0a 55		      .byte.b	%00001010, %01010101
   2109  f4ce					      if	(pfwidth>2)
   2110  f4ce		       55 0a		      .byte.b	%01010101, %00001010
   2111  f4d0					      endif
   2112  f4d0		       1f 7f		      .byte.b	%00011111, %01111111
   2113  f4d2					      if	(pfwidth>2)
   2114  f4d2		       7f 1f		      .byte.b	%01111111, %00011111
   2115  f4d4					      endif
   2116  f4d4		       00 00		      .byte.b	%00000000, %00000000
   2117  f4d6					      if	(pfwidth>2)
   2118  f4d6		       00 00		      .byte.b	%00000000, %00000000
   2119  f4d8					      endif
   2120  f4d8				   pflabel0
   2121  f4d8		       bd ac f4 	      lda	PF_data0,x
   2122  f4db		       95 a4		      sta	playfield,x
   2123  f4dd		       ca		      dex
   2124  f4de		       10 f8		      bpl	pflabel0
   2125  f4e0				   .L038		;  player0:
   2126  f4e0
   2127  f4e0		       a2 80		      LDX	#<playerL038_0
   2128  f4e2		       86 8a		      STX	player0pointerlo
   2129  f4e4		       a9 fe		      LDA	#>playerL038_0
   2130  f4e6		       85 8b		      STA	player0pointerhi
   2131  f4e8		       a9 07		      LDA	#7
   2132  f4ea		       85 8e		      STA	player0height
   2133  f4ec				   .L039		;  player1:
   2134  f4ec
   2135  f4ec		       a2 88		      LDX	#<playerL039_1
   2136  f4ee		       86 8c		      STX	player1pointerlo
   2137  f4f0		       a9 fe		      LDA	#>playerL039_1
   2138  f4f2		       85 8d		      STA	player1pointerhi
   2139  f4f4		       a9 07		      LDA	#7
   2140  f4f6		       85 8f		      STA	player1height
   2141  f4f8				   .
   2142  f4f8							;
   2143  f4f8
   2144  f4f8				   .__Start_Screen_Loop
   2145  f4f8							; __Start_Screen_Loop
   2146  f4f8
   2147  f4f8				   .L040		;  if _Master_Counter	<=  10 then goto __Skip_Joy_Checks
   2148  f4f8
   2149  f4f8		       a9 0a		      LDA	#10
   2150  f4fa		       c5 d4		      CMP	_Master_Counter
   2151  f4fc		       90 03		      BCC	.skipL040
   2152  f4fe				   .condpart0
   2153  f4fe		       4c 2c f5 	      jmp	.__Skip_Joy_Checks
   2154  f501
   2155  f501				   .skipL040
   2156  f501				   .L041		;  if joy0up then goto __Skip_Start_Screen
   2157  f501
   2158  f501		       a9 10		      lda	#$10
   2159  f503		       2c 80 02 	      bit	SWCHA
   2160  f506		       d0 03		      BNE	.skipL041
   2161  f508				   .condpart1
   2162  f508		       4c 5e f5 	      jmp	.__Skip_Start_Screen
   2163  f50b
   2164  f50b				   .skipL041
   2165  f50b				   .L042		;  if joy0down then goto __Skip_Start_Screen
   2166  f50b
   2167  f50b		       a9 20		      lda	#$20
   2168  f50d		       2c 80 02 	      bit	SWCHA
   2169  f510		       d0 03		      BNE	.skipL042
   2170  f512				   .condpart2
   2171  f512		       4c 5e f5 	      jmp	.__Skip_Start_Screen
   2172  f515
   2173  f515				   .skipL042
   2174  f515				   .L043		;  if joy0right then goto __Skip_Start_Screen
   2175  f515
   2176  f515		       2c 80 02 	      bit	SWCHA
   2177  f518		       30 03		      BMI	.skipL043
   2178  f51a				   .condpart3
   2179  f51a		       4c 5e f5 	      jmp	.__Skip_Start_Screen
   2180  f51d
   2181  f51d				   .skipL043
   2182  f51d				   .L044		;  if joy0left then goto __Skip_Start_Screen
   2183  f51d
   2184  f51d		       2c 80 02 	      bit	SWCHA
   2185  f520		       70 03		      BVS	.skipL044
   2186  f522				   .condpart4
   2187  f522		       4c 5e f5 	      jmp	.__Skip_Start_Screen
   2188  f525
   2189  f525				   .skipL044
   2190  f525				   .L045		;  if joy0fire then goto __Skip_Start_Screen
   2191  f525
   2192  f525		       24 0c		      bit	INPT4
   2193  f527		       30 03		      BMI	.skipL045
   2194  f529				   .condpart5
   2195  f529		       4c 5e f5 	      jmp	.__Skip_Start_Screen
   2196  f52c
   2197  f52c				   .skipL045
   2198  f52c				   .__Skip_Joy_Checks
   2199  f52c							; __Skip_Joy_Checks
   2200  f52c
   2201  f52c				   .L046		;  player1x  =  77
   2202  f52c
   2203  f52c		       a9 4d		      LDA	#77
   2204  f52e		       85 81		      STA	player1x
   2205  f530				   .L047		;  player1y  =  80
   2206  f530
   2207  f530		       a9 50		      LDA	#80
   2208  f532		       85 86		      STA	player1y
   2209  f534				   .L048		;  player0x  =  77
   2210  f534
   2211  f534		       a9 4d		      LDA	#77
   2212  f536		       85 80		      STA	player0x
   2213  f538				   .L049		;  player0y  =  72
   2214  f538
   2215  f538		       a9 48		      LDA	#72
   2216  f53a		       85 85		      STA	player0y
   2217  f53c				   .L050		;  COLUP0  =  $36
   2218  f53c
   2219  f53c		       a9 36		      LDA	#$36
   2220  f53e		       85 06		      STA	COLUP0
   2221  f540				   .L051		;  COLUP1  =  $14
   2222  f540
   2223  f540		       a9 14		      LDA	#$14
   2224  f542		       85 07		      STA	COLUP1
   2225  f544				   .L052		;  COLUPF  =  $14
   2226  f544
   2227  f544		       a9 14		      LDA	#$14
   2228  f546		       85 08		      STA	COLUPF
   2229  f548				   .L053		;  COLUBK  =  0
   2230  f548
   2231  f548		       a9 00		      LDA	#0
   2232  f54a		       85 09		      STA	COLUBK
   2233  f54c				   .L054		;  scorecolor	=  0
   2234  f54c
   2235  f54c		       a9 00		      LDA	#0
   2236  f54e		       85 a3		      STA	scorecolor
   2237  f550				   .L055		;  _Master_Counter  =	_Master_Counter  +  1
   2238  f550
   2239  f550		       e6 d4		      INC	_Master_Counter
   2240  f552				   .L056		;  drawscreen
   2241  f552
   2242  f552		       20 c1 f3 	      jsr	drawscreen
   2243  f555				   .L057		;  goto __Start_Screen_Loop
   2244  f555
   2245  f555		       4c f8 f4 	      jmp	.__Start_Screen_Loop
   2246  f558
   2247  f558				   .
   2248  f558							;
   2249  f558
   2250  f558				   .L058		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   2251  f558
   2252  f558		       a9 00		      LDA	#0
   2253  f55a		       85 d4		      STA	_Master_Counter
   2254  f55c		       85 d5		      STA	_Frame_Counter
   2255  f55e				   .__Skip_Start_Screen
   2256  f55e							; __Skip_Start_Screen
   2257  f55e
   2258  f55e				   .
   2259  f55e							;
   2260  f55e
   2261  f55e				   .
   2262  f55e							;
   2263  f55e
   2264  f55e				   .
   2265  f55e							;
   2266  f55e
   2267  f55e				   .
   2268  f55e							;
   2269  f55e
   2270  f55e				   .
   2271  f55e							;
   2272  f55e
   2273  f55e				   .L059		;  player0x  =  77  :	player0y  =  60
   2274  f55e
   2275  f55e		       a9 4d		      LDA	#77
   2276  f560		       85 80		      STA	player0x
   2277  f562		       a9 3c		      LDA	#60
   2278  f564		       85 85		      STA	player0y
   2279  f566				   .L060		;  player1x  =  21  :	player1y  =  16
   2280  f566
   2281  f566		       a9 15		      LDA	#21
   2282  f568		       85 81		      STA	player1x
   2283  f56a		       a9 10		      LDA	#16
   2284  f56c		       85 86		      STA	player1y
   2285  f56e				   .
   2286  f56e							;
   2287  f56e
   2288  f56e				   .
   2289  f56e							;
   2290  f56e
   2291  f56e				   .
   2292  f56e							;
   2293  f56e
   2294  f56e				   .
   2295  f56e							;
   2296  f56e
   2297  f56e				   .
   2298  f56e							;
   2299  f56e
   2300  f56e				   .L061		;  missile0x  =  200  :  missile0y  =	200
   2301  f56e
   2302  f56e		       a9 c8		      LDA	#200
   2303  f570		       85 82		      STA	missile0x
   2304  f572		       85 91		      STA	missile0y
   2305  f574				   .
   2306  f574							;
   2307  f574
   2308  f574				   .
   2309  f574							;
   2310  f574
   2311  f574				   .
   2312  f574							;
   2313  f574
   2314  f574				   .
   2315  f574							;
   2316  f574
   2317  f574				   .L062		;  missile0x  =  80  :  missile0y  =  79
   2318  f574
   2319  f574		       a9 50		      LDA	#80
   2320  f576		       85 82		      STA	missile0x
   2321  f578		       a9 4f		      LDA	#79
   2322  f57a		       85 91		      STA	missile0y
   2323  f57c				   .
   2324  f57c							;
   2325  f57c
   2326  f57c				   .
   2327  f57c							;
   2328  f57c
   2329  f57c				   .
   2330  f57c							;
   2331  f57c
   2332  f57c				   .
   2333  f57c							;
   2334  f57c
   2335  f57c				   .
   2336  f57c							;
   2337  f57c
   2338  f57c				   .L063		;  NUSIZ0  =  $10  :  missile0height  =  1
   2339  f57c
   2340  f57c		       a9 10		      LDA	#$10
   2341  f57e		       85 04		      STA	NUSIZ0
   2342  f580		       a9 01		      LDA	#1
   2343  f582		       85 90		      STA	missile0height
   2344  f584				   .L064		;  NUSIZ1  =  $30  :  missile0height  =  4
   2345  f584
   2346  f584		       a9 30		      LDA	#$30
   2347  f586		       85 05		      STA	NUSIZ1
   2348  f588		       a9 04		      LDA	#4
   2349  f58a		       85 90		      STA	missile0height
   2350  f58c				   .
   2351  f58c							;
   2352  f58c
   2353  f58c				   .
   2354  f58c							;
   2355  f58c
   2356  f58c				   .
   2357  f58c							;
   2358  f58c
   2359  f58c				   .
   2360  f58c							;
   2361  f58c
   2362  f58c				   .
   2363  f58c							;
   2364  f58c
   2365  f58c				   .
   2366  f58c							;
   2367  f58c
   2368  f58c				   .L065		;  COLUBK  =  0
   2369  f58c
   2370  f58c		       a9 00		      LDA	#0
   2371  f58e		       85 09		      STA	COLUBK
   2372  f590				   .
   2373  f590							;
   2374  f590
   2375  f590				   .
   2376  f590							;
   2377  f590
   2378  f590				   .
   2379  f590							;
   2380  f590
   2381  f590				   .
   2382  f590							;
   2383  f590
   2384  f590				   .
   2385  f590							;
   2386  f590
   2387  f590				   .
   2388  f590							;
   2389  f590
   2390  f590				   .L066		;  _Bit3_P0_Dir_Right{3}  =  1
   2391  f590
   2392  f590		       a5 da		      LDA	_Bit3_P0_Dir_Right
   2393  f592		       09 08		      ORA	#8
   2394  f594		       85 da		      STA	_Bit3_P0_Dir_Right
   2395  f596				   .
   2396  f596							;
   2397  f596
   2398  f596				   .
   2399  f596							;
   2400  f596
   2401  f596				   .
   2402  f596							;
   2403  f596
   2404  f596				   .
   2405  f596							;
   2406  f596
   2407  f596				   .
   2408  f596							;
   2409  f596
   2410  f596				   .
   2411  f596							;
   2412  f596
   2413  f596				   .
   2414  f596							;
   2415  f596
   2416  f596				   .
   2417  f596							;
   2418  f596
   2419  f596				   .
   2420  f596							;
   2421  f596
   2422  f596				   .L067		;  _Bit0_Reset_Restrainer{0}  =  1
   2423  f596
   2424  f596		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2425  f598		       09 01		      ORA	#1
   2426  f59a		       85 ec		      STA	_Bit0_Reset_Restrainer
   2427  f59c				   .
   2428  f59c							;
   2429  f59c
   2430  f59c				   .
   2431  f59c							;
   2432  f59c
   2433  f59c				   .
   2434  f59c							;
   2435  f59c
   2436  f59c				   .
   2437  f59c							;
   2438  f59c
   2439  f59c				   .L068		;  score  =  0
   2440  f59c
   2441  f59c		       a9 00		      LDA	#$00
   2442  f59e		       85 95		      STA	score+2
   2443  f5a0		       a9 00		      LDA	#$00
   2444  f5a2		       85 94		      STA	score+1
   2445  f5a4		       a9 00		      LDA	#$00
   2446  f5a6		       85 93		      STA	score
   2447  f5a8				   .
   2448  f5a8							;
   2449  f5a8
   2450  f5a8				   .L069		;  dim _sc1  =  score
   2451  f5a8
   2452  f5a8				   .L070		;  dim _sc2  =  score + 1
   2453  f5a8
   2454  f5a8				   .L071		;  dim _sc3  =  score + 2
   2455  f5a8
   2456  f5a8				   .
   2457  f5a8							;
   2458  f5a8
   2459  f5a8				   .L072		;  t  =  $3
   2460  f5a8
   2461  f5a8		       a9 03		      LDA	#$3
   2462  f5aa		       85 e7		      STA	t
   2463  f5ac				   .L073		;  dim _Chase_Speed  =  t
   2464  f5ac
   2465  f5ac				   .
   2466  f5ac							;
   2467  f5ac
   2468  f5ac				   .
   2469  f5ac							;
   2470  f5ac
   2471  f5ac				   .
   2472  f5ac							;
   2473  f5ac
   2474  f5ac				   .
   2475  f5ac							;
   2476  f5ac
   2477  f5ac				   .
   2478  f5ac							;
   2479  f5ac
   2480  f5ac				   .
   2481  f5ac							;
   2482  f5ac
   2483  f5ac				   .
   2484  f5ac							;
   2485  f5ac
   2486  f5ac				   .__Main_Loop
   2487  f5ac							; __Main_Loop
   2488  f5ac
   2489  f5ac				   .
   2490  f5ac							;
   2491  f5ac
   2492  f5ac				   .L074		;  if _Bit4_Game_Over{4} then if joy0fire goto __Start_Restart
   2493  f5ac
   2494  f5ac		       a5 eb		      LDA	_Bit4_Game_Over
   2495  f5ae		       29 10		      AND	#16
   2496  f5b0		       f0 07		      BEQ	.skipL074
   2497  f5b2				   .condpart6
   2498  f5b2		       24 0c		      bit	INPT4
   2499  f5b4				  -	      if	((* - .__Start_Restart) < 127) && ((* - .__Start_Restart) > -128)
   2500  f5b4				  -	      bpl	.__Start_Restart
   2501  f5b4					      else
   2502  f5b4		       30 03		      bmi	.0skip__Start_Restart
   2503  f5b6		       4c 61 f4 	      jmp	.__Start_Restart
   2504  f5b9				   .0skip__Start_Restart
   2505  f5b9					      endif
   2506  f5b9				   .skipL074
   2507  f5b9				   .
   2508  f5b9							;
   2509  f5b9
   2510  f5b9				   .L075		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  <	$21 then __Skip_Level_Change
   2511  f5b9
   2512  f5b9		       a5 93		      LDA	_sc1
   2513  f5bb		       c9 00		      CMP	#%00
   2514  f5bd		       d0 0c		      BNE	.skipL075
   2515  f5bf				   .condpart7
   2516  f5bf		       a5 94		      LDA	_sc2
   2517  f5c1		       c9 00		      CMP	#%00
   2518  f5c3		       d0 06		      BNE	.skip7then
   2519  f5c5				   .condpart8
   2520  f5c5		       a5 95		      LDA	_sc3
   2521  f5c7		       c9 21		      CMP	#$21
   2522  f5c9					      if	((* - .__Skip_Level_Change) < 127) && ((* - .__Skip_Level_Change) > -128)
   2523  f5c9		       90 0f		      bcc	.__Skip_Level_Change
   2524  f5cb				  -	      else
   2525  f5cb				  -	      bcs	.1skip__Skip_Level_Change
   2526  f5cb				  -	      jmp	.__Skip_Level_Change
   2527  f5cb				  -.1skip__Skip_Level_Change
   2528  f5cb					      endif
   2529  f5cb				   .skip7then
   2530  f5cb				   .skipL075
   2531  f5cb				   .L076		;  _sc3  =  %00
   2532  f5cb
   2533  f5cb		       a9 00		      LDA	#%00
   2534  f5cd		       85 95		      STA	_sc3
   2535  f5cf				   .L077		;  _Level  =  _Level  +  $1
   2536  f5cf
   2537  f5cf		       a5 e0		      LDA	_Level
   2538  f5d1		       18		      CLC
   2539  f5d2		       69 01		      ADC	#$1
   2540  f5d4		       85 e0		      STA	_Level
   2541  f5d6				   .L078		;  _Chase_Speed  =  $1
   2542  f5d6
   2543  f5d6		       a9 01		      LDA	#$1
   2544  f5d8		       85 e7		      STA	_Chase_Speed
   2545  f5da				   .__Skip_Level_Change
   2546  f5da							; __Skip_Level_Change
   2547  f5da
   2548  f5da				   .L079		;  if _Level = $0 then goto __L0
   2549  f5da
   2550  f5da		       a5 e0		      LDA	_Level
   2551  f5dc		       c9 00		      CMP	#$0
   2552  f5de		       d0 03		      BNE	.skipL079
   2553  f5e0				   .condpart9
   2554  f5e0		       4c 36 fd 	      jmp	.__L0
   2555  f5e3
   2556  f5e3				   .skipL079
   2557  f5e3				   .L080		;  if _Level = $1 then goto __L1
   2558  f5e3
   2559  f5e3		       a5 e0		      LDA	_Level
   2560  f5e5		       c9 01		      CMP	#$1
   2561  f5e7		       d0 03		      BNE	.skipL080
   2562  f5e9				   .condpart10
   2563  f5e9		       4c 72 fd 	      jmp	.__L1
   2564  f5ec
   2565  f5ec				   .skipL080
   2566  f5ec				   .L081		;  if _Level = $2 then goto __L2 else _Bit6_Game_Won{6} = 1  :  _Bit4_Game_Over{4} = 1  :  goto __Game_Over
   2567  f5ec
   2568  f5ec		       a5 e0		      LDA	_Level
   2569  f5ee		       c9 02		      CMP	#$2
   2570  f5f0		       d0 06		      BNE	.skipL081
   2571  f5f2				   .condpart11
   2572  f5f2		       4c b2 fd 	      jmp	.__L2
   2573  f5f5		       4c 07 f6 	      jmp	.skipelse0
   2574  f5f8				   .skipL081
   2575  f5f8		       a5 eb		      LDA	_Bit6_Game_Won
   2576  f5fa		       09 40		      ORA	#64
   2577  f5fc		       85 eb		      STA	_Bit6_Game_Won
   2578  f5fe		       a5 eb		      LDA	_Bit4_Game_Over
   2579  f600		       09 10		      ORA	#16
   2580  f602		       85 eb		      STA	_Bit4_Game_Over
   2581  f604		       4c 42 fc 	      jmp	.__Game_Over
   2582  f607
   2583  f607				   .skipelse0
   2584  f607				   .__L_Done
   2585  f607							; __L_Done
   2586  f607
   2587  f607				   .
   2588  f607							;
   2589  f607
   2590  f607				   .
   2591  f607							;
   2592  f607
   2593  f607				   .
   2594  f607							;
   2595  f607
   2596  f607				   .
   2597  f607							;
   2598  f607
   2599  f607				   .
   2600  f607							;
   2601  f607
   2602  f607				   .
   2603  f607							;
   2604  f607
   2605  f607				   .
   2606  f607							;
   2607  f607
   2608  f607				   .L082		;  _Master_Counter  =	_Master_Counter  +  1
   2609  f607
   2610  f607		       e6 d4		      INC	_Master_Counter
   2611  f609				   .
   2612  f609							;
   2613  f609
   2614  f609				   .
   2615  f609							;
   2616  f609
   2617  f609				   .
   2618  f609							;
   2619  f609
   2620  f609				   .
   2621  f609							;
   2622  f609
   2623  f609				   .L083		;  if _Master_Counter	<  7 then goto __Skip_Counters
   2624  f609
   2625  f609		       a5 d4		      LDA	_Master_Counter
   2626  f60b		       c9 07		      CMP	#7
   2627  f60d		       b0 03		      BCS	.skipL083
   2628  f60f				   .condpart12
   2629  f60f		       4c 22 f6 	      jmp	.__Skip_Counters
   2630  f612
   2631  f612				   .skipL083
   2632  f612				   .
   2633  f612							;
   2634  f612
   2635  f612				   .
   2636  f612							;
   2637  f612
   2638  f612				   .
   2639  f612							;
   2640  f612
   2641  f612				   .
   2642  f612							;
   2643  f612
   2644  f612				   .L084		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2645  f612
   2646  f612		       e6 d5		      INC	_Frame_Counter
   2647  f614		       a9 00		      LDA	#0
   2648  f616		       85 d4		      STA	_Master_Counter
   2649  f618				   .
   2650  f618							;
   2651  f618
   2652  f618				   .
   2653  f618							;
   2654  f618
   2655  f618				   .
   2656  f618							;
   2657  f618
   2658  f618				   .
   2659  f618							;
   2660  f618
   2661  f618				   .L085		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   2662  f618
   2663  f618		       a9 03		      LDA	#3
   2664  f61a		       c5 d5		      CMP	_Frame_Counter
   2665  f61c		       b0 04		      BCS	.skipL085
   2666  f61e				   .condpart13
   2667  f61e		       a9 00		      LDA	#0
   2668  f620		       85 d5		      STA	_Frame_Counter
   2669  f622				   .skipL085
   2670  f622				   .
   2671  f622							;
   2672  f622
   2673  f622				   .__Skip_Counters
   2674  f622							; __Skip_Counters
   2675  f622
   2676  f622				   .
   2677  f622							;
   2678  f622
   2679  f622				   .
   2680  f622							;
   2681  f622
   2682  f622				   .
   2683  f622							;
   2684  f622
   2685  f622				   .
   2686  f622							;
   2687  f622
   2688  f622				   .
   2689  f622							;
   2690  f622
   2691  f622				   .
   2692  f622							;
   2693  f622
   2694  f622				   .
   2695  f622							;
   2696  f622
   2697  f622				   .
   2698  f622							;
   2699  f622
   2700  f622				   .
   2701  f622							;
   2702  f622
   2703  f622				   .L086		;  player0:
   2704  f622
   2705  f622		       a2 90		      LDX	#<playerL086_0
   2706  f624		       86 8a		      STX	player0pointerlo
   2707  f626		       a9 fe		      LDA	#>playerL086_0
   2708  f628		       85 8b		      STA	player0pointerhi
   2709  f62a		       a9 07		      LDA	#7
   2710  f62c		       85 8e		      STA	player0height
   2711  f62e				   .L087		;  if !_Bit1_Player_Moving{1} goto __Pl_Frame_Done
   2712  f62e
   2713  f62e		       a5 eb		      LDA	_Bit1_Player_Moving
   2714  f630		       29 02		      AND	#2
   2715  f632					      if	((* - .__Pl_Frame_Done) < 127) && ((* - .__Pl_Frame_Done) > -128)
   2716  f632		       f0 13		      BEQ	.__Pl_Frame_Done
   2717  f634				  -	      else
   2718  f634				  -	      bne	.2skip__Pl_Frame_Done
   2719  f634				  -	      jmp	.__Pl_Frame_Done
   2720  f634				  -.2skip__Pl_Frame_Done
   2721  f634					      endif
   2722  f634				   .L088		;  on _Frame_Counter goto __Pl00 __Pl01 __Pl00 __Pl02
   2723  f634
   2724  f634		       a6 d5		      LDX	_Frame_Counter
   2725  f636		       bd 3f f6 	      LDA	.L088jumptablehi,x
   2726  f639		       48		      PHA
   2727  f63a		       bd 43 f6 	      LDA	.L088jumptablelo,x
   2728  f63d		       48		      PHA
   2729  f63e		       60		      RTS
   2730  f63f				   .L088jumptablehi
   2731  f63f		       fd		      .byte.b	>(.__Pl00-1)
   2732  f640		       fe		      .byte.b	>(.__Pl01-1)
   2733  f641		       fd		      .byte.b	>(.__Pl00-1)
   2734  f642		       fe		      .byte.b	>(.__Pl02-1)
   2735  f643				   .L088jumptablelo
   2736  f643		       f1		      .byte.b	<(.__Pl00-1)
   2737  f644		       00		      .byte.b	<(.__Pl01-1)
   2738  f645		       f1		      .byte.b	<(.__Pl00-1)
   2739  f646		       0f		      .byte.b	<(.__Pl02-1)
   2740  f647				   .
   2741  f647							;
   2742  f647
   2743  f647				   .__Pl_Frame_Done
   2744  f647							; __Pl_Frame_Done
   2745  f647
   2746  f647				   .
   2747  f647							;
   2748  f647
   2749  f647				   .
   2750  f647							;
   2751  f647
   2752  f647				   .
   2753  f647							;
   2754  f647
   2755  f647				   .
   2756  f647							;
   2757  f647
   2758  f647				   .
   2759  f647							;
   2760  f647
   2761  f647				   .
   2762  f647							;
   2763  f647
   2764  f647				   .
   2765  f647							;
   2766  f647
   2767  f647				   .L089		;  player1:
   2768  f647
   2769  f647		       a2 98		      LDX	#<playerL089_1
   2770  f649		       86 8c		      STX	player1pointerlo
   2771  f64b		       a9 fe		      LDA	#>playerL089_1
   2772  f64d		       85 8d		      STA	player1pointerhi
   2773  f64f		       a9 07		      LDA	#7
   2774  f651		       85 8f		      STA	player1height
   2775  f653				   .L090		;  if !_Bit2_Mino_Moving{2} goto __Mn_Frame_Done
   2776  f653
   2777  f653		       a5 eb		      LDA	_Bit2_Mino_Moving
   2778  f655		       29 04		      AND	#4
   2779  f657					      if	((* - .__Mn_Frame_Done) < 127) && ((* - .__Mn_Frame_Done) > -128)
   2780  f657		       f0 13		      BEQ	.__Mn_Frame_Done
   2781  f659				  -	      else
   2782  f659				  -	      bne	.3skip__Mn_Frame_Done
   2783  f659				  -	      jmp	.__Mn_Frame_Done
   2784  f659				  -.3skip__Mn_Frame_Done
   2785  f659					      endif
   2786  f659				   .L091		;  on _Frame_Counter goto __Mn00 __Mn01 __Mn00 __Mn02
   2787  f659
   2788  f659		       a6 d5		      LDX	_Frame_Counter
   2789  f65b		       bd 64 f6 	      LDA	.L091jumptablehi,x
   2790  f65e		       48		      PHA
   2791  f65f		       bd 68 f6 	      LDA	.L091jumptablelo,x
   2792  f662		       48		      PHA
   2793  f663		       60		      RTS
   2794  f664				   .L091jumptablehi
   2795  f664		       fe		      .byte.b	>(.__Mn00-1)
   2796  f665		       fe		      .byte.b	>(.__Mn01-1)
   2797  f666		       fe		      .byte.b	>(.__Mn00-1)
   2798  f667		       fe		      .byte.b	>(.__Mn02-1)
   2799  f668				   .L091jumptablelo
   2800  f668		       1e		      .byte.b	<(.__Mn00-1)
   2801  f669		       2d		      .byte.b	<(.__Mn01-1)
   2802  f66a		       1e		      .byte.b	<(.__Mn00-1)
   2803  f66b		       3c		      .byte.b	<(.__Mn02-1)
   2804  f66c				   .
   2805  f66c							;
   2806  f66c
   2807  f66c				   .__Mn_Frame_Done
   2808  f66c							; __Mn_Frame_Done
   2809  f66c
   2810  f66c				   .
   2811  f66c							;
   2812  f66c
   2813  f66c				   .
   2814  f66c							;
   2815  f66c
   2816  f66c				   .
   2817  f66c							;
   2818  f66c
   2819  f66c				   .
   2820  f66c							;
   2821  f66c
   2822  f66c				   .L092		;  if !_Ch0_Sound then goto __Skip_Ch_0
   2823  f66c
   2824  f66c		       a5 e4		      LDA	_Ch0_Sound
   2825  f66e		       d0 03		      BNE	.skipL092
   2826  f670				   .condpart14
   2827  f670		       4c 54 f7 	      jmp	.__Skip_Ch_0
   2828  f673
   2829  f673				   .skipL092
   2830  f673				   .
   2831  f673							;
   2832  f673
   2833  f673				   .
   2834  f673							;
   2835  f673
   2836  f673				   .
   2837  f673							;
   2838  f673
   2839  f673				   .
   2840  f673							;
   2841  f673
   2842  f673				   .L093		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   2843  f673
   2844  f673		       c6 e5		      DEC	_Ch0_Duration
   2845  f675				   .
   2846  f675							;
   2847  f675
   2848  f675				   .
   2849  f675							;
   2850  f675
   2851  f675				   .
   2852  f675							;
   2853  f675
   2854  f675				   .
   2855  f675							;
   2856  f675
   2857  f675				   .
   2858  f675							;
   2859  f675
   2860  f675				   .L094		;  if _Ch0_Duration then goto __Skip_Ch_0
   2861  f675
   2862  f675		       a5 e5		      LDA	_Ch0_Duration
   2863  f677		       f0 03		      BEQ	.skipL094
   2864  f679				   .condpart15
   2865  f679		       4c 54 f7 	      jmp	.__Skip_Ch_0
   2866  f67c
   2867  f67c				   .skipL094
   2868  f67c				   .
   2869  f67c							;
   2870  f67c
   2871  f67c				   .L095		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   2872  f67c
   2873  f67c		       a5 e4		      LDA	_Ch0_Sound
   2874  f67e		       c9 01		      CMP	#1
   2875  f680		       f0 03		      BEQ	.skipL095
   2876  f682				   .condpart16
   2877  f682		       4c c1 f6 	      jmp	.__Skip_Ch0_Sound_001
   2878  f685
   2879  f685				   .skipL095
   2880  f685				   .
   2881  f685							;
   2882  f685
   2883  f685				   .
   2884  f685							;
   2885  f685
   2886  f685				   .
   2887  f685							;
   2888  f685
   2889  f685				   .
   2890  f685							;
   2891  f685
   2892  f685				   .L096		;  temp4  =  _SD_Gem_Coll[_Ch0_Counter]
   2893  f685
   2894  f685		       a6 e6		      LDX	_Ch0_Counter
   2895  f687		       bd 4f fe 	      LDA	_SD_Gem_Coll,x
   2896  f68a		       85 9f		      STA	temp4
   2897  f68c				   .
   2898  f68c							;
   2899  f68c
   2900  f68c				   .
   2901  f68c							;
   2902  f68c
   2903  f68c				   .
   2904  f68c							;
   2905  f68c
   2906  f68c				   .
   2907  f68c							;
   2908  f68c
   2909  f68c				   .L097		;  if temp4  =  255 then goto __Clear_Ch_0
   2910  f68c
   2911  f68c		       a5 9f		      LDA	temp4
   2912  f68e		       c9 ff		      CMP	#255
   2913  f690		       d0 03		      BNE	.skipL097
   2914  f692				   .condpart17
   2915  f692		       4c 4e f7 	      jmp	.__Clear_Ch_0
   2916  f695
   2917  f695				   .skipL097
   2918  f695				   .
   2919  f695							;
   2920  f695
   2921  f695				   .
   2922  f695							;
   2923  f695
   2924  f695				   .
   2925  f695							;
   2926  f695
   2927  f695				   .
   2928  f695							;
   2929  f695
   2930  f695				   .L098		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2931  f695
   2932  f695		       e6 e6		      INC	_Ch0_Counter
   2933  f697				   .L099		;  temp5  =  _SD_Gem_Coll[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   2934  f697
   2935  f697		       a6 e6		      LDX	_Ch0_Counter
   2936  f699		       bd 4f fe 	      LDA	_SD_Gem_Coll,x
   2937  f69c		       85 a0		      STA	temp5
   2938  f69e		       e6 e6		      INC	_Ch0_Counter
   2939  f6a0				   .L0100		;  temp6  =  _SD_Gem_Coll[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   2940  f6a0
   2941  f6a0		       a6 e6		      LDX	_Ch0_Counter
   2942  f6a2		       bd 4f fe 	      LDA	_SD_Gem_Coll,x
   2943  f6a5		       85 a1		      STA	temp6
   2944  f6a7		       e6 e6		      INC	_Ch0_Counter
   2945  f6a9				   .
   2946  f6a9							;
   2947  f6a9
   2948  f6a9				   .
   2949  f6a9							;
   2950  f6a9
   2951  f6a9				   .
   2952  f6a9							;
   2953  f6a9
   2954  f6a9				   .
   2955  f6a9							;
   2956  f6a9
   2957  f6a9				   .L0101		;  AUDV0  =  temp4
   2958  f6a9
   2959  f6a9		       a5 9f		      LDA	temp4
   2960  f6ab		       85 19		      STA	AUDV0
   2961  f6ad				   .L0102		;  AUDC0  =  temp5
   2962  f6ad
   2963  f6ad		       a5 a0		      LDA	temp5
   2964  f6af		       85 15		      STA	AUDC0
   2965  f6b1				   .L0103		;  AUDF0  =  temp6
   2966  f6b1
   2967  f6b1		       a5 a1		      LDA	temp6
   2968  f6b3		       85 17		      STA	AUDF0
   2969  f6b5				   .
   2970  f6b5							;
   2971  f6b5
   2972  f6b5				   .
   2973  f6b5							;
   2974  f6b5
   2975  f6b5				   .
   2976  f6b5							;
   2977  f6b5
   2978  f6b5				   .
   2979  f6b5							;
   2980  f6b5
   2981  f6b5				   .L0104		;  _Ch0_Duration  =  _SD_Gem_Coll[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   2982  f6b5
   2983  f6b5		       a6 e6		      LDX	_Ch0_Counter
   2984  f6b7		       bd 4f fe 	      LDA	_SD_Gem_Coll,x
   2985  f6ba		       85 e5		      STA	_Ch0_Duration
   2986  f6bc		       e6 e6		      INC	_Ch0_Counter
   2987  f6be				   .
   2988  f6be							;
   2989  f6be
   2990  f6be				   .
   2991  f6be							;
   2992  f6be
   2993  f6be				   .
   2994  f6be							;
   2995  f6be
   2996  f6be				   .
   2997  f6be							;
   2998  f6be
   2999  f6be				   .L0105		;  goto __Skip_Ch_0
   3000  f6be
   3001  f6be		       4c 54 f7 	      jmp	.__Skip_Ch_0
   3002  f6c1
   3003  f6c1				   .
   3004  f6c1							;
   3005  f6c1
   3006  f6c1				   .__Skip_Ch0_Sound_001
   3007  f6c1							; __Skip_Ch0_Sound_001
   3008  f6c1
   3009  f6c1				   .
   3010  f6c1							;
   3011  f6c1
   3012  f6c1				   .L0106		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3013  f6c1
   3014  f6c1		       a5 e4		      LDA	_Ch0_Sound
   3015  f6c3		       c9 02		      CMP	#2
   3016  f6c5		       f0 03		      BEQ	.skipL0106
   3017  f6c7				   .condpart18
   3018  f6c7		       4c 06 f7 	      jmp	.__Skip_Ch0_Sound_002
   3019  f6ca
   3020  f6ca				   .skipL0106
   3021  f6ca				   .
   3022  f6ca							;
   3023  f6ca
   3024  f6ca				   .
   3025  f6ca							;
   3026  f6ca
   3027  f6ca				   .
   3028  f6ca							;
   3029  f6ca
   3030  f6ca				   .L0107		;  temp4  =  _SD_Gem_Drop[_Ch0_Counter]
   3031  f6ca
   3032  f6ca		       a6 e6		      LDX	_Ch0_Counter
   3033  f6cc		       bd 5b fe 	      LDA	_SD_Gem_Drop,x
   3034  f6cf		       85 9f		      STA	temp4
   3035  f6d1				   .
   3036  f6d1							;
   3037  f6d1
   3038  f6d1				   .
   3039  f6d1							;
   3040  f6d1
   3041  f6d1				   .
   3042  f6d1							;
   3043  f6d1
   3044  f6d1				   .
   3045  f6d1							;
   3046  f6d1
   3047  f6d1				   .L0108		;  if temp4  =  255 then goto __Clear_Ch_0
   3048  f6d1
   3049  f6d1		       a5 9f		      LDA	temp4
   3050  f6d3		       c9 ff		      CMP	#255
   3051  f6d5		       d0 03		      BNE	.skipL0108
   3052  f6d7				   .condpart19
   3053  f6d7		       4c 4e f7 	      jmp	.__Clear_Ch_0
   3054  f6da
   3055  f6da				   .skipL0108
   3056  f6da				   .
   3057  f6da							;
   3058  f6da
   3059  f6da				   .
   3060  f6da							;
   3061  f6da
   3062  f6da				   .
   3063  f6da							;
   3064  f6da
   3065  f6da				   .
   3066  f6da							;
   3067  f6da
   3068  f6da				   .L0109		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3069  f6da
   3070  f6da		       e6 e6		      INC	_Ch0_Counter
   3071  f6dc				   .L0110		;  temp5  =  _SD_Gem_Drop[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3072  f6dc
   3073  f6dc		       a6 e6		      LDX	_Ch0_Counter
   3074  f6de		       bd 5b fe 	      LDA	_SD_Gem_Drop,x
   3075  f6e1		       85 a0		      STA	temp5
   3076  f6e3		       e6 e6		      INC	_Ch0_Counter
   3077  f6e5				   .L0111		;  temp6  =  _SD_Gem_Drop[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3078  f6e5
   3079  f6e5		       a6 e6		      LDX	_Ch0_Counter
   3080  f6e7		       bd 5b fe 	      LDA	_SD_Gem_Drop,x
   3081  f6ea		       85 a1		      STA	temp6
   3082  f6ec		       e6 e6		      INC	_Ch0_Counter
   3083  f6ee				   .
   3084  f6ee							;
   3085  f6ee
   3086  f6ee				   .
   3087  f6ee							;
   3088  f6ee
   3089  f6ee				   .
   3090  f6ee							;
   3091  f6ee
   3092  f6ee				   .
   3093  f6ee							;
   3094  f6ee
   3095  f6ee				   .L0112		;  AUDV0  =  temp4
   3096  f6ee
   3097  f6ee		       a5 9f		      LDA	temp4
   3098  f6f0		       85 19		      STA	AUDV0
   3099  f6f2				   .L0113		;  AUDC0  =  temp5
   3100  f6f2
   3101  f6f2		       a5 a0		      LDA	temp5
   3102  f6f4		       85 15		      STA	AUDC0
   3103  f6f6				   .L0114		;  AUDF0  =  temp6
   3104  f6f6
   3105  f6f6		       a5 a1		      LDA	temp6
   3106  f6f8		       85 17		      STA	AUDF0
   3107  f6fa				   .
   3108  f6fa							;
   3109  f6fa
   3110  f6fa				   .
   3111  f6fa							;
   3112  f6fa
   3113  f6fa				   .
   3114  f6fa							;
   3115  f6fa
   3116  f6fa				   .
   3117  f6fa							;
   3118  f6fa
   3119  f6fa				   .L0115		;  _Ch0_Duration  =  _SD_Gem_Drop[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   3120  f6fa
   3121  f6fa		       a6 e6		      LDX	_Ch0_Counter
   3122  f6fc		       bd 5b fe 	      LDA	_SD_Gem_Drop,x
   3123  f6ff		       85 e5		      STA	_Ch0_Duration
   3124  f701		       e6 e6		      INC	_Ch0_Counter
   3125  f703				   .
   3126  f703							;
   3127  f703
   3128  f703				   .
   3129  f703							;
   3130  f703
   3131  f703				   .
   3132  f703							;
   3133  f703
   3134  f703				   .
   3135  f703							;
   3136  f703
   3137  f703				   .L0116		;  goto __Skip_Ch_0
   3138  f703
   3139  f703		       4c 54 f7 	      jmp	.__Skip_Ch_0
   3140  f706
   3141  f706				   .
   3142  f706							;
   3143  f706
   3144  f706				   .__Skip_Ch0_Sound_002
   3145  f706							; __Skip_Ch0_Sound_002
   3146  f706
   3147  f706				   .
   3148  f706							;
   3149  f706
   3150  f706				   .L0117		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3151  f706
   3152  f706		       a5 e4		      LDA	_Ch0_Sound
   3153  f708		       c9 03		      CMP	#3
   3154  f70a		       f0 03		      BEQ	.skipL0117
   3155  f70c				   .condpart20
   3156  f70c		       4c 4b f7 	      jmp	.__Skip_Ch0_Sound_003
   3157  f70f
   3158  f70f				   .skipL0117
   3159  f70f				   .
   3160  f70f							;
   3161  f70f
   3162  f70f				   .
   3163  f70f							;
   3164  f70f
   3165  f70f				   .
   3166  f70f							;
   3167  f70f
   3168  f70f				   .
   3169  f70f							;
   3170  f70f
   3171  f70f				   .L0118		;  temp4  =  _SD_Mino_Roar[_Ch0_Counter]
   3172  f70f
   3173  f70f		       a6 e6		      LDX	_Ch0_Counter
   3174  f711		       bd 6b fe 	      LDA	_SD_Mino_Roar,x
   3175  f714		       85 9f		      STA	temp4
   3176  f716				   .
   3177  f716							;
   3178  f716
   3179  f716				   .
   3180  f716							;
   3181  f716
   3182  f716				   .
   3183  f716							;
   3184  f716
   3185  f716				   .
   3186  f716							;
   3187  f716
   3188  f716				   .L0119		;  if temp4  =  255 then goto __Clear_Ch_0
   3189  f716
   3190  f716		       a5 9f		      LDA	temp4
   3191  f718		       c9 ff		      CMP	#255
   3192  f71a		       d0 03		      BNE	.skipL0119
   3193  f71c				   .condpart21
   3194  f71c		       4c 4e f7 	      jmp	.__Clear_Ch_0
   3195  f71f
   3196  f71f				   .skipL0119
   3197  f71f				   .
   3198  f71f							;
   3199  f71f
   3200  f71f				   .
   3201  f71f							;
   3202  f71f
   3203  f71f				   .
   3204  f71f							;
   3205  f71f
   3206  f71f				   .
   3207  f71f							;
   3208  f71f
   3209  f71f				   .L0120		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3210  f71f
   3211  f71f		       e6 e6		      INC	_Ch0_Counter
   3212  f721				   .L0121		;  temp5  =  _SD_Mino_Roar[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3213  f721
   3214  f721		       a6 e6		      LDX	_Ch0_Counter
   3215  f723		       bd 6b fe 	      LDA	_SD_Mino_Roar,x
   3216  f726		       85 a0		      STA	temp5
   3217  f728		       e6 e6		      INC	_Ch0_Counter
   3218  f72a				   .L0122		;  temp6  =  _SD_Mino_Roar[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3219  f72a
   3220  f72a		       a6 e6		      LDX	_Ch0_Counter
   3221  f72c		       bd 6b fe 	      LDA	_SD_Mino_Roar,x
   3222  f72f		       85 a1		      STA	temp6
   3223  f731		       e6 e6		      INC	_Ch0_Counter
   3224  f733				   .
   3225  f733							;
   3226  f733
   3227  f733				   .
   3228  f733							;
   3229  f733
   3230  f733				   .
   3231  f733							;
   3232  f733
   3233  f733				   .
   3234  f733							;
   3235  f733
   3236  f733				   .L0123		;  AUDV0  =  temp4
   3237  f733
   3238  f733		       a5 9f		      LDA	temp4
   3239  f735		       85 19		      STA	AUDV0
   3240  f737				   .L0124		;  AUDC0  =  temp5
   3241  f737
   3242  f737		       a5 a0		      LDA	temp5
   3243  f739		       85 15		      STA	AUDC0
   3244  f73b				   .L0125		;  AUDF0  =  temp6
   3245  f73b
   3246  f73b		       a5 a1		      LDA	temp6
   3247  f73d		       85 17		      STA	AUDF0
   3248  f73f				   .
   3249  f73f							;
   3250  f73f
   3251  f73f				   .
   3252  f73f							;
   3253  f73f
   3254  f73f				   .
   3255  f73f							;
   3256  f73f
   3257  f73f				   .
   3258  f73f							;
   3259  f73f
   3260  f73f				   .L0126		;  _Ch0_Duration  =  _SD_Mino_Roar[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3261  f73f
   3262  f73f		       a6 e6		      LDX	_Ch0_Counter
   3263  f741		       bd 6b fe 	      LDA	_SD_Mino_Roar,x
   3264  f744		       85 e5		      STA	_Ch0_Duration
   3265  f746		       e6 e6		      INC	_Ch0_Counter
   3266  f748				   .
   3267  f748							;
   3268  f748
   3269  f748				   .
   3270  f748							;
   3271  f748
   3272  f748				   .
   3273  f748							;
   3274  f748
   3275  f748				   .
   3276  f748							;
   3277  f748
   3278  f748				   .L0127		;  goto __Skip_Ch_0
   3279  f748
   3280  f748		       4c 54 f7 	      jmp	.__Skip_Ch_0
   3281  f74b
   3282  f74b				   .
   3283  f74b							;
   3284  f74b
   3285  f74b				   .__Skip_Ch0_Sound_003
   3286  f74b							; __Skip_Ch0_Sound_003
   3287  f74b
   3288  f74b				   .
   3289  f74b							;
   3290  f74b
   3291  f74b				   .
   3292  f74b							;
   3293  f74b
   3294  f74b				   .
   3295  f74b							;
   3296  f74b
   3297  f74b				   .
   3298  f74b							;
   3299  f74b
   3300  f74b				   .L0128		;  goto __Skip_Ch_0
   3301  f74b
   3302  f74b		       4c 54 f7 	      jmp	.__Skip_Ch_0
   3303  f74e
   3304  f74e				   .
   3305  f74e							;
   3306  f74e
   3307  f74e				   .
   3308  f74e							;
   3309  f74e
   3310  f74e				   .
   3311  f74e							;
   3312  f74e
   3313  f74e				   .
   3314  f74e							;
   3315  f74e
   3316  f74e				   .
   3317  f74e							;
   3318  f74e
   3319  f74e				   .
   3320  f74e							;
   3321  f74e
   3322  f74e				   .
   3323  f74e							;
   3324  f74e
   3325  f74e				   .__Clear_Ch_0
   3326  f74e							; __Clear_Ch_0
   3327  f74e
   3328  f74e				   .
   3329  f74e							;
   3330  f74e
   3331  f74e				   .L0129		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3332  f74e
   3333  f74e		       a9 00		      LDA	#0
   3334  f750		       85 e4		      STA	_Ch0_Sound
   3335  f752		       85 19		      STA	AUDV0
   3336  f754				   .
   3337  f754							;
   3338  f754
   3339  f754				   .
   3340  f754							;
   3341  f754
   3342  f754				   .
   3343  f754							;
   3344  f754
   3345  f754				   .
   3346  f754							;
   3347  f754
   3348  f754				   .
   3349  f754							;
   3350  f754
   3351  f754				   .
   3352  f754							;
   3353  f754
   3354  f754				   .
   3355  f754							;
   3356  f754
   3357  f754				   .__Skip_Ch_0
   3358  f754							; __Skip_Ch_0
   3359  f754
   3360  f754				   .
   3361  f754							;
   3362  f754
   3363  f754				   .
   3364  f754							;
   3365  f754
   3366  f754				   .
   3367  f754							;
   3368  f754
   3369  f754				   .
   3370  f754							;
   3371  f754
   3372  f754				   .L0130		;  if !collision(player0,player1) then __Skip_Player_Caught
   3373  f754
   3374  f754		       24 07		      bit	CXPPMM
   3375  f756					      if	((* - .__Skip_Player_Caught) < 127) && ((* - .__Skip_Player_Caught) > -128)
   3376  f756		       10 09		      bpl	.__Skip_Player_Caught
   3377  f758				  -	      else
   3378  f758				  -	      bmi	.4skip__Skip_Player_Caught
   3379  f758				  -	      jmp	.__Skip_Player_Caught
   3380  f758				  -.4skip__Skip_Player_Caught
   3381  f758					      endif
   3382  f758				   .L0131		;  _Bit4_Game_Over{4}	=  1
   3383  f758
   3384  f758		       a5 eb		      LDA	_Bit4_Game_Over
   3385  f75a		       09 10		      ORA	#16
   3386  f75c		       85 eb		      STA	_Bit4_Game_Over
   3387  f75e				   .L0132		;  goto __Game_Over
   3388  f75e
   3389  f75e		       4c 42 fc 	      jmp	.__Game_Over
   3390  f761
   3391  f761				   .__Skip_Player_Caught
   3392  f761							; __Skip_Player_Caught
   3393  f761
   3394  f761				   .
   3395  f761							;
   3396  f761
   3397  f761				   .
   3398  f761							;
   3399  f761
   3400  f761				   .
   3401  f761							;
   3402  f761
   3403  f761				   .
   3404  f761							;
   3405  f761
   3406  f761				   .
   3407  f761							;
   3408  f761
   3409  f761				   .L0133		;  NUSIZ0  =  $20  :  missile0height  =  2
   3410  f761
   3411  f761		       a9 20		      LDA	#$20
   3412  f763		       85 04		      STA	NUSIZ0
   3413  f765		       a9 02		      LDA	#2
   3414  f767		       85 90		      STA	missile0height
   3415  f769				   .L0134		;  NUSIZ1  =  $30  :  missile1height  =  7
   3416  f769
   3417  f769		       a9 30		      LDA	#$30
   3418  f76b		       85 05		      STA	NUSIZ1
   3419  f76d		       a9 07		      LDA	#7
   3420  f76f		       85 87		      STA	missile1height
   3421  f771				   .
   3422  f771							;
   3423  f771
   3424  f771				   .L0135		;  missile1x  =  78  :  missile1y  =  48
   3425  f771
   3426  f771		       a9 4e		      LDA	#78
   3427  f773		       85 83		      STA	missile1x
   3428  f775		       a9 30		      LDA	#48
   3429  f777		       85 88		      STA	missile1y
   3430  f779				   .
   3431  f779							;
   3432  f779
   3433  f779				   .
   3434  f779							;
   3435  f779
   3436  f779				   .
   3437  f779							;
   3438  f779
   3439  f779				   .
   3440  f779							;
   3441  f779
   3442  f779				   .
   3443  f779							;
   3444  f779
   3445  f779				   .
   3446  f779							;
   3447  f779
   3448  f779				   .L0136		;  COLUP0  =  $9C
   3449  f779
   3450  f779		       a9 9c		      LDA	#$9C
   3451  f77b		       85 06		      STA	COLUP0
   3452  f77d				   .L0137		;  if _Chase_Speed  >	$1 then COLUP1	=  $36
   3453  f77d
   3454  f77d		       a9 01		      LDA	#$1
   3455  f77f		       c5 e7		      CMP	_Chase_Speed
   3456  f781		       b0 04		      BCS	.skipL0137
   3457  f783				   .condpart22
   3458  f783		       a9 36		      LDA	#$36
   3459  f785		       85 07		      STA	COLUP1
   3460  f787				   .skipL0137
   3461  f787				   .L0138		;  if _Chase_Speed  =	$1 then COLUP1	=  $35
   3462  f787
   3463  f787		       a5 e7		      LDA	_Chase_Speed
   3464  f789		       c9 01		      CMP	#$1
   3465  f78b		       d0 04		      BNE	.skipL0138
   3466  f78d				   .condpart23
   3467  f78d		       a9 35		      LDA	#$35
   3468  f78f		       85 07		      STA	COLUP1
   3469  f791				   .skipL0138
   3470  f791				   .L0139		;  if _Chase_Speed  =	$0 then COLUP1	=  $33
   3471  f791
   3472  f791		       a5 e7		      LDA	_Chase_Speed
   3473  f793		       c9 00		      CMP	#$0
   3474  f795		       d0 04		      BNE	.skipL0139
   3475  f797				   .condpart24
   3476  f797		       a9 33		      LDA	#$33
   3477  f799		       85 07		      STA	COLUP1
   3478  f79b				   .skipL0139
   3479  f79b				   .L0140		;  scorecolor	=  $9C
   3480  f79b
   3481  f79b		       a9 9c		      LDA	#$9C
   3482  f79d		       85 a3		      STA	scorecolor
   3483  f79f				   .
   3484  f79f							;
   3485  f79f
   3486  f79f				   .L0141		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  =	$20 then _Chase_Speed  =  $0 else goto __Skip_Speed_Check1
   3487  f79f
   3488  f79f		       a5 93		      LDA	_sc1
   3489  f7a1		       c9 00		      CMP	#%00
   3490  f7a3		       d0 13		      BNE	.skipL0141
   3491  f7a5				   .condpart25
   3492  f7a5		       a5 94		      LDA	_sc2
   3493  f7a7		       c9 00		      CMP	#%00
   3494  f7a9		       d0 0d		      BNE	.skip25then
   3495  f7ab				   .condpart26
   3496  f7ab		       a5 95		      LDA	_sc3
   3497  f7ad		       c9 20		      CMP	#$20
   3498  f7af		       d0 07		      BNE	.skip26then
   3499  f7b1				   .condpart27
   3500  f7b1		       a9 00		      LDA	#$0
   3501  f7b3		       85 e7		      STA	_Chase_Speed
   3502  f7b5		       4c bb f7 	      jmp	.skipelse1
   3503  f7b8				   .skip26then
   3504  f7b8				   .skip25then
   3505  f7b8				   .skipL0141
   3506  f7b8		       4c dc f7 	      jmp	.__Skip_Speed_Check1
   3507  f7bb
   3508  f7bb				   .skipelse1
   3509  f7bb				   .L0142		;  if _Ch0_Sound  <>  3  &&  !_Bit3_New_Chase_Start{3} then _Bit3_New_Chase_Start{3}  =  1  :	_Ch0_Sound  =  3  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   3510  f7bb
   3511  f7bb		       a5 e4		      LDA	_Ch0_Sound
   3512  f7bd		       c9 03		      CMP	#3
   3513  f7bf		       f0 18		      BEQ	.skipL0142
   3514  f7c1				   .condpart28
   3515  f7c1		       a5 eb		      LDA	_Bit3_New_Chase_Start
   3516  f7c3		       29 08		      AND	#8
   3517  f7c5		       d0 12		      BNE	.skip28then
   3518  f7c7				   .condpart29
   3519  f7c7		       a5 eb		      LDA	_Bit3_New_Chase_Start
   3520  f7c9		       09 08		      ORA	#8
   3521  f7cb		       85 eb		      STA	_Bit3_New_Chase_Start
   3522  f7cd		       a9 03		      LDA	#3
   3523  f7cf		       85 e4		      STA	_Ch0_Sound
   3524  f7d1		       a9 01		      LDA	#1
   3525  f7d3		       85 e5		      STA	_Ch0_Duration
   3526  f7d5		       a9 00		      LDA	#0
   3527  f7d7		       85 e6		      STA	_Ch0_Counter
   3528  f7d9				   .skip28then
   3529  f7d9				   .skipL0142
   3530  f7d9				   .L0143		;  goto __Skip_Speed_Check2
   3531  f7d9
   3532  f7d9		       4c 16 f8 	      jmp	.__Skip_Speed_Check2
   3533  f7dc
   3534  f7dc				   .__Skip_Speed_Check1
   3535  f7dc							; __Skip_Speed_Check1
   3536  f7dc
   3537  f7dc				   .L0144		;  if _sc1 = %00  &&  _sc2 = %00  &&  _sc3  =	$10 then _Chase_Speed  =  $1 else goto __Skip_Speed_Check2
   3538  f7dc
   3539  f7dc		       a5 93		      LDA	_sc1
   3540  f7de		       c9 00		      CMP	#%00
   3541  f7e0		       d0 13		      BNE	.skipL0144
   3542  f7e2				   .condpart30
   3543  f7e2		       a5 94		      LDA	_sc2
   3544  f7e4		       c9 00		      CMP	#%00
   3545  f7e6		       d0 0d		      BNE	.skip30then
   3546  f7e8				   .condpart31
   3547  f7e8		       a5 95		      LDA	_sc3
   3548  f7ea		       c9 10		      CMP	#$10
   3549  f7ec		       d0 07		      BNE	.skip31then
   3550  f7ee				   .condpart32
   3551  f7ee		       a9 01		      LDA	#$1
   3552  f7f0		       85 e7		      STA	_Chase_Speed
   3553  f7f2		       4c f8 f7 	      jmp	.skipelse2
   3554  f7f5				   .skip31then
   3555  f7f5				   .skip30then
   3556  f7f5				   .skipL0144
   3557  f7f5		       4c 16 f8 	      jmp	.__Skip_Speed_Check2
   3558  f7f8
   3559  f7f8				   .skipelse2
   3560  f7f8				   .L0145		;  if _Ch0_Sound  <>  3  &&  !_Bit3_New_Chase_Start{3} then _Bit3_New_Chase_Start{3}  =  1  :	_Ch0_Sound  =  3  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   3561  f7f8
   3562  f7f8		       a5 e4		      LDA	_Ch0_Sound
   3563  f7fa		       c9 03		      CMP	#3
   3564  f7fc		       f0 18		      BEQ	.skipL0145
   3565  f7fe				   .condpart33
   3566  f7fe		       a5 eb		      LDA	_Bit3_New_Chase_Start
   3567  f800		       29 08		      AND	#8
   3568  f802		       d0 12		      BNE	.skip33then
   3569  f804				   .condpart34
   3570  f804		       a5 eb		      LDA	_Bit3_New_Chase_Start
   3571  f806		       09 08		      ORA	#8
   3572  f808		       85 eb		      STA	_Bit3_New_Chase_Start
   3573  f80a		       a9 03		      LDA	#3
   3574  f80c		       85 e4		      STA	_Ch0_Sound
   3575  f80e		       a9 01		      LDA	#1
   3576  f810		       85 e5		      STA	_Ch0_Duration
   3577  f812		       a9 00		      LDA	#0
   3578  f814		       85 e6		      STA	_Ch0_Counter
   3579  f816				   .skip33then
   3580  f816				   .skipL0145
   3581  f816				   .__Skip_Speed_Check2
   3582  f816							; __Skip_Speed_Check2
   3583  f816
   3584  f816				   .
   3585  f816							;
   3586  f816
   3587  f816				   .
   3588  f816							;
   3589  f816
   3590  f816				   .
   3591  f816							;
   3592  f816
   3593  f816				   .
   3594  f816							;
   3595  f816
   3596  f816				   .
   3597  f816							;
   3598  f816
   3599  f816				   .
   3600  f816							;
   3601  f816
   3602  f816				   .
   3603  f816							;
   3604  f816
   3605  f816				   .
   3606  f816							;
   3607  f816
   3608  f816				   .L0146		;  _Bit1_Player_Moving{1}  =  0
   3609  f816
   3610  f816		       a5 eb		      LDA	_Bit1_Player_Moving
   3611  f818		       29 fd		      AND	#253
   3612  f81a		       85 eb		      STA	_Bit1_Player_Moving
   3613  f81c				   .L0147		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then goto __Skip_Joystick_Precheck
   3614  f81c
   3615  f81c		       a9 10		      lda	#$10
   3616  f81e		       2c 80 02 	      bit	SWCHA
   3617  f821		       f0 14		      BEQ	.skipL0147
   3618  f823				   .condpart35
   3619  f823		       a9 20		      lda	#$20
   3620  f825		       2c 80 02 	      bit	SWCHA
   3621  f828		       f0 0d		      BEQ	.skip35then
   3622  f82a				   .condpart36
   3623  f82a		       2c 80 02 	      bit	SWCHA
   3624  f82d		       50 08		      BVC	.skip36then
   3625  f82f				   .condpart37
   3626  f82f		       2c 80 02 	      bit	SWCHA
   3627  f832		       10 03		      BPL	.skip37then
   3628  f834				   .condpart38
   3629  f834		       4c 3d f8 	      jmp	.__Skip_Joystick_Precheck
   3630  f837
   3631  f837				   .skip37then
   3632  f837				   .skip36then
   3633  f837				   .skip35then
   3634  f837				   .skipL0147
   3635  f837				   .
   3636  f837							;
   3637  f837
   3638  f837				   .
   3639  f837							;
   3640  f837
   3641  f837				   .
   3642  f837							;
   3643  f837
   3644  f837				   .L0148		;  _BitOp_P0_P1_Dir  =  _BitOp_P0_P1_Dir  &  %11110000
   3645  f837
   3646  f837		       a5 da		      LDA	_BitOp_P0_P1_Dir
   3647  f839		       29 f0		      AND	#%11110000
   3648  f83b		       85 da		      STA	_BitOp_P0_P1_Dir
   3649  f83d				   .
   3650  f83d							;
   3651  f83d
   3652  f83d				   .__Skip_Joystick_Precheck
   3653  f83d							; __Skip_Joystick_Precheck
   3654  f83d
   3655  f83d				   .
   3656  f83d							;
   3657  f83d
   3658  f83d				   .
   3659  f83d							;
   3660  f83d
   3661  f83d				   .
   3662  f83d							;
   3663  f83d
   3664  f83d				   .
   3665  f83d							;
   3666  f83d
   3667  f83d				   .
   3668  f83d							;
   3669  f83d
   3670  f83d				   .
   3671  f83d							;
   3672  f83d
   3673  f83d				   .
   3674  f83d							;
   3675  f83d
   3676  f83d				   .
   3677  f83d							;
   3678  f83d
   3679  f83d				   .L0149		;  if !joy0up then goto __Skip_Joy0_Up
   3680  f83d
   3681  f83d		       a9 10		      lda	#$10
   3682  f83f		       2c 80 02 	      bit	SWCHA
   3683  f842		       f0 03		      BEQ	.skipL0149
   3684  f844				   .condpart39
   3685  f844		       4c b7 f8 	      jmp	.__Skip_Joy0_Up
   3686  f847
   3687  f847				   .skipL0149
   3688  f847				   .
   3689  f847							;
   3690  f847
   3691  f847				   .
   3692  f847							;
   3693  f847
   3694  f847				   .
   3695  f847							;
   3696  f847
   3697  f847				   .
   3698  f847							;
   3699  f847
   3700  f847				   .L0150		;  _Bit0_P0_Dir_Up{0}	=  1
   3701  f847
   3702  f847		       a5 da		      LDA	_Bit0_P0_Dir_Up
   3703  f849		       09 01		      ORA	#1
   3704  f84b		       85 da		      STA	_Bit0_P0_Dir_Up
   3705  f84d				   .
   3706  f84d							;
   3707  f84d
   3708  f84d				   .
   3709  f84d							;
   3710  f84d
   3711  f84d				   .
   3712  f84d							;
   3713  f84d
   3714  f84d				   .
   3715  f84d							;
   3716  f84d
   3717  f84d				   .L0151		;  if player0y  <=  _P_Edge_Top then goto __Skip_Joy0_Up
   3718  f84d
   3719  f84d		       a9 09		      LDA	#_P_Edge_Top
   3720  f84f		       c5 85		      CMP	player0y
   3721  f851		       90 03		      BCC	.skipL0151
   3722  f853				   .condpart40
   3723  f853		       4c b7 f8 	      jmp	.__Skip_Joy0_Up
   3724  f856
   3725  f856				   .skipL0151
   3726  f856				   .
   3727  f856							;
   3728  f856
   3729  f856				   .
   3730  f856							;
   3731  f856
   3732  f856				   .
   3733  f856							;
   3734  f856
   3735  f856				   .
   3736  f856							;
   3737  f856
   3738  f856				   .L0152		;  temp5  =   ( player0x - 11 )  / 4
   3739  f856
   3740  f856							; complex statement detected
   3741  f856		       a5 80		      LDA	player0x
   3742  f858		       38		      SEC
   3743  f859		       e9 0b		      SBC	#11
   3744  f85b		       4a		      lsr
   3745  f85c		       4a		      lsr
   3746  f85d		       85 a0		      STA	temp5
   3747  f85f				   .
   3748  f85f							;
   3749  f85f
   3750  f85f				   .L0153		;  temp6  =   ( player0y - 9 )  / 8
   3751  f85f
   3752  f85f							; complex statement detected
   3753  f85f		       a5 85		      LDA	player0y
   3754  f861		       38		      SEC
   3755  f862		       e9 09		      SBC	#9
   3756  f864		       4a		      lsr
   3757  f865		       4a		      lsr
   3758  f866		       4a		      lsr
   3759  f867		       85 a1		      STA	temp6
   3760  f869				   .
   3761  f869							;
   3762  f869
   3763  f869				   .L0154		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Up
   3764  f869
   3765  f869		       a5 a0		      LDA	temp5
   3766  f86b		       c9 22		      CMP	#34
   3767  f86d		       b0 0c		      BCS	.skipL0154
   3768  f86f				   .condpart41
   3769  f86f		       a5 a0		      LDA	temp5
   3770  f871		       a4 a1		      LDY	temp6
   3771  f873		       20 6b f2 	      jsr	pfread
   3772  f876		       d0 03		      BNE	.skip41then
   3773  f878				   .condpart42
   3774  f878		       4c b7 f8 	      jmp	.__Skip_Joy0_Up
   3775  f87b
   3776  f87b				   .skip41then
   3777  f87b				   .skipL0154
   3778  f87b				   .
   3779  f87b							;
   3780  f87b
   3781  f87b				   .L0155		;  temp4  =   ( player0x - 16 )  / 4
   3782  f87b
   3783  f87b							; complex statement detected
   3784  f87b		       a5 80		      LDA	player0x
   3785  f87d		       38		      SEC
   3786  f87e		       e9 10		      SBC	#16
   3787  f880		       4a		      lsr
   3788  f881		       4a		      lsr
   3789  f882		       85 9f		      STA	temp4
   3790  f884				   .
   3791  f884							;
   3792  f884
   3793  f884				   .L0156		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Up
   3794  f884
   3795  f884		       a5 9f		      LDA	temp4
   3796  f886		       c9 22		      CMP	#34
   3797  f888		       b0 0c		      BCS	.skipL0156
   3798  f88a				   .condpart43
   3799  f88a		       a5 9f		      LDA	temp4
   3800  f88c		       a4 a1		      LDY	temp6
   3801  f88e		       20 6b f2 	      jsr	pfread
   3802  f891		       d0 03		      BNE	.skip43then
   3803  f893				   .condpart44
   3804  f893		       4c b7 f8 	      jmp	.__Skip_Joy0_Up
   3805  f896
   3806  f896				   .skip43then
   3807  f896				   .skipL0156
   3808  f896				   .
   3809  f896							;
   3810  f896
   3811  f896				   .L0157		;  temp3  =  temp5  -	1
   3812  f896
   3813  f896		       a5 a0		      LDA	temp5
   3814  f898		       38		      SEC
   3815  f899		       e9 01		      SBC	#1
   3816  f89b		       85 9e		      STA	temp3
   3817  f89d				   .
   3818  f89d							;
   3819  f89d
   3820  f89d				   .L0158		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Up
   3821  f89d
   3822  f89d		       a5 9e		      LDA	temp3
   3823  f89f		       c9 22		      CMP	#34
   3824  f8a1		       b0 0c		      BCS	.skipL0158
   3825  f8a3				   .condpart45
   3826  f8a3		       a5 9e		      LDA	temp3
   3827  f8a5		       a4 a1		      LDY	temp6
   3828  f8a7		       20 6b f2 	      jsr	pfread
   3829  f8aa		       d0 03		      BNE	.skip45then
   3830  f8ac				   .condpart46
   3831  f8ac		       4c b7 f8 	      jmp	.__Skip_Joy0_Up
   3832  f8af
   3833  f8af				   .skip45then
   3834  f8af				   .skipL0158
   3835  f8af				   .
   3836  f8af							;
   3837  f8af
   3838  f8af				   .
   3839  f8af							;
   3840  f8af
   3841  f8af				   .
   3842  f8af							;
   3843  f8af
   3844  f8af				   .
   3845  f8af							;
   3846  f8af
   3847  f8af				   .L0159		;  _Bit1_Player_Moving{1}  =  1
   3848  f8af
   3849  f8af		       a5 eb		      LDA	_Bit1_Player_Moving
   3850  f8b1		       09 02		      ORA	#2
   3851  f8b3		       85 eb		      STA	_Bit1_Player_Moving
   3852  f8b5				   .L0160		;  player0y  =  player0y  -  1
   3853  f8b5
   3854  f8b5		       c6 85		      DEC	player0y
   3855  f8b7				   .
   3856  f8b7							;
   3857  f8b7
   3858  f8b7				   .__Skip_Joy0_Up
   3859  f8b7							; __Skip_Joy0_Up
   3860  f8b7
   3861  f8b7				   .
   3862  f8b7							;
   3863  f8b7
   3864  f8b7				   .
   3865  f8b7							;
   3866  f8b7
   3867  f8b7				   .
   3868  f8b7							;
   3869  f8b7
   3870  f8b7				   .
   3871  f8b7							;
   3872  f8b7
   3873  f8b7				   .
   3874  f8b7							;
   3875  f8b7
   3876  f8b7				   .
   3877  f8b7							;
   3878  f8b7
   3879  f8b7				   .
   3880  f8b7							;
   3881  f8b7
   3882  f8b7				   .L0161		;  if !joy0down then goto __Skip_Joy0_Down
   3883  f8b7
   3884  f8b7		       a9 20		      lda	#$20
   3885  f8b9		       2c 80 02 	      bit	SWCHA
   3886  f8bc		       f0 03		      BEQ	.skipL0161
   3887  f8be				   .condpart47
   3888  f8be		       4c 2e f9 	      jmp	.__Skip_Joy0_Down
   3889  f8c1
   3890  f8c1				   .skipL0161
   3891  f8c1				   .
   3892  f8c1							;
   3893  f8c1
   3894  f8c1				   .
   3895  f8c1							;
   3896  f8c1
   3897  f8c1				   .
   3898  f8c1							;
   3899  f8c1
   3900  f8c1				   .
   3901  f8c1							;
   3902  f8c1
   3903  f8c1				   .L0162		;  _Bit1_P0_Dir_Down{1}  =  1
   3904  f8c1
   3905  f8c1		       a5 da		      LDA	_Bit1_P0_Dir_Down
   3906  f8c3		       09 02		      ORA	#2
   3907  f8c5		       85 da		      STA	_Bit1_P0_Dir_Down
   3908  f8c7				   .
   3909  f8c7							;
   3910  f8c7
   3911  f8c7				   .
   3912  f8c7							;
   3913  f8c7
   3914  f8c7				   .
   3915  f8c7							;
   3916  f8c7
   3917  f8c7				   .
   3918  f8c7							;
   3919  f8c7
   3920  f8c7				   .L0163		;  if player0y  >=  _P_Edge_Bottom then goto __Skip_Joy0_Down
   3921  f8c7
   3922  f8c7		       a5 85		      LDA	player0y
   3923  f8c9		       c9 58		      CMP	#_P_Edge_Bottom
   3924  f8cb		       90 03		      BCC	.skipL0163
   3925  f8cd				   .condpart48
   3926  f8cd		       4c 2e f9 	      jmp	.__Skip_Joy0_Down
   3927  f8d0
   3928  f8d0				   .skipL0163
   3929  f8d0				   .
   3930  f8d0							;
   3931  f8d0
   3932  f8d0				   .
   3933  f8d0							;
   3934  f8d0
   3935  f8d0				   .
   3936  f8d0							;
   3937  f8d0
   3938  f8d0				   .
   3939  f8d0							;
   3940  f8d0
   3941  f8d0				   .L0164		;  temp5  =   ( player0x - 11 )  / 4
   3942  f8d0
   3943  f8d0							; complex statement detected
   3944  f8d0		       a5 80		      LDA	player0x
   3945  f8d2		       38		      SEC
   3946  f8d3		       e9 0b		      SBC	#11
   3947  f8d5		       4a		      lsr
   3948  f8d6		       4a		      lsr
   3949  f8d7		       85 a0		      STA	temp5
   3950  f8d9				   .
   3951  f8d9							;
   3952  f8d9
   3953  f8d9				   .L0165		;  temp6  =   ( player0y )  / 8
   3954  f8d9
   3955  f8d9							; complex statement detected
   3956  f8d9		       a5 85		      LDA	player0y
   3957  f8db		       4a		      lsr
   3958  f8dc		       4a		      lsr
   3959  f8dd		       4a		      lsr
   3960  f8de		       85 a1		      STA	temp6
   3961  f8e0				   .
   3962  f8e0							;
   3963  f8e0
   3964  f8e0				   .L0166		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_Joy0_Down
   3965  f8e0
   3966  f8e0		       a5 a0		      LDA	temp5
   3967  f8e2		       c9 22		      CMP	#34
   3968  f8e4		       b0 0c		      BCS	.skipL0166
   3969  f8e6				   .condpart49
   3970  f8e6		       a5 a0		      LDA	temp5
   3971  f8e8		       a4 a1		      LDY	temp6
   3972  f8ea		       20 6b f2 	      jsr	pfread
   3973  f8ed		       d0 03		      BNE	.skip49then
   3974  f8ef				   .condpart50
   3975  f8ef		       4c 2e f9 	      jmp	.__Skip_Joy0_Down
   3976  f8f2
   3977  f8f2				   .skip49then
   3978  f8f2				   .skipL0166
   3979  f8f2				   .
   3980  f8f2							;
   3981  f8f2
   3982  f8f2				   .L0167		;  temp4  =   ( player0x - 16 )  / 4
   3983  f8f2
   3984  f8f2							; complex statement detected
   3985  f8f2		       a5 80		      LDA	player0x
   3986  f8f4		       38		      SEC
   3987  f8f5		       e9 10		      SBC	#16
   3988  f8f7		       4a		      lsr
   3989  f8f8		       4a		      lsr
   3990  f8f9		       85 9f		      STA	temp4
   3991  f8fb				   .
   3992  f8fb							;
   3993  f8fb
   3994  f8fb				   .L0168		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_Joy0_Down
   3995  f8fb
   3996  f8fb		       a5 9f		      LDA	temp4
   3997  f8fd		       c9 22		      CMP	#34
   3998  f8ff		       b0 0c		      BCS	.skipL0168
   3999  f901				   .condpart51
   4000  f901		       a5 9f		      LDA	temp4
   4001  f903		       a4 a1		      LDY	temp6
   4002  f905		       20 6b f2 	      jsr	pfread
   4003  f908		       d0 03		      BNE	.skip51then
   4004  f90a				   .condpart52
   4005  f90a		       4c 2e f9 	      jmp	.__Skip_Joy0_Down
   4006  f90d
   4007  f90d				   .skip51then
   4008  f90d				   .skipL0168
   4009  f90d				   .
   4010  f90d							;
   4011  f90d
   4012  f90d				   .L0169		;  temp3  =  temp5  -	1
   4013  f90d
   4014  f90d		       a5 a0		      LDA	temp5
   4015  f90f		       38		      SEC
   4016  f910		       e9 01		      SBC	#1
   4017  f912		       85 9e		      STA	temp3
   4018  f914				   .
   4019  f914							;
   4020  f914
   4021  f914				   .L0170		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_Joy0_Down
   4022  f914
   4023  f914		       a5 9e		      LDA	temp3
   4024  f916		       c9 22		      CMP	#34
   4025  f918		       b0 0c		      BCS	.skipL0170
   4026  f91a				   .condpart53
   4027  f91a		       a5 9e		      LDA	temp3
   4028  f91c		       a4 a1		      LDY	temp6
   4029  f91e		       20 6b f2 	      jsr	pfread
   4030  f921		       d0 03		      BNE	.skip53then
   4031  f923				   .condpart54
   4032  f923		       4c 2e f9 	      jmp	.__Skip_Joy0_Down
   4033  f926
   4034  f926				   .skip53then
   4035  f926				   .skipL0170
   4036  f926				   .
   4037  f926							;
   4038  f926
   4039  f926				   .
   4040  f926							;
   4041  f926
   4042  f926				   .
   4043  f926							;
   4044  f926
   4045  f926				   .
   4046  f926							;
   4047  f926
   4048  f926				   .L0171		;  _Bit1_Player_Moving{1}  =  1
   4049  f926
   4050  f926		       a5 eb		      LDA	_Bit1_Player_Moving
   4051  f928		       09 02		      ORA	#2
   4052  f92a		       85 eb		      STA	_Bit1_Player_Moving
   4053  f92c				   .L0172		;  player0y  =  player0y  +  1
   4054  f92c
   4055  f92c		       e6 85		      INC	player0y
   4056  f92e				   .
   4057  f92e							;
   4058  f92e
   4059  f92e				   .__Skip_Joy0_Down
   4060  f92e							; __Skip_Joy0_Down
   4061  f92e
   4062  f92e				   .
   4063  f92e							;
   4064  f92e
   4065  f92e				   .
   4066  f92e							;
   4067  f92e
   4068  f92e				   .
   4069  f92e							;
   4070  f92e
   4071  f92e				   .
   4072  f92e							;
   4073  f92e
   4074  f92e				   .
   4075  f92e							;
   4076  f92e
   4077  f92e				   .
   4078  f92e							;
   4079  f92e
   4080  f92e				   .
   4081  f92e							;
   4082  f92e
   4083  f92e				   .
   4084  f92e							;
   4085  f92e
   4086  f92e				   .
   4087  f92e							;
   4088  f92e
   4089  f92e				   .
   4090  f92e							;
   4091  f92e
   4092  f92e				   .L0173		;  if !joy0left then goto __Skip_Joy0_Left
   4093  f92e
   4094  f92e		       2c 80 02 	      bit	SWCHA
   4095  f931		       50 03		      BVC	.skipL0173
   4096  f933				   .condpart55
   4097  f933		       4c 92 f9 	      jmp	.__Skip_Joy0_Left
   4098  f936
   4099  f936				   .skipL0173
   4100  f936				   .
   4101  f936							;
   4102  f936
   4103  f936				   .
   4104  f936							;
   4105  f936
   4106  f936				   .
   4107  f936							;
   4108  f936
   4109  f936				   .
   4110  f936							;
   4111  f936
   4112  f936				   .L0174		;  _Bit2_P0_Dir_Left{2}  =  1
   4113  f936
   4114  f936		       a5 da		      LDA	_Bit2_P0_Dir_Left
   4115  f938		       09 04		      ORA	#4
   4116  f93a		       85 da		      STA	_Bit2_P0_Dir_Left
   4117  f93c				   .
   4118  f93c							;
   4119  f93c
   4120  f93c				   .
   4121  f93c							;
   4122  f93c
   4123  f93c				   .
   4124  f93c							;
   4125  f93c
   4126  f93c				   .
   4127  f93c							;
   4128  f93c
   4129  f93c				   .L0175		;  if player0x  <=  _P_Edge_Left then goto __Skip_Joy0_Left
   4130  f93c
   4131  f93c		       a9 01		      LDA	#_P_Edge_Left
   4132  f93e		       c5 80		      CMP	player0x
   4133  f940		       90 03		      BCC	.skipL0175
   4134  f942				   .condpart56
   4135  f942		       4c 92 f9 	      jmp	.__Skip_Joy0_Left
   4136  f945
   4137  f945				   .skipL0175
   4138  f945				   .
   4139  f945							;
   4140  f945
   4141  f945				   .
   4142  f945							;
   4143  f945
   4144  f945				   .
   4145  f945							;
   4146  f945
   4147  f945				   .
   4148  f945							;
   4149  f945
   4150  f945				   .L0176		;  temp5  =   ( player0y - 1 )  / 8
   4151  f945
   4152  f945							; complex statement detected
   4153  f945		       a5 85		      LDA	player0y
   4154  f947		       38		      SEC
   4155  f948		       e9 01		      SBC	#1
   4156  f94a		       4a		      lsr
   4157  f94b		       4a		      lsr
   4158  f94c		       4a		      lsr
   4159  f94d		       85 a0		      STA	temp5
   4160  f94f				   .
   4161  f94f							;
   4162  f94f
   4163  f94f				   .L0177		;  temp6  =   ( player0x - 17 )  / 4
   4164  f94f
   4165  f94f							; complex statement detected
   4166  f94f		       a5 80		      LDA	player0x
   4167  f951		       38		      SEC
   4168  f952		       e9 11		      SBC	#17
   4169  f954		       4a		      lsr
   4170  f955		       4a		      lsr
   4171  f956		       85 a1		      STA	temp6
   4172  f958				   .
   4173  f958							;
   4174  f958
   4175  f958				   .L0178		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Left
   4176  f958
   4177  f958		       a5 a1		      LDA	temp6
   4178  f95a		       c9 22		      CMP	#34
   4179  f95c		       b0 0c		      BCS	.skipL0178
   4180  f95e				   .condpart57
   4181  f95e		       a5 a1		      LDA	temp6
   4182  f960		       a4 a0		      LDY	temp5
   4183  f962		       20 6b f2 	      jsr	pfread
   4184  f965		       d0 03		      BNE	.skip57then
   4185  f967				   .condpart58
   4186  f967		       4c 92 f9 	      jmp	.__Skip_Joy0_Left
   4187  f96a
   4188  f96a				   .skip57then
   4189  f96a				   .skipL0178
   4190  f96a				   .
   4191  f96a							;
   4192  f96a
   4193  f96a				   .L0179		;  temp3  =   ( player0y - 8 )  / 8
   4194  f96a
   4195  f96a							; complex statement detected
   4196  f96a		       a5 85		      LDA	player0y
   4197  f96c		       38		      SEC
   4198  f96d		       e9 08		      SBC	#8
   4199  f96f		       4a		      lsr
   4200  f970		       4a		      lsr
   4201  f971		       4a		      lsr
   4202  f972		       85 9e		      STA	temp3
   4203  f974				   .
   4204  f974							;
   4205  f974
   4206  f974				   .L0180		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Left
   4207  f974
   4208  f974		       a5 a1		      LDA	temp6
   4209  f976		       c9 22		      CMP	#34
   4210  f978		       b0 0c		      BCS	.skipL0180
   4211  f97a				   .condpart59
   4212  f97a		       a5 a1		      LDA	temp6
   4213  f97c		       a4 9e		      LDY	temp3
   4214  f97e		       20 6b f2 	      jsr	pfread
   4215  f981		       d0 03		      BNE	.skip59then
   4216  f983				   .condpart60
   4217  f983		       4c 92 f9 	      jmp	.__Skip_Joy0_Left
   4218  f986
   4219  f986				   .skip59then
   4220  f986				   .skipL0180
   4221  f986				   .
   4222  f986							;
   4223  f986
   4224  f986				   .
   4225  f986							;
   4226  f986
   4227  f986				   .
   4228  f986							;
   4229  f986
   4230  f986				   .
   4231  f986							;
   4232  f986
   4233  f986				   .L0181		;  _Bit1_Player_Moving{1}  =  1
   4234  f986
   4235  f986		       a5 eb		      LDA	_Bit1_Player_Moving
   4236  f988		       09 02		      ORA	#2
   4237  f98a		       85 eb		      STA	_Bit1_Player_Moving
   4238  f98c				   .L0182		;  REFP0  =  8
   4239  f98c
   4240  f98c		       a9 08		      LDA	#8
   4241  f98e		       85 0b		      STA	REFP0
   4242  f990				   .L0183		;  player0x  =  player0x  -  1
   4243  f990
   4244  f990		       c6 80		      DEC	player0x
   4245  f992				   .
   4246  f992							;
   4247  f992
   4248  f992				   .__Skip_Joy0_Left
   4249  f992							; __Skip_Joy0_Left
   4250  f992
   4251  f992				   .
   4252  f992							;
   4253  f992
   4254  f992				   .
   4255  f992							;
   4256  f992
   4257  f992				   .
   4258  f992							;
   4259  f992
   4260  f992				   .
   4261  f992							;
   4262  f992
   4263  f992				   .
   4264  f992							;
   4265  f992
   4266  f992				   .
   4267  f992							;
   4268  f992
   4269  f992				   .
   4270  f992							;
   4271  f992
   4272  f992				   .
   4273  f992							;
   4274  f992
   4275  f992				   .L0184		;  if !joy0right then goto __Skip_Joy0_Right
   4276  f992
   4277  f992		       2c 80 02 	      bit	SWCHA
   4278  f995		       10 03		      BPL	.skipL0184
   4279  f997				   .condpart61
   4280  f997		       4c f2 f9 	      jmp	.__Skip_Joy0_Right
   4281  f99a
   4282  f99a				   .skipL0184
   4283  f99a				   .
   4284  f99a							;
   4285  f99a
   4286  f99a				   .
   4287  f99a							;
   4288  f99a
   4289  f99a				   .
   4290  f99a							;
   4291  f99a
   4292  f99a				   .
   4293  f99a							;
   4294  f99a
   4295  f99a				   .L0185		;  _Bit3_P0_Dir_Right{3}  =  1
   4296  f99a
   4297  f99a		       a5 da		      LDA	_Bit3_P0_Dir_Right
   4298  f99c		       09 08		      ORA	#8
   4299  f99e		       85 da		      STA	_Bit3_P0_Dir_Right
   4300  f9a0				   .
   4301  f9a0							;
   4302  f9a0
   4303  f9a0				   .
   4304  f9a0							;
   4305  f9a0
   4306  f9a0				   .
   4307  f9a0							;
   4308  f9a0
   4309  f9a0				   .
   4310  f9a0							;
   4311  f9a0
   4312  f9a0				   .L0186		;  if player0x  >=  _P_Edge_Right then goto __Skip_Joy0_Right
   4313  f9a0
   4314  f9a0		       a5 80		      LDA	player0x
   4315  f9a2		       c9 99		      CMP	#_P_Edge_Right
   4316  f9a4		       90 03		      BCC	.skipL0186
   4317  f9a6				   .condpart62
   4318  f9a6		       4c f2 f9 	      jmp	.__Skip_Joy0_Right
   4319  f9a9
   4320  f9a9				   .skipL0186
   4321  f9a9				   .
   4322  f9a9							;
   4323  f9a9
   4324  f9a9				   .
   4325  f9a9							;
   4326  f9a9
   4327  f9a9				   .
   4328  f9a9							;
   4329  f9a9
   4330  f9a9				   .
   4331  f9a9							;
   4332  f9a9
   4333  f9a9				   .L0187		;  temp5  =   ( player0y - 1 )  / 8
   4334  f9a9
   4335  f9a9							; complex statement detected
   4336  f9a9		       a5 85		      LDA	player0y
   4337  f9ab		       38		      SEC
   4338  f9ac		       e9 01		      SBC	#1
   4339  f9ae		       4a		      lsr
   4340  f9af		       4a		      lsr
   4341  f9b0		       4a		      lsr
   4342  f9b1		       85 a0		      STA	temp5
   4343  f9b3				   .
   4344  f9b3							;
   4345  f9b3
   4346  f9b3				   .L0188		;  temp6  =   ( player0x - 10 )  / 4
   4347  f9b3
   4348  f9b3							; complex statement detected
   4349  f9b3		       a5 80		      LDA	player0x
   4350  f9b5		       38		      SEC
   4351  f9b6		       e9 0a		      SBC	#10
   4352  f9b8		       4a		      lsr
   4353  f9b9		       4a		      lsr
   4354  f9ba		       85 a1		      STA	temp6
   4355  f9bc				   .
   4356  f9bc							;
   4357  f9bc
   4358  f9bc				   .L0189		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_Joy0_Right
   4359  f9bc
   4360  f9bc		       a5 a1		      LDA	temp6
   4361  f9be		       c9 22		      CMP	#34
   4362  f9c0		       b0 0c		      BCS	.skipL0189
   4363  f9c2				   .condpart63
   4364  f9c2		       a5 a1		      LDA	temp6
   4365  f9c4		       a4 a0		      LDY	temp5
   4366  f9c6		       20 6b f2 	      jsr	pfread
   4367  f9c9		       d0 03		      BNE	.skip63then
   4368  f9cb				   .condpart64
   4369  f9cb		       4c f2 f9 	      jmp	.__Skip_Joy0_Right
   4370  f9ce
   4371  f9ce				   .skip63then
   4372  f9ce				   .skipL0189
   4373  f9ce				   .
   4374  f9ce							;
   4375  f9ce
   4376  f9ce				   .L0190		;  temp3  =   ( player0y - 8 )  / 8
   4377  f9ce
   4378  f9ce							; complex statement detected
   4379  f9ce		       a5 85		      LDA	player0y
   4380  f9d0		       38		      SEC
   4381  f9d1		       e9 08		      SBC	#8
   4382  f9d3		       4a		      lsr
   4383  f9d4		       4a		      lsr
   4384  f9d5		       4a		      lsr
   4385  f9d6		       85 9e		      STA	temp3
   4386  f9d8				   .
   4387  f9d8							;
   4388  f9d8
   4389  f9d8				   .L0191		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_Joy0_Right
   4390  f9d8
   4391  f9d8		       a5 a1		      LDA	temp6
   4392  f9da		       c9 22		      CMP	#34
   4393  f9dc		       b0 0c		      BCS	.skipL0191
   4394  f9de				   .condpart65
   4395  f9de		       a5 a1		      LDA	temp6
   4396  f9e0		       a4 9e		      LDY	temp3
   4397  f9e2		       20 6b f2 	      jsr	pfread
   4398  f9e5		       d0 03		      BNE	.skip65then
   4399  f9e7				   .condpart66
   4400  f9e7		       4c f2 f9 	      jmp	.__Skip_Joy0_Right
   4401  f9ea
   4402  f9ea				   .skip65then
   4403  f9ea				   .skipL0191
   4404  f9ea				   .
   4405  f9ea							;
   4406  f9ea
   4407  f9ea				   .
   4408  f9ea							;
   4409  f9ea
   4410  f9ea				   .
   4411  f9ea							;
   4412  f9ea
   4413  f9ea				   .
   4414  f9ea							;
   4415  f9ea
   4416  f9ea				   .L0192		;  _Bit1_Player_Moving{1}  =  1
   4417  f9ea
   4418  f9ea		       a5 eb		      LDA	_Bit1_Player_Moving
   4419  f9ec		       09 02		      ORA	#2
   4420  f9ee		       85 eb		      STA	_Bit1_Player_Moving
   4421  f9f0				   .L0193		;  player0x  =  player0x  +  1
   4422  f9f0
   4423  f9f0		       e6 80		      INC	player0x
   4424  f9f2				   .
   4425  f9f2							;
   4426  f9f2
   4427  f9f2				   .__Skip_Joy0_Right
   4428  f9f2							; __Skip_Joy0_Right
   4429  f9f2
   4430  f9f2				   .
   4431  f9f2							;
   4432  f9f2
   4433  f9f2				   .
   4434  f9f2							;
   4435  f9f2
   4436  f9f2				   .
   4437  f9f2							;
   4438  f9f2
   4439  f9f2				   .
   4440  f9f2							;
   4441  f9f2
   4442  f9f2				   .L0194		;  if _Master_Counter & _Chase_Speed then goto __Skip_AI_Right
   4443  f9f2
   4444  f9f2		       a5 d4		      LDA	_Master_Counter
   4445  f9f4		       25 e7		      AND	_Chase_Speed
   4446  f9f6		       f0 03		      BEQ	.skipL0194
   4447  f9f8				   .condpart67
   4448  f9f8		       4c ca fb 	      jmp	.__Skip_AI_Right
   4449  f9fb
   4450  f9fb				   .skipL0194
   4451  f9fb				   .L0195		;  _Bit2_Mino_Moving{2}  =  0
   4452  f9fb
   4453  f9fb		       a5 eb		      LDA	_Bit2_Mino_Moving
   4454  f9fd		       29 fb		      AND	#251
   4455  f9ff		       85 eb		      STA	_Bit2_Mino_Moving
   4456  fa01				   .
   4457  fa01							;
   4458  fa01
   4459  fa01				   .
   4460  fa01							;
   4461  fa01
   4462  fa01				   .
   4463  fa01							;
   4464  fa01
   4465  fa01				   .
   4466  fa01							;
   4467  fa01
   4468  fa01				   .
   4469  fa01							;
   4470  fa01
   4471  fa01				   .
   4472  fa01							;
   4473  fa01
   4474  fa01				   .
   4475  fa01							;
   4476  fa01
   4477  fa01				   .
   4478  fa01							;
   4479  fa01
   4480  fa01				   .
   4481  fa01							;
   4482  fa01
   4483  fa01				   .
   4484  fa01							;
   4485  fa01
   4486  fa01				   .
   4487  fa01							;
   4488  fa01
   4489  fa01				   .L0196		;  if player1y  <=  player0y then goto __Skip_AI_Up
   4490  fa01
   4491  fa01		       a5 85		      LDA	player0y
   4492  fa03		       c5 86		      CMP	player1y
   4493  fa05		       90 03		      BCC	.skipL0196
   4494  fa07				   .condpart68
   4495  fa07		       4c 80 fa 	      jmp	.__Skip_AI_Up
   4496  fa0a
   4497  fa0a				   .skipL0196
   4498  fa0a				   .
   4499  fa0a							;
   4500  fa0a
   4501  fa0a				   .
   4502  fa0a							;
   4503  fa0a
   4504  fa0a				   .
   4505  fa0a							;
   4506  fa0a
   4507  fa0a				   .
   4508  fa0a							;
   4509  fa0a
   4510  fa0a				   .L0197		;  _Bit4_P1_Dir_Up{4}	=  1
   4511  fa0a
   4512  fa0a		       a5 da		      LDA	_Bit4_P1_Dir_Up
   4513  fa0c		       09 10		      ORA	#16
   4514  fa0e		       85 da		      STA	_Bit4_P1_Dir_Up
   4515  fa10				   .L0198		;  _Bit5_P1_Dir_Down{5}  =  0
   4516  fa10
   4517  fa10		       a5 da		      LDA	_Bit5_P1_Dir_Down
   4518  fa12		       29 df		      AND	#223
   4519  fa14		       85 da		      STA	_Bit5_P1_Dir_Down
   4520  fa16				   .
   4521  fa16							;
   4522  fa16
   4523  fa16				   .
   4524  fa16							;
   4525  fa16
   4526  fa16				   .
   4527  fa16							;
   4528  fa16
   4529  fa16				   .
   4530  fa16							;
   4531  fa16
   4532  fa16				   .L0199		;  if player1y  <=  _P_Edge_Top then goto __Skip_AI_Up
   4533  fa16
   4534  fa16		       a9 09		      LDA	#_P_Edge_Top
   4535  fa18		       c5 86		      CMP	player1y
   4536  fa1a		       90 03		      BCC	.skipL0199
   4537  fa1c				   .condpart69
   4538  fa1c		       4c 80 fa 	      jmp	.__Skip_AI_Up
   4539  fa1f
   4540  fa1f				   .skipL0199
   4541  fa1f				   .
   4542  fa1f							;
   4543  fa1f
   4544  fa1f				   .
   4545  fa1f							;
   4546  fa1f
   4547  fa1f				   .
   4548  fa1f							;
   4549  fa1f
   4550  fa1f				   .
   4551  fa1f							;
   4552  fa1f
   4553  fa1f				   .L0200		;  temp5  =   ( player1x - 10 )  / 4
   4554  fa1f
   4555  fa1f							; complex statement detected
   4556  fa1f		       a5 81		      LDA	player1x
   4557  fa21		       38		      SEC
   4558  fa22		       e9 0a		      SBC	#10
   4559  fa24		       4a		      lsr
   4560  fa25		       4a		      lsr
   4561  fa26		       85 a0		      STA	temp5
   4562  fa28				   .
   4563  fa28							;
   4564  fa28
   4565  fa28				   .L0201		;  temp6  =   ( player1y - 9 )  / 8
   4566  fa28
   4567  fa28							; complex statement detected
   4568  fa28		       a5 86		      LDA	player1y
   4569  fa2a		       38		      SEC
   4570  fa2b		       e9 09		      SBC	#9
   4571  fa2d		       4a		      lsr
   4572  fa2e		       4a		      lsr
   4573  fa2f		       4a		      lsr
   4574  fa30		       85 a1		      STA	temp6
   4575  fa32				   .
   4576  fa32							;
   4577  fa32
   4578  fa32				   .L0202		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Up
   4579  fa32
   4580  fa32		       a5 a0		      LDA	temp5
   4581  fa34		       c9 22		      CMP	#34
   4582  fa36		       b0 0c		      BCS	.skipL0202
   4583  fa38				   .condpart70
   4584  fa38		       a5 a0		      LDA	temp5
   4585  fa3a		       a4 a1		      LDY	temp6
   4586  fa3c		       20 6b f2 	      jsr	pfread
   4587  fa3f		       d0 03		      BNE	.skip70then
   4588  fa41				   .condpart71
   4589  fa41		       4c 80 fa 	      jmp	.__Skip_AI_Up
   4590  fa44
   4591  fa44				   .skip70then
   4592  fa44				   .skipL0202
   4593  fa44				   .
   4594  fa44							;
   4595  fa44
   4596  fa44				   .L0203		;  temp4  =   ( player1x - 17 )  / 4
   4597  fa44
   4598  fa44							; complex statement detected
   4599  fa44		       a5 81		      LDA	player1x
   4600  fa46		       38		      SEC
   4601  fa47		       e9 11		      SBC	#17
   4602  fa49		       4a		      lsr
   4603  fa4a		       4a		      lsr
   4604  fa4b		       85 9f		      STA	temp4
   4605  fa4d				   .
   4606  fa4d							;
   4607  fa4d
   4608  fa4d				   .L0204		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Up
   4609  fa4d
   4610  fa4d		       a5 9f		      LDA	temp4
   4611  fa4f		       c9 22		      CMP	#34
   4612  fa51		       b0 0c		      BCS	.skipL0204
   4613  fa53				   .condpart72
   4614  fa53		       a5 9f		      LDA	temp4
   4615  fa55		       a4 a1		      LDY	temp6
   4616  fa57		       20 6b f2 	      jsr	pfread
   4617  fa5a		       d0 03		      BNE	.skip72then
   4618  fa5c				   .condpart73
   4619  fa5c		       4c 80 fa 	      jmp	.__Skip_AI_Up
   4620  fa5f
   4621  fa5f				   .skip72then
   4622  fa5f				   .skipL0204
   4623  fa5f				   .
   4624  fa5f							;
   4625  fa5f
   4626  fa5f				   .L0205		;  temp3  =  temp5  -	1
   4627  fa5f
   4628  fa5f		       a5 a0		      LDA	temp5
   4629  fa61		       38		      SEC
   4630  fa62		       e9 01		      SBC	#1
   4631  fa64		       85 9e		      STA	temp3
   4632  fa66				   .
   4633  fa66							;
   4634  fa66
   4635  fa66				   .L0206		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Up
   4636  fa66
   4637  fa66		       a5 9e		      LDA	temp3
   4638  fa68		       c9 22		      CMP	#34
   4639  fa6a		       b0 0c		      BCS	.skipL0206
   4640  fa6c				   .condpart74
   4641  fa6c		       a5 9e		      LDA	temp3
   4642  fa6e		       a4 a1		      LDY	temp6
   4643  fa70		       20 6b f2 	      jsr	pfread
   4644  fa73		       d0 03		      BNE	.skip74then
   4645  fa75				   .condpart75
   4646  fa75		       4c 80 fa 	      jmp	.__Skip_AI_Up
   4647  fa78
   4648  fa78				   .skip74then
   4649  fa78				   .skipL0206
   4650  fa78				   .
   4651  fa78							;
   4652  fa78
   4653  fa78				   .
   4654  fa78							;
   4655  fa78
   4656  fa78				   .
   4657  fa78							;
   4658  fa78
   4659  fa78				   .
   4660  fa78							;
   4661  fa78
   4662  fa78				   .L0207		;  _Bit2_Mino_Moving{2}  =  1
   4663  fa78
   4664  fa78		       a5 eb		      LDA	_Bit2_Mino_Moving
   4665  fa7a		       09 04		      ORA	#4
   4666  fa7c		       85 eb		      STA	_Bit2_Mino_Moving
   4667  fa7e				   .L0208		;  player1y  =  player1y  -  1
   4668  fa7e
   4669  fa7e		       c6 86		      DEC	player1y
   4670  fa80				   .
   4671  fa80							;
   4672  fa80
   4673  fa80				   .__Skip_AI_Up
   4674  fa80							; __Skip_AI_Up
   4675  fa80
   4676  fa80				   .
   4677  fa80							;
   4678  fa80
   4679  fa80				   .
   4680  fa80							;
   4681  fa80
   4682  fa80				   .
   4683  fa80							;
   4684  fa80
   4685  fa80				   .
   4686  fa80							;
   4687  fa80
   4688  fa80				   .
   4689  fa80							;
   4690  fa80
   4691  fa80				   .
   4692  fa80							;
   4693  fa80
   4694  fa80				   .
   4695  fa80							;
   4696  fa80
   4697  fa80				   .
   4698  fa80							;
   4699  fa80
   4700  fa80				   .L0209		;  if player1y  >=  player0y then goto __Skip_AI_Down
   4701  fa80
   4702  fa80		       a5 86		      LDA	player1y
   4703  fa82		       c5 85		      CMP	player0y
   4704  fa84		       90 03		      BCC	.skipL0209
   4705  fa86				   .condpart76
   4706  fa86		       4c fc fa 	      jmp	.__Skip_AI_Down
   4707  fa89
   4708  fa89				   .skipL0209
   4709  fa89				   .
   4710  fa89							;
   4711  fa89
   4712  fa89				   .
   4713  fa89							;
   4714  fa89
   4715  fa89				   .
   4716  fa89							;
   4717  fa89
   4718  fa89				   .
   4719  fa89							;
   4720  fa89
   4721  fa89				   .L0210		;  _Bit5_P1_Dir_Down{5}  =  1
   4722  fa89
   4723  fa89		       a5 da		      LDA	_Bit5_P1_Dir_Down
   4724  fa8b		       09 20		      ORA	#32
   4725  fa8d		       85 da		      STA	_Bit5_P1_Dir_Down
   4726  fa8f				   .L0211		;  _Bit4_P1_Dir_Up{4}	=  0
   4727  fa8f
   4728  fa8f		       a5 da		      LDA	_Bit4_P1_Dir_Up
   4729  fa91		       29 ef		      AND	#239
   4730  fa93		       85 da		      STA	_Bit4_P1_Dir_Up
   4731  fa95				   .
   4732  fa95							;
   4733  fa95
   4734  fa95				   .
   4735  fa95							;
   4736  fa95
   4737  fa95				   .
   4738  fa95							;
   4739  fa95
   4740  fa95				   .L0212		;  if player1y  >=  _P_Edge_Bottom then goto __Skip_AI_Down
   4741  fa95
   4742  fa95		       a5 86		      LDA	player1y
   4743  fa97		       c9 58		      CMP	#_P_Edge_Bottom
   4744  fa99		       90 03		      BCC	.skipL0212
   4745  fa9b				   .condpart77
   4746  fa9b		       4c fc fa 	      jmp	.__Skip_AI_Down
   4747  fa9e
   4748  fa9e				   .skipL0212
   4749  fa9e				   .
   4750  fa9e							;
   4751  fa9e
   4752  fa9e				   .
   4753  fa9e							;
   4754  fa9e
   4755  fa9e				   .
   4756  fa9e							;
   4757  fa9e
   4758  fa9e				   .
   4759  fa9e							;
   4760  fa9e
   4761  fa9e				   .L0213		;  temp5  =   ( player1x - 10 )  / 4
   4762  fa9e
   4763  fa9e							; complex statement detected
   4764  fa9e		       a5 81		      LDA	player1x
   4765  faa0		       38		      SEC
   4766  faa1		       e9 0a		      SBC	#10
   4767  faa3		       4a		      lsr
   4768  faa4		       4a		      lsr
   4769  faa5		       85 a0		      STA	temp5
   4770  faa7				   .
   4771  faa7							;
   4772  faa7
   4773  faa7				   .L0214		;  temp6  =   ( player1y )  / 8
   4774  faa7
   4775  faa7							; complex statement detected
   4776  faa7		       a5 86		      LDA	player1y
   4777  faa9		       4a		      lsr
   4778  faaa		       4a		      lsr
   4779  faab		       4a		      lsr
   4780  faac		       85 a1		      STA	temp6
   4781  faae				   .
   4782  faae							;
   4783  faae
   4784  faae				   .L0215		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __Skip_AI_Down
   4785  faae
   4786  faae		       a5 a0		      LDA	temp5
   4787  fab0		       c9 22		      CMP	#34
   4788  fab2		       b0 0c		      BCS	.skipL0215
   4789  fab4				   .condpart78
   4790  fab4		       a5 a0		      LDA	temp5
   4791  fab6		       a4 a1		      LDY	temp6
   4792  fab8		       20 6b f2 	      jsr	pfread
   4793  fabb		       d0 03		      BNE	.skip78then
   4794  fabd				   .condpart79
   4795  fabd		       4c fc fa 	      jmp	.__Skip_AI_Down
   4796  fac0
   4797  fac0				   .skip78then
   4798  fac0				   .skipL0215
   4799  fac0				   .
   4800  fac0							;
   4801  fac0
   4802  fac0				   .L0216		;  temp4  =   ( player1x - 17 )  / 4
   4803  fac0
   4804  fac0							; complex statement detected
   4805  fac0		       a5 81		      LDA	player1x
   4806  fac2		       38		      SEC
   4807  fac3		       e9 11		      SBC	#17
   4808  fac5		       4a		      lsr
   4809  fac6		       4a		      lsr
   4810  fac7		       85 9f		      STA	temp4
   4811  fac9				   .
   4812  fac9							;
   4813  fac9
   4814  fac9				   .L0217		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __Skip_AI_Down
   4815  fac9
   4816  fac9		       a5 9f		      LDA	temp4
   4817  facb		       c9 22		      CMP	#34
   4818  facd		       b0 0c		      BCS	.skipL0217
   4819  facf				   .condpart80
   4820  facf		       a5 9f		      LDA	temp4
   4821  fad1		       a4 a1		      LDY	temp6
   4822  fad3		       20 6b f2 	      jsr	pfread
   4823  fad6		       d0 03		      BNE	.skip80then
   4824  fad8				   .condpart81
   4825  fad8		       4c fc fa 	      jmp	.__Skip_AI_Down
   4826  fadb
   4827  fadb				   .skip80then
   4828  fadb				   .skipL0217
   4829  fadb				   .
   4830  fadb							;
   4831  fadb
   4832  fadb				   .L0218		;  temp3  =  temp5  -	1
   4833  fadb
   4834  fadb		       a5 a0		      LDA	temp5
   4835  fadd		       38		      SEC
   4836  fade		       e9 01		      SBC	#1
   4837  fae0		       85 9e		      STA	temp3
   4838  fae2				   .
   4839  fae2							;
   4840  fae2
   4841  fae2				   .L0219		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __Skip_AI_Down
   4842  fae2
   4843  fae2		       a5 9e		      LDA	temp3
   4844  fae4		       c9 22		      CMP	#34
   4845  fae6		       b0 0c		      BCS	.skipL0219
   4846  fae8				   .condpart82
   4847  fae8		       a5 9e		      LDA	temp3
   4848  faea		       a4 a1		      LDY	temp6
   4849  faec		       20 6b f2 	      jsr	pfread
   4850  faef		       d0 03		      BNE	.skip82then
   4851  faf1				   .condpart83
   4852  faf1		       4c fc fa 	      jmp	.__Skip_AI_Down
   4853  faf4
   4854  faf4				   .skip82then
   4855  faf4				   .skipL0219
   4856  faf4				   .
   4857  faf4							;
   4858  faf4
   4859  faf4				   .
   4860  faf4							;
   4861  faf4
   4862  faf4				   .
   4863  faf4							;
   4864  faf4
   4865  faf4				   .
   4866  faf4							;
   4867  faf4
   4868  faf4				   .L0220		;  _Bit2_Mino_Moving{2}  =  1
   4869  faf4
   4870  faf4		       a5 eb		      LDA	_Bit2_Mino_Moving
   4871  faf6		       09 04		      ORA	#4
   4872  faf8		       85 eb		      STA	_Bit2_Mino_Moving
   4873  fafa				   .L0221		;  player1y  =  player1y  +  1
   4874  fafa
   4875  fafa		       e6 86		      INC	player1y
   4876  fafc				   .
   4877  fafc							;
   4878  fafc
   4879  fafc				   .__Skip_AI_Down
   4880  fafc							; __Skip_AI_Down
   4881  fafc
   4882  fafc				   .
   4883  fafc							;
   4884  fafc
   4885  fafc				   .
   4886  fafc							;
   4887  fafc
   4888  fafc				   .
   4889  fafc							;
   4890  fafc
   4891  fafc				   .
   4892  fafc							;
   4893  fafc
   4894  fafc				   .
   4895  fafc							;
   4896  fafc
   4897  fafc				   .
   4898  fafc							;
   4899  fafc
   4900  fafc				   .
   4901  fafc							;
   4902  fafc
   4903  fafc				   .
   4904  fafc							;
   4905  fafc
   4906  fafc				   .
   4907  fafc							;
   4908  fafc
   4909  fafc				   .L0222		;  if player1x  <=  player0x then goto __Skip_AI_Left
   4910  fafc
   4911  fafc		       a5 80		      LDA	player0x
   4912  fafe		       c5 81		      CMP	player1x
   4913  fb00		       90 03		      BCC	.skipL0222
   4914  fb02				   .condpart84
   4915  fb02		       4c 63 fb 	      jmp	.__Skip_AI_Left
   4916  fb05
   4917  fb05				   .skipL0222
   4918  fb05				   .
   4919  fb05							;
   4920  fb05
   4921  fb05				   .
   4922  fb05							;
   4923  fb05
   4924  fb05				   .
   4925  fb05							;
   4926  fb05
   4927  fb05				   .
   4928  fb05							;
   4929  fb05
   4930  fb05				   .L0223		;  _Bit6_P1_Dir_Left{6}  =  1
   4931  fb05
   4932  fb05		       a5 da		      LDA	_Bit6_P1_Dir_Left
   4933  fb07		       09 40		      ORA	#64
   4934  fb09		       85 da		      STA	_Bit6_P1_Dir_Left
   4935  fb0b				   .L0224		;  _Bit7_P1_Dir_Right{7}  =  0
   4936  fb0b
   4937  fb0b		       a5 da		      LDA	_Bit7_P1_Dir_Right
   4938  fb0d		       29 7f		      AND	#127
   4939  fb0f		       85 da		      STA	_Bit7_P1_Dir_Right
   4940  fb11				   .
   4941  fb11							;
   4942  fb11
   4943  fb11				   .
   4944  fb11							;
   4945  fb11
   4946  fb11				   .
   4947  fb11							;
   4948  fb11
   4949  fb11				   .
   4950  fb11							;
   4951  fb11
   4952  fb11				   .L0225		;  if player1x  <=  _P_Edge_Left then goto __Skip_AI_Left
   4953  fb11
   4954  fb11		       a9 01		      LDA	#_P_Edge_Left
   4955  fb13		       c5 81		      CMP	player1x
   4956  fb15		       90 03		      BCC	.skipL0225
   4957  fb17				   .condpart85
   4958  fb17		       4c 63 fb 	      jmp	.__Skip_AI_Left
   4959  fb1a
   4960  fb1a				   .skipL0225
   4961  fb1a				   .
   4962  fb1a							;
   4963  fb1a
   4964  fb1a				   .
   4965  fb1a							;
   4966  fb1a
   4967  fb1a				   .
   4968  fb1a							;
   4969  fb1a
   4970  fb1a				   .
   4971  fb1a							;
   4972  fb1a
   4973  fb1a				   .L0226		;  temp5  =   ( player1y - 1 )  / 8
   4974  fb1a
   4975  fb1a							; complex statement detected
   4976  fb1a		       a5 86		      LDA	player1y
   4977  fb1c		       38		      SEC
   4978  fb1d		       e9 01		      SBC	#1
   4979  fb1f		       4a		      lsr
   4980  fb20		       4a		      lsr
   4981  fb21		       4a		      lsr
   4982  fb22		       85 a0		      STA	temp5
   4983  fb24				   .
   4984  fb24							;
   4985  fb24
   4986  fb24				   .L0227		;  temp6  =   ( player1x - 18 )  / 4
   4987  fb24
   4988  fb24							; complex statement detected
   4989  fb24		       a5 81		      LDA	player1x
   4990  fb26		       38		      SEC
   4991  fb27		       e9 12		      SBC	#18
   4992  fb29		       4a		      lsr
   4993  fb2a		       4a		      lsr
   4994  fb2b		       85 a1		      STA	temp6
   4995  fb2d				   .
   4996  fb2d							;
   4997  fb2d
   4998  fb2d				   .L0228		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Left
   4999  fb2d
   5000  fb2d		       a5 a1		      LDA	temp6
   5001  fb2f		       c9 22		      CMP	#34
   5002  fb31		       b0 0c		      BCS	.skipL0228
   5003  fb33				   .condpart86
   5004  fb33		       a5 a1		      LDA	temp6
   5005  fb35		       a4 a0		      LDY	temp5
   5006  fb37		       20 6b f2 	      jsr	pfread
   5007  fb3a		       d0 03		      BNE	.skip86then
   5008  fb3c				   .condpart87
   5009  fb3c		       4c 63 fb 	      jmp	.__Skip_AI_Left
   5010  fb3f
   5011  fb3f				   .skip86then
   5012  fb3f				   .skipL0228
   5013  fb3f				   .
   5014  fb3f							;
   5015  fb3f
   5016  fb3f				   .L0229		;  temp3  =   ( player1y - 8 )  / 8
   5017  fb3f
   5018  fb3f							; complex statement detected
   5019  fb3f		       a5 86		      LDA	player1y
   5020  fb41		       38		      SEC
   5021  fb42		       e9 08		      SBC	#8
   5022  fb44		       4a		      lsr
   5023  fb45		       4a		      lsr
   5024  fb46		       4a		      lsr
   5025  fb47		       85 9e		      STA	temp3
   5026  fb49				   .
   5027  fb49							;
   5028  fb49
   5029  fb49				   .L0230		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Left
   5030  fb49
   5031  fb49		       a5 a1		      LDA	temp6
   5032  fb4b		       c9 22		      CMP	#34
   5033  fb4d		       b0 0c		      BCS	.skipL0230
   5034  fb4f				   .condpart88
   5035  fb4f		       a5 a1		      LDA	temp6
   5036  fb51		       a4 9e		      LDY	temp3
   5037  fb53		       20 6b f2 	      jsr	pfread
   5038  fb56		       d0 03		      BNE	.skip88then
   5039  fb58				   .condpart89
   5040  fb58		       4c 63 fb 	      jmp	.__Skip_AI_Left
   5041  fb5b
   5042  fb5b				   .skip88then
   5043  fb5b				   .skipL0230
   5044  fb5b				   .
   5045  fb5b							;
   5046  fb5b
   5047  fb5b				   .
   5048  fb5b							;
   5049  fb5b
   5050  fb5b				   .
   5051  fb5b							;
   5052  fb5b
   5053  fb5b				   .
   5054  fb5b							;
   5055  fb5b
   5056  fb5b				   .L0231		;  _Bit2_Mino_Moving{2}  =  1
   5057  fb5b
   5058  fb5b		       a5 eb		      LDA	_Bit2_Mino_Moving
   5059  fb5d		       09 04		      ORA	#4
   5060  fb5f		       85 eb		      STA	_Bit2_Mino_Moving
   5061  fb61				   .L0232		;  player1x  =  player1x  -  1
   5062  fb61
   5063  fb61		       c6 81		      DEC	player1x
   5064  fb63				   .
   5065  fb63							;
   5066  fb63
   5067  fb63				   .__Skip_AI_Left
   5068  fb63							; __Skip_AI_Left
   5069  fb63
   5070  fb63				   .
   5071  fb63							;
   5072  fb63
   5073  fb63				   .
   5074  fb63							;
   5075  fb63
   5076  fb63				   .
   5077  fb63							;
   5078  fb63
   5079  fb63				   .
   5080  fb63							;
   5081  fb63
   5082  fb63				   .
   5083  fb63							;
   5084  fb63
   5085  fb63				   .
   5086  fb63							;
   5087  fb63
   5088  fb63				   .
   5089  fb63							;
   5090  fb63
   5091  fb63				   .L0233		;  if player1x  >=  player0x then goto __Skip_AI_Right
   5092  fb63
   5093  fb63		       a5 81		      LDA	player1x
   5094  fb65		       c5 80		      CMP	player0x
   5095  fb67		       90 03		      BCC	.skipL0233
   5096  fb69				   .condpart90
   5097  fb69		       4c ca fb 	      jmp	.__Skip_AI_Right
   5098  fb6c
   5099  fb6c				   .skipL0233
   5100  fb6c				   .
   5101  fb6c							;
   5102  fb6c
   5103  fb6c				   .
   5104  fb6c							;
   5105  fb6c
   5106  fb6c				   .
   5107  fb6c							;
   5108  fb6c
   5109  fb6c				   .
   5110  fb6c							;
   5111  fb6c
   5112  fb6c				   .L0234		;  _Bit6_P1_Dir_Left{6}  =  0
   5113  fb6c
   5114  fb6c		       a5 da		      LDA	_Bit6_P1_Dir_Left
   5115  fb6e		       29 bf		      AND	#191
   5116  fb70		       85 da		      STA	_Bit6_P1_Dir_Left
   5117  fb72				   .L0235		;  _Bit7_P1_Dir_Right{7}  =  1
   5118  fb72
   5119  fb72		       a5 da		      LDA	_Bit7_P1_Dir_Right
   5120  fb74		       09 80		      ORA	#128
   5121  fb76		       85 da		      STA	_Bit7_P1_Dir_Right
   5122  fb78				   .
   5123  fb78							;
   5124  fb78
   5125  fb78				   .
   5126  fb78							;
   5127  fb78
   5128  fb78				   .
   5129  fb78							;
   5130  fb78
   5131  fb78				   .L0236		;  if player1x  >=  _P_Edge_Right then goto __Skip_AI_Right
   5132  fb78
   5133  fb78		       a5 81		      LDA	player1x
   5134  fb7a		       c9 99		      CMP	#_P_Edge_Right
   5135  fb7c		       90 03		      BCC	.skipL0236
   5136  fb7e				   .condpart91
   5137  fb7e		       4c ca fb 	      jmp	.__Skip_AI_Right
   5138  fb81
   5139  fb81				   .skipL0236
   5140  fb81				   .
   5141  fb81							;
   5142  fb81
   5143  fb81				   .
   5144  fb81							;
   5145  fb81
   5146  fb81				   .
   5147  fb81							;
   5148  fb81
   5149  fb81				   .
   5150  fb81							;
   5151  fb81
   5152  fb81				   .L0237		;  temp5  =   ( player1y - 1 )  / 8
   5153  fb81
   5154  fb81							; complex statement detected
   5155  fb81		       a5 86		      LDA	player1y
   5156  fb83		       38		      SEC
   5157  fb84		       e9 01		      SBC	#1
   5158  fb86		       4a		      lsr
   5159  fb87		       4a		      lsr
   5160  fb88		       4a		      lsr
   5161  fb89		       85 a0		      STA	temp5
   5162  fb8b				   .
   5163  fb8b							;
   5164  fb8b
   5165  fb8b				   .L0238		;  temp6  =   ( player1x - 9 )  / 4
   5166  fb8b
   5167  fb8b							; complex statement detected
   5168  fb8b		       a5 81		      LDA	player1x
   5169  fb8d		       38		      SEC
   5170  fb8e		       e9 09		      SBC	#9
   5171  fb90		       4a		      lsr
   5172  fb91		       4a		      lsr
   5173  fb92		       85 a1		      STA	temp6
   5174  fb94				   .
   5175  fb94							;
   5176  fb94
   5177  fb94				   .L0239		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then goto __Skip_AI_Right
   5178  fb94
   5179  fb94		       a5 a1		      LDA	temp6
   5180  fb96		       c9 22		      CMP	#34
   5181  fb98		       b0 0c		      BCS	.skipL0239
   5182  fb9a				   .condpart92
   5183  fb9a		       a5 a1		      LDA	temp6
   5184  fb9c		       a4 a0		      LDY	temp5
   5185  fb9e		       20 6b f2 	      jsr	pfread
   5186  fba1		       d0 03		      BNE	.skip92then
   5187  fba3				   .condpart93
   5188  fba3		       4c ca fb 	      jmp	.__Skip_AI_Right
   5189  fba6
   5190  fba6				   .skip92then
   5191  fba6				   .skipL0239
   5192  fba6				   .
   5193  fba6							;
   5194  fba6
   5195  fba6				   .L0240		;  temp3  =   ( player1y - 8 )  / 8
   5196  fba6
   5197  fba6							; complex statement detected
   5198  fba6		       a5 86		      LDA	player1y
   5199  fba8		       38		      SEC
   5200  fba9		       e9 08		      SBC	#8
   5201  fbab		       4a		      lsr
   5202  fbac		       4a		      lsr
   5203  fbad		       4a		      lsr
   5204  fbae		       85 9e		      STA	temp3
   5205  fbb0				   .
   5206  fbb0							;
   5207  fbb0
   5208  fbb0				   .L0241		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then goto __Skip_AI_Right
   5209  fbb0
   5210  fbb0		       a5 a1		      LDA	temp6
   5211  fbb2		       c9 22		      CMP	#34
   5212  fbb4		       b0 0c		      BCS	.skipL0241
   5213  fbb6				   .condpart94
   5214  fbb6		       a5 a1		      LDA	temp6
   5215  fbb8		       a4 9e		      LDY	temp3
   5216  fbba		       20 6b f2 	      jsr	pfread
   5217  fbbd		       d0 03		      BNE	.skip94then
   5218  fbbf				   .condpart95
   5219  fbbf		       4c ca fb 	      jmp	.__Skip_AI_Right
   5220  fbc2
   5221  fbc2				   .skip94then
   5222  fbc2				   .skipL0241
   5223  fbc2				   .
   5224  fbc2							;
   5225  fbc2
   5226  fbc2				   .
   5227  fbc2							;
   5228  fbc2
   5229  fbc2				   .
   5230  fbc2							;
   5231  fbc2
   5232  fbc2				   .
   5233  fbc2							;
   5234  fbc2
   5235  fbc2				   .L0242		;  _Bit2_Mino_Moving{2}  =  1
   5236  fbc2
   5237  fbc2		       a5 eb		      LDA	_Bit2_Mino_Moving
   5238  fbc4		       09 04		      ORA	#4
   5239  fbc6		       85 eb		      STA	_Bit2_Mino_Moving
   5240  fbc8				   .L0243		;  player1x  =  player1x  +  1
   5241  fbc8
   5242  fbc8		       e6 81		      INC	player1x
   5243  fbca				   .
   5244  fbca							;
   5245  fbca
   5246  fbca				   .__Skip_AI_Right
   5247  fbca							; __Skip_AI_Right
   5248  fbca
   5249  fbca				   .
   5250  fbca							;
   5251  fbca
   5252  fbca				   .L0244		;  if _Bit6_P1_Dir_Left{6} then REFP1	=  8
   5253  fbca
   5254  fbca		       24 da		      BIT	_Bit6_P1_Dir_Left
   5255  fbcc		       50 04		      BVC	.skipL0244
   5256  fbce				   .condpart96
   5257  fbce		       a9 08		      LDA	#8
   5258  fbd0		       85 0c		      STA	REFP1
   5259  fbd2				   .skipL0244
   5260  fbd2				   .
   5261  fbd2							;
   5262  fbd2
   5263  fbd2				   .
   5264  fbd2							;
   5265  fbd2
   5266  fbd2				   .
   5267  fbd2							;
   5268  fbd2
   5269  fbd2				   .
   5270  fbd2							;
   5271  fbd2
   5272  fbd2				   .
   5273  fbd2							;
   5274  fbd2
   5275  fbd2				   .L0245		;  if !collision(missile0,player0) then __Skip_Gem_Collection
   5276  fbd2
   5277  fbd2		       24 00		      bit	CXM0P
   5278  fbd4					      if	((* - .__Skip_Gem_Collection) < 127) && ((* - .__Skip_Gem_Collection) > -128)
   5279  fbd4		       50 1c		      bvc	.__Skip_Gem_Collection
   5280  fbd6				  -	      else
   5281  fbd6				  -	      bvs	.5skip__Skip_Gem_Collection
   5282  fbd6				  -	      jmp	.__Skip_Gem_Collection
   5283  fbd6				  -.5skip__Skip_Gem_Collection
   5284  fbd6					      endif
   5285  fbd6				   .L0246		;  _Bit0_Carrying_Gem{0}  =  1
   5286  fbd6
   5287  fbd6		       a5 eb		      LDA	_Bit0_Carrying_Gem
   5288  fbd8		       09 01		      ORA	#1
   5289  fbda		       85 eb		      STA	_Bit0_Carrying_Gem
   5290  fbdc				   .L0247		;  missile0x  =  200  :  missile0y  =	200
   5291  fbdc
   5292  fbdc		       a9 c8		      LDA	#200
   5293  fbde		       85 82		      STA	missile0x
   5294  fbe0		       85 91		      STA	missile0y
   5295  fbe2				   .
   5296  fbe2							;
   5297  fbe2
   5298  fbe2				   .
   5299  fbe2							;
   5300  fbe2
   5301  fbe2				   .
   5302  fbe2							;
   5303  fbe2
   5304  fbe2				   .L0248		;  if _Ch0_Sound  <>  1 then _Ch0_Sound  =  1	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   5305  fbe2
   5306  fbe2		       a5 e4		      LDA	_Ch0_Sound
   5307  fbe4		       c9 01		      CMP	#1
   5308  fbe6		       f0 0a		      BEQ	.skipL0248
   5309  fbe8				   .condpart97
   5310  fbe8		       a9 01		      LDA	#1
   5311  fbea		       85 e4		      STA	_Ch0_Sound
   5312  fbec		       85 e5		      STA	_Ch0_Duration
   5313  fbee		       a9 00		      LDA	#0
   5314  fbf0		       85 e6		      STA	_Ch0_Counter
   5315  fbf2				   .skipL0248
   5316  fbf2				   .__Skip_Gem_Collection
   5317  fbf2							; __Skip_Gem_Collection
   5318  fbf2
   5319  fbf2				   .
   5320  fbf2							;
   5321  fbf2
   5322  fbf2				   .
   5323  fbf2							;
   5324  fbf2
   5325  fbf2				   .
   5326  fbf2							;
   5327  fbf2
   5328  fbf2				   .
   5329  fbf2							;
   5330  fbf2
   5331  fbf2				   .L0249		;  if !collision(missile1,player0) then __Skip_Gem_Deposit
   5332  fbf2
   5333  fbf2		       24 01		      bit	CXM1P
   5334  fbf4					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   5335  fbf4		       10 4c		      bpl	.__Skip_Gem_Deposit
   5336  fbf6				  -	      else
   5337  fbf6				  -	      bmi	.6skip__Skip_Gem_Deposit
   5338  fbf6				  -	      jmp	.__Skip_Gem_Deposit
   5339  fbf6				  -.6skip__Skip_Gem_Deposit
   5340  fbf6					      endif
   5341  fbf6				   .L0250		;  if !_Bit0_Carrying_Gem{0} then __Skip_Gem_Deposit
   5342  fbf6
   5343  fbf6		       a5 eb		      LDA	_Bit0_Carrying_Gem
   5344  fbf8		       4a		      LSR
   5345  fbf9					      if	((* - .__Skip_Gem_Deposit) < 127) && ((* - .__Skip_Gem_Deposit) > -128)
   5346  fbf9		       90 47		      bcc	.__Skip_Gem_Deposit
   5347  fbfb				  -	      else
   5348  fbfb				  -	      bcs	.7skip__Skip_Gem_Deposit
   5349  fbfb				  -	      jmp	.__Skip_Gem_Deposit
   5350  fbfb				  -.7skip__Skip_Gem_Deposit
   5351  fbfb					      endif
   5352  fbfb				   .L0251		;  _Bit0_Carrying_Gem{0}  =  0
   5353  fbfb
   5354  fbfb		       a5 eb		      LDA	_Bit0_Carrying_Gem
   5355  fbfd		       29 fe		      AND	#254
   5356  fbff		       85 eb		      STA	_Bit0_Carrying_Gem
   5357  fc01				   .L0252		;  score  =  score  +	1
   5358  fc01
   5359  fc01		       f8		      SED
   5360  fc02		       18		      CLC
   5361  fc03		       a5 95		      LDA	score+2
   5362  fc05		       69 01		      ADC	#$01
   5363  fc07		       85 95		      STA	score+2
   5364  fc09		       a5 94		      LDA	score+1
   5365  fc0b		       69 00		      ADC	#$00
   5366  fc0d		       85 94		      STA	score+1
   5367  fc0f		       a5 93		      LDA	score
   5368  fc11		       69 00		      ADC	#$00
   5369  fc13		       85 93		      STA	score
   5370  fc15		       d8		      CLD
   5371  fc16				   .L0253		;  _Bit3_New_Chase_Start{3}  =  0
   5372  fc16
   5373  fc16		       a5 eb		      LDA	_Bit3_New_Chase_Start
   5374  fc18		       29 f7		      AND	#247
   5375  fc1a		       85 eb		      STA	_Bit3_New_Chase_Start
   5376  fc1c				   .L0254		;  if _Ch0_Sound  <>  2 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   5377  fc1c
   5378  fc1c		       a5 e4		      LDA	_Ch0_Sound
   5379  fc1e		       c9 02		      CMP	#2
   5380  fc20		       f0 0c		      BEQ	.skipL0254
   5381  fc22				   .condpart98
   5382  fc22		       a9 02		      LDA	#2
   5383  fc24		       85 e4		      STA	_Ch0_Sound
   5384  fc26		       a9 01		      LDA	#1
   5385  fc28		       85 e5		      STA	_Ch0_Duration
   5386  fc2a		       a9 00		      LDA	#0
   5387  fc2c		       85 e6		      STA	_Ch0_Counter
   5388  fc2e				   .skipL0254
   5389  fc2e				   .L0255		;  missile0x  =   ( rand  &  110 )   +  23  :	missile0y  =   ( rand  &  69 )	 +  10
   5390  fc2e
   5391  fc2e							; complex statement detected
   5392  fc2e		       20 b3 f3 	      jsr	randomize
   5393  fc31		       29 6e		      AND	#110
   5394  fc33		       18		      CLC
   5395  fc34		       69 17		      ADC	#23
   5396  fc36		       85 82		      STA	missile0x
   5397  fc38							; complex statement detected
   5398  fc38		       20 b3 f3 	      jsr	randomize
   5399  fc3b		       29 45		      AND	#69
   5400  fc3d		       18		      CLC
   5401  fc3e		       69 0a		      ADC	#10
   5402  fc40		       85 91		      STA	missile0y
   5403  fc42				   .__Skip_Gem_Deposit
   5404  fc42							; __Skip_Gem_Deposit
   5405  fc42
   5406  fc42				   .
   5407  fc42							;
   5408  fc42
   5409  fc42				   .__Game_Over
   5410  fc42							; __Game_Over
   5411  fc42
   5412  fc42				   .L0256		;  if !_Bit4_Game_Over{4} then goto __Skip_Game_Over
   5413  fc42
   5414  fc42		       a5 eb		      LDA	_Bit4_Game_Over
   5415  fc44		       29 10		      AND	#16
   5416  fc46		       d0 03		      BNE	.skipL0256
   5417  fc48				   .condpart99
   5418  fc48		       4c 18 fd 	      jmp	.__Skip_Game_Over
   5419  fc4b
   5420  fc4b				   .skipL0256
   5421  fc4b				   .L0257		;  if _Ch0_Sound  =  3  ||  _Bit5_Game_Over_Music_Played{5} then goto __Skip_Game_Over_Music
   5422  fc4b
   5423  fc4b		       a5 e4		      LDA	_Ch0_Sound
   5424  fc4d		       c9 03		      CMP	#3
   5425  fc4f		       d0 03		      BNE	.skipL0257
   5426  fc51				   .condpart100
   5427  fc51		       4c 5a fc 	      jmp	.condpart101
   5428  fc54				   .skipL0257
   5429  fc54		       a5 eb		      LDA	_Bit5_Game_Over_Music_Played
   5430  fc56		       29 20		      AND	#32
   5431  fc58		       f0 03		      BEQ	.skip11OR
   5432  fc5a				   .condpart101
   5433  fc5a		       4c 6f fc 	      jmp	.__Skip_Game_Over_Music
   5434  fc5d
   5435  fc5d				   .skip11OR
   5436  fc5d				   .L0258		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   5437  fc5d
   5438  fc5d		       a9 03		      LDA	#3
   5439  fc5f		       85 e4		      STA	_Ch0_Sound
   5440  fc61		       a9 01		      LDA	#1
   5441  fc63		       85 e5		      STA	_Ch0_Duration
   5442  fc65		       a9 00		      LDA	#0
   5443  fc67		       85 e6		      STA	_Ch0_Counter
   5444  fc69				   .L0259		;  _Bit5_Game_Over_Music_Played{5}  =	1
   5445  fc69
   5446  fc69		       a5 eb		      LDA	_Bit5_Game_Over_Music_Played
   5447  fc6b		       09 20		      ORA	#32
   5448  fc6d		       85 eb		      STA	_Bit5_Game_Over_Music_Played
   5449  fc6f				   .__Skip_Game_Over_Music
   5450  fc6f							; __Skip_Game_Over_Music
   5451  fc6f
   5452  fc6f				   .L0260		;  COLUPF  =  14
   5453  fc6f
   5454  fc6f		       a9 0e		      LDA	#14
   5455  fc71		       85 08		      STA	COLUPF
   5456  fc73				   .L0261		;  if _Bit6_Game_Won{6} then goto __Win_Screen
   5457  fc73
   5458  fc73		       24 eb		      BIT	_Bit6_Game_Won
   5459  fc75		       50 03		      BVC	.skipL0261
   5460  fc77				   .condpart102
   5461  fc77		       4c bb fc 	      jmp	.__Win_Screen
   5462  fc7a
   5463  fc7a				   .skipL0261
   5464  fc7a				   .L0262		;  scorecolor	=  14
   5465  fc7a
   5466  fc7a		       a9 0e		      LDA	#14
   5467  fc7c		       85 a3		      STA	scorecolor
   5468  fc7e				   .L0263		;  COLUBK  =  $36
   5469  fc7e
   5470  fc7e		       a9 36		      LDA	#$36
   5471  fc80		       85 09		      STA	COLUBK
   5472  fc82				   .L0264		;  playfield:
   5473  fc82
   5474  fc82				  -	      ifconst	pfres
   5475  fc82				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5476  fc82					      else
   5477  fc82		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5478  fc84					      endif
   5479  fc84		       4c b3 fc 	      jmp	pflabel1
   5480  fc87				   PF_data1
   5481  fc87		       0f 79		      .byte.b	%00001111, %01111001
   5482  fc89					      if	(pfwidth>2)
   5483  fc89		       6c 0f		      .byte.b	%01101100, %00001111
   5484  fc8b					      endif
   5485  fc8b		       08 48		      .byte.b	%00001000, %01001000
   5486  fc8d					      if	(pfwidth>2)
   5487  fc8d		       54 01		      .byte.b	%01010100, %00000001
   5488  fc8f					      endif
   5489  fc8f		       09 79		      .byte.b	%00001001, %01111001
   5490  fc91					      if	(pfwidth>2)
   5491  fc91		       54 07		      .byte.b	%01010100, %00000111
   5492  fc93					      endif
   5493  fc93		       08 49		      .byte.b	%00001000, %01001001
   5494  fc95					      if	(pfwidth>2)
   5495  fc95		       54 01		      .byte.b	%01010100, %00000001
   5496  fc97					      endif
   5497  fc97		       0f 49		      .byte.b	%00001111, %01001001
   5498  fc99					      if	(pfwidth>2)
   5499  fc99		       54 0f		      .byte.b	%01010100, %00001111
   5500  fc9b					      endif
   5501  fc9b		       00 00		      .byte.b	%00000000, %00000000
   5502  fc9d					      if	(pfwidth>2)
   5503  fc9d		       00 00		      .byte.b	%00000000, %00000000
   5504  fc9f					      endif
   5505  fc9f		       0f 89		      .byte.b	%00001111, %10001001
   5506  fca1					      if	(pfwidth>2)
   5507  fca1		       3c 07		      .byte.b	%00111100, %00000111
   5508  fca3					      endif
   5509  fca3		       08 89		      .byte.b	%00001000, %10001001
   5510  fca5					      if	(pfwidth>2)
   5511  fca5		       20 09		      .byte.b	%00100000, %00001001
   5512  fca7					      endif
   5513  fca7		       08 89		      .byte.b	%00001000, %10001001
   5514  fca9					      if	(pfwidth>2)
   5515  fca9		       38 07		      .byte.b	%00111000, %00000111
   5516  fcab					      endif
   5517  fcab		       08 51		      .byte.b	%00001000, %01010001
   5518  fcad					      if	(pfwidth>2)
   5519  fcad		       20 09		      .byte.b	%00100000, %00001001
   5520  fcaf					      endif
   5521  fcaf		       0f 21		      .byte.b	%00001111, %00100001
   5522  fcb1					      if	(pfwidth>2)
   5523  fcb1		       3c 09		      .byte.b	%00111100, %00001001
   5524  fcb3					      endif
   5525  fcb3				   pflabel1
   5526  fcb3		       bd 87 fc 	      lda	PF_data1,x
   5527  fcb6		       95 a4		      sta	playfield,x
   5528  fcb8		       ca		      dex
   5529  fcb9		       10 f8		      bpl	pflabel1
   5530  fcbb				   .__Win_Screen
   5531  fcbb							; __Win_Screen
   5532  fcbb
   5533  fcbb				   .L0265		;  if !_Bit6_Game_Won{6} goto __Skip_Win_Screen
   5534  fcbb
   5535  fcbb		       24 eb		      BIT	_Bit6_Game_Won
   5536  fcbd					      if	((* - .__Skip_Win_Screen) < 127) && ((* - .__Skip_Win_Screen) > -128)
   5537  fcbd		       50 41		      bvc	.__Skip_Win_Screen
   5538  fcbf				  -	      else
   5539  fcbf				  -	      bvs	.8skip__Skip_Win_Screen
   5540  fcbf				  -	      jmp	.__Skip_Win_Screen
   5541  fcbf				  -.8skip__Skip_Win_Screen
   5542  fcbf					      endif
   5543  fcbf				   .L0266		;  COLUBK  =  $C4
   5544  fcbf
   5545  fcbf		       a9 c4		      LDA	#$C4
   5546  fcc1		       85 09		      STA	COLUBK
   5547  fcc3				   .L0267		;  scorecolor	=  $C4
   5548  fcc3
   5549  fcc3		       a9 c4		      LDA	#$C4
   5550  fcc5		       85 a3		      STA	scorecolor
   5551  fcc7				   .L0268		;  playfield:
   5552  fcc7
   5553  fcc7				  -	      ifconst	pfres
   5554  fcc7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5555  fcc7					      else
   5556  fcc7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5557  fcc9					      endif
   5558  fcc9		       4c f8 fc 	      jmp	pflabel2
   5559  fccc				   PF_data2
   5560  fccc		       08 c4		      .byte.b	%00001000, %11000100
   5561  fcce					      if	(pfwidth>2)
   5562  fcce		       c4 08		      .byte.b	%11000100, %00001000
   5563  fcd0					      endif
   5564  fcd0		       04 22		      .byte.b	%00000100, %00100010
   5565  fcd2					      if	(pfwidth>2)
   5566  fcd2		       24 08		      .byte.b	%00100100, %00001000
   5567  fcd4					      endif
   5568  fcd4		       03 21		      .byte.b	%00000011, %00100001
   5569  fcd6					      if	(pfwidth>2)
   5570  fcd6		       24 08		      .byte.b	%00100100, %00001000
   5571  fcd8					      endif
   5572  fcd8		       01 20		      .byte.b	%00000001, %00100000
   5573  fcda					      if	(pfwidth>2)
   5574  fcda		       24 08		      .byte.b	%00100100, %00001000
   5575  fcdc					      endif
   5576  fcdc		       01 c0		      .byte.b	%00000001, %11000000
   5577  fcde					      if	(pfwidth>2)
   5578  fcde		       c3 07		      .byte.b	%11000011, %00000111
   5579  fce0					      endif
   5580  fce0		       00 00		      .byte.b	%00000000, %00000000
   5581  fce2					      if	(pfwidth>2)
   5582  fce2		       00 00		      .byte.b	%00000000, %00000000
   5583  fce4					      endif
   5584  fce4		       04 c8		      .byte.b	%00000100, %11001000
   5585  fce6					      if	(pfwidth>2)
   5586  fce6		       e4 04		      .byte.b	%11100100, %00000100
   5587  fce8					      endif
   5588  fce8		       04 08		      .byte.b	%00000100, %00001000
   5589  fcea					      if	(pfwidth>2)
   5590  fcea		       86 04		      .byte.b	%10000110, %00000100
   5591  fcec					      endif
   5592  fcec		       04 09		      .byte.b	%00000100, %00001001
   5593  fcee					      if	(pfwidth>2)
   5594  fcee		       85 04		      .byte.b	%10000101, %00000100
   5595  fcf0					      endif
   5596  fcf0		       04 09		      .byte.b	%00000100, %00001001
   5597  fcf2					      if	(pfwidth>2)
   5598  fcf2		       84 05		      .byte.b	%10000100, %00000101
   5599  fcf4					      endif
   5600  fcf4		       03 c6		      .byte.b	%00000011, %11000110
   5601  fcf6					      if	(pfwidth>2)
   5602  fcf6		       e4 06		      .byte.b	%11100100, %00000110
   5603  fcf8					      endif
   5604  fcf8				   pflabel2
   5605  fcf8		       bd cc fc 	      lda	PF_data2,x
   5606  fcfb		       95 a4		      sta	playfield,x
   5607  fcfd		       ca		      dex
   5608  fcfe		       10 f8		      bpl	pflabel2
   5609  fd00				   .__Skip_Win_Screen
   5610  fd00							; __Skip_Win_Screen
   5611  fd00
   5612  fd00				   .L0269		;  player0x  =  200  :  player0y  =  200
   5613  fd00
   5614  fd00		       a9 c8		      LDA	#200
   5615  fd02		       85 80		      STA	player0x
   5616  fd04		       85 85		      STA	player0y
   5617  fd06				   .L0270		;  player1x  =  200  :  player1y  =  200
   5618  fd06
   5619  fd06		       a9 c8		      LDA	#200
   5620  fd08		       85 81		      STA	player1x
   5621  fd0a		       85 86		      STA	player1y
   5622  fd0c				   .L0271		;  missile0x  =  200  :  missile0y  =	200
   5623  fd0c
   5624  fd0c		       a9 c8		      LDA	#200
   5625  fd0e		       85 82		      STA	missile0x
   5626  fd10		       85 91		      STA	missile0y
   5627  fd12				   .L0272		;  missile1x  =  200  :  missile1y  =	200
   5628  fd12
   5629  fd12		       a9 c8		      LDA	#200
   5630  fd14		       85 83		      STA	missile1x
   5631  fd16		       85 88		      STA	missile1y
   5632  fd18				   .__Skip_Game_Over
   5633  fd18							; __Skip_Game_Over
   5634  fd18
   5635  fd18				   .
   5636  fd18							;
   5637  fd18
   5638  fd18				   .
   5639  fd18							;
   5640  fd18
   5641  fd18				   .
   5642  fd18							;
   5643  fd18
   5644  fd18				   .
   5645  fd18							;
   5646  fd18
   5647  fd18				   .
   5648  fd18							;
   5649  fd18
   5650  fd18				   .L0273		;  drawscreen
   5651  fd18
   5652  fd18		       20 c1 f3 	      jsr	drawscreen
   5653  fd1b				   .
   5654  fd1b							;
   5655  fd1b
   5656  fd1b				   .
   5657  fd1b							;
   5658  fd1b
   5659  fd1b				   .
   5660  fd1b							;
   5661  fd1b
   5662  fd1b				   .
   5663  fd1b							;
   5664  fd1b
   5665  fd1b				   .
   5666  fd1b							;
   5667  fd1b
   5668  fd1b				   .
   5669  fd1b							;
   5670  fd1b
   5671  fd1b				   .
   5672  fd1b							;
   5673  fd1b
   5674  fd1b				   .
   5675  fd1b							;
   5676  fd1b
   5677  fd1b				   .
   5678  fd1b							;
   5679  fd1b
   5680  fd1b				   .
   5681  fd1b							;
   5682  fd1b
   5683  fd1b				   .
   5684  fd1b							;
   5685  fd1b
   5686  fd1b				   .
   5687  fd1b							;
   5688  fd1b
   5689  fd1b				   .
   5690  fd1b							;
   5691  fd1b
   5692  fd1b				   .
   5693  fd1b							;
   5694  fd1b
   5695  fd1b				   .
   5696  fd1b							;
   5697  fd1b
   5698  fd1b				   .L0274		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5699  fd1b
   5700  fd1b		       a9 01		      lda	#1
   5701  fd1d		       2c 82 02 	      bit	SWCHB
   5702  fd20		       f0 09		      BEQ	.skipL0274
   5703  fd22				   .condpart103
   5704  fd22		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5705  fd24		       29 fe		      AND	#254
   5706  fd26		       85 ec		      STA	_Bit0_Reset_Restrainer
   5707  fd28		       4c ac f5 	      jmp	.__Main_Loop
   5708  fd2b
   5709  fd2b				   .skipL0274
   5710  fd2b				   .
   5711  fd2b							;
   5712  fd2b
   5713  fd2b				   .
   5714  fd2b							;
   5715  fd2b
   5716  fd2b				   .
   5717  fd2b							;
   5718  fd2b
   5719  fd2b				   .
   5720  fd2b							;
   5721  fd2b
   5722  fd2b				   .
   5723  fd2b							;
   5724  fd2b
   5725  fd2b				   .L0275		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5726  fd2b
   5727  fd2b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5728  fd2d		       4a		      LSR
   5729  fd2e		       90 03		      BCC	.skipL0275
   5730  fd30				   .condpart104
   5731  fd30		       4c ac f5 	      jmp	.__Main_Loop
   5732  fd33
   5733  fd33				   .skipL0275
   5734  fd33				   .
   5735  fd33							;
   5736  fd33
   5737  fd33				   .
   5738  fd33							;
   5739  fd33
   5740  fd33				   .
   5741  fd33							;
   5742  fd33
   5743  fd33				   .
   5744  fd33							;
   5745  fd33
   5746  fd33				   .L0276		;  goto __Start_Restart
   5747  fd33
   5748  fd33		       4c 61 f4 	      jmp	.__Start_Restart
   5749  fd36
   5750  fd36				   .
   5751  fd36							;
   5752  fd36
   5753  fd36				   .__L0
   5754  fd36							; __L0
   5755  fd36
   5756  fd36				   .L0277		;  playfield:
   5757  fd36
   5758  fd36				  -	      ifconst	pfres
   5759  fd36				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5760  fd36					      else
   5761  fd36		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5762  fd38					      endif
   5763  fd38		       4c 67 fd 	      jmp	pflabel3
   5764  fd3b				   PF_data3
   5765  fd3b		       ff ff		      .byte.b	%11111111, %11111111
   5766  fd3d					      if	(pfwidth>2)
   5767  fd3d		       ff ff		      .byte.b	%11111111, %11111111
   5768  fd3f					      endif
   5769  fd3f		       80 00		      .byte.b	%10000000, %00000000
   5770  fd41					      if	(pfwidth>2)
   5771  fd41		       00 80		      .byte.b	%00000000, %10000000
   5772  fd43					      endif
   5773  fd43		       93 61		      .byte.b	%10010011, %01100001
   5774  fd45					      if	(pfwidth>2)
   5775  fd45		       61 93		      .byte.b	%01100001, %10010011
   5776  fd47					      endif
   5777  fd47		       90 60		      .byte.b	%10010000, %01100000
   5778  fd49					      if	(pfwidth>2)
   5779  fd49		       60 90		      .byte.b	%01100000, %10010000
   5780  fd4b					      endif
   5781  fd4b		       80 00		      .byte.b	%10000000, %00000000
   5782  fd4d					      if	(pfwidth>2)
   5783  fd4d		       00 80		      .byte.b	%00000000, %10000000
   5784  fd4f					      endif
   5785  fd4f		       99 19		      .byte.b	%10011001, %00011001
   5786  fd51					      if	(pfwidth>2)
   5787  fd51		       19 99		      .byte.b	%00011001, %10011001
   5788  fd53					      endif
   5789  fd53		       80 00		      .byte.b	%10000000, %00000000
   5790  fd55					      if	(pfwidth>2)
   5791  fd55		       00 80		      .byte.b	%00000000, %10000000
   5792  fd57					      endif
   5793  fd57		       90 60		      .byte.b	%10010000, %01100000
   5794  fd59					      if	(pfwidth>2)
   5795  fd59		       60 90		      .byte.b	%01100000, %10010000
   5796  fd5b					      endif
   5797  fd5b		       93 61		      .byte.b	%10010011, %01100001
   5798  fd5d					      if	(pfwidth>2)
   5799  fd5d		       61 93		      .byte.b	%01100001, %10010011
   5800  fd5f					      endif
   5801  fd5f		       80 00		      .byte.b	%10000000, %00000000
   5802  fd61					      if	(pfwidth>2)
   5803  fd61		       00 80		      .byte.b	%00000000, %10000000
   5804  fd63					      endif
   5805  fd63		       ff ff		      .byte.b	%11111111, %11111111
   5806  fd65					      if	(pfwidth>2)
   5807  fd65		       ff ff		      .byte.b	%11111111, %11111111
   5808  fd67					      endif
   5809  fd67				   pflabel3
   5810  fd67		       bd 3b fd 	      lda	PF_data3,x
   5811  fd6a		       95 a4		      sta	playfield,x
   5812  fd6c		       ca		      dex
   5813  fd6d		       10 f8		      bpl	pflabel3
   5814  fd6f				   .L0278		;  goto __L_Done
   5815  fd6f
   5816  fd6f		       4c 07 f6 	      jmp	.__L_Done
   5817  fd72
   5818  fd72				   .__L1
   5819  fd72							; __L1
   5820  fd72
   5821  fd72				   .L0279		;  COLUPF  =  $12
   5822  fd72
   5823  fd72		       a9 12		      LDA	#$12
   5824  fd74		       85 08		      STA	COLUPF
   5825  fd76				   .L0280		;  playfield:
   5826  fd76
   5827  fd76				  -	      ifconst	pfres
   5828  fd76				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5829  fd76					      else
   5830  fd76		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5831  fd78					      endif
   5832  fd78		       4c a7 fd 	      jmp	pflabel4
   5833  fd7b				   PF_data4
   5834  fd7b		       ff ff		      .byte.b	%11111111, %11111111
   5835  fd7d					      if	(pfwidth>2)
   5836  fd7d		       ff ff		      .byte.b	%11111111, %11111111
   5837  fd7f					      endif
   5838  fd7f		       80 00		      .byte.b	%10000000, %00000000
   5839  fd81					      if	(pfwidth>2)
   5840  fd81		       00 80		      .byte.b	%00000000, %10000000
   5841  fd83					      endif
   5842  fd83		       90 82		      .byte.b	%10010000, %10000010
   5843  fd85					      if	(pfwidth>2)
   5844  fd85		       82 90		      .byte.b	%10000010, %10010000
   5845  fd87					      endif
   5846  fd87		       82 80		      .byte.b	%10000010, %10000000
   5847  fd89					      if	(pfwidth>2)
   5848  fd89		       80 82		      .byte.b	%10000000, %10000010
   5849  fd8b					      endif
   5850  fd8b		       80 00		      .byte.b	%10000000, %00000000
   5851  fd8d					      if	(pfwidth>2)
   5852  fd8d		       00 80		      .byte.b	%00000000, %10000000
   5853  fd8f					      endif
   5854  fd8f		       90 02		      .byte.b	%10010000, %00000010
   5855  fd91					      if	(pfwidth>2)
   5856  fd91		       02 90		      .byte.b	%00000010, %10010000
   5857  fd93					      endif
   5858  fd93		       80 00		      .byte.b	%10000000, %00000000
   5859  fd95					      if	(pfwidth>2)
   5860  fd95		       00 80		      .byte.b	%00000000, %10000000
   5861  fd97					      endif
   5862  fd97		       82 80		      .byte.b	%10000010, %10000000
   5863  fd99					      if	(pfwidth>2)
   5864  fd99		       80 82		      .byte.b	%10000000, %10000010
   5865  fd9b					      endif
   5866  fd9b		       90 82		      .byte.b	%10010000, %10000010
   5867  fd9d					      if	(pfwidth>2)
   5868  fd9d		       82 90		      .byte.b	%10000010, %10010000
   5869  fd9f					      endif
   5870  fd9f		       80 00		      .byte.b	%10000000, %00000000
   5871  fda1					      if	(pfwidth>2)
   5872  fda1		       00 80		      .byte.b	%00000000, %10000000
   5873  fda3					      endif
   5874  fda3		       ff ff		      .byte.b	%11111111, %11111111
   5875  fda5					      if	(pfwidth>2)
   5876  fda5		       ff ff		      .byte.b	%11111111, %11111111
   5877  fda7					      endif
   5878  fda7				   pflabel4
   5879  fda7		       bd 7b fd 	      lda	PF_data4,x
   5880  fdaa		       95 a4		      sta	playfield,x
   5881  fdac		       ca		      dex
   5882  fdad		       10 f8		      bpl	pflabel4
   5883  fdaf				   .L0281		;  goto __L_Done
   5884  fdaf
   5885  fdaf		       4c 07 f6 	      jmp	.__L_Done
   5886  fdb2
   5887  fdb2				   .__L2
   5888  fdb2							; __L2
   5889  fdb2
   5890  fdb2				   .L0282		;  COLUPF  =  $10
   5891  fdb2
   5892  fdb2		       a9 10		      LDA	#$10
   5893  fdb4		       85 08		      STA	COLUPF
   5894  fdb6				   .L0283		;  playfield:
   5895  fdb6
   5896  fdb6				  -	      ifconst	pfres
   5897  fdb6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   5898  fdb6					      else
   5899  fdb6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   5900  fdb8					      endif
   5901  fdb8		       4c e7 fd 	      jmp	pflabel5
   5902  fdbb				   PF_data5
   5903  fdbb		       ff ff		      .byte.b	%11111111, %11111111
   5904  fdbd					      if	(pfwidth>2)
   5905  fdbd		       ff ff		      .byte.b	%11111111, %11111111
   5906  fdbf					      endif
   5907  fdbf		       80 00		      .byte.b	%10000000, %00000000
   5908  fdc1					      if	(pfwidth>2)
   5909  fdc1		       00 80		      .byte.b	%00000000, %10000000
   5910  fdc3					      endif
   5911  fdc3		       80 00		      .byte.b	%10000000, %00000000
   5912  fdc5					      if	(pfwidth>2)
   5913  fdc5		       00 80		      .byte.b	%00000000, %10000000
   5914  fdc7					      endif
   5915  fdc7		       80 00		      .byte.b	%10000000, %00000000
   5916  fdc9					      if	(pfwidth>2)
   5917  fdc9		       00 80		      .byte.b	%00000000, %10000000
   5918  fdcb					      endif
   5919  fdcb		       80 00		      .byte.b	%10000000, %00000000
   5920  fdcd					      if	(pfwidth>2)
   5921  fdcd		       00 80		      .byte.b	%00000000, %10000000
   5922  fdcf					      endif
   5923  fdcf		       80 00		      .byte.b	%10000000, %00000000
   5924  fdd1					      if	(pfwidth>2)
   5925  fdd1		       00 80		      .byte.b	%00000000, %10000000
   5926  fdd3					      endif
   5927  fdd3		       80 00		      .byte.b	%10000000, %00000000
   5928  fdd5					      if	(pfwidth>2)
   5929  fdd5		       00 80		      .byte.b	%00000000, %10000000
   5930  fdd7					      endif
   5931  fdd7		       80 00		      .byte.b	%10000000, %00000000
   5932  fdd9					      if	(pfwidth>2)
   5933  fdd9		       00 80		      .byte.b	%00000000, %10000000
   5934  fddb					      endif
   5935  fddb		       80 00		      .byte.b	%10000000, %00000000
   5936  fddd					      if	(pfwidth>2)
   5937  fddd		       00 80		      .byte.b	%00000000, %10000000
   5938  fddf					      endif
   5939  fddf		       80 00		      .byte.b	%10000000, %00000000
   5940  fde1					      if	(pfwidth>2)
   5941  fde1		       00 80		      .byte.b	%00000000, %10000000
   5942  fde3					      endif
   5943  fde3		       ff ff		      .byte.b	%11111111, %11111111
   5944  fde5					      if	(pfwidth>2)
   5945  fde5		       ff ff		      .byte.b	%11111111, %11111111
   5946  fde7					      endif
   5947  fde7				   pflabel5
   5948  fde7		       bd bb fd 	      lda	PF_data5,x
   5949  fdea		       95 a4		      sta	playfield,x
   5950  fdec		       ca		      dex
   5951  fded		       10 f8		      bpl	pflabel5
   5952  fdef				   .L0284		;  goto __L_Done
   5953  fdef
   5954  fdef		       4c 07 f6 	      jmp	.__L_Done
   5955  fdf2
   5956  fdf2				   .
   5957  fdf2							;
   5958  fdf2
   5959  fdf2				   .
   5960  fdf2							;
   5961  fdf2
   5962  fdf2				   .__Pl00
   5963  fdf2							; __Pl00
   5964  fdf2
   5965  fdf2				   .L0285		;  player0:
   5966  fdf2
   5967  fdf2		       a2 a0		      LDX	#<playerL0285_0
   5968  fdf4		       86 8a		      STX	player0pointerlo
   5969  fdf6		       a9 fe		      LDA	#>playerL0285_0
   5970  fdf8		       85 8b		      STA	player0pointerhi
   5971  fdfa		       a9 07		      LDA	#7
   5972  fdfc		       85 8e		      STA	player0height
   5973  fdfe				   .L0286		;  goto __Pl_Frame_Done
   5974  fdfe
   5975  fdfe		       4c 47 f6 	      jmp	.__Pl_Frame_Done
   5976  fe01
   5977  fe01				   .__Pl01
   5978  fe01							; __Pl01
   5979  fe01
   5980  fe01				   .L0287		;  player0:
   5981  fe01
   5982  fe01		       a2 a8		      LDX	#<playerL0287_0
   5983  fe03		       86 8a		      STX	player0pointerlo
   5984  fe05		       a9 fe		      LDA	#>playerL0287_0
   5985  fe07		       85 8b		      STA	player0pointerhi
   5986  fe09		       a9 07		      LDA	#7
   5987  fe0b		       85 8e		      STA	player0height
   5988  fe0d				   .L0288		;  goto __Pl_Frame_Done
   5989  fe0d
   5990  fe0d		       4c 47 f6 	      jmp	.__Pl_Frame_Done
   5991  fe10
   5992  fe10				   .__Pl02
   5993  fe10							; __Pl02
   5994  fe10
   5995  fe10				   .L0289		;  player0:
   5996  fe10
   5997  fe10		       a2 b0		      LDX	#<playerL0289_0
   5998  fe12		       86 8a		      STX	player0pointerlo
   5999  fe14		       a9 fe		      LDA	#>playerL0289_0
   6000  fe16		       85 8b		      STA	player0pointerhi
   6001  fe18		       a9 07		      LDA	#7
   6002  fe1a		       85 8e		      STA	player0height
   6003  fe1c				   .L0290		;  goto __Pl_Frame_Done
   6004  fe1c
   6005  fe1c		       4c 47 f6 	      jmp	.__Pl_Frame_Done
   6006  fe1f
   6007  fe1f				   .
   6008  fe1f							;
   6009  fe1f
   6010  fe1f				   .__Mn00
   6011  fe1f							; __Mn00
   6012  fe1f
   6013  fe1f				   .L0291		;  player1:
   6014  fe1f
   6015  fe1f		       a2 b8		      LDX	#<playerL0291_1
   6016  fe21		       86 8c		      STX	player1pointerlo
   6017  fe23		       a9 fe		      LDA	#>playerL0291_1
   6018  fe25		       85 8d		      STA	player1pointerhi
   6019  fe27		       a9 07		      LDA	#7
   6020  fe29		       85 8f		      STA	player1height
   6021  fe2b				   .L0292		;  goto __Mn_Frame_Done
   6022  fe2b
   6023  fe2b		       4c 6c f6 	      jmp	.__Mn_Frame_Done
   6024  fe2e
   6025  fe2e				   .__Mn01
   6026  fe2e							; __Mn01
   6027  fe2e
   6028  fe2e				   .L0293		;  player1:
   6029  fe2e
   6030  fe2e		       a2 c0		      LDX	#<playerL0293_1
   6031  fe30		       86 8c		      STX	player1pointerlo
   6032  fe32		       a9 fe		      LDA	#>playerL0293_1
   6033  fe34		       85 8d		      STA	player1pointerhi
   6034  fe36		       a9 07		      LDA	#7
   6035  fe38		       85 8f		      STA	player1height
   6036  fe3a				   .L0294		;  goto __Mn_Frame_Done
   6037  fe3a
   6038  fe3a		       4c 6c f6 	      jmp	.__Mn_Frame_Done
   6039  fe3d
   6040  fe3d				   .__Mn02
   6041  fe3d							; __Mn02
   6042  fe3d
   6043  fe3d				   .L0295		;  player1:
   6044  fe3d
   6045  fe3d		       a2 c8		      LDX	#<playerL0295_1
   6046  fe3f		       86 8c		      STX	player1pointerlo
   6047  fe41		       a9 fe		      LDA	#>playerL0295_1
   6048  fe43		       85 8d		      STA	player1pointerhi
   6049  fe45		       a9 07		      LDA	#7
   6050  fe47		       85 8f		      STA	player1height
   6051  fe49				   .L0296		;  goto __Mn_Frame_Done
   6052  fe49
   6053  fe49		       4c 6c f6 	      jmp	.__Mn_Frame_Done
   6054  fe4c
   6055  fe4c				   .
   6056  fe4c							;
   6057  fe4c
   6058  fe4c				   .L0297		;  data _SD_Gem_Coll
   6059  fe4c
   6060  fe4c		       4c 58 fe 	      JMP	.skipL0297
   6061  fe4f				   _SD_Gem_Coll
   6062  fe4f		       08 04 07 	      .byte.b	8,4,7
   6063  fe52
   6064  fe52		       04		      .byte.b	4
   6065  fe53
   6066  fe53		       08 04 06 	      .byte.b	8,4,6
   6067  fe56
   6068  fe56		       08		      .byte.b	8
   6069  fe57
   6070  fe57		       ff		      .byte.b	255
   6071  fe58
   6072  fe58				   .skipL0297
   6073  fe58				   .L0298		;  data _SD_Gem_Drop
   6074  fe58
   6075  fe58		       4c 68 fe 	      JMP	.skipL0298
   6076  fe5b				   _SD_Gem_Drop
   6077  fe5b		       08 04 06 	      .byte.b	8,4,6
   6078  fe5e
   6079  fe5e		       04		      .byte.b	4
   6080  fe5f
   6081  fe5f		       08 04 07 	      .byte.b	8,4,7
   6082  fe62
   6083  fe62		       08		      .byte.b	8
   6084  fe63
   6085  fe63		       08 04 04 	      .byte.b	8,4,4
   6086  fe66
   6087  fe66		       04		      .byte.b	4
   6088  fe67
   6089  fe67		       ff		      .byte.b	255
   6090  fe68
   6091  fe68				   .skipL0298
   6092  fe68				   .L0299		;  data _SD_Mino_Roar
   6093  fe68
   6094  fe68		       4c 80 fe 	      JMP	.skipL0299
   6095  fe6b				   _SD_Mino_Roar
   6096  fe6b		       08 0e 05 	      .byte.b	8,14,5
   6097  fe6e
   6098  fe6e		       0c		      .byte.b	12
   6099  fe6f
   6100  fe6f		       08 0e 04 	      .byte.b	8,14,4
   6101  fe72
   6102  fe72		       08		      .byte.b	8
   6103  fe73
   6104  fe73		       08 0e 06 	      .byte.b	8,14,6
   6105  fe76
   6106  fe76		       04		      .byte.b	4
   6107  fe77
   6108  fe77		       08 0e 03 	      .byte.b	8,14,3
   6109  fe7a
   6110  fe7a		       0c		      .byte.b	12
   6111  fe7b
   6112  fe7b		       08 0e 04 	      .byte.b	8,14,4
   6113  fe7e
   6114  fe7e		       08		      .byte.b	8
   6115  fe7f
   6116  fe7f		       ff		      .byte.b	255
   6117  fe80
   6118  fe80				   .skipL0299
   6119  fe80				  -	      if	(<*) > (<(*+7))
   6120  fe80				  -	      repeat	($100-<*)
   6121  fe80				  -	      .byte	0
   6122  fe80				  -	      repend
   6123  fe80					      endif
   6124  fe80				   playerL038_0
   6125  fe80		       66		      .byte.b	%01100110
   6126  fe81		       24		      .byte.b	%00100100
   6127  fe82		       99		      .byte.b	%10011001
   6128  fe83		       bd		      .byte.b	%10111101
   6129  fe84		       7e		      .byte.b	%01111110
   6130  fe85		       18		      .byte.b	%00011000
   6131  fe86		       3c		      .byte.b	%00111100
   6132  fe87		       24		      .byte.b	%00100100
   6133  fe88				  -	      if	(<*) > (<(*+7))
   6134  fe88				  -	      repeat	($100-<*)
   6135  fe88				  -	      .byte	0
   6136  fe88				  -	      repend
   6137  fe88					      endif
   6138  fe88				   playerL039_1
   6139  fe88		       ff		      .byte.b	%11111111
   6140  fe89		       00		      .byte.b	%00000000
   6141  fe8a		       ff		      .byte.b	%11111111
   6142  fe8b		       81		      .byte.b	%10000001
   6143  fe8c		       7e		      .byte.b	%01111110
   6144  fe8d		       c3		      .byte.b	%11000011
   6145  fe8e		       3c		      .byte.b	%00111100
   6146  fe8f		       e7		      .byte.b	%11100111
   6147  fe90				  -	      if	(<*) > (<(*+7))
   6148  fe90				  -	      repeat	($100-<*)
   6149  fe90				  -	      .byte	0
   6150  fe90				  -	      repend
   6151  fe90					      endif
   6152  fe90				   playerL086_0
   6153  fe90		       66		      .byte.b	%01100110
   6154  fe91		       24		      .byte.b	%00100100
   6155  fe92		       24		      .byte.b	%00100100
   6156  fe93		       5a		      .byte.b	%01011010
   6157  fe94		       5a		      .byte.b	%01011010
   6158  fe95		       3c		      .byte.b	%00111100
   6159  fe96		       18		      .byte.b	%00011000
   6160  fe97		       18		      .byte.b	%00011000
   6161  fe98				  -	      if	(<*) > (<(*+7))
   6162  fe98				  -	      repeat	($100-<*)
   6163  fe98				  -	      .byte	0
   6164  fe98				  -	      repend
   6165  fe98					      endif
   6166  fe98				   playerL089_1
   6167  fe98		       66		      .byte.b	%01100110
   6168  fe99		       24		      .byte.b	%00100100
   6169  fe9a		       99		      .byte.b	%10011001
   6170  fe9b		       bd		      .byte.b	%10111101
   6171  fe9c		       7e		      .byte.b	%01111110
   6172  fe9d		       18		      .byte.b	%00011000
   6173  fe9e		       3c		      .byte.b	%00111100
   6174  fe9f		       24		      .byte.b	%00100100
   6175  fea0				  -	      if	(<*) > (<(*+7))
   6176  fea0				  -	      repeat	($100-<*)
   6177  fea0				  -	      .byte	0
   6178  fea0				  -	      repend
   6179  fea0					      endif
   6180  fea0				   playerL0285_0
   6181  fea0		       36		      .byte.b	%00110110
   6182  fea1		       24		      .byte.b	%00100100
   6183  fea2		       24		      .byte.b	%00100100
   6184  fea3		       5a		      .byte.b	%01011010
   6185  fea4		       5a		      .byte.b	%01011010
   6186  fea5		       3c		      .byte.b	%00111100
   6187  fea6		       18		      .byte.b	%00011000
   6188  fea7		       18		      .byte.b	%00011000
   6189  fea8				  -	      if	(<*) > (<(*+7))
   6190  fea8				  -	      repeat	($100-<*)
   6191  fea8				  -	      .byte	0
   6192  fea8				  -	      repend
   6193  fea8					      endif
   6194  fea8				   playerL0287_0
   6195  fea8		       30		      .byte.b	%00110000
   6196  fea9		       26		      .byte.b	%00100110
   6197  feaa		       24		      .byte.b	%00100100
   6198  feab		       1a		      .byte.b	%00011010
   6199  feac		       5a		      .byte.b	%01011010
   6200  fead		       3c		      .byte.b	%00111100
   6201  feae		       18		      .byte.b	%00011000
   6202  feaf		       18		      .byte.b	%00011000
   6203  feb0				  -	      if	(<*) > (<(*+7))
   6204  feb0				  -	      repeat	($100-<*)
   6205  feb0				  -	      .byte	0
   6206  feb0				  -	      repend
   6207  feb0					      endif
   6208  feb0				   playerL0289_0
   6209  feb0		       06		      .byte.b	%00000110
   6210  feb1		       34		      .byte.b	%00110100
   6211  feb2		       24		      .byte.b	%00100100
   6212  feb3		       58		      .byte.b	%01011000
   6213  feb4		       5a		      .byte.b	%01011010
   6214  feb5		       3c		      .byte.b	%00111100
   6215  feb6		       18		      .byte.b	%00011000
   6216  feb7		       18		      .byte.b	%00011000
   6217  feb8				  -	      if	(<*) > (<(*+7))
   6218  feb8				  -	      repeat	($100-<*)
   6219  feb8				  -	      .byte	0
   6220  feb8				  -	      repend
   6221  feb8					      endif
   6222  feb8				   playerL0291_1
   6223  feb8		       36		      .byte.b	%00110110
   6224  feb9		       24		      .byte.b	%00100100
   6225  feba		       99		      .byte.b	%10011001
   6226  febb		       bd		      .byte.b	%10111101
   6227  febc		       7e		      .byte.b	%01111110
   6228  febd		       18		      .byte.b	%00011000
   6229  febe		       3c		      .byte.b	%00111100
   6230  febf		       24		      .byte.b	%00100100
   6231  fec0				  -	      if	(<*) > (<(*+7))
   6232  fec0				  -	      repeat	($100-<*)
   6233  fec0				  -	      .byte	0
   6234  fec0				  -	      repend
   6235  fec0					      endif
   6236  fec0				   playerL0293_1
   6237  fec0		       06		      .byte.b	%00000110
   6238  fec1		       34		      .byte.b	%00110100
   6239  fec2		       19		      .byte.b	%00011001
   6240  fec3		       bd		      .byte.b	%10111101
   6241  fec4		       7e		      .byte.b	%01111110
   6242  fec5		       18		      .byte.b	%00011000
   6243  fec6		       3c		      .byte.b	%00111100
   6244  fec7		       24		      .byte.b	%00100100
   6245  fec8				  -	      if	(<*) > (<(*+7))
   6246  fec8				  -	      repeat	($100-<*)
   6247  fec8				  -	      .byte	0
   6248  fec8				  -	      repend
   6249  fec8					      endif
   6250  fec8				   playerL0295_1
   6251  fec8		       30		      .byte.b	%00110000
   6252  fec9		       26		      .byte.b	%00100110
   6253  feca		       98		      .byte.b	%10011000
   6254  fecb		       bd		      .byte.b	%10111101
   6255  fecc		       7e		      .byte.b	%01111110
   6256  fecd		       18		      .byte.b	%00011000
   6257  fece		       3c		      .byte.b	%00111100
   6258  fecf		       24		      .byte.b	%00100100
   6259  fed0					      if	ECHOFIRST
      204 bytes of ROM space left
   6260  fed0					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   6261  fed0					      endif
   6262  fed0		       00 01	   ECHOFIRST  =	1
   6263  fed0
   6264  fed0
   6265  fed0
   6266  fed0							; feel free to modify the score graphics - just keep each digit 8 high
   6267  fed0							; and keep the conditional compilation stuff intact
   6268  fed0				  -	      ifconst	ROM2k
   6269  fed0				  -	      ORG	$F7AC-8
   6270  fed0					      else
   6271  fed0				  -	      ifconst	bankswitch
   6272  fed0				  -	      if	bankswitch == 8
   6273  fed0				  -	      ORG	$2F94-bscode_length
   6274  fed0				  -	      RORG	$FF94-bscode_length
   6275  fed0				  -	      endif
   6276  fed0				  -	      if	bankswitch == 16
   6277  fed0				  -	      ORG	$4F94-bscode_length
   6278  fed0				  -	      RORG	$FF94-bscode_length
   6279  fed0				  -	      endif
   6280  fed0				  -	      if	bankswitch == 32
   6281  fed0				  -	      ORG	$8F94-bscode_length
   6282  fed0				  -	      RORG	$FF94-bscode_length
   6283  fed0				  -	      endif
   6284  fed0				  -	      if	bankswitch == 64
   6285  fed0				  -	      ORG	$10F80-bscode_length
   6286  fed0				  -	      RORG	$1FF80-bscode_length
   6287  fed0				  -	      endif
   6288  fed0					      else
   6289  ff9c					      ORG	$FF9C
   6290  ff9c					      endif
   6291  ff9c					      endif
   6292  ff9c
   6293  ff9c							; font equates
   6294  ff9c		       00 01	   .21stcentury =	1
   6295  ff9c		       00 02	   alarmclock =	2
   6296  ff9c		       00 03	   handwritten =	3
   6297  ff9c		       00 04	   interrupted =	4
   6298  ff9c		       00 05	   retroputer =	5
   6299  ff9c		       00 06	   whimsey    =	6
   6300  ff9c		       00 07	   tiny       =	7
   6301  ff9c
   6302  ff9c				   scoretable
   6303  ff9c
   6304  ff9c				  -	      ifconst	font
   6305  ff9c				  -	      if	font == .21stcentury
   6306  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   6307  ff9c				  -	      endif
   6308  ff9c				  -	      if	font == alarmclock
   6309  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   6310  ff9c				  -	      endif
   6311  ff9c				  -	      if	font == handwritten
   6312  ff9c				  -	      include	"score_graphics.asm.handwritten"
   6313  ff9c				  -	      endif
   6314  ff9c				  -	      if	font == interrupted
   6315  ff9c				  -	      include	"score_graphics.asm.interrupted"
   6316  ff9c				  -	      endif
   6317  ff9c				  -	      if	font == retroputer
   6318  ff9c				  -	      include	"score_graphics.asm.retroputer"
   6319  ff9c				  -	      endif
   6320  ff9c				  -	      if	font == whimsey
   6321  ff9c				  -	      include	"score_graphics.asm.whimsey"
   6322  ff9c				  -	      endif
   6323  ff9c				  -	      if	font == tiny
   6324  ff9c				  -	      include	"score_graphics.asm.tiny"
   6325  ff9c				  -	      endif
   6326  ff9c					      else		; default font
   6327  ff9c
   6328  ff9c		       3c		      .byte.b	%00111100
   6329  ff9d		       66		      .byte.b	%01100110
   6330  ff9e		       66		      .byte.b	%01100110
   6331  ff9f		       66		      .byte.b	%01100110
   6332  ffa0		       66		      .byte.b	%01100110
   6333  ffa1		       66		      .byte.b	%01100110
   6334  ffa2		       66		      .byte.b	%01100110
   6335  ffa3		       3c		      .byte.b	%00111100
   6336  ffa4
   6337  ffa4		       7e		      .byte.b	%01111110
   6338  ffa5		       18		      .byte.b	%00011000
   6339  ffa6		       18		      .byte.b	%00011000
   6340  ffa7		       18		      .byte.b	%00011000
   6341  ffa8		       18		      .byte.b	%00011000
   6342  ffa9		       38		      .byte.b	%00111000
   6343  ffaa		       18		      .byte.b	%00011000
   6344  ffab		       08		      .byte.b	%00001000
   6345  ffac
   6346  ffac		       7e		      .byte.b	%01111110
   6347  ffad		       60		      .byte.b	%01100000
   6348  ffae		       60		      .byte.b	%01100000
   6349  ffaf		       3c		      .byte.b	%00111100
   6350  ffb0		       06		      .byte.b	%00000110
   6351  ffb1		       06		      .byte.b	%00000110
   6352  ffb2		       46		      .byte.b	%01000110
   6353  ffb3		       3c		      .byte.b	%00111100
   6354  ffb4
   6355  ffb4		       3c		      .byte.b	%00111100
   6356  ffb5		       46		      .byte.b	%01000110
   6357  ffb6		       06		      .byte.b	%00000110
   6358  ffb7		       06		      .byte.b	%00000110
   6359  ffb8		       1c		      .byte.b	%00011100
   6360  ffb9		       06		      .byte.b	%00000110
   6361  ffba		       46		      .byte.b	%01000110
   6362  ffbb		       3c		      .byte.b	%00111100
   6363  ffbc
   6364  ffbc		       0c		      .byte.b	%00001100
   6365  ffbd		       0c		      .byte.b	%00001100
   6366  ffbe		       7e		      .byte.b	%01111110
   6367  ffbf		       4c		      .byte.b	%01001100
   6368  ffc0		       4c		      .byte.b	%01001100
   6369  ffc1		       2c		      .byte.b	%00101100
   6370  ffc2		       1c		      .byte.b	%00011100
   6371  ffc3		       0c		      .byte.b	%00001100
   6372  ffc4
   6373  ffc4		       3c		      .byte.b	%00111100
   6374  ffc5		       46		      .byte.b	%01000110
   6375  ffc6		       06		      .byte.b	%00000110
   6376  ffc7		       06		      .byte.b	%00000110
   6377  ffc8		       3c		      .byte.b	%00111100
   6378  ffc9		       60		      .byte.b	%01100000
   6379  ffca		       60		      .byte.b	%01100000
   6380  ffcb		       7e		      .byte.b	%01111110
   6381  ffcc
   6382  ffcc		       3c		      .byte.b	%00111100
   6383  ffcd		       66		      .byte.b	%01100110
   6384  ffce		       66		      .byte.b	%01100110
   6385  ffcf		       66		      .byte.b	%01100110
   6386  ffd0		       7c		      .byte.b	%01111100
   6387  ffd1		       60		      .byte.b	%01100000
   6388  ffd2		       62		      .byte.b	%01100010
   6389  ffd3		       3c		      .byte.b	%00111100
   6390  ffd4
   6391  ffd4		       30		      .byte.b	%00110000
   6392  ffd5		       30		      .byte.b	%00110000
   6393  ffd6		       30		      .byte.b	%00110000
   6394  ffd7		       18		      .byte.b	%00011000
   6395  ffd8		       0c		      .byte.b	%00001100
   6396  ffd9		       06		      .byte.b	%00000110
   6397  ffda		       42		      .byte.b	%01000010
   6398  ffdb		       3e		      .byte.b	%00111110
   6399  ffdc
   6400  ffdc		       3c		      .byte.b	%00111100
   6401  ffdd		       66		      .byte.b	%01100110
   6402  ffde		       66		      .byte.b	%01100110
   6403  ffdf		       66		      .byte.b	%01100110
   6404  ffe0		       3c		      .byte.b	%00111100
   6405  ffe1		       66		      .byte.b	%01100110
   6406  ffe2		       66		      .byte.b	%01100110
   6407  ffe3		       3c		      .byte.b	%00111100
   6408  ffe4
   6409  ffe4		       3c		      .byte.b	%00111100
   6410  ffe5		       46		      .byte.b	%01000110
   6411  ffe6		       06		      .byte.b	%00000110
   6412  ffe7		       3e		      .byte.b	%00111110
   6413  ffe8		       66		      .byte.b	%01100110
   6414  ffe9		       66		      .byte.b	%01100110
   6415  ffea		       66		      .byte.b	%01100110
   6416  ffeb		       3c		      .byte.b	%00111100
   6417  ffec
   6418  ffec					      ifnconst	DPC_kernel_options
   6419  ffec
   6420  ffec		       00		      .byte.b	%00000000
   6421  ffed		       00		      .byte.b	%00000000
   6422  ffee		       00		      .byte.b	%00000000
   6423  ffef		       00		      .byte.b	%00000000
   6424  fff0		       00		      .byte.b	%00000000
   6425  fff1		       00		      .byte.b	%00000000
   6426  fff2		       00		      .byte.b	%00000000
   6427  fff3		       00		      .byte.b	%00000000
   6428  fff4
   6429  fff4					      endif
   6430  fff4
   6431  fff4					      endif
   6432  fff4
   6433  fff4				  -	      ifconst	ROM2k
   6434  fff4				  -	      ORG	$F7FC
   6435  fff4					      else
   6436  fff4				  -	      ifconst	bankswitch
   6437  fff4				  -	      if	bankswitch == 8
   6438  fff4				  -	      ORG	$2FF4-bscode_length
   6439  fff4				  -	      RORG	$FFF4-bscode_length
   6440  fff4				  -	      endif
   6441  fff4				  -	      if	bankswitch == 16
   6442  fff4				  -	      ORG	$4FF4-bscode_length
   6443  fff4				  -	      RORG	$FFF4-bscode_length
   6444  fff4				  -	      endif
   6445  fff4				  -	      if	bankswitch == 32
   6446  fff4				  -	      ORG	$8FF4-bscode_length
   6447  fff4				  -	      RORG	$FFF4-bscode_length
   6448  fff4				  -	      endif
   6449  fff4				  -	      if	bankswitch == 64
   6450  fff4				  -	      ORG	$10FE0-bscode_length
   6451  fff4				  -	      RORG	$1FFE0-bscode_length
   6452  fff4				  -	      endif
   6453  fff4					      else
   6454  fffc					      ORG	$FFFC
   6455  fffc					      endif
   6456  fffc					      endif
   6457  fffc				  -	      ifconst	bankswitch
   6458  fffc				  -	      if	bankswitch == 8
   6459  fffc				  -	      ORG	$2FFC
   6460  fffc				  -	      RORG	$FFFC
   6461  fffc				  -	      endif
   6462  fffc				  -	      if	bankswitch == 16
   6463  fffc				  -	      ORG	$4FFC
   6464  fffc				  -	      RORG	$FFFC
   6465  fffc				  -	      endif
   6466  fffc				  -	      if	bankswitch == 32
   6467  fffc				  -	      ORG	$8FFC
   6468  fffc				  -	      RORG	$FFFC
   6469  fffc				  -	      endif
   6470  fffc				  -	      if	bankswitch == 64
   6471  fffc				  -	      ORG	$10FF0
   6472  fffc				  -	      RORG	$1FFF0
   6473  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6474  fffc				  -	      ORG	$10FF8
   6475  fffc				  -	      RORG	$1FFF8
   6476  fffc				  -	      ifconst	superchip
   6477  fffc				  -	      .byte	"E","F","S","C"
   6478  fffc				  -	      else
   6479  fffc				  -	      .byte	"E","F","E","F"
   6480  fffc				  -	      endif
   6481  fffc				  -	      ORG	$10FFC
   6482  fffc				  -	      RORG	$1FFFC
   6483  fffc				  -	      endif
   6484  fffc					      else
   6485  fffc				  -	      ifconst	ROM2k
   6486  fffc				  -	      ORG	$F7FC
   6487  fffc					      else
   6488  fffc					      ORG	$FFFC
   6489  fffc					      endif
   6490  fffc					      endif
   6491  fffc		       00 f0		      .word.w	start
   6492  fffe		       00 f0		      .word.w	start
